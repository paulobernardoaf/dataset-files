<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\imc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"imcdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMC_BLOCK_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMC_FRAME_ID</name></cpp:macro> <cpp:value>0x21</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BANDS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COEFFS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>IMCChannel</name> <block>{

<decl_stmt><decl><type><name>float</name></type> <name><name>old_floor</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>flcoeffs1</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>flcoeffs2</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>flcoeffs3</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>flcoeffs4</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>flcoeffs5</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>flcoeffs6</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>CWdecoded</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bandWidthT</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>bitsBandT</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>CWlengthT</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>levlCoeffBuf</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bandFlagsBuf</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>sumLenArr</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>skipFlagRaw</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>skipFlagBits</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>skipFlagCount</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>skipFlags</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>codewords</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>last_fft_im</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decoder_reset</name></decl>;</decl_stmt>

}</block></struct></type> <name>IMCChannel</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IMCContext</name> <block>{

<decl_stmt><decl><type><name>IMCChannel</name></type> <name><name>chctx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>mdct_sine_window</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>post_cos</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>post_sin</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>pre_coef1</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>pre_coef2</name><index>[<expr><name>COEFFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>sqrt_tab</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>fft</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>FFTComplex</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call><index>[<expr><name>COEFFS</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coef0_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>cyclTab</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <name><name>cyclTab2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>weights1</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>, <name><name>weights2</name><index>[<expr><literal type="number">31</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>IMCContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>huffman_vlc</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TABLES_SIZE</name></cpp:macro> <cpp:value>9512</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>vlc_offsets</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">1156</literal></expr>, <expr><literal type="number">1732</literal></expr>, <expr><literal type="number">2308</literal></expr>, <expr><literal type="number">2852</literal></expr>, <expr><literal type="number">3396</literal></expr>, <expr><literal type="number">3924</literal></expr>,

<expr><literal type="number">4452</literal></expr>, <expr><literal type="number">5220</literal></expr>, <expr><literal type="number">5860</literal></expr>, <expr><literal type="number">6628</literal></expr>, <expr><literal type="number">7268</literal></expr>, <expr><literal type="number">7908</literal></expr>, <expr><literal type="number">8424</literal></expr>, <expr><literal type="number">8936</literal></expr>, <expr><name>VLC_TABLES_SIZE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>vlc_tables</name><index>[<expr><name>VLC_TABLES_SIZE</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>freq2bark</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>freq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">3.5</literal> <operator>*</operator> <call><name>atan</name><argument_list>(<argument><expr><operator>(</operator><name>freq</name> <operator>/</operator> <literal type="number">7500.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>freq</name> <operator>/</operator> <literal type="number">7500.0</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">13.0</literal> <operator>*</operator> <call><name>atan</name><argument_list>(<argument><expr><name>freq</name> <operator>*</operator> <literal type="number">0.00076</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>iac_generate_tabs</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampling_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>freqmin</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>freqmid</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>freqmax</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><name>sampling_rate</name> <operator>/</operator> <operator>(</operator><literal type="number">256.0</literal> <operator>*</operator> <literal type="number">2.0</literal> <operator>*</operator> <literal type="number">2.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>nyquist_freq</name> <init>= <expr><name>sampling_rate</name> <operator>*</operator> <literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>freq</name></decl>, <decl><type ref="prev"/><name>bark</name></decl>, <decl><type ref="prev"/><name>prev_bark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tf</name></decl>, <decl><type ref="prev"/><name>tb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>freq</name> <operator>=</operator> <operator>(</operator><name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bark</name> <operator>=</operator> <call><name>freq2bark</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <name>bark</name> <operator>-</operator> <name>prev_bark</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weights1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal> <operator>*</operator> <name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>weights2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.7</literal> <operator>*</operator> <name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev_bark</name> <operator>=</operator> <name>bark</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqmid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tf</name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tf</name> <operator>&lt;</operator> <name>nyquist_freq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tf</name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <call><name>freq2bark</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tb</name> <operator>&gt;</operator> <name>bark</name> <operator>+</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>freqmax</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tf</name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tf</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tf</name> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <call><name>freq2bark</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tb</name> <operator>&lt;=</operator> <name>bark</name> <operator>-</operator> <literal type="number">0.5</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>freqmin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tf</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>freqmax</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>freq</name> <operator>&lt;=</operator> <name><name>freqmid</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>cyclTab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>freq</name> <operator>=</operator> <name><name>freqmin</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>freq</name> <operator>&gt;=</operator> <name><name>freqmid</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>cyclTab2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>imc_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_IAC</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;</operator> <literal type="number">96000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Strange sample rate of %i, file likely corrupt or "</literal>

<literal type="string">"needing a new table derivation method.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_IMC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Number of channels &gt; 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>chctx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>decoder_reset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>chctx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>old_floor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COEFFS</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>chctx</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>last_fft_im</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_sine_window_init</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>mdct_sine_window</name></name></expr></argument>, <argument><expr><name>COEFFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COEFFS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>mdct_sine_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COEFFS</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>post_cos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">32768</literal><operator>)</operator> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">256.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>post_sin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">32768</literal><operator>)</operator> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">256.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">4.0</literal> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">1024.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">4.0</literal> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">1024.0</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pre_coef1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>r1</name> <operator>+</operator> <name>r2</name><operator>)</operator> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pre_coef2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>r1</name> <operator>-</operator> <name>r2</name><operator>)</operator> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pre_coef1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>r1</name> <operator>+</operator> <name>r2</name><operator>)</operator> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pre_coef2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>r1</name> <operator>-</operator> <name>r2</name><operator>)</operator> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>sqrt_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>huffman_vlc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>vlc_tables</name><index>[<expr><name><name>vlc_offsets</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huffman_vlc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <name><name>vlc_offsets</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>vlc_offsets</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>huffman_vlc</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>imc_huffman_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>imc_huffman_lens</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>imc_huffman_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_IAC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>iac_generate_tabs</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>cyclTab</name></name></expr></argument>, <argument><expr><name>cyclTab</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cyclTab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>cyclTab2</name></name></expr></argument>, <argument><expr><name>cyclTab2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cyclTab2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>weights1</name></name></expr></argument>, <argument><expr><name>imc_weights1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imc_weights1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>weights2</name></name></expr></argument>, <argument><expr><name>imc_weights2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imc_weights2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"FFT init failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr>

</then><else>: <expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_calculate_coeffs</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs1</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bandWidthT</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs3</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs5</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>workT1</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>workT2</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>workT3</name><index>[<expr><name>BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>snr_limit</name> <init>= <expr><literal type="number">1.e-30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>accum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cnt2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>flcoeffs5</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>workT2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>workT1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.0</literal> <operator>*</operator> <name><name>flcoeffs2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>workT1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">30000.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>workT3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>workT1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.01</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>workT3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>snr_limit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>workT3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>cnt2</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>cnt2</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>cyclTab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>cnt2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flcoeffs5</name><index>[<expr><name>cnt2</name></expr>]</index></name> <operator>=</operator> <name><name>flcoeffs5</name><index>[<expr><name>cnt2</name></expr>]</index></name> <operator>+</operator> <name><name>workT3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>workT2</name><index>[<expr><name>cnt2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>workT2</name><index>[<expr><name>cnt2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>workT3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accum</name> <operator>=</operator> <operator>(</operator><name><name>workT2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>accum</name><operator>)</operator> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>weights1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs5</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>accum</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>workT2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>cnt2</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cnt2</name> <operator>&gt;</operator> <name><name>q</name><operator>-&gt;</operator><name>cyclTab2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>cnt2</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>flcoeffs5</name><index>[<expr><name>cnt2</name></expr>]</index></name> <operator>+=</operator> <name><name>workT3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>workT2</name><index>[<expr><name>cnt2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>workT3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>accum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>BANDS</name><operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accum</name> <operator>=</operator> <operator>(</operator><name><name>workT2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>accum</name><operator>)</operator> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>weights2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs5</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>accum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_read_level_coeffs</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_format_code</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>levlCoeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name><name>hufftab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cb_sel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>stream_format_code</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hufftab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>huffman_vlc</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hufftab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>huffman_vlc</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hufftab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>huffman_vlc</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hufftab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>huffman_vlc</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_sel</name> <operator>=</operator> <name><name>imc_cb_select</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>levlCoeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>levlCoeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>hufftab</name><index>[<expr><name><name>cb_sel</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>table</name></expr></argument>,

<argument><expr><name><name>hufftab</name><index>[<expr><name><name>cb_sel</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>levlCoeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>levlCoeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_read_level_coeffs_raw</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stream_format_code</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>levlCoeffs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>coef0_pos</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>levlCoeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>levlCoeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_decode_level_coefficients</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>levlCoeffBuf</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>flcoeffs1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">20000.0</literal> <operator>/</operator> <call><name>exp2</name> <argument_list>(<argument><expr><name><name>levlCoeffBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.18945</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>flcoeffs2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>log2f</name><argument_list>(<argument><expr><name><name>flcoeffs1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>flcoeffs1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>flcoeffs2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>levlCoeffBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>level</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>*=</operator> <name><name>imc_exp_tab</name><index>[<expr><literal type="number">15</literal> <operator>+</operator> <name>level</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>+=</operator> <literal type="number">0.83048</literal> <operator>*</operator> <name>level</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_decode_level_coefficients2</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>levlCoeffBuf</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>old_floor</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs1</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>levlCoeffBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>imc_exp_tab2</name><index>[<expr><name><name>levlCoeffBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name><name>old_floor</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>levlCoeffBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.83048</literal> <operator>+</operator> <name><name>flcoeffs2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>old_floor</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_decode_level_coefficients_raw</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>levlCoeffBuf</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>flcoeffs2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>coef0_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">20000.0</literal> <operator>/</operator> <call><name>pow</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>levlCoeffBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.18945</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>flcoeffs2</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>log2f</name><argument_list>(<argument><expr><name><name>flcoeffs1</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>flcoeffs1</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>flcoeffs2</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>levlCoeffBuf</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>*</operator><name>levlCoeffBuf</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>*</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><operator>-</operator><name>level</name> <operator>*</operator> <literal type="number">0.4375</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>flcoeffs2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp2</name> <operator>-</operator> <literal type="number">1.4533435415</literal> <operator>*</operator> <name>level</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bit_allocation</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>IMCChannel</name> <modifier>*</modifier></type><name>chctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stream_format_code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freebits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>limit</name> <init>= <expr><operator>-</operator><literal type="number">1.e20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>highest</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>summa</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iacc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>summer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rres</name></decl>, <decl><type ref="prev"/><name>cwlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>lowest</name> <init>= <expr><literal type="number">1.e10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>low_indx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>workT</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_indx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>highest</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>highest</name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs5</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"flcoeffs5 %f invalid\n"</literal></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs5</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call><name>log2f</name><argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs5</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><name>BANDS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>highest</name> <operator>=</operator> <name>highest</name> <operator>*</operator> <literal type="number">0.25</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>indx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>indx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>xTab</name><index>[<expr><operator>(</operator><name>indx</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>highest</name><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>flag</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>iacc</name> <operator>+=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>summa</name> <operator>+=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iacc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>BANDS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>summa</name> <operator>=</operator> <operator>(</operator><name>summa</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>-</operator> <name>freebits</name><operator>)</operator> <operator>/</operator> <name>iacc</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rres</name> <operator>=</operator> <name>summer</name> <operator>-</operator> <name>freebits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rres</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rres</name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>summer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>iacc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cwlen</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>-</operator> <name>summa</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cwlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>summer</name> <operator>+=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>cwlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cwlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>iacc</name> <operator>+=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>flg</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>freebits</name> <operator>&lt;</operator> <name>summer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flg</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flg</name> <operator>!=</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>summa</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>summer</name> <operator>-</operator> <name>freebits</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>iacc</name><operator>)</operator> <operator>+</operator> <name>summa</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>freebits</name> <operator>&gt;</operator> <name>summer</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.e20</literal></expr>

</then><else>: <expr><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal> <operator>+</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">0.415</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>highest</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>highest</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1.e20</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>found_indx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>highest</name> <operator>=</operator> <operator>-</operator><literal type="number">1.e20</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>highest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>highest</name> <operator>=</operator> <name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_indx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>highest</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1.e20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>found_indx</name></expr>]</index></name> <operator>-=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>found_indx</name></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>found_indx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1.e20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>found_indx</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>found_indx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>freebits</name> <operator>&gt;</operator> <name>summer</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>summer</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>freebits</name> <operator>&gt;</operator> <name>summer</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freebits</name> <operator>&lt;</operator> <name>summer</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal> <operator>+</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.585</literal><operator>)</operator></expr>

</then><else>: <expr><literal type="number">1.e20</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.e20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>workT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.e20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>workT</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.e20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>workT</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.e20</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>freebits</name> <operator>&lt;</operator> <name>summer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lowest</name> <operator>=</operator> <literal type="number">1.e10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low_indx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>lowest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lowest</name> <operator>=</operator> <name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>low_indx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>low_indx</name></expr>]</index></name> <operator>=</operator> <name>lowest</name> <operator>+</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>low_indx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>low_indx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.e20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>low_indx</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>low_indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>freebits</name> <operator>&lt;</operator> <name>summer</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>summer</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_get_skip_coeff</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>IMCChannel</name> <modifier>*</modifier></type><name>chctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagRaw</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_adjust_bit_allocation</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>IMCChannel</name> <modifier>*</modifier></type><name>chctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>summer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>workT</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>corrected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>highest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_indx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.e20</literal></expr>

</then><else>: <expr><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">2</literal> <operator>+</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">0.415</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>corrected</name> <operator>&lt;</operator> <name>summer</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>highest</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1.e20</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>highest</name> <operator>=</operator> <operator>-</operator><literal type="number">1.e20</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>highest</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>highest</name> <operator>=</operator> <name><name>workT</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>found_indx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>highest</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1.e20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>found_indx</name></expr>]</index></name> <operator>-=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>found_indx</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>workT</name><index>[<expr><name>found_indx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1.e20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>found_indx</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>found_indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>corrected</name> <operator>&lt;</operator> <name>summer</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>corrected</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_imdct256</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>IMCChannel</name> <modifier>*</modifier></type><name>chctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>re</name></decl>, <decl><type ref="prev"/><name>im</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>out_samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>out_samples</name></name> <operator>+</operator> <operator>(</operator><name>COEFFS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COEFFS</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>pre_coef1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>COEFFS</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>-</operator>

<operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>pre_coef2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>pre_coef2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>COEFFS</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>-</operator>

<operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>pre_coef1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>fft</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COEFFS</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>re</name> <operator>=</operator> <operator>(</operator> <name><name>q</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>post_cos</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>-</operator><name><name>q</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>post_sin</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>im</name> <operator>=</operator> <operator>(</operator><operator>-</operator><name><name>q</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>post_cos</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator> <name><name>q</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>*</operator> <name><name>q</name><operator>-&gt;</operator><name>post_sin</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst1</name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_sine_window</name><index>[<expr><name>COEFFS</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>last_fft_im</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator>

<operator>+</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_sine_window</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>re</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst2</name> <operator>=</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_sine_window</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>last_fft_im</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_sine_window</name><index>[<expr><name>COEFFS</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>re</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst2</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>last_fft_im</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>im</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>inverse_quant_coeff</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>IMCChannel</name> <modifier>*</modifier></type><name>chctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stream_format_code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>middle_value</name></decl>, <decl><type ref="prev"/><name>cw_len</name></decl>, <decl><type ref="prev"/><name>max_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>quantizer</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cw_len</name> <operator>=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cw_len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cw_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>middle_value</name> <operator>=</operator> <name>max_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>max_size</name> <operator>||</operator> <name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cw_len</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quantizer</name> <operator>=</operator> <name><name>imc_quantizer2</name><index>[<expr><operator>(</operator><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>middle_value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>quantizer</name><index>[<expr><name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs6</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>quantizer</name><index>[<expr><name>max_size</name> <operator>-</operator> <name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs6</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>quantizer</name> <operator>=</operator> <name><name>imc_quantizer1</name><index>[<expr><operator>(</operator><operator>(</operator><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>middle_value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>quantizer</name><index>[<expr><name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs6</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>quantizer</name><index>[<expr><name>max_size</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs6</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_get_coeffs</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>IMCChannel</name> <modifier>*</modifier></type><name>chctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>cw_len</name></decl>, <decl><type ref="prev"/><name>cw</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>sumLenArr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cw_len</name> <operator>=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cw_len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cw_len</name> <operator>&gt;</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Potential problem on band %i, coefficient %i"</literal>

<literal type="string">": cw_len=%i\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>cw_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cw</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>cw_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>codewords</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cw</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imc_refine_bit_allocation</name><parameter_list>(<parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>IMCChannel</name> <modifier>*</modifier></type><name>chctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>summer</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>sumLenArr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagRaw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>sumLenArr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">1.5</literal><operator>)</operator> <operator>&gt;</operator> <name><name>chctx</name><operator>-&gt;</operator><name>sumLenArr</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>sumLenArr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlagRaw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>imc_get_skip_coeff</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>chctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs6</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs6</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>q</name><operator>-&gt;</operator><name>sqrt_tab</name><index>[ <expr><name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>/</operator>

<name><name>q</name><operator>-&gt;</operator><name>sqrt_tab</name><index>[<expr><operator>(</operator><name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>chctx</name><operator>-&gt;</operator><name>skipFlagCount</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>summer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>summer</name> <operator>+=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>summer</name> <operator>-=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>skipFlagBits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>imc_adjust_bit_allocation</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>chctx</name></expr></argument>, <argument><expr><name>summer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>imc_decode_block</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stream_format_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imc_hdr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>, <decl><type ref="prev"/><name>bitscount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMCChannel</name> <modifier>*</modifier></type><name>chctx</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>chctx</name></name> <operator>+</operator> <name>ch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>imc_hdr</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>imc_hdr</name> <operator>&amp;</operator> <literal type="number">0x18</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"frame header check failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"got %X.\n"</literal></expr></argument>, <argument><expr><name>imc_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stream_format_code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>decoder_reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>decoder_reset</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>old_floor</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COEFFS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWdecoded</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>decoder_reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imc_read_level_coeffs_raw</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>stream_format_code</name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>levlCoeffBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imc_read_level_coeffs</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>stream_format_code</name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>levlCoeffBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imc_decode_level_coefficients_raw</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>levlCoeffBuf</name></name></expr></argument>,

<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name></name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imc_decode_level_coefficients</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>levlCoeffBuf</name></name></expr></argument>,

<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name></name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imc_decode_level_coefficients2</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>levlCoeffBuf</name></name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>old_floor</name></name></expr></argument>,

<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name></name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"scalefactor out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>old_floor</name></name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name></name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs5</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>levlCoeffBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BANDS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bandFlagsBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>imc_calculate_coeffs</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs1</name></name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs2</name></name></expr></argument>,

<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name></name></expr></argument>, <argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs3</name></name></expr></argument>,

<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>flcoeffs5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bitscount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitscount</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>chctx</name><operator>-&gt;</operator><name>levlCoeffBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>bitsBandT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitscount</name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_IAC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bitscount</name> <operator>+=</operator> <operator>!</operator><operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>bandWidthT</name><index>[<expr><name>BANDS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bitscount</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>bit_allocation</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>chctx</name></expr></argument>, <argument><expr><name>stream_format_code</name></expr></argument>,

<argument><expr><literal type="number">512</literal> <operator>-</operator> <name>bitscount</name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bit allocations failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>decoder_reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream_format_code</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>imc_refine_bit_allocation</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>chctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>sumLenArr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>band_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>band_tab</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>sumLenArr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>chctx</name><operator>-&gt;</operator><name>CWlengthT</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>codewords</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>codewords</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imc_get_coeffs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>chctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inverse_quant_coeff</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>chctx</name></expr></argument>, <argument><expr><name>stream_format_code</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Inverse quantization of coefficients failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chctx</name><operator>-&gt;</operator><name>decoder_reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>chctx</name><operator>-&gt;</operator><name>skipFlags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imc_imdct256</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>chctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>imc_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>buf16</name></expr></argument>, <argument><expr><index>[<expr><operator>(</operator><name>IMC_BLOCK_SIZE</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>IMC_BLOCK_SIZE</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"frame too small!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>COEFFS</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>out_samples</name></name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap16_buf</name></name><argument_list>(<argument><expr><name>buf16</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>IMC_BLOCK_SIZE</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>buf16</name></expr></argument>, <argument><expr><name>IMC_BLOCK_SIZE</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>IMC_BLOCK_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>imc_decode_block</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>butterflies_float</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>COEFFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>IMC_BLOCK_SIZE</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>imc_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IMCContext</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>chctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>decoder_reset</name> <operator>=</operator>

<name><name>q</name><operator>-&gt;</operator><name>chctx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>decoder_reset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_IMC_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_imc_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"imc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"IMC (Intel Music Coder)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_IMC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IMCContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>imc_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>imc_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>imc_decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_IAC_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_iac_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"iac"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"IAC (Indeo Audio Coder)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_IAC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IMCContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>imc_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>imc_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>imc_decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
