<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacps_tablegen_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_HARDCODED_TABLES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac_defines.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_NAME</name></cpp:macro> <cpp:value>"int32_t"</cpp:value></cpp:define>

<typedef>typedef <type><name>int32_t</name></type> <name>INT32FLOAT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write_int32_t_ ##x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_URENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write_uint32_t_ ##x</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacps_fixed_tablegen.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_NAME</name></cpp:macro> <cpp:value>"float"</cpp:value></cpp:define>

<typedef>typedef <type><name>float</name></type> <name>INT32FLOAT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_RENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write_float_ ##x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_URENAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>write_float_ ##x</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacps_tablegen.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tableprint.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>void</name></type> <name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list> <argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>int</name> <name>b</name></expr></argument>, <argument><expr><name>int</name> <name>c</name></expr></argument>, <argument><expr><name>int</name> <name>d</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INT32FLOAT</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>b</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_URENAME</name><argument_list>(<argument><expr><literal type="number">2d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>+=</operator> <name>c</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">4d_array</literal></expr></argument>)</argument_list> <argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>int</name> <name>a</name></expr></argument>, <argument><expr><name>int</name> <name>b</name></expr></argument>, <argument><expr><name>int</name> <name>c</name></expr></argument>, <argument><expr><name>int</name> <name>d</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INT32FLOAT</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>a</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"},\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>+=</operator> <name>b</name> <operator>*</operator> <name>c</name> <operator>*</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ps_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_fileheader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const %s pd_re_smooth[8*8*8] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pd_re_smooth</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const %s pd_im_smooth[8*8*8] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pd_im_smooth</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const %s HA[46][8][4] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HA</name></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const %s HB[46][8][4] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>HB</name></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const DECLARE_ALIGNED(16, %s, f20_0_8)[8][8][2] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f20_0_8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const DECLARE_ALIGNED(16, %s, f34_0_12)[12][8][2] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f34_0_12</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const DECLARE_ALIGNED(16, %s, f34_1_8)[8][8][2] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f34_1_8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const DECLARE_ALIGNED(16, %s, f34_2_4)[4][8][2] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>f34_2_4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const DECLARE_ALIGNED(16, %s, Q_fract_allpass)[2][50][3][2] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">4d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>Q_fract_allpass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const DECLARE_ALIGNED(16, %s, phi_fract)[2][50][2] = {\n"</literal></expr></argument>, <argument><expr><name>TYPE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>ARRAY_RENAME</name><argument_list>(<argument><expr><literal type="number">3d_array</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>phi_fract</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
