<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264_loopfilter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rectangle.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>alpha_table</name><index>[<expr><literal type="number">52</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>,

<expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">71</literal></expr>,

<expr><literal type="number">80</literal></expr>, <expr><literal type="number">90</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">144</literal></expr>,<expr><literal type="number">162</literal></expr>,<expr><literal type="number">182</literal></expr>,<expr><literal type="number">203</literal></expr>,<expr><literal type="number">226</literal></expr>,

<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,

<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,

<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,

<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,

<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>beta_table</name><index>[<expr><literal type="number">52</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>tc0_table</name><index>[<expr><literal type="number">52</literal><operator>*</operator><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">10</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">11</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">13</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">14</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">18</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">20</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">23</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

<expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">25</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mb_edgev</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>bS</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>index_a</name> <init>= <expr><name>qp</name> <operator>+</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name> <init>= <expr><name><name>alpha_table</name><index>[<expr><name>index_a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name> <init>= <expr><name><name>beta_table</name><index>[<expr><name>qp</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>beta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><name>intra</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_h_loop_filter_luma</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_h_loop_filter_luma_intra</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mb_edgecv</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>bS</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>index_a</name> <init>= <expr><name>qp</name> <operator>+</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name> <init>= <expr><name><name>alpha_table</name><index>[<expr><name>index_a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name> <init>= <expr><name><name>beta_table</name><index>[<expr><name>qp</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>beta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><name>intra</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_h_loop_filter_chroma</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_h_loop_filter_chroma_intra</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mb_mbaff_edgev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>bS</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsi</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>intra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>index_a</name> <init>= <expr><name>qp</name> <operator>+</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name> <init>= <expr><name><name>alpha_table</name><index>[<expr><name>index_a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name> <init>= <expr><name><name>beta_table</name><index>[<expr><name>qp</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>beta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><name>intra</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>bsi</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>bsi</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>bsi</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>bsi</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_h_loop_filter_luma_mbaff</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_h_loop_filter_luma_mbaff_intra</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mb_mbaff_edgecv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>bS</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bsi</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>index_a</name> <init>= <expr><name>qp</name> <operator>+</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name> <init>= <expr><name><name>alpha_table</name><index>[<expr><name>index_a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name> <init>= <expr><name><name>beta_table</name><index>[<expr><name>qp</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>beta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><name>intra</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>bsi</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>bsi</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>bsi</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>bsi</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_h_loop_filter_chroma_mbaff</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_h_loop_filter_chroma_mbaff_intra</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mb_edgeh</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>bS</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>index_a</name> <init>= <expr><name>qp</name> <operator>+</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name> <init>= <expr><name><name>alpha_table</name><index>[<expr><name>index_a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name> <init>= <expr><name><name>beta_table</name><index>[<expr><name>qp</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>beta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><name>intra</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_v_loop_filter_luma</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_v_loop_filter_luma_intra</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mb_edgech</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>bS</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>qp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>intra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>index_a</name> <init>= <expr><name>qp</name> <operator>+</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alpha</name> <init>= <expr><name><name>alpha_table</name><index>[<expr><name>index_a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>beta</name> <init>= <expr><name><name>beta_table</name><index>[<expr><name>qp</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>beta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><name>intra</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>tc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>tc0_table</name><index>[<expr><name>index_a</name></expr>]</index><index>[<expr><name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_v_loop_filter_chroma</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_v_loop_filter_chroma_intra</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>h264_filter_mb_fast_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_cb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_cr</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>linesize</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uvlinesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pixel_shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>chroma</name> <init>= <expr><call><name>CHROMA</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma444</name> <init>= <expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma422</name> <init>= <expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>left_type</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top_type</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_bd_offset</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">52</literal> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_alpha_c0_offset</name></name> <operator>-</operator> <name>qp_bd_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">52</literal> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_beta_offset</name></name> <operator>-</operator> <name>qp_bd_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp0</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp1</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>top_mb_xy</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qpc</name> <init>= <expr><call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qpc0</name> <init>= <expr><call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qp0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qpc1</name> <init>= <expr><call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qp1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>qp0</name> <operator>=</operator> <operator>(</operator><name>qp</name> <operator>+</operator> <name>qp0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qp1</name> <operator>=</operator> <operator>(</operator><name>qp</name> <operator>+</operator> <name>qp1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qpc0</name> <operator>=</operator> <operator>(</operator><name>qpc</name> <operator>+</operator> <name>qpc0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qpc1</name> <operator>=</operator> <operator>(</operator><name>qpc</name> <operator>+</operator> <name>qpc1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>bS4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>bS3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>bSH</name> <init>= <expr><ternary><condition><expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>bS3</name></expr> </then><else>: <expr><name>bS4</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>left_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS4</name></expr></argument>, <argument><expr><name>qp0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qp1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qp1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>chroma</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>chroma444</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>left_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS4</name></expr></argument>, <argument><expr><name>qpc0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS4</name></expr></argument>, <argument><expr><name>qpc0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qpc1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qpc1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qpc1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qpc1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>chroma422</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>left_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS4</name></expr></argument>, <argument><expr><name>qpc0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS4</name></expr></argument>, <argument><expr><name>qpc0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qpc1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qpc1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>left_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS4</name></expr></argument>, <argument><expr><name>qpc0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS4</name></expr></argument>, <argument><expr><name>qpc0</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>pixel_shift</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qpc1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bSH</name></expr></argument>, <argument><expr><name>qpc1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS3</name></expr></argument>, <argument><expr><name>qpc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edges</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>chroma444</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>edges</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0002000200020002ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0002000200020002ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0002000200020002ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0002000200020002ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask_edge1</name> <init>= <expr><operator>(</operator><literal type="number">3</literal><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">5</literal><operator>*</operator><name>mb_type</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mb_type</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mask_edge0</name> <init>= <expr><literal type="number">3</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>mask_edge1</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">5</literal><operator>*</operator><name>left_type</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>mb_type</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>edges</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>mb_type</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_loop_filter_strength</name></name><argument_list>(<argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name><operator>==</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>edges</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>mask_edge0</name></expr></argument>, <argument><expr><name>mask_edge1</name></expr></argument>, <argument><expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>left_type</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0004000400040004ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0x0003000300030003ULL</literal></expr> </then><else>: <expr><literal type="number">0x0004000400040004ULL</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER</name><parameter_list>(<parameter><type><name>hv</name></type></parameter>,<parameter><type><name>dir</name></type></parameter>,<parameter><type><name>edge</name></type></parameter>,<parameter><type><name>intra</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>if(AV_RN64A(bS[dir][edge])) { filter_mb_edge##hv( &amp;img_y[4*edge*(dir?linesize:1&lt;&lt;pixel_shift)], linesize, bS[dir][edge], edge ? qp : qp##dir, a, b, h, intra );if(chroma){if(chroma444){filter_mb_edge##hv( &amp;img_cb[4*edge*(dir?linesize:1&lt;&lt;pixel_shift)], linesize, bS[dir][edge], edge ? qpc : qpc##dir, a, b, h, intra );filter_mb_edge##hv( &amp;img_cr[4*edge*(dir?linesize:1&lt;&lt;pixel_shift)], linesize, bS[dir][edge], edge ? qpc : qpc##dir, a, b, h, intra );} else if(!(edge&amp;1)) {filter_mb_edgec##hv( &amp;img_cb[2*edge*(dir?uvlinesize:1&lt;&lt;pixel_shift)], uvlinesize, bS[dir][edge], edge ? qpc : qpc##dir, a, b, h, intra );filter_mb_edgec##hv( &amp;img_cr[2*edge*(dir?uvlinesize:1&lt;&lt;pixel_shift)], uvlinesize, bS[dir][edge], edge ? qpc : qpc##dir, a, b, h, intra );}}}</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><name>left_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>edges</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>top_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FILTER</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FILTER</name></cpp:undef>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_filter_mb_fast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_cr</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uvlinesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>!</operator><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name><operator>.</operator><name>h264_loop_filter_strength</name></name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>chroma_qp_diff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_filter_mb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><call><name>h264_filter_mb_fast_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>h264_filter_mb_fast_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>h264_filter_mb_fast_internal</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_mv</name><parameter_list>(<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b_idx</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>bn_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mvy_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <literal type="number">7U</literal> <operator>|</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>mvy_limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index></name> <operator>|</operator>

<name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <literal type="number">7U</literal> <operator>|</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>mvy_limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>v</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index></name> <operator>|</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return

<expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <literal type="number">7U</literal> <operator>|</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>mvy_limit</name> <operator>|</operator>

<name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <literal type="number">7U</literal> <operator>|</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bn_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>mvy_limit</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>filter_mb_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_cr</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uvlinesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_xy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mvy_limit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>first_vertical_edge_done</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>edge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>chroma_qp_avg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma444</name> <init>= <expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma422</name> <init>= <expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mbm_xy</name> <init>= <expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>mb_xy</name> <operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>top_mb_xy</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mbm_type</name> <init>= <expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mask_edge_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name><init>=<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask_edge</name> <init>= <expr><name><name>mask_edge_tab</name><index>[<expr><name>dir</name></expr>]</index><index>[<expr><operator>(</operator><name>mb_type</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>edges</name> <init>= <expr><ternary><condition><expr><name>mask_edge</name><operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask_par0</name> <init>= <expr><name>mb_type</name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_16x16</name> <operator>|</operator> <operator>(</operator><name>MB_TYPE_8x16</name> <operator>&gt;&gt;</operator> <name>dir</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mbm_type</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first_vertical_edge_done</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>dir</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mb_y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mbm_type</name><operator>&amp;</operator><operator>~</operator><name>mb_type</name></expr></argument>)</argument_list></call></expr>

)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tmp_linesize</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>linesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tmp_uvlinesize</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>uvlinesize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbn_xy</name> <init>= <expr><name>mb_xy</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>mbn_xy</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name> <operator>|</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mbn_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>bS</name></expr></argument>, <argument><expr><literal type="number">0x0003000300030003ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CABAC</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mbn_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal><operator>+</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>mbn_xy</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal><operator>+</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>mbn_xy</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal><operator>+</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>mbn_xy</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal><operator>+</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>mbn_xy</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mbn_nnz</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name>mbn_xy</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name>i</name></expr>]</index></name> <operator>|</operator> <name><name>mbn_nnz</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mbn_xy</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"filter mb:%d/%d dir:%d, QPy:%d ls:%d uvls:%d"</literal></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>tmp_linesize</name></expr></argument>, <argument><expr><name>tmp_uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">" bS[%d]:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><name>j</name><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_linesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mbn_xy</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mbn_xy</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chroma444</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><name>j</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><name>j</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><name>j</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><name>j</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp_uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name><operator>|</operator><name>mbm_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>bS</name></expr></argument>, <argument><expr><literal type="number">0x0003000300030003ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name><operator>|</operator><name>mbm_type</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>(</operator><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dir</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>bS</name></expr></argument>, <argument><expr><literal type="number">0x0004000400040004ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_done</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>dir</name> <operator>&amp;&amp;</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name> <operator>^</operator> <name>mbm_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>bS</name></expr></argument>, <argument><expr><literal type="number">0x0001000100010001ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>mask_par0</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>mbm_type</name> <operator>&amp;</operator> <operator>(</operator><name>MB_TYPE_16x16</name> <operator>|</operator> <operator>(</operator><name>MB_TYPE_8x16</name> <operator>&gt;&gt;</operator> <name>dir</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b_idx</name><init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bn_idx</name><init>= <expr><name>b_idx</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>check_mv</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bn_idx</name></expr></argument>, <argument><expr><name>mvy_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mv_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_idx</name><init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bn_idx</name><init>= <expr><name>b_idx</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>b_idx</name></expr>]</index></name> <operator>|</operator>

<name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>bn_idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>mv_done</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>check_mv</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name>b_idx</name></expr></argument>, <argument><expr><name>bn_idx</name></expr></argument>, <argument><expr><name>mvy_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mbm_xy</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"filter mb:%d/%d dir:%d edge:%d, QPy:%d ls:%d uvls:%d"</literal></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mbm_xy</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mbm_xy</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chroma444</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chroma444</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>chroma_qp_avg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>edge</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>edge</name> <operator>&lt;</operator> <name>edges</name></expr>;</condition> <incr><expr><name>edge</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>deblock_edge</name> <init>= <expr><operator>!</operator><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name> <operator>&amp;</operator> <operator>(</operator><name>edge</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>deblock_edge</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>chroma422</name> <operator>||</operator> <name>dir</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>bS</name></expr></argument>, <argument><expr><literal type="number">0x0003000300030003ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mv_done</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>edge</name> <operator>&amp;</operator> <name>mask_edge</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>bS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>mask_par0</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b_idx</name><init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>edge</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bn_idx</name><init>= <expr><name>b_idx</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>check_mv</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name>b_idx</name></expr></argument>, <argument><expr><name>bn_idx</name></expr></argument>, <argument><expr><name>mvy_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mv_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>edge</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>edge</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_idx</name><init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bn_idx</name><init>= <expr><name>b_idx</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>b_idx</name></expr>]</index></name> <operator>|</operator>

<name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><name>bn_idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><operator>!</operator><name>mv_done</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>check_mv</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name>b_idx</name></expr></argument>, <argument><expr><name>bn_idx</name></expr></argument>, <argument><expr><name>mvy_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>bS</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>bS</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>bS</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"filter mb:%d/%d dir:%d edge:%d, QPy:%d ls:%d uvls:%d"</literal></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name> <operator>&lt;&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chroma444</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgev</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name> <operator>&lt;&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgev</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name> <operator>&lt;&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><operator>(</operator><name>edge</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>edge</name> <operator>&lt;&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgecv</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>edge</name> <operator>&lt;&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chroma422</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>deblock_edge</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_y</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name><operator>*</operator><name>linesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chroma444</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgeh</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgeh</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>edge</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>edge</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cb</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>edge</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_edgech</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>img_cr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>edge</name><operator>*</operator><name>uvlinesize</name></expr>]</index></name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_filter_mb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>img_cr</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>uvlinesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name><init>= <expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_type</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mvy_limit</name> <init>= <expr><ternary><condition><expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_vertical_edge_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma</name> <init>= <expr><call><name>CHROMA</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_bd_offset</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">52</literal> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_alpha_c0_offset</name></name> <operator>-</operator> <name>qp_bd_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">52</literal> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_beta_offset</name></name> <operator>-</operator> <name>qp_bd_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name> <operator>^</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>qp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bqp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>rqp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_qp</name></decl>, <decl><type ref="prev"/><name>mbn0_qp</name></decl>, <decl><type ref="prev"/><name>mbn1_qp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>first_vertical_edge_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0004000400040004ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bS</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x0004000400040004ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name><init>=<expr><block>{

<expr><block>{

<expr><block>{<expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>}</block></expr>,

}</block></expr>,<expr><block>{

<expr><block>{<expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>}</block></expr>,

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>off</name><init>= <expr><name><name>offset</name><index>[<expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>mb_y</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>= <expr><ternary><condition><expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr> </then><else>: <expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbn_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbn_type</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><call><name>LEFT</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IS_INTRA</name><argument_list>( <argument><expr><name>mbn_type</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name><index>[<expr><literal type="number">12</literal><operator>+</operator><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>|</operator>

<operator>(</operator><ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>cabac</name></name> <operator>&amp;&amp;</operator> <call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mbn_type</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>

<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>mbn_xy</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><ternary><condition><expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>mb_y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator></expr>

</then><else>:

<expr><name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name>mbn_xy</name></expr>]</index><index>[ <expr><name><name>off</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mb_qp</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mbn0_qp</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mbn1_qp</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>mb_qp</name> <operator>+</operator> <name>mbn0_qp</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_qp</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mbn0_qp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_qp</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mbn0_qp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>mb_qp</name> <operator>+</operator> <name>mbn1_qp</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mb_qp</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mbn1_qp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_qp</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mbn1_qp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"filter mb:%d/%d MBAFF, QPy:%d/%d, QPb:%d/%d QPr:%d/%d ls:%d uvls:%d"</literal></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name><name>qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">" bS[%d]:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>bS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> <expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument> , <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>qp</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_y</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>qp</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument> , <argument><expr><literal type="number">2</literal><operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>qp</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_y</name> <operator>+</operator> <name>linesize</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator> <name>linesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>qp</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name> <operator>+</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgev</name> <argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name> <operator>+</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cb</name> <operator>+</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_mbaff_edgecv</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>img_cr</name> <operator>+</operator> <name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>uvlinesize</name></expr></argument>, <argument><expr><name>bS</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>rqp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>filter_mb_dir</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>mb_xy</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>mvy_limit</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>first_vertical_edge_done</name></expr></else></ternary></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,

<argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>filter_mb_dir</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>mb_xy</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>mvy_limit</name></expr></argument>, <argument><expr><name>first_vertical_edge_done</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mb_dir</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>img_y</name></expr></argument>, <argument><expr><name>img_cb</name></expr></argument>, <argument><expr><name>img_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><name>mb_xy</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>mvy_limit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
