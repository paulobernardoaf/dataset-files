<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\v4l2_fmt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/videodev2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_fmt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V4L2_FMT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>V4L2_PIX_FMT_##x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_CODEC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_CODEC_ID_##x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_FMT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AV_PIX_FMT_##x</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>fmt_conversion</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avfmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>avcodec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v4l2_fmt</name></decl>;</decl_stmt>

}</block> <decl><name><name>fmt_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>RGB555LE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>RGB555</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>RGB555BE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>RGB555X</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>RGB565LE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>RGB565</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>RGB565BE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>RGB565X</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>BGR24</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>BGR24</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>RGB24</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>RGB24</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>BGR0</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>BGR32</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><literal type="number">0RGB</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>RGB32</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>GRAY8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>GREY</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>YUV420P</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>YUV420</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>YUYV422</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>YUYV</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>UYVY422</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>UYVY</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>YUV422P</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>YUV422P</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>YUV411P</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>YUV411P</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>YUV410P</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>YUV410</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>YUV410P</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>YVU410</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NV12</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>NV12</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>MJPEG</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>MJPEG</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>MJPEG</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>JPEG</argument>)</argument_list></macro> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_SRGGB8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>BAYER_BGGR8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>SBGGR8</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>BAYER_GBRG8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>SGBRG8</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>BAYER_GRBG8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>SGRBG8</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>BAYER_RGGB8</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>SRGGB8</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_Y16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>GRAY16LE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>Y16</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_NV12M</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NV12</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>NV12M</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_NV21M</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NV21</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>NV21M</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_YUV420M</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>YUV420P</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>YUV420M</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_NV16M</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NV16</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>RAWVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>NV16M</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_H263</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>H263</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>H263</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_H264</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>H264</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>H264</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_MPEG4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>MPEG4</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>MPEG4</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_CPIA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>CPIA</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>CPIA1</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_DV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>DVVIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>DV</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_MPEG1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>MPEG1VIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>MPEG1</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_MPEG2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>MPEG2VIDEO</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>MPEG2</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_VP8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>VP8</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>VP8</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_VP9</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>VP9</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>VP9</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_HEVC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>HEVC</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>HEVC</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>V4L2_PIX_FMT_VC1_ANNEX_G</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><call><name>AV_FMT</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>, <expr><call><name>AV_CODEC</name><argument_list>(<argument><expr><name>VC1</name></expr></argument>)</argument_list></call></expr>, <macro><name>V4L2_FMT</name><argument_list>(<argument>VC1_ANNEX_G</argument>)</argument_list></macro> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</struct>

<function><type><name>uint32_t</name></type> <name>ff_v4l2_format_avcodec_to_v4l2</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>avcodec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fmt_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>avcodec</name> <operator>==</operator> <name>avcodec</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2_fmt</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ff_v4l2_format_avfmt_to_v4l2</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>avfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fmt_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>avfmt</name> <operator>==</operator> <name>avfmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2_fmt</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>ff_v4l2_format_v4l2_to_avfmt</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>v4l2_fmt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>avcodec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fmt_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>avcodec</name> <operator>==</operator> <name>avcodec</name> <operator>&amp;&amp;</operator>

<name><name>fmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v4l2_fmt</name> <operator>==</operator> <name>v4l2_fmt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fmt_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>avfmt</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>AV_PIX_FMT_NONE</name></expr>;</return>

</block_content>}</block></function>

</unit>
