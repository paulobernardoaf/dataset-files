<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mlz.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlz.h"</cpp:file></cpp:include>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mlz_init_dict</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>MLZ</name> <modifier>*</modifier></type><name>mlz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>dict</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>TABLE_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mlz</name><operator>-&gt;</operator><name>dict</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>flush_code</name></name> <operator>=</operator> <name>FLUSH_CODE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>current_dic_index_max</name></name> <operator>=</operator> <name>DIC_INDEX_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>dic_code_bit</name></name> <operator>=</operator> <name>CODE_BIT_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>bump_code</name></name> <operator>=</operator> <operator>(</operator><name>DIC_INDEX_INIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name> <operator>=</operator> <name>FIRST_CODE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>freeze_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mlz_flush_dict</name><parameter_list>(<parameter><decl><type><name>MLZ</name> <modifier>*</modifier></type><name>mlz</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>MLZDict</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>mlz</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><name><name>dict</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string_code</name> <operator>=</operator> <name>CODE_UNSET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent_code</name> <operator>=</operator> <name>CODE_UNSET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>match_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>current_dic_index_max</name></name> <operator>=</operator> <name>DIC_INDEX_INIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>dic_code_bit</name></name> <operator>=</operator> <name>CODE_BIT_INIT</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>bump_code</name></name> <operator>=</operator> <name><name>mlz</name><operator>-&gt;</operator><name>current_dic_index_max</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name> <operator>=</operator> <name>FIRST_CODE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>freeze_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_new_entry_dict</name><parameter_list>(<parameter><decl><type><name>MLZDict</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parent_code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>char_code</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>dict</name><index>[<expr><name>string_code</name></expr>]</index></name><operator>.</operator><name>parent_code</name> <operator>=</operator> <name>parent_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><name>string_code</name></expr>]</index></name><operator>.</operator><name>string_code</name> <operator>=</operator> <name>string_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><name>string_code</name></expr>]</index></name><operator>.</operator><name>char_code</name> <operator>=</operator> <name>char_code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent_code</name> <operator>&lt;</operator> <name>FIRST_CODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dict</name><index>[<expr><name>string_code</name></expr>]</index></name><operator>.</operator><name>match_len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dict</name><index>[<expr><name>string_code</name></expr>]</index></name><operator>.</operator><name>match_len</name> <operator>=</operator> <operator>(</operator><name><name>dict</name><index>[<expr><name>parent_code</name></expr>]</index></name><operator>.</operator><name>match_len</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_string</name><parameter_list>(<parameter><decl><type><name>MLZ</name><modifier>*</modifier></type> <name>mlz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>first_char_code</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bufsize</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>MLZDict</name><modifier>*</modifier></type> <name>dict</name> <init>= <expr><name><name>mlz</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_code</name></decl>, <decl><type ref="prev"/><name>parent_code</name></decl>, <decl><type ref="prev"/><name>tmp_code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>current_code</name> <operator>=</operator> <name>string_code</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>first_char_code</name> <operator>=</operator> <name>CODE_UNSET</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>bufsize</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>current_code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CODE_UNSET</name></expr>:</case>

<return>return <expr><name>count</name></expr>;</return>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>current_code</name> <operator>&lt;</operator> <name>FIRST_CODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>first_char_code</name> <operator>=</operator> <name>current_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>current_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>dict</name><index>[<expr><name>current_code</name></expr>]</index></name><operator>.</operator><name>match_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp_code</name> <operator>=</operator> <name><name>dict</name><index>[<expr><name>current_code</name></expr>]</index></name><operator>.</operator><name>char_code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>bufsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MLZ offset error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buff</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>tmp_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>current_code</name> <operator>=</operator> <name><name>dict</name><index>[<expr><name>current_code</name></expr>]</index></name><operator>.</operator><name>parent_code</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current_code</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>current_code</name> <operator>&gt;</operator> <operator>(</operator><name>DIC_INDEX_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MLZ dic index error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_code</name> <operator>&gt;</operator> <name>FIRST_CODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parent_code</name> <operator>=</operator> <name><name>dict</name><index>[<expr><name>current_code</name></expr>]</index></name><operator>.</operator><name>parent_code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name><name>dict</name><index>[<expr><name>current_code</name></expr>]</index></name><operator>.</operator><name>match_len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent_code</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>parent_code</name></expr></argument> &gt;</argument_list></name> <name>DIC_INDEX_MAX</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MLZ dic index error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator> <name>offset</name> <operator>&gt;</operator> <operator>(</operator><name>DIC_INDEX_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MLZ dic offset error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>input_code</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp_code</name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>tmp_code</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mlz_decompression</name><parameter_list>(<parameter><decl><type><name>MLZ</name><modifier>*</modifier></type> <name>mlz</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>MLZDict</name> <modifier>*</modifier></type><name>dict</name> <init>= <expr><name><name>mlz</name><operator>-&gt;</operator><name>dict</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>output_chars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>string_code</name></decl>, <decl><type ref="prev"/><name>last_string_code</name></decl>, <decl><type ref="prev"/><name>char_code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>string_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>char_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_string_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>output_chars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>output_chars</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>string_code</name> <operator>=</operator> <call><name>input_code</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>dic_code_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>string_code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FLUSH_CODE</name></expr>:</case>

<case>case <expr><name>MAX_CODE</name></expr>:</case>

<expr_stmt><expr><call><name>ff_mlz_flush_dict</name><argument_list>(<argument><expr><name>mlz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>char_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_string_code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FREEZE_CODE</name></expr>:</case>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>freeze_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>string_code</name> <operator>&gt;</operator> <name><name>mlz</name><operator>-&gt;</operator><name>current_dic_index_max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"String code %d exceeds maximum value of %d.\n"</literal></expr></argument>, <argument><expr><name>string_code</name></expr></argument>, <argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>current_dic_index_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output_chars</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>string_code</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>mlz</name><operator>-&gt;</operator><name>bump_code</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>mlz</name><operator>-&gt;</operator><name>dic_code_bit</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>current_dic_index_max</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>bump_code</name></name> <operator>=</operator> <name><name>mlz</name><operator>-&gt;</operator><name>current_dic_index_max</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>string_code</name> <operator>&gt;=</operator> <name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_string</name><argument_list>(<argument><expr><name>mlz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buff</name><index>[<expr><name>output_chars</name></expr>]</index></name></expr></argument>, <argument><expr><name>last_string_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>char_code</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>output_chars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ret</name></expr></argument> &gt;</argument_list></name> <name>size</name> <operator>-</operator> <name>output_chars</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"output chars overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output_chars</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_chars</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_string</name><argument_list>(<argument><expr><name>mlz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buff</name><index>[<expr><name>output_chars</name></expr>]</index></name></expr></argument>, <argument><expr><name>char_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>char_code</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>output_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ret</name></expr></argument> &gt;</argument_list></name> <name>size</name> <operator>-</operator> <name>output_chars</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"output chars overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output_chars</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_chars</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_new_entry_dict</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name></expr></argument>, <argument><expr><name>last_string_code</name></expr></argument>, <argument><expr><name>char_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name> <operator>&gt;=</operator> <name>TABLE_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many MLZ codes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output_chars</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_string</name><argument_list>(<argument><expr><name>mlz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buff</name><index>[<expr><name>output_chars</name></expr>]</index></name></expr></argument>, <argument><expr><name>string_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>char_code</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>output_chars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ret</name></expr></argument> &gt;</argument_list></name> <name>size</name> <operator>-</operator> <name>output_chars</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"output chars overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output_chars</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output_chars</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output_chars</name> <operator>&lt;=</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>mlz</name><operator>-&gt;</operator><name>freeze_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_string_code</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_new_entry_dict</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name></expr></argument>, <argument><expr><name>last_string_code</name></expr></argument>, <argument><expr><name>char_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name> <operator>&gt;=</operator> <name>TABLE_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>mlz</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many MLZ codes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>output_chars</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mlz</name><operator>-&gt;</operator><name>next_code</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>last_string_code</name> <operator>=</operator> <name>string_code</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return <expr><name>output_chars</name></expr>;</return>

</block_content>}</block></function>

</unit>
