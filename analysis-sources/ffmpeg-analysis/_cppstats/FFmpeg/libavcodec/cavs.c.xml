<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cavs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cavs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>alpha_tab</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>,

<expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">44</literal></expr>,

<expr><literal type="number">46</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>beta_tab</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>tc_tab</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cavs_vector</name></type> <name>un_mv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>NOT_AVAIL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>left_modifier_l</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>top_modifier_l</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>left_modifier_c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>top_modifier_c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_bs</name><parameter_list>(<parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvP</name></decl></parameter>, <parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvQ</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mvP</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>REF_INTRA</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>mvQ</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>REF_INTRA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>mvP</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>mvQ</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>mvP</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>mvQ</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>mvP</name><operator>-&gt;</operator><name>ref</name></name> <operator>!=</operator> <name><name>mvQ</name><operator>-&gt;</operator><name>ref</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvP</name> <operator>+=</operator> <name>MV_BWD_OFFS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mvQ</name> <operator>+=</operator> <name>MV_BWD_OFFS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>mvP</name><operator>-&gt;</operator><name>x</name></name> <operator>-</operator> <name><name>mvQ</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>mvP</name><operator>-&gt;</operator><name>y</name></name> <operator>-</operator> <name><name>mvQ</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>mvP</name><operator>-&gt;</operator><name>ref</name></name> <operator>!=</operator> <name><name>mvQ</name><operator>-&gt;</operator><name>ref</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_PARAMS</name></cpp:macro> <cpp:value>alpha = alpha_tab[av_clip_uintp2(qp_avg + h-&gt;alpha_offset, 6)]; beta = beta_tab[av_clip_uintp2(qp_avg + h-&gt;beta_offset, 6)]; tc = tc_tab[av_clip_uintp2(qp_avg + h-&gt;alpha_offset, 6)];</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_cavs_filter</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_mb</name></name></type> <name>mb_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_avg</name></decl>, <decl><type ref="prev"/><name>alpha</name></decl>, <decl><type ref="prev"/><name>beta</name></decl>, <decl><type ref="prev"/><name>tc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>topleft_border_y</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>topleft_border_u</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>topleft_border_v</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_u</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cu</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_v</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cv</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>loop_filter_disable</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mb_type</name> <operator>==</operator> <name>I_8X8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_cavs_partition_flags</name><index>[<expr><name>mb_type</name></expr>]</index></name> <operator>&amp;</operator> <name>SPLITV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X0</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X1</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_type</name> <operator>&gt;</operator> <name>P_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X3</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_type</name> <operator>&gt;</operator> <name>P_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_cavs_partition_flags</name><index>[<expr><name>mb_type</name></expr>]</index></name> <operator>&amp;</operator> <name>SPLITH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X0</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X2</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_type</name> <operator>&gt;</operator> <name>P_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X3</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_type</name> <operator>&gt;</operator> <name>P_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_A1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X0</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_type</name> <operator>&gt;</operator> <name>P_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_A3</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X2</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_type</name> <operator>&gt;</operator> <name>P_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_B2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X0</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_type</name> <operator>&gt;</operator> <name>P_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_B3</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X1</name></expr>]</index></name></expr></argument>, <argument><expr><name>mb_type</name> <operator>&gt;</operator> <name>P_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RN64</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_AVAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qp_avg</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>qp</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>left_qp</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SET_PARAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>cavs_filter_lv</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qp_avg</name> <operator>=</operator> <operator>(</operator><name><name>ff_cavs_chroma_qp</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>qp</name></name></expr>]</index></name> <operator>+</operator> <name><name>ff_cavs_chroma_qp</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>left_qp</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SET_PARAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>cavs_filter_cv</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>cavs_filter_cv</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qp_avg</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>qp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>SET_PARAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>cavs_filter_lv</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>cavs_filter_lh</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>B_AVAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qp_avg</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>qp</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>top_qp</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SET_PARAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>cavs_filter_lh</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qp_avg</name> <operator>=</operator> <operator>(</operator><name><name>ff_cavs_chroma_qp</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>qp</name></name></expr>]</index></name> <operator>+</operator> <name><name>ff_cavs_chroma_qp</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>top_qp</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>SET_PARAMS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>cavs_filter_ch</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>cavs_filter_ch</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_qp</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>qp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_qp</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>qp</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_PARAMS</name></cpp:undef>

<function><type><name>void</name></type> <name>ff_cavs_load_intra_pred_luma</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_AVAIL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>B_AVAIL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>topleft_border_y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>C_AVAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_y</name><index>[<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>B_AVAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_AVAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>intern_border_y</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cavs_load_intra_pred_chroma</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_u</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_u</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_v</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_v</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>C_AVAIL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_AVAIL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>B_AVAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>topleft_border_u</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>topleft_border_v</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>left_border_v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>left_border_v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_u</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_border_v</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_vert</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name> <init>= <expr><call><name>AV_RN64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>d</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_horiz</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>left</name><index>[<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0x0101010101010101ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>d</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_dc_128</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name> <init>= <expr><literal type="number">0x8080808080808080ULL</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>d</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_plane</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ia</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ih</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ih</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>top</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>-</operator> <name><name>top</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>x</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>iv</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>left</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>-</operator> <name><name>left</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>x</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ia</name> <operator>=</operator> <operator>(</operator><name><name>top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ih</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>ih</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal> <operator>*</operator> <name>iv</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><operator>(</operator><name>ia</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>ih</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>iv</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWPASS</name><parameter_list>(<parameter><type><name>ARRAY</name></type></parameter>, <parameter><type><name>INDEX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ARRAY[(INDEX) - 1] + 2 * ARRAY[(INDEX)] + ARRAY[(INDEX) + 1] + 2) &gt;&gt; 2)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_lp</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>LOWPASS</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>LOWPASS</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_down_left</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>LOWPASS</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>LOWPASS</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_down_right</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name>LOWPASS</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name>LOWPASS</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_lp_left</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name>LOWPASS</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>intra_pred_lp_top</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name>LOWPASS</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOWPASS</name></cpp:undef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>modify_pred</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>mod_table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <name><name>mod_table</name><index>[<expr><operator>*</operator><name>mode</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Illegal intra prediction mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cavs_modify_mb_i</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pred_mode_uv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_AVAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>modify_pred</name><argument_list>(<argument><expr><name>left_modifier_l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>modify_pred</name><argument_list>(<argument><expr><name>left_modifier_l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>modify_pred</name><argument_list>(<argument><expr><name>left_modifier_c</name></expr></argument>, <argument><expr><name>pred_mode_uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>B_AVAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>modify_pred</name><argument_list>(<argument><expr><name>top_modifier_l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>modify_pred</name><argument_list>(<argument><expr><name>top_modifier_l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>modify_pred</name><argument_list>(<argument><expr><name>top_modifier_c</name></expr></argument>, <argument><expr><name>pred_mode_uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mc_dir_part</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y_offset</name></decl></parameter>,

<parameter><decl><type><name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_op</name></decl></parameter>,

<parameter><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_op</name></decl></parameter>, <parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mx</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>src_x_offset</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>my</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>src_y_offset</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>luma_xy</name> <init>= <expr><operator>(</operator><name>mx</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>my</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_y</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cb</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cr</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_height</name> <init>= <expr><name>extra_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>full_mx</name> <init>= <expr><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>full_my</name> <init>= <expr><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pic_width</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pic_height</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>emu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>extra_width</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>my</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>extra_height</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>full_mx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>-</operator> <name>extra_width</name> <operator>||</operator>

<name><name>full_my</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>-</operator> <name>extra_height</name> <operator>||</operator>

<name>full_mx</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> &gt;</argument_list></name> <name>pic_width</name> <operator>+</operator> <name>extra_width</name> <operator>||</operator>

<name>full_my</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> &gt;</argument_list></name> <name>pic_height</name> <operator>+</operator> <name>extra_height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,

<argument><expr><name>src_y</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr></argument>,

<argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">5</literal></expr></argument> ,

<argument><expr><name>full_mx</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>full_my</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name>pic_width</name></expr></argument>, <argument><expr><name>pic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>emu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>qpix_op</name><index>[<expr><name>luma_xy</name></expr>]</index></name><operator>(</operator><name>dest_y</name><operator>,</operator> <name>src_y</name><operator>,</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>src_cb</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>,

<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> ,

<argument><expr><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name>pic_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pic_height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_cb</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>chroma_op</name><argument_list>(<argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>src_cb</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>, <argument><expr><name>mx</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>my</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>emu</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>h</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><name>src_cr</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>,

<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> ,

<argument><expr><name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>my</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name>pic_width</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pic_height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_cr</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>chroma_op</name><argument_list>(<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>src_cr</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>, <argument><expr><name>mx</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>my</name> <operator>&amp;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mc_part_std</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chroma_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_cr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_offset</name></decl></parameter>,

<parameter><decl><type><name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_put</name></decl></parameter>,

<parameter><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_put</name></decl></parameter>,

<parameter><decl><type><name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_avg</name></decl></parameter>,

<parameter><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_avg</name></decl></parameter>,

<parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>qpel_mc_func</name> <modifier>*</modifier></type><name>qpix_op</name> <init>= <expr><name>qpix_put</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>h264_chroma_mc_func</name></type> <name>chroma_op</name> <init>= <expr><name>chroma_put</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>+=</operator> <name>x_offset</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name> <operator>+=</operator> <name>x_offset</name> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>+=</operator> <name>x_offset</name> <operator>+</operator> <name>y_offset</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x_offset</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mbx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_offset</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mby</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name></name></expr>]</index></name><operator>.</operator><name>f</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mc_dir_part</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,

<argument><expr><name>qpix_op</name></expr></argument>, <argument><expr><name>chroma_op</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qpix_op</name> <operator>=</operator> <name>qpix_avg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_op</name> <operator>=</operator> <name>chroma_avg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mv</name> <operator>+</operator> <name>MV_BWD_OFFS</name><operator>)</operator><operator>-&gt;</operator><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mc_dir_part</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>chroma_height</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>x_offset</name></expr></argument>, <argument><expr><name>y_offset</name></expr></argument>,

<argument><expr><name>qpix_op</name></expr></argument>, <argument><expr><name>chroma_op</name></expr></argument>, <argument><expr><name>mv</name> <operator>+</operator> <name>MV_BWD_OFFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cavs_inter</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_mb</name></name></type> <name>mb_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff_cavs_partition_flags</name><index>[<expr><name>mb_type</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>mc_part_std</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>put_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mc_part_std</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>put_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X0</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mc_part_std</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>put_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mc_part_std</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>put_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mc_part_std</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>put_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>avg_cavs_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X3</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>scale_mv</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d_x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>d_y</name></decl></parameter>,

<parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>distp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>den</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>scale_den</name><index>[<expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>d_x</name> <operator>=</operator> <operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <name>distp</name> <operator>*</operator> <name>den</name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <call><name>FF_SIGNBIT</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d_y</name> <operator>=</operator> <operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <name>distp</name> <operator>*</operator> <name>den</name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <call><name>FF_SIGNBIT</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mv_pred_median</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvP</name></decl></parameter>,

<parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvA</name></decl></parameter>,

<parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvB</name></decl></parameter>,

<parameter><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvC</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ax</name></decl>, <decl><type ref="prev"/><name>ay</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>, <decl><type ref="prev"/><name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len_ab</name></decl>, <decl><type ref="prev"/><name>len_bc</name></decl>, <decl><type ref="prev"/><name>len_ca</name></decl>, <decl><type ref="prev"/><name>len_mid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>scale_mv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ay</name></expr></argument>, <argument><expr><name>mvA</name></expr></argument>, <argument><expr><name><name>mvP</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scale_mv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>by</name></expr></argument>, <argument><expr><name>mvB</name></expr></argument>, <argument><expr><name><name>mvP</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scale_mv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cy</name></expr></argument>, <argument><expr><name>mvC</name></expr></argument>, <argument><expr><name><name>mvP</name><operator>-&gt;</operator><name>dist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_ab</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>ax</name> <operator>-</operator> <name>bx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>ay</name> <operator>-</operator> <name>by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_bc</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>bx</name> <operator>-</operator> <name>cx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>by</name> <operator>-</operator> <name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_ca</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>cx</name> <operator>-</operator> <name>ax</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>cy</name> <operator>-</operator> <name>ay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_mid</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name>len_ab</name></expr></argument>, <argument><expr><name>len_bc</name></expr></argument>, <argument><expr><name>len_ca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_mid</name> <operator>==</operator> <name>len_ab</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len_mid</name> <operator>==</operator> <name>len_bc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>ax</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>ay</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>bx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>by</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cavs_mv</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_mv_loc</name></name></type> <name>nP</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_mv_loc</name></name></type> <name>nC</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>cavs_mv_pred</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>cavs_block</name></name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvP</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>nP</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvA</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>nP</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvB</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>nP</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cavs_vector</name> <modifier>*</modifier></type><name>mvC</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>nC</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>cavs_vector</name> <modifier>*</modifier></type><name>mvP2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>dist</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>dist</name><index>[<expr><name><name>mvP</name><operator>-&gt;</operator><name>ref</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mvC</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>NOT_AVAIL</name> <operator>||</operator> <operator>(</operator><name>nP</name> <operator>==</operator> <name>MV_FWD_X3</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nP</name> <operator>==</operator> <name>MV_BWD_X3</name> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mvC</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>nP</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MV_PRED_PSKIP</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>mvA</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>NOT_AVAIL</name> <operator>||</operator>

<name><name>mvB</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>NOT_AVAIL</name> <operator>||</operator>

<operator>(</operator><name><name>mvA</name><operator>-&gt;</operator><name>x</name></name> <operator>|</operator> <name><name>mvA</name><operator>-&gt;</operator><name>y</name></name> <operator>|</operator> <name><name>mvA</name><operator>-&gt;</operator><name>ref</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name><name>mvB</name><operator>-&gt;</operator><name>x</name></name> <operator>|</operator> <name><name>mvB</name><operator>-&gt;</operator><name>y</name></name> <operator>|</operator> <name><name>mvB</name><operator>-&gt;</operator><name>ref</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvP2</name> <operator>=</operator> <operator>&amp;</operator><name>un_mv</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mvA</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mvB</name><operator>-&gt;</operator><name>ref</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mvC</name><operator>-&gt;</operator><name>ref</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvP2</name> <operator>=</operator> <name>mvA</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mvA</name><operator>-&gt;</operator><name>ref</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mvB</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mvC</name><operator>-&gt;</operator><name>ref</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvP2</name> <operator>=</operator> <name>mvB</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mvA</name><operator>-&gt;</operator><name>ref</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mvB</name><operator>-&gt;</operator><name>ref</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mvC</name><operator>-&gt;</operator><name>ref</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvP2</name> <operator>=</operator> <name>mvC</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MV_PRED_LEFT</name> <operator>&amp;&amp;</operator> <name><name>mvA</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvP2</name> <operator>=</operator> <name>mvA</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MV_PRED_TOP</name> <operator>&amp;&amp;</operator> <name><name>mvB</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvP2</name> <operator>=</operator> <name>mvB</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>MV_PRED_TOPRIGHT</name> <operator>&amp;&amp;</operator> <name><name>mvC</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvP2</name> <operator>=</operator> <name>mvC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mvP2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>mvP2</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>mvP2</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mv_pred_median</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>mvP</name></expr></argument>, <argument><expr><name>mvA</name></expr></argument>, <argument><expr><name>mvB</name></expr></argument>, <argument><expr><name>mvC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <name>MV_PRED_PSKIP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>mvP</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name> <init>= <expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>mvP</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mx</name> <operator>!=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>mx</name> <operator>||</operator> <name>my</name> <operator>!=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>my</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MV %d %d out of supported range\n"</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvP</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>my</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_mvs</name><argument_list>(<argument><expr><name>mvP</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_cavs_init_mb</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_B2</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_B2</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>B_AVAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_B2</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_B3</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_B2</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_B3</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NOT_AVAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>C_AVAIL</name> <operator>|</operator> <name>D_AVAIL</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>D_AVAIL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>C_AVAIL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>C_AVAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_C2</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_C2</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>D_AVAIL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_D3</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_D3</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cavs_next_mb</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>A_AVAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X3</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_X2</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_X3</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mbidx</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>B_AVAIL</name> <operator>|</operator> <name>C_AVAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>NOT_AVAIL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mby</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mby</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mby</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mby</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>mby</name></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition> <block>{<block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cavs_init_pic</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_X0</name></expr>]</index></name> <operator>=</operator> <name>ff_cavs_dir_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_mvs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_BWD_X0</name></expr>]</index></name></expr></argument>, <argument><expr><name>BLK_16X16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X0</name></expr>]</index></name> <operator>=</operator> <name>ff_cavs_dir_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_mvs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><name>MV_FWD_X0</name></expr>]</index></name></expr></argument>, <argument><expr><name>BLK_16X16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>pred_mode_Y</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>NOT_AVAIL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cy</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cu</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>c_stride</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>luma_scan</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>luma_scan</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>l_stride</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mbx</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mby</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mbidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_cavs_init_top_lines</name><parameter_list>(<parameter><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_qp</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cavs_vector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cavs_vector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_y</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>col_mv</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>,

<argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cavs_vector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>col_type_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>top_qp</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name></name> <operator>||</operator>

<operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_y</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name></name> <operator>||</operator>

<operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>col_mv</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>col_type_base</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_qp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>col_mv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>col_type_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_cavs_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264chroma_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_idctdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>idsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>vdsp</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cavsdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable_permutation</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cdsp</name><operator>.</operator><name>idct_perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_scantable</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>idsp</name><operator>.</operator><name>idct_permutation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>scantable</name></name></expr></argument>, <argument><expr><name>ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f</name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_cavs_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>luma_scan</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>luma_scan</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_l</name><index>[<expr><name>INTRA_L_VERT</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_vert</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_l</name><index>[<expr><name>INTRA_L_HORIZ</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_horiz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_l</name><index>[<expr><name>INTRA_L_LP</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_lp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_l</name><index>[<expr><name>INTRA_L_DOWN_LEFT</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_down_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_l</name><index>[<expr><name>INTRA_L_DOWN_RIGHT</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_down_right</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_l</name><index>[<expr><name>INTRA_L_LP_LEFT</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_lp_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_l</name><index>[<expr><name>INTRA_L_LP_TOP</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_lp_top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_l</name><index>[<expr><name>INTRA_L_DC_128</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_dc_128</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_c</name><index>[<expr><name>INTRA_C_LP</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_lp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_c</name><index>[<expr><name>INTRA_C_HORIZ</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_horiz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_c</name><index>[<expr><name>INTRA_C_VERT</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_vert</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_c</name><index>[<expr><name>INTRA_C_PLANE</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_plane</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_c</name><index>[<expr><name>INTRA_C_LP_LEFT</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_lp_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_c</name><index>[<expr><name>INTRA_C_LP_TOP</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_lp_top</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>intra_pred_c</name><index>[<expr><name>INTRA_C_DC_128</name></expr>]</index></name> <operator>=</operator> <name>intra_pred_dc_128</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name>un_mv</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_cavs_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVSContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_qp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_pred_Y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>top_border_v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>col_mv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>col_type_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
