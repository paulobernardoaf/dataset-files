<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264pred.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264pred.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264pred_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264pred_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264pred_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264pred_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264pred_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BIT_DEPTH</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_vertical_vp8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>lt</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name>

<name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>PACK_4U8</name><argument_list>(<argument><expr><operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_horizontal_vp8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>lt</name> <init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_LEFT_EDGE</name></type>

<name>AV_WN32A</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">0x01010101</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">0x01010101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">0x01010101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">0x01010101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_down_left_svq3_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_LEFT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>l1</name> <operator>+</operator> <name>t1</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l2</name> <operator>+</operator> <name>t2</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l3</name> <operator>+</operator> <name>t3</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_down_left_rv40_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name>

<name>LOAD_LEFT_EDGE</name>

<name>LOAD_DOWN_LEFT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>t0</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l0</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l1</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l2</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l3</name> <operator>+</operator> <name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l4</name> <operator>+</operator> <name>l6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t5</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l5</name> <operator>+</operator> <name>l7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>l6</name> <operator>+</operator> <name>l7</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_down_left_rv40_nodown_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name>

<name>LOAD_LEFT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>t0</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l0</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l1</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l3</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l3</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t5</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>l3</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_vertical_left_rv40</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>l0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>l2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>l3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>l4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name>t4</name><operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <name>t5</name><operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_vertical_left_rv40_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_LEFT_EDGE</name>

<name>LOAD_DOWN_LEFT_EDGE</name></type>

<name>pred4x4_vertical_left_rv40</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>topright</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>, <argument><expr><name>l4</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_vertical_left_rv40_nodown_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_LEFT_EDGE</name></type>

<name>pred4x4_vertical_left_rv40</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>topright</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>, <argument><expr><name>l3</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_vertical_left_vp8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_horizontal_up_rv40_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_LEFT_EDGE</name>

<name>LOAD_DOWN_LEFT_EDGE</name>

<name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t6</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>t7</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>l3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l4</name> <operator>+</operator> <name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l4</name> <operator>+</operator> <name>l5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l5</name> <operator>+</operator> <name>l6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_horizontal_up_rv40_nodown_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LOAD_LEFT_EDGE</name>

<name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t6</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>t7</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>l3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><name>l3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><name>l3</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred4x4_tm_vp8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>src</name><operator>-</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm_in</name> <init>= <expr><name>cm</name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred16x16_plane_svq3_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pred16x16_plane_compat_8_c</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred16x16_plane_rv40_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pred16x16_plane_compat_8_c</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred16x16_tm_vp8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>src</name><operator>-</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm_in</name> <init>= <expr><name>cm</name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred8x8_left_dc_rv40_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>dc0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc0</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dc0</name><operator>=</operator> <literal type="number">0x01010101</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>dc0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>=</operator>

<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>=</operator> <name>dc0</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred8x8_top_dc_rv40_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>dc0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dc0</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dc0</name><operator>=</operator> <literal type="number">0x01010101</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>dc0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>=</operator>

<operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>=</operator> <name>dc0</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred8x8_dc_rv40_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>dc0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dc0</name><operator>=</operator> <literal type="number">0x01010101</literal><operator>*</operator><operator>(</operator><operator>(</operator><name>dc0</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>=</operator> <name>dc0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>=</operator> <name>dc0</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>=</operator> <name>dc0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index><operator>=</operator> <name>dc0</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pred8x8_tm_vp8_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>ff_crop_tab</name> <operator>+</operator> <name>MAX_NEG_CROP</name> <operator>-</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>src</name><operator>-</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cm_in</name> <init>= <expr><name>cm</name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>cm_in</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264_pred_init</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNCC</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_ ##depth</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_ ##depth ##_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_PRED</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(codec_id != AV_CODEC_ID_RV40){if (codec_id == AV_CODEC_ID_VP7 || codec_id == AV_CODEC_ID_VP8) {h-&gt;pred4x4[VERT_PRED ]= FUNCD(pred4x4_vertical_vp8);h-&gt;pred4x4[HOR_PRED ]= FUNCD(pred4x4_horizontal_vp8);} else {h-&gt;pred4x4[VERT_PRED ]= FUNCC(pred4x4_vertical , depth);h-&gt;pred4x4[HOR_PRED ]= FUNCC(pred4x4_horizontal , depth);}h-&gt;pred4x4[DC_PRED ]= FUNCC(pred4x4_dc , depth);if(codec_id == AV_CODEC_ID_SVQ3)h-&gt;pred4x4[DIAG_DOWN_LEFT_PRED ]= FUNCD(pred4x4_down_left_svq3);elseh-&gt;pred4x4[DIAG_DOWN_LEFT_PRED ]= FUNCC(pred4x4_down_left , depth);h-&gt;pred4x4[DIAG_DOWN_RIGHT_PRED]= FUNCC(pred4x4_down_right , depth);h-&gt;pred4x4[VERT_RIGHT_PRED ]= FUNCC(pred4x4_vertical_right , depth);h-&gt;pred4x4[HOR_DOWN_PRED ]= FUNCC(pred4x4_horizontal_down , depth);if (codec_id == AV_CODEC_ID_VP7 || codec_id == AV_CODEC_ID_VP8) {h-&gt;pred4x4[VERT_LEFT_PRED ]= FUNCD(pred4x4_vertical_left_vp8);} elseh-&gt;pred4x4[VERT_LEFT_PRED ]= FUNCC(pred4x4_vertical_left , depth);h-&gt;pred4x4[HOR_UP_PRED ]= FUNCC(pred4x4_horizontal_up , depth);if (codec_id != AV_CODEC_ID_VP7 &amp;&amp; codec_id != AV_CODEC_ID_VP8) {h-&gt;pred4x4[LEFT_DC_PRED ]= FUNCC(pred4x4_left_dc , depth);h-&gt;pred4x4[TOP_DC_PRED ]= FUNCC(pred4x4_top_dc , depth);} else {h-&gt;pred4x4[TM_VP8_PRED ]= FUNCD(pred4x4_tm_vp8);h-&gt;pred4x4[DC_127_PRED ]= FUNCC(pred4x4_127_dc , depth);h-&gt;pred4x4[DC_129_PRED ]= FUNCC(pred4x4_129_dc , depth);h-&gt;pred4x4[VERT_VP8_PRED ]= FUNCC(pred4x4_vertical , depth);h-&gt;pred4x4[HOR_VP8_PRED ]= FUNCC(pred4x4_horizontal , depth);}if (codec_id != AV_CODEC_ID_VP8)h-&gt;pred4x4[DC_128_PRED ]= FUNCC(pred4x4_128_dc , depth);}else{h-&gt;pred4x4[VERT_PRED ]= FUNCC(pred4x4_vertical , depth);h-&gt;pred4x4[HOR_PRED ]= FUNCC(pred4x4_horizontal , depth);h-&gt;pred4x4[DC_PRED ]= FUNCC(pred4x4_dc , depth);h-&gt;pred4x4[DIAG_DOWN_LEFT_PRED ]= FUNCD(pred4x4_down_left_rv40);h-&gt;pred4x4[DIAG_DOWN_RIGHT_PRED]= FUNCC(pred4x4_down_right , depth);h-&gt;pred4x4[VERT_RIGHT_PRED ]= FUNCC(pred4x4_vertical_right , depth);h-&gt;pred4x4[HOR_DOWN_PRED ]= FUNCC(pred4x4_horizontal_down , depth);h-&gt;pred4x4[VERT_LEFT_PRED ]= FUNCD(pred4x4_vertical_left_rv40);h-&gt;pred4x4[HOR_UP_PRED ]= FUNCD(pred4x4_horizontal_up_rv40);h-&gt;pred4x4[LEFT_DC_PRED ]= FUNCC(pred4x4_left_dc , depth);h-&gt;pred4x4[TOP_DC_PRED ]= FUNCC(pred4x4_top_dc , depth);h-&gt;pred4x4[DC_128_PRED ]= FUNCC(pred4x4_128_dc , depth);h-&gt;pred4x4[DIAG_DOWN_LEFT_PRED_RV40_NODOWN]= FUNCD(pred4x4_down_left_rv40_nodown);h-&gt;pred4x4[HOR_UP_PRED_RV40_NODOWN]= FUNCD(pred4x4_horizontal_up_rv40_nodown);h-&gt;pred4x4[VERT_LEFT_PRED_RV40_NODOWN]= FUNCD(pred4x4_vertical_left_rv40_nodown);}h-&gt;pred8x8l[VERT_PRED ]= FUNCC(pred8x8l_vertical , depth);h-&gt;pred8x8l[HOR_PRED ]= FUNCC(pred8x8l_horizontal , depth);h-&gt;pred8x8l[DC_PRED ]= FUNCC(pred8x8l_dc , depth);h-&gt;pred8x8l[DIAG_DOWN_LEFT_PRED ]= FUNCC(pred8x8l_down_left , depth);h-&gt;pred8x8l[DIAG_DOWN_RIGHT_PRED]= FUNCC(pred8x8l_down_right , depth);h-&gt;pred8x8l[VERT_RIGHT_PRED ]= FUNCC(pred8x8l_vertical_right , depth);h-&gt;pred8x8l[HOR_DOWN_PRED ]= FUNCC(pred8x8l_horizontal_down , depth);h-&gt;pred8x8l[VERT_LEFT_PRED ]= FUNCC(pred8x8l_vertical_left , depth);h-&gt;pred8x8l[HOR_UP_PRED ]= FUNCC(pred8x8l_horizontal_up , depth);h-&gt;pred8x8l[LEFT_DC_PRED ]= FUNCC(pred8x8l_left_dc , depth);h-&gt;pred8x8l[TOP_DC_PRED ]= FUNCC(pred8x8l_top_dc , depth);h-&gt;pred8x8l[DC_128_PRED ]= FUNCC(pred8x8l_128_dc , depth);if (chroma_format_idc &lt;= 1) {h-&gt;pred8x8[VERT_PRED8x8 ]= FUNCC(pred8x8_vertical , depth);h-&gt;pred8x8[HOR_PRED8x8 ]= FUNCC(pred8x8_horizontal , depth);} else {h-&gt;pred8x8[VERT_PRED8x8 ]= FUNCC(pred8x16_vertical , depth);h-&gt;pred8x8[HOR_PRED8x8 ]= FUNCC(pred8x16_horizontal , depth);}if (codec_id != AV_CODEC_ID_VP7 &amp;&amp; codec_id != AV_CODEC_ID_VP8) {if (chroma_format_idc &lt;= 1) {h-&gt;pred8x8[PLANE_PRED8x8]= FUNCC(pred8x8_plane , depth);} else {h-&gt;pred8x8[PLANE_PRED8x8]= FUNCC(pred8x16_plane , depth);}} elseh-&gt;pred8x8[PLANE_PRED8x8]= FUNCD(pred8x8_tm_vp8);if (codec_id != AV_CODEC_ID_RV40 &amp;&amp; codec_id != AV_CODEC_ID_VP7 &amp;&amp; codec_id != AV_CODEC_ID_VP8) {if (chroma_format_idc &lt;= 1) {h-&gt;pred8x8[DC_PRED8x8 ]= FUNCC(pred8x8_dc , depth);h-&gt;pred8x8[LEFT_DC_PRED8x8]= FUNCC(pred8x8_left_dc , depth);h-&gt;pred8x8[TOP_DC_PRED8x8 ]= FUNCC(pred8x8_top_dc , depth);h-&gt;pred8x8[ALZHEIMER_DC_L0T_PRED8x8 ]= FUNC(pred8x8_mad_cow_dc_l0t, depth);h-&gt;pred8x8[ALZHEIMER_DC_0LT_PRED8x8 ]= FUNC(pred8x8_mad_cow_dc_0lt, depth);h-&gt;pred8x8[ALZHEIMER_DC_L00_PRED8x8 ]= FUNC(pred8x8_mad_cow_dc_l00, depth);h-&gt;pred8x8[ALZHEIMER_DC_0L0_PRED8x8 ]= FUNC(pred8x8_mad_cow_dc_0l0, depth);} else {h-&gt;pred8x8[DC_PRED8x8 ]= FUNCC(pred8x16_dc , depth);h-&gt;pred8x8[LEFT_DC_PRED8x8]= FUNCC(pred8x16_left_dc , depth);h-&gt;pred8x8[TOP_DC_PRED8x8 ]= FUNCC(pred8x16_top_dc , depth);h-&gt;pred8x8[ALZHEIMER_DC_L0T_PRED8x8 ]= FUNC(pred8x16_mad_cow_dc_l0t, depth);h-&gt;pred8x8[ALZHEIMER_DC_0LT_PRED8x8 ]= FUNC(pred8x16_mad_cow_dc_0lt, depth);h-&gt;pred8x8[ALZHEIMER_DC_L00_PRED8x8 ]= FUNC(pred8x16_mad_cow_dc_l00, depth);h-&gt;pred8x8[ALZHEIMER_DC_0L0_PRED8x8 ]= FUNC(pred8x16_mad_cow_dc_0l0, depth);}}else{h-&gt;pred8x8[DC_PRED8x8 ]= FUNCD(pred8x8_dc_rv40);h-&gt;pred8x8[LEFT_DC_PRED8x8]= FUNCD(pred8x8_left_dc_rv40);h-&gt;pred8x8[TOP_DC_PRED8x8 ]= FUNCD(pred8x8_top_dc_rv40);if (codec_id == AV_CODEC_ID_VP7 || codec_id == AV_CODEC_ID_VP8) {h-&gt;pred8x8[DC_127_PRED8x8]= FUNCC(pred8x8_127_dc , depth);h-&gt;pred8x8[DC_129_PRED8x8]= FUNCC(pred8x8_129_dc , depth);}}if (chroma_format_idc &lt;= 1) {h-&gt;pred8x8[DC_128_PRED8x8 ]= FUNCC(pred8x8_128_dc , depth);} else {h-&gt;pred8x8[DC_128_PRED8x8 ]= FUNCC(pred8x16_128_dc , depth);}h-&gt;pred16x16[DC_PRED8x8 ]= FUNCC(pred16x16_dc , depth);h-&gt;pred16x16[VERT_PRED8x8 ]= FUNCC(pred16x16_vertical , depth);h-&gt;pred16x16[HOR_PRED8x8 ]= FUNCC(pred16x16_horizontal , depth);switch(codec_id){case AV_CODEC_ID_SVQ3:h-&gt;pred16x16[PLANE_PRED8x8 ]= FUNCD(pred16x16_plane_svq3);break;case AV_CODEC_ID_RV40:h-&gt;pred16x16[PLANE_PRED8x8 ]= FUNCD(pred16x16_plane_rv40);break;case AV_CODEC_ID_VP7:case AV_CODEC_ID_VP8:h-&gt;pred16x16[PLANE_PRED8x8 ]= FUNCD(pred16x16_tm_vp8);h-&gt;pred16x16[DC_127_PRED8x8]= FUNCC(pred16x16_127_dc , depth);h-&gt;pred16x16[DC_129_PRED8x8]= FUNCC(pred16x16_129_dc , depth);break;default:h-&gt;pred16x16[PLANE_PRED8x8 ]= FUNCC(pred16x16_plane , depth);break;}h-&gt;pred16x16[LEFT_DC_PRED8x8]= FUNCC(pred16x16_left_dc , depth);h-&gt;pred16x16[TOP_DC_PRED8x8 ]= FUNCC(pred16x16_top_dc , depth);h-&gt;pred16x16[DC_128_PRED8x8 ]= FUNCC(pred16x16_128_dc , depth); h-&gt;pred4x4_add [VERT_PRED ]= FUNCC(pred4x4_vertical_add , depth);h-&gt;pred4x4_add [ HOR_PRED ]= FUNCC(pred4x4_horizontal_add , depth);h-&gt;pred8x8l_add [VERT_PRED ]= FUNCC(pred8x8l_vertical_add , depth);h-&gt;pred8x8l_add [ HOR_PRED ]= FUNCC(pred8x8l_horizontal_add , depth);h-&gt;pred8x8l_filter_add [VERT_PRED ]= FUNCC(pred8x8l_vertical_filter_add , depth);h-&gt;pred8x8l_filter_add [ HOR_PRED ]= FUNCC(pred8x8l_horizontal_filter_add , depth);if (chroma_format_idc &lt;= 1) {h-&gt;pred8x8_add [VERT_PRED8x8]= FUNCC(pred8x8_vertical_add , depth);h-&gt;pred8x8_add [ HOR_PRED8x8]= FUNCC(pred8x8_horizontal_add , depth);} else {h-&gt;pred8x8_add [VERT_PRED8x8]= FUNCC(pred8x16_vertical_add , depth);h-&gt;pred8x8_add [ HOR_PRED8x8]= FUNCC(pred8x16_horizontal_add , depth);}h-&gt;pred16x16_add[VERT_PRED8x8]= FUNCC(pred16x16_vertical_add , depth);h-&gt;pred16x16_add[ HOR_PRED8x8]= FUNCC(pred16x16_horizontal_add , depth);</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>bit_depth</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<macro><name>H264_PRED</name><argument_list>(<argument><literal type="number">9</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<macro><name>H264_PRED</name><argument_list>(<argument><literal type="number">10</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<macro><name>H264_PRED</name><argument_list>(<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<macro><name>H264_PRED</name><argument_list>(<argument><literal type="number">14</literal></argument>)</argument_list></macro>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>bit_depth</name><operator>&lt;=</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>H264_PRED</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_pred_init_aarch64</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_pred_init_arm</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_pred_init_x86</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_pred_init_mips</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>bit_depth</name></expr></argument>, <argument><expr><name>chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
