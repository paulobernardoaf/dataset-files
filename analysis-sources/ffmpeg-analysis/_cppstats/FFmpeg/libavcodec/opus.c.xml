<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\opus.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_celt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opustab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vorbis.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>opus_frame_duration</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">2880</literal></expr>,

<expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">2880</literal></expr>,

<expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">2880</literal></expr>,

<expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>,

<expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>,

<expr><literal type="number">120</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>,

<expr><literal type="number">120</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>,

<expr><literal type="number">120</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>,

<expr><literal type="number">120</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">960</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>xiph_lacing_16bit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">252</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>xiph_lacing_full</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <name>end</name> <operator>||</operator> <name>val</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <literal type="number">254</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>next</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_opus_parse_packet</name><parameter_list>(<parameter><decl><type><name>OpusPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>self_delimiting</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bytes</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>stereo</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>vbr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self_delimiting</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>xiph_lacing_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_bytes</name> <operator>&gt;</operator> <name>MAX_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>vbr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>self_delimiting</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>xiph_lacing_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <literal type="number">2</literal> <operator>*</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_bytes</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>||</operator> <name>frame_bytes</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>MAX_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>vbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <call><name>xiph_lacing_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>self_delimiting</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>xiph_lacing_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>+</operator> <name>frame_bytes</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>frame_bytes</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ptr</name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame_bytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>frame_bytes</name></expr></argument> &gt;</argument_list></name> <name>MAX_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>padding</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>vbr</name></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>&gt;</operator> <name>MAX_FRAMES</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>padding</name> <operator>=</operator> <call><name>xiph_lacing_full</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>vbr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>total_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <call><name>xiph_lacing_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_bytes</name> <operator>+=</operator> <name>frame_bytes</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>self_delimiting</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>xiph_lacing_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>+</operator> <name>total_bytes</name> <operator>+</operator> <name>padding</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>total_bytes</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ptr</name> <operator>-</operator> <name>padding</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_bytes</name> <operator>&gt;</operator> <name>frame_bytes</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name> <operator>-</operator> <name>total_bytes</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>self_delimiting</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <call><name>xiph_lacing_16bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame_bytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>*</operator> <name>frame_bytes</name> <operator>+</operator> <name>padding</name></expr></argument> &gt;</argument_list></name> <name>end</name> <operator>-</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>*</operator> <name>frame_bytes</name> <operator>+</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>ptr</name> <operator>-</operator> <name>padding</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_bytes</name> <operator>%</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>||</operator>

<name>frame_bytes</name> <operator>/</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>&gt;</operator> <name>MAX_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>/=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_offset</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_size</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>frame_bytes</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>packet_size</name></name> <operator>-</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_duration</name></name> <operator>=</operator> <name><name>opus_frame_duration</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>config</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>frame_duration</name></name> <operator>*</operator> <name><name>pkt</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>&gt;</operator> <name>MAX_PACKET_DUR</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>config</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>OPUS_MODE_SILK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>config</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>config</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>OPUS_MODE_HYBRID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>=</operator> <name>OPUS_BANDWIDTH_SUPERWIDEBAND</name> <operator>+</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>config</name></name> <operator>&gt;=</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>OPUS_MODE_CELT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>=</operator> <operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>config</name></name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>bandwidth</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>channel_reorder_vorbis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ff_vorbis_channel_layout_offsets</name><index>[<expr><name>nb_channels</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>channel_idx</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>channel_reorder_unknown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>channel_idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_opus_parse_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>OpusContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>default_channel_map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>channel_reorder</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>channel_reorder_unknown</name></expr></init>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>channel_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extradata_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>channels</name></decl>, <decl><type ref="prev"/><name>map_type</name></decl>, <decl><type ref="prev"/><name>streams</name></decl>, <decl><type ref="prev"/><name>stereo_streams</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Multichannel configuration without extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <name>opus_default_extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extradata_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>opus_default_extradata</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>extradata_size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extradata_size</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid extradata size: %d\n"</literal></expr></argument>,

<argument><expr><name>extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>extradata</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Extradata version %d"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>extradata</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>delay</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr> ?</condition><then> <expr><name><name>extradata</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Zero channel count specified in the extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain_i</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>extradata</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>gain_i</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gain</name></name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>gain_i</name></name> <operator>/</operator> <operator>(</operator><literal type="number">20.0</literal> <operator>*</operator> <literal type="number">256</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>map_type</name> <operator>=</operator> <name><name>extradata</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>map_type</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Channel mapping 0 is only specified for up to 2 channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>channels</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr> </then><else>: <expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>streams</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>stereo_streams</name> <operator>=</operator> <name>channels</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_map</name> <operator>=</operator> <name>default_channel_map</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>map_type</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>map_type</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>map_type</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>extradata_size</name> <operator>&lt;</operator> <literal type="number">21</literal> <operator>+</operator> <name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid extradata size: %d\n"</literal></expr></argument>,

<argument><expr><name>extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>streams</name> <operator>=</operator> <name><name>extradata</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stereo_streams</name> <operator>=</operator> <name><name>extradata</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>streams</name> <operator>||</operator> <name>stereo_streams</name> <operator>&gt;</operator> <name>streams</name> <operator>||</operator>

<name>streams</name> <operator>+</operator> <name>stereo_streams</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid stream/stereo stream count: %d/%d\n"</literal></expr></argument>, <argument><expr><name>streams</name></expr></argument>, <argument><expr><name>stereo_streams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>map_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Channel mapping 1 is only specified for up to 8 channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <name><name>ff_vorbis_channel_layouts</name><index>[<expr><name>channels</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_reorder</name> <operator>=</operator> <name>channel_reorder_vorbis</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>map_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ambisonic_order</name> <init>= <expr><call><name>ff_sqrt</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>ambisonic_order</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>ambisonic_order</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<name>channels</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>ambisonic_order</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>ambisonic_order</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Channel mapping 2 is only specified for channel counts"</literal>

<literal type="string">" which can be written as (n + 1)^2 or (n + 1)^2 + 2"</literal>

<literal type="string">" for nonnegative integer n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&gt;</operator> <literal type="number">227</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>channel_map</name> <operator>=</operator> <name>extradata</name> <operator>+</operator> <literal type="number">21</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Mapping type %d"</literal></expr></argument>, <argument><expr><name>map_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_maps</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>channel_maps</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_maps</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelMap</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_maps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>idx</name> <init>= <expr><name><name>channel_map</name><index>[<expr><call><name>channel_reorder</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>silence</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>streams</name> <operator>+</operator> <name>stereo_streams</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid channel map for output channel %d: %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>channel_maps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>copy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel_map</name><index>[<expr><call><name>channel_reorder</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <name>idx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>copy_idx</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>stereo_streams</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>stream_idx</name></name> <operator>=</operator> <name>idx</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>channel_idx</name></name> <operator>=</operator> <name>idx</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>stream_idx</name></name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>stereo_streams</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>channel_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>layout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_streams</name></name> <operator>=</operator> <name>streams</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_stereo_streams</name></name> <operator>=</operator> <name>stereo_streams</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_celt_quant_bands</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>lowband_scratch</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>norm1</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>norm2</name> <init>= <expr><name>norm1</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>totalbits</name> <init>= <expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>anticollapse_needed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>update_lowband</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowband_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>blocks</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>blocks</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band_offset</name> <init>= <expr><name><name>ff_celt_freq_bands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band_size</name> <init>= <expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name> <operator>+</operator> <name>band_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>Y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name> <operator>+</operator> <name>band_offset</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>norm_loc1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>norm_loc2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consumed</name> <init>= <expr><call><name>opus_rc_tell_frac</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>effective_lowband</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining</name></name> <operator>-=</operator> <name>consumed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>=</operator> <name>totalbits</name> <operator>-</operator> <name>consumed</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>curr_balance</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>remaining</name></name> <operator>/</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>curr_balance</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name> <operator>||</operator>

<name>i</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>update_lowband</name> <operator>||</operator> <name>lowband_offset</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lowband_offset</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><operator>(</operator><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>norm1</name><index>[<expr><name>band_offset</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>norm1</name><index>[<expr><name>band_offset</name> <operator>-</operator> <name>count</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>norm2</name><index>[<expr><name>band_offset</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>norm2</name><index>[<expr><name>band_offset</name> <operator>-</operator> <name>count</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lowband_offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>spread</name></name> <operator>!=</operator> <name>CELT_SPREAD_AGGRESSIVE</name> <operator>||</operator>

<name><name>f</name><operator>-&gt;</operator><name>blocks</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>tf_change</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>foldstart</name></decl>, <decl><type ref="prev"/><name>foldend</name></decl>;</decl_stmt>

<expr_stmt><expr><name>effective_lowband</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ff_celt_freq_bands</name><index>[<expr><name>lowband_offset</name></expr>]</index></name> <operator>-</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>foldstart</name> <operator>=</operator> <name>lowband_offset</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>ff_celt_freq_bands</name><index>[<expr><operator>--</operator><name>foldstart</name></expr>]</index></name> <operator>&gt;</operator> <name>effective_lowband</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name>foldend</name> <operator>=</operator> <name>lowband_offset</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>++</operator><name>foldend</name> <operator>&lt;</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>ff_celt_freq_bands</name><index>[<expr><name>foldend</name></expr>]</index></name> <operator>&lt;</operator> <name>effective_lowband</name> <operator>+</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>foldstart</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>foldend</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>collapse_masks</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>collapse_masks</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>band_offset</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>norm1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>norm1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>norm2</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>norm_loc1</name> <operator>=</operator> <ternary><condition><expr><name>effective_lowband</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>norm1</name> <operator>+</operator> <operator>(</operator><name>effective_lowband</name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>norm_loc2</name> <operator>=</operator> <ternary><condition><expr><name>effective_lowband</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>norm2</name> <operator>+</operator> <operator>(</operator><name>effective_lowband</name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>f</name><operator>-&gt;</operator><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>pvq</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>band_size</name></expr></argument>, <argument><expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>norm_loc1</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>norm1</name> <operator>+</operator> <name>band_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>,

<argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>f</name><operator>-&gt;</operator><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>pvq</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>band_size</name></expr></argument>, <argument><expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>norm_loc2</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>norm2</name> <operator>+</operator> <name>band_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>,

<argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>f</name><operator>-&gt;</operator><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>pvq</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>band_size</name></expr></argument>, <argument><expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><name>norm_loc1</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>norm1</name> <operator>+</operator> <name>band_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>,

<argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>collapse_masks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>cm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>collapse_masks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>cm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining</name></name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>consumed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>update_lowband</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&gt;</operator> <name>band_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORMC</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((bits) &lt;&lt; (f-&gt;channels - 1) &lt;&lt; f-&gt;size &gt;&gt; 2)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ff_celt_bitalloc</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>total</name></decl>, <decl><type ref="prev"/><name>done</name></decl>, <decl><type ref="prev"/><name>bandbits</name></decl>, <decl><type ref="prev"/><name>remaining</name></decl>, <decl><type ref="prev"/><name>tbits_8ths</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_startband</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intensitystereo_bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dualstereo_bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dynalloc</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extrabits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>boost</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>trim_offset</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>threshold</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bits1</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bits2</name><index>[<expr><name>CELT_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_opus_rc_enc_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>spread</name></name></expr></argument>, <argument><expr><name>ff_celt_model_spread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>spread</name></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_celt_model_spread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>spread</name></name> <operator>=</operator> <name>CELT_SPREAD_NORMAL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>caps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>NORMC</name><argument_list>(<argument><expr><operator>(</operator><name><name>ff_celt_static_caps</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>*</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tbits_8ths</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>quanta</name> <init>= <expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_dynalloc</name> <init>= <expr><name>dynalloc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>boost_amount</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>alloc_boost</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>quanta</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>quanta</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>quanta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>opus_rc_tell_frac</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>b_dynalloc</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>tbits_8ths</name> <operator>&amp;&amp;</operator> <name><name>boost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>caps</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_boost</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_boost</name> <operator>=</operator> <name>boost_amount</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_opus_rc_enc_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>is_boost</name></expr></argument>, <argument><expr><name>b_dynalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>is_boost</name> <operator>=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>b_dynalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_boost</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>boost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>quanta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tbits_8ths</name> <operator>-=</operator> <name>quanta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_dynalloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>boost</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dynalloc</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>dynalloc</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>opus_rc_tell_frac</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;=</operator> <name>tbits_8ths</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_opus_rc_enc_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>alloc_trim</name></name></expr></argument>, <argument><expr><name>ff_celt_model_alloc_trim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>alloc_trim</name></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_celt_model_alloc_trim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tbits_8ths</name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <call><name>opus_rc_tell_frac</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>anticollapse_needed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>tbits_8ths</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>anticollapse_needed</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tbits_8ths</name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>anticollapse_needed</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tbits_8ths</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip_bit</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tbits_8ths</name> <operator>-=</operator> <name>skip_bit</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>intensitystereo_bit</name> <operator>=</operator> <name><name>ff_celt_log2_frac</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>end_band</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intensitystereo_bit</name> <operator>&lt;=</operator> <name>tbits_8ths</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tbits_8ths</name> <operator>-=</operator> <name>intensitystereo_bit</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tbits_8ths</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dualstereo_bit</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tbits_8ths</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>intensitystereo_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>trim</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>alloc_trim</name></name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band</name> <init>= <expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>end_band</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><name>duration</name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>threshold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>duration</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trim_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>trim</name> <operator>*</operator> <operator>(</operator><name>band</name> <operator>&lt;&lt;</operator> <name>scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>trim_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>CELT_VECTORS</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>low</name> <operator>&lt;=</operator> <name>high</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>center</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bandbits</name> <operator>=</operator> <call><name>NORMC</name><argument_list>(<argument><expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_celt_static_alloc</name><index>[<expr><name>center</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bandbits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bandbits</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>bandbits</name> <operator>+</operator> <name><name>trim_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bandbits</name> <operator>+=</operator> <name><name>boost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bandbits</name> <operator>&gt;=</operator> <name><name>threshold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>bandbits</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>caps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bandbits</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;</operator> <name>tbits_8ths</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>center</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>center</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>low</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bits1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>NORMC</name><argument_list>(<argument><expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_celt_static_alloc</name><index>[<expr><name>low</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>high</name> <operator>&gt;=</operator> <name>CELT_VECTORS</name></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>caps</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>:

<expr><call><name>NORMC</name><argument_list>(<argument><expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_celt_static_alloc</name><index>[<expr><name>high</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bits1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>trim_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>trim_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>low</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>boost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>boost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>boost</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip_startband</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>bits1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>CELT_ALLOC_STEPS</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_ALLOC_STEPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>center</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bandbits</name> <operator>=</operator> <name><name>bits1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>center</name> <operator>*</operator> <name><name>bits2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>CELT_ALLOC_STEPS</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bandbits</name> <operator>&gt;=</operator> <name><name>threshold</name><index>[<expr><name>j</name></expr>]</index></name> <operator>||</operator> <name>done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>bandbits</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>caps</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bandbits</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;</operator> <name>tbits_8ths</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>center</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>center</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>done</name> <operator>=</operator> <name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bandbits</name> <operator>=</operator> <name><name>bits1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>low</name> <operator>*</operator> <name><name>bits2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>CELT_ALLOC_STEPS</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bandbits</name> <operator>&gt;=</operator> <name><name>threshold</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>done</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bandbits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bandbits</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then>

<expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>bandbits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>bandbits</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>caps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bandbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>bandbits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</init> <condition>;</condition> <incr><expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>allocation</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>skip_startband</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tbits_8ths</name> <operator>+=</operator> <name>skip_bit</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>tbits_8ths</name> <operator>-</operator> <name>total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bandbits</name> <operator>=</operator> <name>remaining</name> <operator>/</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>bandbits</name> <operator>*</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>allocation</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>bandbits</name> <operator>*</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>allocation</name> <operator>+=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>remaining</name> <operator>-</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>allocation</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>threshold</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>do_not_skip</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>do_not_skip</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>skip_band_floor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_opus_rc_enc_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>do_not_skip</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>do_not_skip</name> <operator>=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_not_skip</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>allocation</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total</name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intensitystereo_bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total</name> <operator>-=</operator> <name>intensitystereo_bit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>intensitystereo_bit</name> <operator>=</operator> <name><name>ff_celt_log2_frac</name><index>[<expr><name>j</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>intensitystereo_bit</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>allocation</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>intensitystereo_bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_opus_rc_enc_uint</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intensitystereo_bit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name> <operator>+</operator> <call><name>ff_opus_rc_dec_uint</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tbits_8ths</name> <operator>+=</operator> <name>dualstereo_bit</name></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dualstereo_bit</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_opus_rc_enc_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>tbits_8ths</name> <operator>-</operator> <name>total</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bandbits</name> <operator>=</operator> <name>remaining</name> <operator>/</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name></expr>]</index></name> <operator>-</operator> <name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>bandbits</name> <operator>*</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name></expr>]</index></name> <operator>-</operator> <name><name>ff_celt_freq_bands</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bits</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>remaining</name></expr></argument>, <argument><expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>bits</name> <operator>+</operator> <name>bandbits</name> <operator>*</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>coded_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_extra</name> <init>= <expr><name>extrabits</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>extrabits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dof</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fine_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>extrabits</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>caps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>extrabits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dof</name> <operator>=</operator> <name>N</name> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>N</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>dual_stereo</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>dof</name> <operator>*</operator> <operator>(</operator><name><name>ff_celt_log_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>temp</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>dof</name> <operator>*</operator> <name>CELT_FINE_OFFSET</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>dof</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>dof</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>temp</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>offset</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>dof</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>temp</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fine_bits</name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>offset</name> <operator>+</operator> <operator>(</operator><name>dof</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>dof</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>max_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>CELT_MAX_FINE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_bits</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>fine_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fine_priority</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>dof</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>extrabits</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>extrabits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fine_priority</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extrabits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fineextra</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>extrabits</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><name>CELT_MAX_FINE_BITS</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>fineextra</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fineextra</name> <operator>&lt;&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fine_priority</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>fineextra</name> <operator>&gt;=</operator> <name>extrabits</name> <operator>-</operator> <name>prev_extra</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>extrabits</name> <operator>-=</operator> <name>fineextra</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining</name></name> <operator>=</operator> <name>extrabits</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>fine_priority</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
