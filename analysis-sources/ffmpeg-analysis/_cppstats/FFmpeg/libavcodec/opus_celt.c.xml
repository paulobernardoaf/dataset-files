<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\opus_celt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_celt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opustab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_pvq.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_decode_coarse_energy</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>prev</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>alpha</name> <init>= <expr><name><name>ff_celt_alpha_coef</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>beta</name> <init>= <expr><name><name>ff_celt_beta_coef</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>ff_celt_coarse_energy_dist</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>&amp;&amp;</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <operator>(</operator><literal type="number">4915.0f</literal><operator>/</operator><literal type="number">32768.0f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>model</name> <operator>=</operator> <name><name>ff_celt_coarse_energy_dist</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>available</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>-</operator> <call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>available</name> <operator>&gt;=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ff_opus_rc_dec_laplace</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>model</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name><name>model</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>available</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_celt_model_energy_small</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>available</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>float</name><operator>)</operator><call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">9.0f</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>alpha</name> <operator>+</operator> <name><name>prev</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>beta</name> <operator>*</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_decode_fine_energy</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name>ff_opus_rc_get_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>q2</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">16384.0f</literal> <operator>-</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_decode_final_energy</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_left</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>-</operator> <call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>priority</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>priority</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>priority</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name> <operator>&amp;&amp;</operator> <name>bits_left</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>fine_priority</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>priority</name> <operator>||</operator> <name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>CELT_MAX_FINE_BITS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q2</name> <operator>=</operator> <call><name>ff_opus_rc_get_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>q2</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>fine_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">16384.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_left</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_decode_tf_changes</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tf_select</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tf_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tf_select_bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consumed</name></decl>, <decl><type ref="prev"/><name>bits</name> <init>= <expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tf_select_bit</name> <operator>=</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>consumed</name><operator>+</operator><name>bits</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>consumed</name><operator>+</operator><name>bits</name><operator>+</operator><name>tf_select_bit</name> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>^=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tf_changed</name> <operator>|=</operator> <name>diff</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>tf_change</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>tf_select_bit</name> <operator>&amp;&amp;</operator> <name><name>ff_celt_tf_select</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>tf_changed</name></expr>]</index></name> <operator>!=</operator>

<name><name>ff_celt_tf_select</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>tf_changed</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tf_select</name> <operator>=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>tf_change</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_celt_tf_select</name><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>]</index><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr>]</index><index>[<expr><name>tf_select</name></expr>]</index><index>[<expr><name><name>f</name><operator>-&gt;</operator><name>tf_change</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_denormalize</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>data</name> <operator>+</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>log_norm</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ff_celt_mean_energy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>norm</name> <init>= <expr><call><name>exp2f</name><argument_list>(<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>log_norm</name></expr></argument>, <argument><expr><literal type="number">32.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name>norm</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_postfilter_apply_transition</name><parameter_list>(<parameter><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>T0</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>pf_period_old</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>T1</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>pf_period</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>g00</name></decl>, <decl><type ref="prev"/><name>g01</name></decl>, <decl><type ref="prev"/><name>g02</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>g10</name></decl>, <decl><type ref="prev"/><name>g11</name></decl>, <decl><type ref="prev"/><name>g12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>x4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator>

<name><name>block</name><operator>-&gt;</operator><name>pf_gains_old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g00</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_gains_old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g01</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_gains_old</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g02</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_gains_old</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g10</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_gains</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g11</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_gains</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g12</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_gains</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>-</operator><name>T1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>-</operator><name>T1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>-</operator><name>T1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>-</operator><name>T1</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_OVERLAP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><name><name>ff_celt_window2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x0</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>T1</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>w</name><operator>)</operator> <operator>*</operator> <name>g00</name> <operator>*</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>T0</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>w</name><operator>)</operator> <operator>*</operator> <name>g01</name> <operator>*</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>T0</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>T0</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>w</name><operator>)</operator> <operator>*</operator> <name>g02</name> <operator>*</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>T0</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>-</operator> <name>T0</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator>

<name>w</name> <operator>*</operator> <name>g10</name> <operator>*</operator> <name>x2</name> <operator>+</operator>

<name>w</name> <operator>*</operator> <name>g11</name> <operator>*</operator> <operator>(</operator><name>x1</name> <operator>+</operator> <name>x3</name><operator>)</operator> <operator>+</operator>

<name>w</name> <operator>*</operator> <name>g12</name> <operator>*</operator> <operator>(</operator><name>x0</name> <operator>+</operator> <name>x4</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <name>x3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_postfilter</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_len</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>CELT_OVERLAP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>celt_postfilter_apply_transition</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>pf_period_old</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_period</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_old</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>pf_period</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_period_new</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_new</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>CELT_OVERLAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>celt_postfilter_apply_transition</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <name>CELT_OVERLAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>FLT_EPSILON</name> <operator>&amp;&amp;</operator> <name>filter_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>opusdsp</name><operator>.</operator><name>postfilter</name></name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>CELT_OVERLAP</name></expr></argument>,

<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_period</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>,

<argument><expr><name>filter_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>pf_period_old</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pf_period</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_old</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1024</literal> <operator>+</operator> <name>CELT_OVERLAP</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_postfilter</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>consumed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pf_gains_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pf_gains_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_gains_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pf_gains_new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>consumed</name> <operator>+</operator> <literal type="number">16</literal> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>has_postfilter</name> <init>= <expr><call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>has_postfilter</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tapset</name></decl>, <decl><type ref="prev"/><name>octave</name></decl>, <decl><type ref="prev"/><name>period</name></decl>;</decl_stmt>

<expr_stmt><expr><name>octave</name> <operator>=</operator> <call><name>ff_opus_rc_dec_uint</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>period</name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name>octave</name><operator>)</operator> <operator>+</operator> <call><name>ff_opus_rc_get_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>octave</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <literal type="number">0.09375f</literal> <operator>*</operator> <operator>(</operator><call><name>ff_opus_rc_get_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tapset</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name><operator>)</operator></expr> ?</condition><then>

<expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_celt_model_tapset</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>pf_period_new</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>CELT_POSTFILTER_MINPERIOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_new</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>gain</name> <operator>*</operator> <name><name>ff_celt_postfilter_taps</name><index>[<expr><name>tapset</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_new</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gain</name> <operator>*</operator> <name><name>ff_celt_postfilter_taps</name><index>[<expr><name>tapset</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_new</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>gain</name> <operator>*</operator> <name><name>ff_celt_postfilter_taps</name><index>[<expr><name>tapset</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>consumed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_anticollapse</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>renormalize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>xptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>prev</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>Ediff</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>thresh</name></decl>, <decl><type ref="prev"/><name>sqrt_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>thresh</name> <operator>=</operator> <call><name>exp2f</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal> <operator>-</operator> <literal type="number">0.125f</literal> <operator>*</operator> <name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sqrt_1</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xptr</name> <operator>=</operator> <name>X</name> <operator>+</operator> <operator>(</operator><name><name>ff_celt_freq_bands</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block1</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>prev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>prev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block1</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>prev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block1</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Ediff</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>prev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>prev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Ediff</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Ediff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>exp2f</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>Ediff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>*=</operator> <name>M_SQRT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>sqrt_1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>collapse_masks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xptr</name><index>[<expr><operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>celt_rng</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr> ?</condition><then> <expr><name>r</name></expr> </then><else>: <expr><operator>-</operator><name>r</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>renormalize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>renormalize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_renormalize_vector</name><argument_list>(<argument><expr><name>xptr</name></expr></argument>, <argument><expr><name><name>ff_celt_freq_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_celt_decode_frame</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start_band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>downmix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consumed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>imdct</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>channels</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of coded channels: %d\n"</literal></expr></argument>,

<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>start_band</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>start_band</name></expr></argument> &gt;</argument_list></name> <name>end_band</name> <operator>||</operator> <name>end_band</name> <operator>&gt;</operator> <name>CELT_MAX_BANDS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid start/end band: %d %d\n"</literal></expr></argument>,

<argument><expr><name>start_band</name></expr></argument>, <argument><expr><name>end_band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>silence</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>anticollapse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>flushed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>start_band</name></name> <operator>=</operator> <name>start_band</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>end_band</name></name> <operator>=</operator> <name>end_band</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>rb</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>frame_size</name> <operator>/</operator> <name>CELT_SHORT_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>CELT_MAX_LOG_BLOCKS</name> <operator>||</operator>

<name>frame_size</name> <operator>!=</operator> <name>CELT_SHORT_BLOCKSIZE</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid CELT frame size: %d\n"</literal></expr></argument>,

<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>output_channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>output_channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collapse_masks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>collapse_masks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>silence</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>consumed</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>silence</name></name> <operator>=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>silence</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>+=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name> <operator>-</operator> <call><name>opus_rc_tell</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <call><name>parse_postfilter</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>consumed</name><operator>+</operator><literal type="number">3</literal> <operator>&lt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>framebits</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name> <operator>=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <name>frame_size</name> <operator>/</operator> <name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>imdct</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>imdct</name><index>[<expr><ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>energy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>celt_decode_coarse_energy</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_decode_tf_changes</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celt_bitalloc</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_decode_fine_energy</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celt_quant_bands</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>anticollapse_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>anticollapse</name></name> <operator>=</operator> <call><name>ff_opus_rc_get_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>celt_decode_final_energy</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>anticollapse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>process_anticollapse</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>celt_denormalize</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>output_channels</name></name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>dsp</name><operator>-&gt;</operator><name>vector_fmac_scalar</name></name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>downmix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>output_channels</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><name>frame_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>silence</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>CELT_ENERGY_SILENCE</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>output_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>f</name><operator>-&gt;</operator><name>blocksize</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>imdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>imdct</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>CELT_OVERLAP</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeffs</name> <operator>+</operator> <name>j</name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>CELT_OVERLAP</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name>ff_celt_window</name></expr></argument>, <argument><expr><name>CELT_OVERLAP</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>downmix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>f</name><operator>-&gt;</operator><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>celt_postfilter</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>emph_coeff</name></name> <operator>=</operator> <call><name><name>f</name><operator>-&gt;</operator><name>opusdsp</name><operator>.</operator><name>deemphasis</name></name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1024</literal> <operator>-</operator> <name>frame_size</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>block</name><operator>-&gt;</operator><name>emph_coeff</name></name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>energy</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>energy</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>energy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>transient</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>f</name><operator>-&gt;</operator><name>start_band</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>CELT_ENERGY_SILENCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>end_band</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>CELT_ENERGY_SILENCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_celt_flush</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>flushed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CeltBlock</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CELT_MAX_BANDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>prev_energy</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>CELT_ENERGY_SILENCE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>energy</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_old</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_old</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_new</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>pf_gains_new</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>emph_coeff</name></name> <operator>=</operator> <literal type="number">0.0f</literal> <operator>/</operator> <name>CELT_EMPH_COEFF</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>flushed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_celt_free</name><parameter_list>(<parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>frm</name> <init>= <expr><operator>*</operator><name>f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>frm</name><operator>-&gt;</operator><name>imdct</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mdct15_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frm</name><operator>-&gt;</operator><name>imdct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_celt_pvq_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frm</name><operator>-&gt;</operator><name>pvq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frm</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_celt_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_channels</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>apply_phase_inv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>frm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>output_channels</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>output_channels</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of output channels: %d\n"</literal></expr></argument>,

<argument><expr><name>output_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frm</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>frm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frm</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frm</name><operator>-&gt;</operator><name>output_channels</name></name> <operator>=</operator> <name>output_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frm</name><operator>-&gt;</operator><name>apply_phase_inv</name></name> <operator>=</operator> <name>apply_phase_inv</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>frm</name><operator>-&gt;</operator><name>imdct</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct15_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frm</name><operator>-&gt;</operator><name>imdct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">32768</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_celt_pvq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frm</name><operator>-&gt;</operator><name>pvq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frm</name><operator>-&gt;</operator><name>dsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frm</name><operator>-&gt;</operator><name>dsp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_opus_dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>frm</name><operator>-&gt;</operator><name>opusdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celt_flush</name><argument_list>(<argument><expr><name>frm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>f</name> <operator>=</operator> <name>frm</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_celt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
