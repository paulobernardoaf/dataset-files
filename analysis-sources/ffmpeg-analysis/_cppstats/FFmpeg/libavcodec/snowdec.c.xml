<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\snowdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snow_dwt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snow.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rangecoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>predict_slice_buffered</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>old_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_y</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_w</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_h</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_size</name> <init>= <expr><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_w</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_h</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name><name>ff_obmc_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr>]</index></name></expr> </then><else>: <expr><name><name>ff_obmc_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>obmc_stride</name><init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>block_size</name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><literal type="number">2</literal><operator>*</operator><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_stride</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst8</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><literal type="number">512</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mb_y</name><operator>==</operator><name>mb_h</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>add</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>block_h</name><operator>*</operator><name>mb_y</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>block_h</name><operator>*</operator><operator>(</operator><name>mb_y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>line</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>= <expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">128</literal><operator>&lt;&lt;</operator><name>FRAC_BITS</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>FRAC_BITS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>v</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name><operator>=</operator> <operator>~</operator><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst8</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>ref_stride</name></expr>]</index></name><operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>block_h</name><operator>*</operator><name>mb_y</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>block_h</name><operator>*</operator><operator>(</operator><name>mb_y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>line</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-=</operator> <literal type="number">128</literal> <operator>&lt;&lt;</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>mb_x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name><operator>&lt;=</operator><name>mb_w</name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>add_yblock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>old_buffer</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>, <argument><expr><name>obmc</name></expr></argument>,

<argument><expr><name>block_w</name><operator>*</operator><name>mb_x</name> <operator>-</operator> <name>block_w</name><operator>/</operator><literal type="number">2</literal></expr></argument>,

<argument><expr><name>block_h</name><operator>*</operator><name>mb_y</name> <operator>-</operator> <name>block_h</name><operator>/</operator><literal type="number">2</literal></expr></argument>,

<argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>,

<argument><expr><name>mb_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avmv</name></name> <operator>&amp;&amp;</operator> <name>mb_y</name> <operator>&lt;</operator> <name>mb_h</name> <operator>&amp;&amp;</operator> <name>plane_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>mb_x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_x</name><operator>&lt;</operator><name>mb_w</name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>AVMotionVector</name> <modifier>*</modifier></type><name>avmv</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avmv</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avmv_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_stride</name><init>= <expr><name>b_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockNode</name> <modifier>*</modifier></type><name>bn</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>mb_x</name> <operator>+</operator> <name>mb_y</name><operator>*</operator><name>b_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bn</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avmv_index</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>block_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>block_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>dst_x</name></name> <operator>=</operator> <name>block_w</name><operator>*</operator><name>mb_x</name> <operator>-</operator> <name>block_w</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>dst_y</name></name> <operator>=</operator> <name>block_h</name><operator>*</operator><name>mb_y</name> <operator>-</operator> <name>block_h</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>motion_scale</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>motion_x</name></name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>mx</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>motion_y</name></name> <operator>=</operator> <name><name>bn</name><operator>-&gt;</operator><name>my</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>src_x</name></name> <operator>=</operator> <name><name>avmv</name><operator>-&gt;</operator><name>dst_x</name></name> <operator>+</operator> <name><name>avmv</name><operator>-&gt;</operator><name>motion_x</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>src_y</name></name> <operator>=</operator> <name><name>avmv</name><operator>-&gt;</operator><name>dst_y</name></name> <operator>+</operator> <name><name>avmv</name><operator>-&gt;</operator><name>motion_y</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>source</name></name><operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name><name>bn</name><operator>-&gt;</operator><name>ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avmv</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_subband_slice_buffered</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>save_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qlog</name><init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>qlog</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>QROOT</name><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qmul</name><init>= <expr><name><name>ff_qexp</name><index>[<expr><name>qlog</name><operator>&amp;</operator><operator>(</operator><name>QROOT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>&lt;&lt;</operator><operator>(</operator><name>qlog</name><operator>&gt;&gt;</operator><name>QSHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qadd</name><init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name><operator>*</operator><name>qmul</name><operator>)</operator><operator>&gt;&gt;</operator><name>QBIAS_SHIFT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>==</operator> <name>LOSSLESS_QLOG</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>qadd</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>qmul</name><operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>QEXPSHIFT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_y</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_index</name> <operator>=</operator> <name><name>save_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>start_y</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>line</name> <init>= <expr><call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>stride_line</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>buf_y_offset</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>buf_x_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x_coeff</name><index>[<expr><name>new_index</name></expr>]</index></name><operator>.</operator><name>coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x_coeff</name><index>[<expr><name>new_index</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

<while>while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>t</name><init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>qmul</name> <operator>+</operator> <name>qadd</name><operator>)</operator><operator>&gt;&gt;</operator><name>QEXPSHIFT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>u</name><init>= <expr><operator>-</operator><operator>(</operator><name>v</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t</name><operator>^</operator><name>u</name><operator>)</operator> <operator>-</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x_coeff</name><index>[<expr><name>new_index</name></expr>]</index></name><operator>.</operator><name>coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x_coeff</name><index>[<expr><name>new_index</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><name><name>save_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>new_index</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_q_branch</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>rem_depth</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name> <operator>-</operator> <name>level</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name><init>= <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>w</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>rem_depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trx</name><init>= <expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><name>rem_depth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><ternary><condition><expr><name>y</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_block</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>tl</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>tr</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>&amp;&amp;</operator> <name>trx</name><operator>&lt;</operator><name>w</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>level</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>index</name><operator>-</operator><name>w</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>rem_depth</name><operator>)</operator></expr>]</index></name></expr> </then><else>: <expr><name>tl</name></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>s_context</name><init>= <expr><literal type="number">2</literal><operator>*</operator><name><name>left</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>top</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <name><name>tl</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <name><name>tr</name><operator>-&gt;</operator><name>level</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>set_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>null_block</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>null_block</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>null_block</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>null_block</name><operator>.</operator><name>mx</name></name></expr></argument>, <argument><expr><name><name>null_block</name><operator>.</operator><name>my</name></name></expr></argument>, <argument><expr><name><name>null_block</name><operator>.</operator><name>ref</name></name></expr></argument>, <argument><expr><name>BLOCK_INTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name><operator>==</operator><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name> <operator>||</operator> <call><name>get_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>s_context</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name><init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cr</name><init>= <expr><name><name>left</name><operator>-&gt;</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>left</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>top</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>mx</name></name> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>mx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>mx</name></name> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>mx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my_context</name><init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>my</name></name> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>my</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>tr</name><operator>-&gt;</operator><name>my</name></name> <operator>-</operator> <name><name>top</name><operator>-&gt;</operator><name>my</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name><operator>=</operator> <ternary><condition><expr><call><name>get_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name><name>left</name><operator>-&gt;</operator><name>type</name></name> <operator>+</operator> <name><name>top</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>BLOCK_INTRA</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ld</name></decl>, <decl><type ref="prev"/><name>cbd</name></decl>, <decl><type ref="prev"/><name>crd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pred_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ld</name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ld</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">255</literal> <operator>||</operator> <name>ld</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>ld</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cbd</name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crd</name> <operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cbd</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">255</literal> <operator>||</operator> <name>cbd</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal> <operator>||</operator> <name><name>crd</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">255</literal> <operator>||</operator> <name>crd</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>+=</operator> <name>cbd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cr</name> <operator>+=</operator> <name>crd</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ref</name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><name>ref_context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid ref\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pred_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name><operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><operator>(</operator><name>mx_context</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><operator>!</operator><operator>!</operator><name>ref</name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name><operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block_state</name><index>[<expr><literal type="number">128</literal> <operator>+</operator> <literal type="number">32</literal><operator>*</operator><operator>(</operator><name>my_context</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><operator>!</operator><operator>!</operator><name>ref</name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>level</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dequantize_slice_buffered</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_y</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qlog</name><init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>qlog</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>QROOT</name><operator>*</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qmul</name><init>= <expr><name><name>ff_qexp</name><index>[<expr><name>qlog</name><operator>&amp;</operator><operator>(</operator><name>QROOT</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>&lt;&lt;</operator><operator>(</operator><name>qlog</name><operator>&gt;&gt;</operator><name>QSHIFT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qadd</name><init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name><operator>*</operator><name>qmul</name><operator>)</operator><operator>&gt;&gt;</operator><name>QBIAS_SHIFT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>==</operator> <name>LOSSLESS_QLOG</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>start_y</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>end_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>line</name> <init>= <expr><call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><name>y</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>stride_line</name></name><operator>)</operator> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>buf_y_offset</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>buf_x_offset</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>-</operator><name>i</name><operator>*</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>qmul</name> <operator>+</operator> <name>qadd</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>QEXPSHIFT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator> <name>i</name><operator>*</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>qmul</name> <operator>+</operator> <name>qadd</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><name>QEXPSHIFT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>correlate_slice_buffered</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_median</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_y</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name><init>= <expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>line</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_y</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>start_y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>stride_line</name></name><operator>)</operator> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>buf_y_offset</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>buf_x_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><name>start_y</name></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>end_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><name>y</name> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>stride_line</name></name><operator>)</operator> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>buf_y_offset</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>buf_x_offset</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>use_median</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name> <operator>&amp;&amp;</operator> <name>x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>w</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>prev</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>prev</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>prev</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>prev</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>prev</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>line</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>prev</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_qlogs</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plane_index</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>q</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name><operator>.</operator><name>qlog</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>orientation</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>q</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>qlog</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>q</name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name><operator>.</operator><name>qlog</name><operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_S</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>check</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>tmp= get_symbol(&amp;s-&gt;c, s-&gt;header_state, 0);if(!(check)){av_log(s-&gt;avctx, AV_LOG_ERROR, "Error " #dst " is %d\n", tmp);return AVERROR_INVALIDDATA;}dst= tmp;</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_header</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>kstate</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>kstate</name></expr></argument>, <argument><expr><name>MID_STATE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name><operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>kstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>always_reset</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_snow_reset_contexts</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>qlog</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>qbias</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name><operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<macro><name>GET_S</name><argument_list>(<argument>s-&gt;version</argument>, <argument>tmp &lt;= <literal type="number">0U</literal></argument>)</argument_list></macro>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>always_reset</name></name><operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temporal_decomposition_type</name></name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>temporal_decomposition_count</name></name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>GET_S</name><argument_list>(<argument>s-&gt;spatial_decomposition_count</argument>, <argument><literal type="number">0</literal> &lt; tmp &amp;&amp; tmp &lt;= MAX_DECOMPOSITIONS</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>colorspace_type</name></name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>colorspace_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>colorspace_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported color subsample mode %d %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported color space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_scalability</name></name><operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>GET_S</name><argument_list>(<argument>s-&gt;max_ref_frames</argument>, <argument>tmp &lt; (unsigned)MAX_REF_FRAMES</argument>)</argument_list></macro>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_qlogs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>get_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name><operator>&lt;</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>htaps</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>diag_mc</name></name><operator>=</operator> <call><name>get_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>htaps</name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>htaps</name> <operator>&gt;=</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>htaps</name> <operator>=</operator> <name>htaps</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>htaps</name></name><operator>=</operator> <name>htaps</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <name>htaps</name><operator>/</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>-</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">32</literal><operator>-</operator><name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>diag_mc</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>diag_mc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>htaps</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>htaps</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>hcoeff</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>hcoeff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>hcoeff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>get_rac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<macro><name>GET_S</name><argument_list>(<argument>s-&gt;spatial_decomposition_count</argument>, <argument><literal type="number">0</literal> &lt; tmp &amp;&amp; tmp &lt;= MAX_DECOMPOSITIONS</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>decode_qlogs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name><operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"spatial_decomposition_type %d not supported\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator> <name>width</name></name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"spatial_decomposition_count %d too large for size\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">65536</literal><operator>-</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Width %d is too large\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_symbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name> <operator>&gt;</operator> <literal type="number">256U</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"block_max_depth= %d is too large\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"qbias %d is too large\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_snow_common_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_blocks</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>bytestream_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_q_branch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>, <decl><type ref="prev"/><name>plane_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_init_range_decoder</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_build_rac_states</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0.05</literal><operator>*</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">256</literal><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>pict_type</name></name><operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>=</operator><call><name>ff_snow_common_init_after_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_slice_buffer_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ff_slice_buffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>,

<argument><expr><operator>(</operator><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fast_mc</name></name><operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>diag_mc</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>htaps</name></name><operator>==</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">40</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">10</literal>

<operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_snow_alloc_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>ff_snow_frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><name>FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"keyframe:%d qlog:%d qbias: %d mvscale: %d "</literal>

<literal type="string">"decomposition_type:%d decomposition_count:%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qbias</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avmv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>export_side_data</name></name> <operator>&amp;</operator> <name>AV_CODEC_EXPORT_DATA_MVS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avmv</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>b_height</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVMotionVector</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avmv_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>decode_blocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>decode_state</name><index>[<expr><name>MAX_DECOMPOSITIONS</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><literal type="number">2048</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_dwt_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWTELEM</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>w</name><operator>*</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>predict_plane</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_index</name></expr>]</index><index>[<expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_index</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unpack_coeffs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_h</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_size</name> <init>= <expr><name>MB_SIZE</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_h</name> <init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><name>block_size</name><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr> </then><else>: <expr><name>block_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWTCompose</name></type> <name><name>cs</name><index>[<expr><name>MAX_DECOMPOSITIONS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yd</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>yq</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_spatial_idwt_buffered_init</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>mb_y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>mb_y</name><operator>&lt;=</operator><name>mb_h</name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slice_starty</name> <init>= <expr><name>block_h</name><operator>*</operator><name>mb_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_h</name> <init>= <expr><name>block_h</name><operator>*</operator><operator>(</operator><name>mb_y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><literal type="number">512</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>slice_starty</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>slice_starty</name> <operator>-</operator> <operator>(</operator><name>block_h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_h</name> <operator>-=</operator> <operator>(</operator><name>block_h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>our_mb_start</name> <init>= <expr><name>mb_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>our_mb_end</name> <init>= <expr><operator>(</operator><name>mb_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>extra</name><init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>start_y</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>mb_y</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>block_h</name> <operator>*</operator> <name>our_mb_start</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>-</operator> <name>level</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>-</operator> <name>level</name> <operator>+</operator> <name>extra</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>block_h</name> <operator>*</operator> <name>our_mb_end</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>-</operator> <name>level</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>-</operator> <name>level</name> <operator>+</operator> <name>extra</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><literal type="number">512</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>start_y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>start_y</name> <operator>-</operator> <operator>(</operator><name>block_h</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>-</operator> <name>level</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>end_y</name> <operator>-</operator> <operator>(</operator><name>block_h</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>-</operator> <name>level</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>start_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>end_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_y</name> <operator>!=</operator> <name>end_y</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>orientation</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type> <name>correlate_band</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>correlate_end_y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>end_y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>correlate_start_y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>start_y</name></expr> ?</condition><then> <expr><name>start_y</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_subband_slice_buffered</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>correlate_band</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>correlate_start_y</name></expr></argument>, <argument><expr><name>correlate_end_y</name></expr></argument>, <argument><expr><name><name>decode_state</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>correlate_slice_buffered</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>correlate_band</name></expr></argument>, <argument><expr><name><name>correlate_band</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>correlate_band</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>correlate_start_y</name></expr></argument>, <argument><expr><name>correlate_end_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dequantize_slice_buffered</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>correlate_band</name></expr></argument>, <argument><expr><name><name>correlate_band</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>correlate_band</name><operator>-&gt;</operator><name>stride</name></name></expr></argument>, <argument><expr><name>start_y</name></expr></argument>, <argument><expr><name>end_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_subband_slice_buffered</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>start_y</name></expr></argument>, <argument><expr><name>end_y</name></expr></argument>, <argument><expr><name><name>decode_state</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>yd</name><operator>&lt;</operator><name>slice_h</name></expr>;</condition> <incr><expr><name>yd</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>ff_spatial_idwt_buffered_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dwt</name></name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_idwt_buffer</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name></expr></argument>, <argument><expr><name>yd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qlog</name></name> <operator>==</operator> <name>LOSSLESS_QLOG</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init>;</init> <condition><expr><name>yq</name><operator>&lt;</operator><name>slice_h</name> <operator>&amp;&amp;</operator> <name>yq</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>yq</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>line</name> <init>= <expr><call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>yq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>FRAC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>predict_slice_buffered</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><name>plane_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>slice_starty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>slice_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_slice_buffer_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_slice_buffer_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_snow_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name><operator>&amp;</operator><literal type="number">2048</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avmv_index</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name>picture</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_MOTION_VECTORS</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avmv_index</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVMotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avmv</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avmv_index</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AVMotionVector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>avmv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_read</name><operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>bytestream_start</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>bytes_read</name> <operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error at end of frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>bytes_read</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_slice_buffer_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_snow_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_snow_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"snow"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Snow"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SNOW</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SnowContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr> ,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
