<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dvaudiodec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dvaudio.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DVAudioContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_12bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_pal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>shuffle</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DVAudioContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVAudioContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <literal type="number">0x0215</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">7200</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <literal type="number">0x0216</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">8640</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">7200</literal> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">8640</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_pal</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name> <operator>==</operator> <literal type="number">8640</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_12bit</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>==</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>shuffle</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>a</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_pal</name></name></expr> ?</condition><then> <expr><literal type="number">18</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>shuffle</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">80</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">21</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>/</operator> <name>a</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <name>b</name><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>is_12bit</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>dv_audio_12to16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>sample</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sample</name> <operator>&lt;</operator> <literal type="number">0x800</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sample</name></expr> </then><else>: <expr><name>sample</name> <operator>|</operator> <literal type="number">0xf000</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>sample</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shift</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x2</literal> <operator>||</operator> <name>shift</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xd</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0x8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>sample</name> <operator>-</operator> <operator>(</operator><literal type="number">256</literal> <operator>*</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0xe</literal> <operator>-</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sample</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">256</literal> <operator>*</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVAudioContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <call><name>dv_get_audio_sample_count</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">244</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>is_pal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>shuffle</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>is_12bit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>dv_audio_12to16</name><argument_list>(<argument><expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>dv_audio_12to16</name><argument_list>(<argument><expr><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>is_pal</name></name></expr> ?</condition><then> <expr><literal type="number">4320</literal></expr> </then><else>: <expr><literal type="number">3600</literal></expr></else></ternary></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dvaudio_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dvaudio"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Ulead DV Audio"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DVAUDIO</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVAudioContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
