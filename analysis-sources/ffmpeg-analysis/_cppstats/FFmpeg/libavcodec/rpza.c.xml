<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\rpza.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>RpzaContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

}</block></struct></type> <name>RpzaContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_BLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (total_blocks &lt; 1) { av_log(s-&gt;avctx, AV_LOG_ERROR, "Block counter just went negative (this should not happen)\n"); return AVERROR_INVALIDDATA; }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADVANCE_BLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ pixel_ptr += 4; if (pixel_ptr &gt;= width) { pixel_ptr = 0; row_ptr += stride * 4; } total_blocks--; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rpza_decode_stream</name><parameter_list>(<parameter><decl><type><name>RpzaContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name></decl>, <decl><type ref="prev"/><name>row_inc</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>colorA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>colorB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>color4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>ta</name></decl>, <decl><type ref="prev"/><name>tb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_x</name></decl>, <decl><type ref="prev"/><name>pixel_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_blocks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xe1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"First chunk byte is 0x%02x instead of 0xe1\n"</literal></expr></argument>,

<argument><expr><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>!=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"MOV chunk size %d != encoded chunk size %d\n"</literal></expr></argument>,

<argument><expr><name>chunk_size</name></expr></argument>,

<argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_blocks</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>total_blocks</name> <operator>/</operator> <literal type="number">32</literal> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stride</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>row_inc</name> <operator>=</operator> <name>stride</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>opcode</name> <init>= <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n_blocks</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>colorA</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>n_blocks</name></expr></argument>, <argument><expr><name>total_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name> <operator>&amp;</operator> <literal type="number">0xe0</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0xa0</literal></expr>:</case>

<expr_stmt><expr><name>colorA</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name></expr>]</index></name> <operator>=</operator> <name>colorA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0xc0</literal></expr>:</case>

<expr_stmt><expr><name>colorA</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>

<expr_stmt><expr><name>colorB</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>colorB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>colorA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ta</name> <operator>=</operator> <operator>(</operator><name>colorA</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <operator>(</operator><name>colorB</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">11</literal> <operator>*</operator> <name>ta</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <name>tb</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">21</literal> <operator>*</operator> <name>ta</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <name>tb</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ta</name> <operator>=</operator> <operator>(</operator><name>colorA</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <operator>(</operator><name>colorB</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">11</literal> <operator>*</operator> <name>ta</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <name>tb</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">21</literal> <operator>*</operator> <name>ta</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <name>tb</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ta</name> <operator>=</operator> <name>colorA</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <name>colorB</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">11</literal> <operator>*</operator> <name>ta</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <name>tb</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><literal type="number">21</literal> <operator>*</operator> <name>ta</name> <operator>+</operator> <literal type="number">11</literal> <operator>*</operator> <name>tb</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>n_blocks</name> <operator>*</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>index</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>index</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>pixel_x</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name></expr>]</index></name> <operator>=</operator> <name><name>color4</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0x00</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pixel_y</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pixel_x</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>colorA</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name></expr>]</index></name> <operator>=</operator> <name>colorA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown opcode %d in rpza chunk."</literal>

<literal type="string">" Skip remaining %d bytes of chunk data.\n"</literal></expr></argument>, <argument><expr><name>opcode</name></expr></argument>,

<argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch> 

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>rpza_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RpzaContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB555</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rpza_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RpzaContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rpza_decode_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>rpza_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RpzaContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_rpza_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rpza"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"QuickTime video (RPZA)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_RPZA</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RpzaContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>rpza_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>rpza_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>rpza_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
