<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\fft.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FFT_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FFT_FIXED_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FIXED_32</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FLOAT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avfft.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<typedef>typedef <type><name>float</name></type> <name>FFTDouble</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FFT_FIXED_32</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q31</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)((x)*2147483648.0 + 0.5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_fixed_32</cpp:value></cpp:define>

<typedef>typedef <type><name>int32_t</name></type> <name>FFTSample</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_fixed</cpp:value></cpp:define>

<typedef>typedef <type><name>int16_t</name></type> <name>FFTSample</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <name>FFTComplex</name> <block>{

<decl_stmt><decl><type><name>FFTSample</name></type> <name>re</name></decl>, <name>im</name>;</decl_stmt>

}</block></struct></type> <name>FFTComplex</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>FFTDouble</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>FFTContext</name></name></type> <name>FFTContext</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><struct>struct <name>FFTDComplex</name> <block>{

<decl_stmt><decl><type><name>FFTDouble</name></type> <name>re</name></decl>, <name>im</name>;</decl_stmt>

}</block></struct></type> <name>FFTDComplex</name>;</typedef>

<enum>enum <name>fft_permutation_type</name> <block>{

<decl><name>FF_FFT_PERM_DEFAULT</name></decl>,

<decl><name>FF_FFT_PERM_SWAP_LSBS</name></decl>,

<decl><name>FF_FFT_PERM_AVX</name></decl>,

}</block>;</enum>

<enum>enum <name>mdct_permutation_type</name> <block>{

<decl><name>FF_MDCT_PERM_NONE</name></decl>,

<decl><name>FF_MDCT_PERM_INTERLEAVE</name></decl>,

}</block>;</enum>

<struct>struct <name>FFTContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>nbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inverse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>revtab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>tmp_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mdct_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mdct_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>tcos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>tsin</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fft_permute</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFTContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fft_calc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFTContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>imdct_calc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFTContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>imdct_half</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFTContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mdct_calc</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFTContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>mdct_calcw</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFTContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FFTDouble</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FFTSample</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>enum</name> <name>fft_permutation_type</name></name></type> <name>fft_permutation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>mdct_permutation_type</name></name></type> <name>mdct_permutation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>revtab32</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HARDCODED_TABLES</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COSTABLE_CONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COSTABLE_CONST</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COSTABLE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COSTABLE_CONST DECLARE_ALIGNED(32, FFTSample, FFT_NAME(ff_cos_##size))[size/2]</cpp:value></cpp:define>

<extern>extern COSTABLE(16</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(32</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(64</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(128</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(256</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(512</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(1024</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(2048</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(4096</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(8192</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(16384</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(32768</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(65536</extern>)<empty_stmt>;</empty_stmt>

<extern>extern COSTABLE(131072</extern>)<empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>COSTABLE_CONST</name> <name>FFTSample</name><modifier>*</modifier> <specifier>const</specifier></type> <name>FFT_NAME</name><argument_list>(<argument><expr><name>ff_cos_tabs</name></expr></argument>)</argument_list>[18]</decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_init_ff_cos_tabs</name></cpp:macro> <cpp:value>FFT_NAME(ff_init_ff_cos_tabs)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>ff_init_ff_cos_tabs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_fft_init</name></cpp:macro> <cpp:value>FFT_NAME(ff_fft_init)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_fft_end</name></cpp:macro> <cpp:value>FFT_NAME(ff_fft_end)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>ff_fft_init</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_fft_init_aarch64</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_fft_init_x86</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_fft_init_arm</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_fft_init_mips</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_fft_init_ppc</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_fft_fixed_init_arm</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_fft_end</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mdct_init</name></cpp:macro> <cpp:value>FFT_NAME(ff_mdct_init)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_mdct_end</name></cpp:macro> <cpp:value>FFT_NAME(ff_mdct_end)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>ff_mdct_init</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scale</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mdct_end</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
