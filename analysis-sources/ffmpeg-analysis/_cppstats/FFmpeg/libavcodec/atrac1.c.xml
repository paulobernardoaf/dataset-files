<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\atrac1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac1data.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT1_MAX_BFU</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT1_SU_SIZE</name></cpp:macro> <cpp:value>212</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT1_SU_SAMPLES</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT1_FRAME_SIZE</name></cpp:macro> <cpp:value>AT1_SU_SIZE * 2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT1_SU_MAX_BITS</name></cpp:macro> <cpp:value>AT1_SU_SIZE * 8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT1_MAX_CHANNELS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT1_QMF_BANDS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_LOW_BAND</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_MID_BAND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDX_HIGH_BAND</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>AT1SUCtx</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>log2_block_count</name><index>[<expr><name>AT1_QMF_BANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_bfus</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name><name>spectrum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>spec1</name></expr></argument>)</argument_list></call><index>[<expr><name>AT1_SU_SAMPLES</name></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>spec2</name></expr></argument>)</argument_list></call><index>[<expr><name>AT1_SU_SAMPLES</name></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>fst_qmf_delay</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">46</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>snd_qmf_delay</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">46</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>last_qmf_delay</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">256</literal><operator>+</operator><literal type="number">39</literal></expr>]</index></expr>;</expr_stmt> 

}</block></struct></type> <name>AT1SUCtx</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AT1Ctx</name> <block>{

<decl_stmt><decl><type><name>AT1SUCtx</name></type> <name><name>SUs</name><index>[<expr><name>AT1_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call><index>[<expr><name>AT1_SU_SAMPLES</name></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">256</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">256</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">512</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name><modifier>*</modifier></type> <name><name>bands</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name><name>mdct_ctx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

}</block></struct></type> <name>AT1Ctx</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>samples_per_band</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">128</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">256</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mdct_long_nbits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>at1_imdct</name><parameter_list>(<parameter><decl><type><name>AT1Ctx</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>rev_spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FFTContext</name><modifier>*</modifier></type> <name>mdct_context</name> <init>= <expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><name>nbits</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <operator>(</operator><name>nbits</name> <operator>&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>transf_size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rev_spec</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>transf_size</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>spec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>spec</name><index>[<expr><name>transf_size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>mdct_context</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct_context</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>at1_imdct_block</name><parameter_list>(<parameter><decl><type><name>AT1SUCtx</name><modifier>*</modifier></type> <name>su</name></decl></parameter>, <parameter><decl><type><name>AT1Ctx</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>band_num</name></decl>, <decl><type ref="prev"/><name>band_samples</name></decl>, <decl><type ref="prev"/><name>log2_block_count</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>, <decl><type ref="prev"/><name>num_blocks</name></decl>, <decl><type ref="prev"/><name>block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start_pos</name></decl>, <decl><type ref="prev"/><name>ref_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>band_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band_num</name> <operator>&lt;</operator> <name>AT1_QMF_BANDS</name></expr>;</condition> <incr><expr><name>band_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>prev_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>band_samples</name> <operator>=</operator> <name><name>samples_per_band</name><index>[<expr><name>band_num</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>log2_block_count</name> <operator>=</operator> <name><name>su</name><operator>-&gt;</operator><name>log2_block_count</name><index>[<expr><name>band_num</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_block_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_blocks</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <name>band_samples</name> <operator>&gt;&gt;</operator> <name>log2_block_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name><name>mdct_long_nbits</name><index>[<expr><name>band_num</name></expr>]</index></name> <operator>-</operator> <name>log2_block_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>!=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>nbits</name> <operator>!=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>nbits</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>block_size</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>su</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ref_pos</name> <operator>+</operator> <name>band_samples</name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_blocks</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>at1_imdct</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>spec</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>su</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref_pos</name> <operator>+</operator> <name>start_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>band_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>bands</name><index>[<expr><name>band_num</name></expr>]</index><index>[<expr><name>start_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>prev_buf</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>su</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref_pos</name> <operator>+</operator> <name>start_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>ff_sine_32</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_buf</name> <operator>=</operator> <operator>&amp;</operator><name><name>su</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref_pos</name><operator>+</operator><name>start_pos</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>block_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>num_blocks</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>bands</name><index>[<expr><name>band_num</name></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>su</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref_pos</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">240</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ref_pos</name> <operator>+=</operator> <name>band_samples</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name><operator>*</operator></expr></argument>, <argument><expr><name><name>su</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>su</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>at1_parse_bsm</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>log2_block_cnt</name><index>[<expr><name>AT1_QMF_BANDS</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log2_block_count_tmp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>log2_block_count_tmp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log2_block_count_tmp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>log2_block_cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name>log2_block_count_tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>log2_block_count_tmp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log2_block_count_tmp</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>log2_block_count_tmp</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>log2_block_cnt</name><index>[<expr><name>IDX_HIGH_BAND</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <name>log2_block_count_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>at1_unpack_dequant</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>, <parameter><decl><type><name>AT1SUCtx</name><modifier>*</modifier></type> <name>su</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name><name>spec</name><index>[<expr><name>AT1_SU_SAMPLES</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits_used</name></decl>, <decl><type ref="prev"/><name>band_num</name></decl>, <decl><type ref="prev"/><name>bfu_num</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idwls</name><index>[<expr><name>AT1_MAX_BFU</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idsfs</name><index>[<expr><name>AT1_MAX_BFU</name></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>su</name><operator>-&gt;</operator><name>num_bfus</name></name> <operator>=</operator> <name><name>bfu_amount_tab1</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_used</name> <operator>=</operator> <name><name>su</name><operator>-&gt;</operator><name>num_bfus</name></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator>

<name><name>bfu_amount_tab2</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name><name>bfu_amount_tab3</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>su</name><operator>-&gt;</operator><name>num_bfus</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>idwls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>su</name><operator>-&gt;</operator><name>num_bfus</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>idsfs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>su</name><operator>-&gt;</operator><name>num_bfus</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AT1_MAX_BFU</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>idwls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>idsfs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>band_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band_num</name> <operator>&lt;</operator> <name>AT1_QMF_BANDS</name></expr>;</condition> <incr><expr><name>band_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>bfu_num</name> <operator>=</operator> <name><name>bfu_bands_t</name><index>[<expr><name>band_num</name></expr>]</index></name></expr>;</init> <condition><expr><name>bfu_num</name> <operator>&lt;</operator> <name><name>bfu_bands_t</name><index>[<expr><name>band_num</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>bfu_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_specs</name> <init>= <expr><name><name>specs_per_bfu</name><index>[<expr><name>bfu_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>word_len</name> <init>= <expr><operator>!</operator><operator>!</operator><name><name>idwls</name><index>[<expr><name>bfu_num</name></expr>]</index></name> <operator>+</operator> <name><name>idwls</name><index>[<expr><name>bfu_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale_factor</name> <init>= <expr><name><name>ff_atrac_sf_table</name><index>[<expr><name><name>idsfs</name><index>[<expr><name>bfu_num</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bits_used</name> <operator>+=</operator> <name>word_len</name> <operator>*</operator> <name>num_specs</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>bits_used</name> <operator>&gt;</operator> <name>AT1_SU_MAX_BITS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <ternary><condition><expr><name><name>su</name><operator>-&gt;</operator><name>log2_block_count</name><index>[<expr><name>band_num</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>bfu_start_short</name><index>[<expr><name>bfu_num</name></expr>]</index></name></expr> </then><else>: <expr><name><name>bfu_start_long</name><index>[<expr><name>bfu_num</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>word_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>max_quant</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>word_len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_specs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>spec</name><index>[<expr><name>pos</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_sbits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>word_len</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale_factor</name> <operator>*</operator> <name>max_quant</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spec</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_specs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>at1_subband_synthesis</name><parameter_list>(<parameter><decl><type><name>AT1Ctx</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>AT1SUCtx</name><modifier>*</modifier></type> <name>su</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>iqmf_temp</name><index>[<expr><literal type="number">512</literal> <operator>+</operator> <literal type="number">46</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_atrac_iqmf</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>su</name><operator>-&gt;</operator><name>fst_qmf_delay</name></name></expr></argument>, <argument><expr><name>iqmf_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>su</name><operator>-&gt;</operator><name>last_qmf_delay</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>su</name><operator>-&gt;</operator><name>last_qmf_delay</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>su</name><operator>-&gt;</operator><name>last_qmf_delay</name><index>[<expr><literal type="number">39</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac_iqmf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>su</name><operator>-&gt;</operator><name>last_qmf_delay</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>pOut</name></expr></argument>, <argument><expr><name><name>su</name><operator>-&gt;</operator><name>snd_qmf_delay</name></name></expr></argument>, <argument><expr><name>iqmf_temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>atrac1_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AT1Ctx</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">212</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough data to decode!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>AT1_SU_SAMPLES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AT1SUCtx</name><modifier>*</modifier></type> <name>su</name> <init>= <expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">212</literal> <operator>*</operator> <name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">212</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>at1_parse_bsm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>su</name><operator>-&gt;</operator><name>log2_block_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>at1_unpack_dequant</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>su</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>at1_imdct_block</name><argument_list>(<argument><expr><name>su</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>at1_subband_synthesis</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>su</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>atrac1_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AT1Ctx</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>atrac1_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AT1Ctx</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>AT1_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported number of channels: %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported block align."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal><operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal><operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal><operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing MDCT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atrac1_decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_init_ff_sine_windows</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_atrac_generate_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>low</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>mid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>bands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>high</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>spectrum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>spec1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>spectrum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>spec2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>spectrum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>spec1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>spectrum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>SUs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>spec2</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_atrac1_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"atrac1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"ATRAC1 (Adaptive TRansform Acoustic Coding)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ATRAC1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AT1Ctx</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>atrac1_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>atrac1_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>atrac1_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
