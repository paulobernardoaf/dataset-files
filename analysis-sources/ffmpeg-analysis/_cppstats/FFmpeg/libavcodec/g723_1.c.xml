<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\g723_1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g723_1.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_g723_1_scale_vector</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>|=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bits</name><operator>=</operator> <literal type="number">14</literal> <operator>-</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name><operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>bits</name> <operator>-</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_g723_1_normalize_bits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>width</name> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_g723_1_dot_product</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><call><name>ff_dot_product</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_sat_add32</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_g723_1_get_residual</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>residual</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>prev_excitation</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>PITCH_MAX</name> <operator>-</operator> <name>PITCH_ORDER</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>lag</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>residual</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prev_excitation</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>residual</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>prev_excitation</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>+</operator> <name>PITCH_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>residual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>prev_excitation</name><index>[<expr><name>offset</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>lag</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_g723_1_gen_dirac_train</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_lag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>vector</name><index>[<expr><name>SUBFRAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SUBFRAME_LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pitch_lag</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>pitch_lag</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>vector</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_g723_1_gen_acb_excitation</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>prev_excitation</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pitch_lag</name></decl></parameter>, <parameter><decl><type><name>G723_1_Subframe</name> <modifier>*</modifier></type><name>subfrm</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>Rate</name></name></type> <name>cur_rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>residual</name><index>[<expr><name>SUBFRAME_LEN</name> <operator>+</operator> <name>PITCH_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>cb_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lag</name> <init>= <expr><name>pitch_lag</name> <operator>+</operator> <name><name>subfrm</name><operator>-&gt;</operator><name>ad_cb_lag</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_g723_1_get_residual</name><argument_list>(<argument><expr><name>residual</name></expr></argument>, <argument><expr><name>prev_excitation</name></expr></argument>, <argument><expr><name>lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_rate</name> <operator>==</operator> <name>RATE_6300</name> <operator>&amp;&amp;</operator> <name>pitch_lag</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cb_ptr</name> <operator>=</operator> <name>adaptive_cb_gain85</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cb_ptr</name> <operator>=</operator> <name>adaptive_cb_gain170</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cb_ptr</name> <operator>+=</operator> <name><name>subfrm</name><operator>-&gt;</operator><name>ad_cb_gain</name></name> <operator>*</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAME_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>ff_dot_product</name><argument_list>(<argument><expr><name>residual</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>cb_ptr</name></expr></argument>, <argument><expr><name>PITCH_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_sat_dadd32</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><call><name>av_sat_add32</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsp2lpc</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>f1</name><index>[<expr><name>LPC_ORDER</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>f2</name><index>[<expr><name>LPC_ORDER</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name><name>lpc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>lpc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp1</name> <init>= <expr><name><name>cos_tab</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temp2</name> <init>= <expr><operator>(</operator><name><name>cos_tab</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cos_tab</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator> <operator>*</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><call><name>av_sat_dadd32</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><name>temp1</name> <operator>+</operator> <name>temp2</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lpc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>lpc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>lpc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lpc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>lpc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>lpc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>f1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name><name>f1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>MULL2</name><argument_list>(<argument><expr><name><name>f1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lpc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><name><name>f2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>MULL2</name><argument_list>(<argument><expr><name><name>f2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lpc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>f1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULL2</name><argument_list>(<argument><expr><name><name>f1</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lpc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<operator>(</operator><name><name>f1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>f1</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MULL2</name><argument_list>(<argument><expr><name><name>f2</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lpc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<operator>(</operator><name><name>f2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>f2</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>lpc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">65536</literal> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name><name>f1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>lpc</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">65536</literal> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name><name>f2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ff1</name> <init>= <expr><name><name>f1</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>f1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ff2</name> <init>= <expr><name><name>f2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>f2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ff1</name> <operator>+</operator> <name>ff2</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clipl_int32</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ff1</name> <operator>-</operator> <name>ff2</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_g723_1_lsp_interpolate</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cur_lsp</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>prev_lsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc_ptr</name> <init>= <expr><name>lpc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_acelp_weighted_vector_sum</name><argument_list>(<argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name>prev_lsp</name></expr></argument>,

<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">12288</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_weighted_vector_sum</name><argument_list>(<argument><expr><name>lpc</name> <operator>+</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name>prev_lsp</name></expr></argument>,

<argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_weighted_vector_sum</name><argument_list>(<argument><expr><name>lpc</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name>prev_lsp</name></expr></argument>,

<argument><expr><literal type="number">12288</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lpc</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>LPC_ORDER</name></expr></argument>, <argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lpc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>lsp2lpc</name><argument_list>(<argument><expr><name>lpc_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lpc_ptr</name> <operator>+=</operator> <name>LPC_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_g723_1_inverse_quant</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cur_lsp</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>prev_lsp</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>lsp_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bad_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>min_dist</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>, <decl><type ref="prev"/><name>stable</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bad_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <literal type="number">12288</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>min_dist</name> <operator>=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <literal type="number">23552</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsp_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band0</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band0</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band0</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band1</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band1</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band1</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band2</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band2</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band2</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp_band2</name><index>[<expr><name><name>lsp_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>prev_lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>dc_lsp</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>pred</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dc_lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>cur_lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x180</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>cur_lsp</name><index>[<expr><name>LPC_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x7e00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>min_dist</name> <operator>+</operator> <name><name>cur_lsp</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cur_lsp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur_lsp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>stable</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LPC_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>cur_lsp</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>min_dist</name> <operator>-</operator> <name><name>cur_lsp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stable</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>stable</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_lsp</name></expr></argument>, <argument><expr><name>prev_lsp</name></expr></argument>, <argument><expr><name>LPC_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cur_lsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
