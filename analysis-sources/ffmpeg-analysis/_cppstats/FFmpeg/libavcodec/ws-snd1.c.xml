<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ws-snd1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>ws_adpcm_4bit</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ws_snd_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ws_snd_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_size</name></decl>, <decl><type ref="prev"/><name>out_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>samples_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out_size</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_size</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame data is larger than input buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>out_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_end</name> <operator>=</operator> <name>samples</name> <operator>+</operator> <name>out_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_size</name> <operator>==</operator> <name>out_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>samples</name> <operator>&lt;</operator> <name>samples_end</name> <operator>&amp;&amp;</operator> <name>buf</name> <operator>-</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&lt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>smp</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>buf</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>*</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>smp</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>smp</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>smp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>count</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>smp</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>samples_end</name> <operator>-</operator> <name>samples</name> <operator>&lt;</operator> <name>smp</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>code</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>count</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <name>code</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>-</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init><expr><name>count</name><operator>++</operator></expr>;</init> <condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>count</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <operator>(</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<for>for <control>(<init><expr><name>count</name><operator>++</operator></expr>;</init> <condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>count</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>*</operator><name>buf</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name><name>ws_adpcm_4bit</name><index>[<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name><name>ws_adpcm_4bit</name><index>[<expr><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int8_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>+=</operator> <name>t</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>smp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>smp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <name><name>buf</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>smp</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>samples</name> <operator>-</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ws_snd1_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ws_snd1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Westwood Audio (SND1)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WESTWOOD_SND1</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ws_snd_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ws_snd_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
