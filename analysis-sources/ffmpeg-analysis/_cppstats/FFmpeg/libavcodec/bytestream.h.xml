<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\bytestream.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>GetByteContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>, <modifier>*</modifier><name>buffer_end</name>, <modifier>*</modifier><name>buffer_start</name>;</decl_stmt>

}</block></struct></type> <name>GetByteContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PutByteContext</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>, <modifier>*</modifier><name>buffer_end</name>, <modifier>*</modifier><name>buffer_start</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

}</block></struct></type> <name>PutByteContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>bytes</name></type></parameter>, <parameter><type><name>read</name></type></parameter>, <parameter><type><name>write</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_always_inline type bytestream_get_ ##name(const uint8_t **b) { (*b) += bytes; return read(*b - bytes); } static av_always_inline void bytestream_put_ ##name(uint8_t **b, const type value) { write(*b, value); (*b) += bytes; } static av_always_inline void bytestream2_put_ ##name ##u(PutByteContext *p, const type value) { bytestream_put_ ##name(&amp;p-&gt;buffer, value); } static av_always_inline void bytestream2_put_ ##name(PutByteContext *p, const type value) { if (!p-&gt;eof &amp;&amp; (p-&gt;buffer_end - p-&gt;buffer &gt;= bytes)) { write(p-&gt;buffer, value); p-&gt;buffer += bytes; } else p-&gt;eof = 1; } static av_always_inline type bytestream2_get_ ##name ##u(GetByteContext *g) { return bytestream_get_ ##name(&amp;g-&gt;buffer); } static av_always_inline type bytestream2_get_ ##name(GetByteContext *g) { if (g-&gt;buffer_end - g-&gt;buffer &lt; bytes) { g-&gt;buffer = g-&gt;buffer_end; return 0; } return bytestream2_get_ ##name ##u(g); } static av_always_inline type bytestream2_peek_ ##name(GetByteContext *g) { if (g-&gt;buffer_end - g-&gt;buffer &lt; bytes) return 0; return read(g-&gt;buffer); }</cpp:value></cpp:define>

<macro><name>DEF</name><argument_list>(<argument>uint64_t</argument>, <argument>le64</argument>, <argument><literal type="number">8</literal></argument>, <argument>AV_RL64</argument>, <argument>AV_WL64</argument>)</argument_list></macro>

<macro><name>DEF</name><argument_list>(<argument>unsigned int</argument>, <argument>le32</argument>, <argument><literal type="number">4</literal></argument>, <argument>AV_RL32</argument>, <argument>AV_WL32</argument>)</argument_list></macro>

<macro><name>DEF</name><argument_list>(<argument>unsigned int</argument>, <argument>le24</argument>, <argument><literal type="number">3</literal></argument>, <argument>AV_RL24</argument>, <argument>AV_WL24</argument>)</argument_list></macro>

<macro><name>DEF</name><argument_list>(<argument>unsigned int</argument>, <argument>le16</argument>, <argument><literal type="number">2</literal></argument>, <argument>AV_RL16</argument>, <argument>AV_WL16</argument>)</argument_list></macro>

<macro><name>DEF</name><argument_list>(<argument>uint64_t</argument>, <argument>be64</argument>, <argument><literal type="number">8</literal></argument>, <argument>AV_RB64</argument>, <argument>AV_WB64</argument>)</argument_list></macro>

<macro><name>DEF</name><argument_list>(<argument>unsigned int</argument>, <argument>be32</argument>, <argument><literal type="number">4</literal></argument>, <argument>AV_RB32</argument>, <argument>AV_WB32</argument>)</argument_list></macro>

<macro><name>DEF</name><argument_list>(<argument>unsigned int</argument>, <argument>be24</argument>, <argument><literal type="number">3</literal></argument>, <argument>AV_RB24</argument>, <argument>AV_WB24</argument>)</argument_list></macro>

<macro><name>DEF</name><argument_list>(<argument>unsigned int</argument>, <argument>be16</argument>, <argument><literal type="number">2</literal></argument>, <argument>AV_RB16</argument>, <argument>AV_WB16</argument>)</argument_list></macro>

<macro><name>DEF</name><argument_list>(<argument>unsigned int</argument>, <argument>byte</argument>, <argument><literal type="number">1</literal></argument>, <argument>AV_RB8</argument> , <argument>AV_WB8</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AV_HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne16</name></cpp:macro> <cpp:value>bytestream2_get_be16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne24</name></cpp:macro> <cpp:value>bytestream2_get_be24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne32</name></cpp:macro> <cpp:value>bytestream2_get_be32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne64</name></cpp:macro> <cpp:value>bytestream2_get_be64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne16u</name></cpp:macro> <cpp:value>bytestream2_get_be16u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne24u</name></cpp:macro> <cpp:value>bytestream2_get_be24u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne32u</name></cpp:macro> <cpp:value>bytestream2_get_be32u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne64u</name></cpp:macro> <cpp:value>bytestream2_get_be64u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_put_ne16</name></cpp:macro> <cpp:value>bytestream2_put_be16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_put_ne24</name></cpp:macro> <cpp:value>bytestream2_put_be24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_put_ne32</name></cpp:macro> <cpp:value>bytestream2_put_be32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_put_ne64</name></cpp:macro> <cpp:value>bytestream2_put_be64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_peek_ne16</name></cpp:macro> <cpp:value>bytestream2_peek_be16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_peek_ne24</name></cpp:macro> <cpp:value>bytestream2_peek_be24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_peek_ne32</name></cpp:macro> <cpp:value>bytestream2_peek_be32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_peek_ne64</name></cpp:macro> <cpp:value>bytestream2_peek_be64</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne16</name></cpp:macro> <cpp:value>bytestream2_get_le16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne24</name></cpp:macro> <cpp:value>bytestream2_get_le24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne32</name></cpp:macro> <cpp:value>bytestream2_get_le32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne64</name></cpp:macro> <cpp:value>bytestream2_get_le64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne16u</name></cpp:macro> <cpp:value>bytestream2_get_le16u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne24u</name></cpp:macro> <cpp:value>bytestream2_get_le24u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne32u</name></cpp:macro> <cpp:value>bytestream2_get_le32u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_get_ne64u</name></cpp:macro> <cpp:value>bytestream2_get_le64u</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_put_ne16</name></cpp:macro> <cpp:value>bytestream2_put_le16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_put_ne24</name></cpp:macro> <cpp:value>bytestream2_put_le24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_put_ne32</name></cpp:macro> <cpp:value>bytestream2_put_le32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_put_ne64</name></cpp:macro> <cpp:value>bytestream2_put_le64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_peek_ne16</name></cpp:macro> <cpp:value>bytestream2_peek_le16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_peek_ne24</name></cpp:macro> <cpp:value>bytestream2_peek_le24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_peek_ne32</name></cpp:macro> <cpp:value>bytestream2_peek_le32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bytestream2_peek_ne64</name></cpp:macro> <cpp:value>bytestream2_peek_le64</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>bytestream2_init</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>buf_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer_start</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>bytestream2_init_writer</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>buf_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer_start</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>bytestream2_get_bytes_left</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>bytestream2_get_bytes_left_p</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>bytestream2_skip</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>bytestream2_skipu</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>bytestream2_skip_p</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size2</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size2</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>bytestream2_tell</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>bytestream2_tell_p</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>bytestream2_size</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>bytestream2_size_p</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>bytestream2_seek</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEEK_CUR</name></expr>:</case>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEEK_END</name></expr>:</case>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEEK_SET</name></expr>:</case>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer_start</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>bytestream2_seek_p</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>whence</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEEK_CUR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEEK_END</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer_start</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEEK_SET</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer_start</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer_start</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>bytestream2_tell_p</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>bytestream2_get_buffer</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size2</name></expr>;</expr_stmt>

<return>return <expr><name>size2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>bytestream2_get_bufferu</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>bytestream2_put_buffer</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size2</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size2</name></expr>;</expr_stmt>

<return>return <expr><name>size2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>bytestream2_put_bufferu</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>bytestream2_set_buffer</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>c</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size2</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size2</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>bytestream2_set_bufferu</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>c</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>bytestream2_get_eof</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>bytestream2_copy_bufferu</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>bytestream2_copy_buffer</name><parameter_list>(<parameter><decl><type><name>PutByteContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size2</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>bytestream2_copy_bufferu</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name> <name>int</name></type> <name>bytestream_get_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>bytestream_put_buffer</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
