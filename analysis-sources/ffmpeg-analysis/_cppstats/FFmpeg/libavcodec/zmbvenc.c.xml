<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\zmbvenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZMBV_KEYFRAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZMBV_DELTAPAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZMBV_BLOCK</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<enum>enum <name>ZmbvFormat</name> <block>{

<decl><name>ZMBV_FMT_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ZMBV_FMT_1BPP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ZMBV_FMT_2BPP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>ZMBV_FMT_4BPP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>ZMBV_FMT_8BPP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>ZMBV_FMT_15BPP</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>ZMBV_FMT_16BPP</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>ZMBV_FMT_24BPP</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>ZMBV_FMT_32BPP</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>ZmbvEncContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lrange</name></decl>, <name>urange</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>comp_buf</name></decl>, <modifier>*</modifier><name>work_buf</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">768</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name></decl>, <modifier>*</modifier><name>prev_buf</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pstride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comp_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyint</name></decl>, <name>curfrm</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bypp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>ZmbvFormat</name></name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_stream</name></type> <name>zstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>score_tab</name><index>[<expr><name>ZMBV_BLOCK</name> <operator>*</operator> <name>ZMBV_BLOCK</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ZmbvEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>block_cmp</name><parameter_list>(<parameter><decl><type><name>ZmbvEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bh</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xored</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>histogram</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bw_bytes</name> <init>= <expr><name>bw</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bw_bytes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>src2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>histogram</name><index>[<expr><name>t</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>+=</operator> <name>stride2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>xored</name> <operator>=</operator> <operator>(</operator><name><name>histogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>bw_bytes</name> <operator>*</operator> <name>bh</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>xored</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>score_tab</name><index>[<expr><name><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>zmbv_me</name><parameter_list>(<parameter><decl><type><name>ZmbvEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>my</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xored</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>txored</name></decl>, <decl><type ref="prev"/><name>tv</name></decl>, <decl><type ref="prev"/><name>bv</name></decl>, <decl><type ref="prev"/><name>bw</name></decl>, <decl><type ref="prev"/><name>bh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx0</name></decl>, <decl><type ref="prev"/><name>my0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mx0</name> <operator>=</operator> <operator>*</operator><name>mx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>my0</name> <operator>=</operator> <operator>*</operator><name>my</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>ZMBV_BLOCK</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bh</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>ZMBV_BLOCK</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>block_cmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>pstride</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>xored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <operator>*</operator><name>my</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bv</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mx0</name> <operator>||</operator> <name>my0</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>block_cmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>prev</name> <operator>+</operator> <name>mx0</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>+</operator> <name>my0</name> <operator>*</operator> <name>pstride</name></expr></argument>, <argument><expr><name>pstride</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tv</name> <operator>&lt;</operator> <name>bv</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>bv</name> <operator>=</operator> <name>tv</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name>mx0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name>my0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xored</name> <operator>=</operator> <name>txored</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bv</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>dy</name> <operator>=</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>lrange</name></name></expr>;</init> <condition><expr><name>dy</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>urange</name></name></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>dx</name> <operator>=</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>lrange</name></name></expr>;</init> <condition><expr><name>dx</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>urange</name></name></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dx</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dy</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><name>dx</name> <operator>==</operator> <name>mx0</name> <operator>&amp;&amp;</operator> <name>dy</name> <operator>==</operator> <name>my0</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>block_cmp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>prev</name> <operator>+</operator> <name>dx</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>+</operator> <name>dy</name> <operator>*</operator> <name>pstride</name></expr></argument>, <argument><expr><name>pstride</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>tv</name> <operator>&lt;</operator> <name>bv</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>bv</name> <operator>=</operator> <name>tv</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mx</name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>my</name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xored</name> <operator>=</operator> <name>txored</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bv</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>bv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pict</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ZmbvEncContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><name>pict</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>palptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name></decl>, <decl><type ref="prev"/><name>chpal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pkt_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name></decl>, <decl><type ref="prev"/><name>bh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>curfrm</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>curfrm</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>curfrm</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>keyint</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>curfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><ternary><condition><expr><name>keyframe</name></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name>keyframe</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>palptr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>chpal</name> <operator>=</operator> <operator>!</operator><name>keyframe</name> <operator>&amp;&amp;</operator> <name>palptr</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>palptr</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal2</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>chpal</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tpal</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>tpal</name></expr></argument>, <argument><expr><name><name>palptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>work_buf</name><index>[<expr><name>work_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>tpal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>work_buf</name><index>[<expr><name>work_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>tpal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>work_buf</name><index>[<expr><name>work_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>tpal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tpal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tpal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>tpal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal2</name></name></expr></argument>, <argument><expr><name>palptr</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>keyframe</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>palptr</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name></name><operator>+</operator><operator>(</operator><name>i</name><operator>*</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>palptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>work_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><literal type="number">768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal2</name></name></expr></argument>, <argument><expr><name>palptr</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>work_size</name> <operator>=</operator> <literal type="number">768</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>work_buf</name></name> <operator>+</operator> <name>work_size</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>work_size</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>bh2</name></decl>, <decl><type ref="prev"/><name>bw2</name></decl>, <decl><type ref="prev"/><name>xored</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tsrc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tprev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>my</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>ZMBV_BLOCK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ZMBV_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bh</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name>ZMBV_BLOCK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ZMBV_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mv</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>work_buf</name></name> <operator>+</operator> <name>work_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>work_buf</name></name> <operator>+</operator> <name>work_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>bw</name> <operator>*</operator> <name>bh</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>work_size</name> <operator>+=</operator> <operator>(</operator><name>bw</name> <operator>*</operator> <name>bh</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>ZMBV_BLOCK</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bh2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><name>ZMBV_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>ZMBV_BLOCK</name></expr><operator>,</operator> <expr><name>mv</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bw2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x</name></expr></argument>, <argument><expr><name>ZMBV_BLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsrc</name> <operator>=</operator> <name>src</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tprev</name> <operator>=</operator> <name>prev</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zmbv_me</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>tsrc</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tprev</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pstride</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mx</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>!</operator><operator>!</operator><name>xored</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>my</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tprev</name> <operator>+=</operator> <name>mx</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>+</operator> <name>my</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pstride</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>xored</name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bh2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bw2</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>work_buf</name><index>[<expr><name>work_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>tsrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>tprev</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>tsrc</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tprev</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>pstride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>ZMBV_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>pstride</name></name> <operator>*</operator> <name>ZMBV_BLOCK</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>pstride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>keyframe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>deflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>work_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>work_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>total_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>comp_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>comp_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>total_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><name>Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error compressing data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pkt_size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>total_out</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>keyframe</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pkt_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fl</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>keyframe</name></expr> ?</condition><then> <expr><name>ZMBV_KEYFRAME</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>chpal</name></expr> ?</condition><then> <expr><name>ZMBV_DELTAPAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name>fl</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keyframe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name>ZMBV_BLOCK</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>buf</name><operator>++</operator> <operator>=</operator> <name>ZMBV_BLOCK</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>comp_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>total_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name><operator>*</operator><name>keyframe</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ZmbvEncContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>comp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>work_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>prev_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ZmbvEncContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zret</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lvl</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_size</name></decl>, <decl><type ref="prev"/><name>prev_offset</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_PAL8</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>ZMBV_FMT_8BPP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB555LE</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>ZMBV_FMT_15BPP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB565LE</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>ZMBV_FMT_16BPP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZMBV_ENABLE_24BPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AV_PIX_FMT_BGR24</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>ZMBV_FMT_24BPP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>AV_PIX_FMT_BGR0</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>ZMBV_FMT_32BPP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ZMBV_BLOCK</name> <operator>*</operator> <name>ZMBV_BLOCK</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>score_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>i</name> <operator>*</operator> <call><name>log2</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>ZMBV_BLOCK</name> <operator>*</operator> <name>ZMBV_BLOCK</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>curfrm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>keyint</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>keyint_min</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lrange</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>urange</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lrange</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>urange</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>me_range</name></name></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lvl</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>lvl</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>lvl</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Compression level should be 0-9, not %i\n"</literal></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator>

<operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name>ZMBV_BLOCK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ZMBV_BLOCK</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name>ZMBV_BLOCK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ZMBV_BLOCK</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>work_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>comp_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate work buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>comp_size</name></name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>comp_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>comp_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate compression buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pstride</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>lrange</name></name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_size</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lrange</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>pstride</name></name> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>lrange</name></name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>urange</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_offset</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>lrange</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>bypp</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>pstride</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>lrange</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>prev_buf</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>prev_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate picture.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_buf</name></name> <operator>+</operator> <name>prev_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zret</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Inflate init error: %d\n"</literal></expr></argument>, <argument><expr><name>zret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_zmbv_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"zmbv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Zip Motion Blocks Video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ZMBV</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZmbvEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_PIX_FMT_PAL8</name></expr>,

<expr><name>AV_PIX_FMT_RGB555LE</name></expr>,

<expr><name>AV_PIX_FMT_RGB565LE</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZMBV_ENABLE_24BPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>AV_PIX_FMT_BGR24</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr><name>AV_PIX_FMT_BGR0</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
