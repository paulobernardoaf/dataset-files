<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\pamenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pam_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bytestream_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bytestream</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bytestream_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>, <decl><type ref="prev"/><name>maxval</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tuple_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_MONOBLACK</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"BLACKANDWHITE"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"GRAYSCALE"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY16BE</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"GRAYSCALE"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_GRAY8A</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"GRAYSCALE_ALPHA"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YA16BE</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"GRAYSCALE_ALPHA"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"RGB"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"RGB_ALPHA"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGB48BE</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"RGB"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>w</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxval</name> <operator>=</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tuple_type</name> <operator>=</operator> <literal type="string">"RGB_ALPHA"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>n</name><operator>*</operator><name>h</name> <operator>+</operator> <literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytestream_start</name> <operator>=</operator>

<name>bytestream</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytestream_end</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>bytestream</name></expr></argument>, <argument><expr><name>bytestream_end</name> <operator>-</operator> <name>bytestream</name></expr></argument>,

<argument><expr><literal type="string">"P7\nWIDTH %d\nHEIGHT %d\nDEPTH %d\nMAXVAL %d\nTUPLTYPE %s\nENDHDR\n"</literal></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>maxval</name></expr></argument>, <argument><expr><name>tuple_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytestream</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bytestream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_MONOBLACK</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bytestream</name><operator>++</operator> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>j</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bytestream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytestream</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>bytestream</name> <operator>-</operator> <name>bytestream_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pam_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>AV_PICTURE_TYPE_I</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_pam_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pam"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PAM (Portable AnyMap) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PAM</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>pam_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>pam_encode_frame</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{

<expr><name>AV_PIX_FMT_RGB24</name></expr>, <expr><name>AV_PIX_FMT_RGBA</name></expr>,

<expr><name>AV_PIX_FMT_RGB48BE</name></expr>, <expr><name>AV_PIX_FMT_RGBA64BE</name></expr>,

<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_GRAY8A</name></expr>,

<expr><name>AV_PIX_FMT_GRAY16BE</name></expr>, <expr><name>AV_PIX_FMT_YA16BE</name></expr>,

<expr><name>AV_PIX_FMT_MONOBLACK</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
