<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\videotoolboxenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;VideoToolbox/VideoToolbox.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreVideo/CoreVideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreMedia/CoreMedia.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Availability.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_sei.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_KCMVIDEOCODECTYPE_HEVC</name></expr></cpp:if>

<enum>enum <block>{ <decl><name>kCMVideoCodecType_HEVC</name> <init>= <expr><literal type="char">'hvc1'</literal></expr></init></decl> }</block>;</enum>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_KCVPIXELFORMATTYPE_420YPCBCR10BIPLANARVIDEORANGE</name></expr></cpp:if>

<enum>enum <block>{ <decl><name>kCVPixelFormatType_420YpCbCr10BiPlanarFullRange</name> <init>= <expr><literal type="char">'xf20'</literal></expr></init></decl> }</block>;</enum>

<enum>enum <block>{ <decl><name>kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange</name> <init>= <expr><literal type="char">'x420'</literal></expr></init></decl> }</block>;</enum>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>OSStatus</name></type> (<modifier>*</modifier><name>getParameterSetAtIndex</name>)<parameter_list>(<parameter><decl><type><name>CMFormatDescriptionRef</name></type> <name>videoDesc</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>parameterSetIndex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>parameterSetPointerOut</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>parameterSetSizeOut</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>parameterSetCountOut</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>NALUnitHeaderLengthOut</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct><specifier>static</specifier> struct<block>{

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kCVImageBufferColorPrimaries_ITU_R_2020</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kCVImageBufferTransferFunction_ITU_R_2020</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kCVImageBufferYCbCrMatrix_ITU_R_2020</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTCompressionPropertyKey_H264EntropyMode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTH264EntropyMode_CAVLC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTH264EntropyMode_CABAC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Baseline_4_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Baseline_4_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Baseline_5_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Baseline_5_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Baseline_5_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Baseline_AutoLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Main_4_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Main_5_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Main_5_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Main_AutoLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_3_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_3_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_3_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_4_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_4_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_4_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_5_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_5_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_High_AutoLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Extended_5_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_H264_Extended_AutoLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_HEVC_Main_AutoLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTProfileLevel_HEVC_Main10_AutoLevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTCompressionPropertyKey_RealTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>kVTVideoEncoderSpecification_RequireHardwareAcceleratedVideoEncoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>getParameterSetAtIndex</name></type> <name>CMVideoFormatDescriptionGetHEVCParameterSetAtIndex</name></decl>;</decl_stmt>

}</block> <decl><name>compat_keys</name></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SYM</name><parameter_list>(<parameter><type><name>symbol</name></type></parameter>, <parameter><type><name>defaultVal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{ CFStringRef* handle = (CFStringRef*)dlsym(RTLD_DEFAULT, #symbol); if(!handle) compat_keys.symbol = CFSTR(defaultVal); else compat_keys.symbol = *handle; }while(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>once_ctrl</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>loadVTEncSymbols</name><parameter_list>()</parameter_list><block>{<block_content>

<expr_stmt><expr><name><name>compat_keys</name><operator>.</operator><name>CMVideoFormatDescriptionGetHEVCParameterSetAtIndex</name></name> <operator>=</operator>

<operator>(</operator><name>getParameterSetAtIndex</name><operator>)</operator><call><name>dlsym</name><argument_list>(

<argument><expr><name>RTLD_DEFAULT</name></expr></argument>,

<argument><expr><literal type="string">"CMVideoFormatDescriptionGetHEVCParameterSetAtIndex"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kCVImageBufferColorPrimaries_ITU_R_2020</name></expr></argument>, <argument><expr><literal type="string">"ITU_R_2020"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kCVImageBufferTransferFunction_ITU_R_2020</name></expr></argument>, <argument><expr><literal type="string">"ITU_R_2020"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kCVImageBufferYCbCrMatrix_ITU_R_2020</name></expr></argument>, <argument><expr><literal type="string">"ITU_R_2020"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTCompressionPropertyKey_H264EntropyMode</name></expr></argument>, <argument><expr><literal type="string">"H264EntropyMode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTH264EntropyMode_CAVLC</name></expr></argument>, <argument><expr><literal type="string">"CAVLC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTH264EntropyMode_CABAC</name></expr></argument>, <argument><expr><literal type="string">"CABAC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Baseline_4_0</name></expr></argument>, <argument><expr><literal type="string">"H264_Baseline_4_0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Baseline_4_2</name></expr></argument>, <argument><expr><literal type="string">"H264_Baseline_4_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Baseline_5_0</name></expr></argument>, <argument><expr><literal type="string">"H264_Baseline_5_0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Baseline_5_1</name></expr></argument>, <argument><expr><literal type="string">"H264_Baseline_5_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Baseline_5_2</name></expr></argument>, <argument><expr><literal type="string">"H264_Baseline_5_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Baseline_AutoLevel</name></expr></argument>, <argument><expr><literal type="string">"H264_Baseline_AutoLevel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Main_4_2</name></expr></argument>, <argument><expr><literal type="string">"H264_Main_4_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Main_5_1</name></expr></argument>, <argument><expr><literal type="string">"H264_Main_5_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Main_5_2</name></expr></argument>, <argument><expr><literal type="string">"H264_Main_5_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Main_AutoLevel</name></expr></argument>, <argument><expr><literal type="string">"H264_Main_AutoLevel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_3_0</name></expr></argument>, <argument><expr><literal type="string">"H264_High_3_0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_3_1</name></expr></argument>, <argument><expr><literal type="string">"H264_High_3_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_3_2</name></expr></argument>, <argument><expr><literal type="string">"H264_High_3_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_4_0</name></expr></argument>, <argument><expr><literal type="string">"H264_High_4_0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_4_1</name></expr></argument>, <argument><expr><literal type="string">"H264_High_4_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_4_2</name></expr></argument>, <argument><expr><literal type="string">"H264_High_4_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_5_1</name></expr></argument>, <argument><expr><literal type="string">"H264_High_5_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_5_2</name></expr></argument>, <argument><expr><literal type="string">"H264_High_5_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_High_AutoLevel</name></expr></argument>, <argument><expr><literal type="string">"H264_High_AutoLevel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Extended_5_0</name></expr></argument>, <argument><expr><literal type="string">"H264_Extended_5_0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_H264_Extended_AutoLevel</name></expr></argument>, <argument><expr><literal type="string">"H264_Extended_AutoLevel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_HEVC_Main_AutoLevel</name></expr></argument>, <argument><expr><literal type="string">"HEVC_Main_AutoLevel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTProfileLevel_HEVC_Main10_AutoLevel</name></expr></argument>, <argument><expr><literal type="string">"HEVC_Main10_AutoLevel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTCompressionPropertyKey_RealTime</name></expr></argument>, <argument><expr><literal type="string">"RealTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder</name></expr></argument>,

<argument><expr><literal type="string">"EnableHardwareAcceleratedVideoEncoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_SYM</name><argument_list>(<argument><expr><name>kVTVideoEncoderSpecification_RequireHardwareAcceleratedVideoEncoder</name></expr></argument>,

<argument><expr><literal type="string">"RequireHardwareAcceleratedVideoEncoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><enum>enum <name>VT_H264Profile</name> <block>{

<decl><name>H264_PROF_AUTO</name></decl>,

<decl><name>H264_PROF_BASELINE</name></decl>,

<decl><name>H264_PROF_MAIN</name></decl>,

<decl><name>H264_PROF_HIGH</name></decl>,

<decl><name>H264_PROF_EXTENDED</name></decl>,

<decl><name>H264_PROF_COUNT</name></decl>

}</block></enum></type> <name>VT_H264Profile</name>;</typedef>

<typedef>typedef <type><enum>enum <name>VTH264Entropy</name><block>{

<decl><name>VT_ENTROPY_NOT_SET</name></decl>,

<decl><name>VT_CAVLC</name></decl>,

<decl><name>VT_CABAC</name></decl>

}</block></enum></type> <name>VTH264Entropy</name>;</typedef>

<typedef>typedef <type><enum>enum <name>VT_HEVCProfile</name> <block>{

<decl><name>HEVC_PROF_AUTO</name></decl>,

<decl><name>HEVC_PROF_MAIN</name></decl>,

<decl><name>HEVC_PROF_MAIN10</name></decl>,

<decl><name>HEVC_PROF_COUNT</name></decl>

}</block></enum></type> <name>VT_HEVCProfile</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>start_code</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ExtraSEI</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>ExtraSEI</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BufNode</name> <block>{

<decl_stmt><decl><type><name>CMSampleBufferRef</name></type> <name>cm_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ExtraSEI</name> <modifier>*</modifier></type><name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>BufNode</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

}</block></struct></type> <name>BufNode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VTEncContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTCompressionSessionRef</name></type> <name>session</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>ycbcr_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>color_primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>transfer_function</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>getParameterSetAtIndex</name></type> <name>get_param_set_func</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cv_sample_sent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>async_error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BufNode</name> <modifier>*</modifier></type><name>q_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BufNode</name> <modifier>*</modifier></type><name>q_tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frame_ct_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frame_ct_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>first_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dts_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>entropy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>realtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frames_before</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>frames_after</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>allow_sw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>require_sw</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>flushing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_b_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>warned_color_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>a53_cc</name></decl>;</decl_stmt>

}</block></struct></type> <name>VTEncContext</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vtenc_populate_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CMVideoCodecType</name></type> <name>codec_type</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name></type> <name>profile_level</name></decl></parameter>,

<parameter><decl><type><name>CFNumberRef</name></type> <name>gamma_level</name></decl></parameter>,

<parameter><decl><type><name>CFDictionaryRef</name></type> <name>enc_info</name></decl></parameter>,

<parameter><decl><type><name>CFDictionaryRef</name></type> <name>pixel_buffer_info</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vt_release_num</name><parameter_list>(<parameter><decl><type><name>CFNumberRef</name><modifier>*</modifier></type> <name>refPtr</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>refPtr</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><operator>*</operator><name>refPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>refPtr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_async_error</name><parameter_list>(<parameter><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BufNode</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>async_error</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name> <operator>=</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>q_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>BufNode</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>cm_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_frame_queue</name><parameter_list>(<parameter><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>set_async_error</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtenc_q_pop</name><parameter_list>(<parameter><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>CMSampleBufferRef</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ExtraSEI</name> <modifier>*</modifier><modifier>*</modifier></type><name>sei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BufNode</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>async_error</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>vtctx</name><operator>-&gt;</operator><name>async_error</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>flushing</name></name> <operator>&amp;&amp;</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>frame_ct_in</name></name> <operator>==</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>frame_ct_out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>async_error</name></name> <operator>&amp;&amp;</operator> <name>wait</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cv_sample_sent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name> <operator>=</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>q_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>cm_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sei</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sei</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>sei</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>sei</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>sei</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>sei</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>sei</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame_ct_out</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vtenc_q_push</name><parameter_list>(<parameter><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name></decl></parameter>, <parameter><decl><type><name>CMSampleBufferRef</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>ExtraSEI</name> <modifier>*</modifier></type><name>sei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BufNode</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_async_error</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cm_buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>sei</name></name> <operator>=</operator> <name>sei</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cv_sample_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>q_head</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>q_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>q_tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_nalus</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>length_code_size</name></decl></parameter>,

<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buffer</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nalu_ct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>size_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>src_size</name> <init>= <expr><call><name>CMSampleBufferGetTotalSampleSize</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMBlockBufferRef</name></type> <name>block</name> <init>= <expr><call><name>CMSampleBufferGetDataBuffer</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length_code_size</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>src_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>curr_src_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>box_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMBlockBufferCopyDataBytes</name><argument_list>(<argument><expr><name>block</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>length_code_size</name></expr></argument>,

<argument><expr><name>size_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length_code_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>box_len</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>box_len</name> <operator>|=</operator> <name><name>size_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>curr_src_len</name> <operator>=</operator> <name>box_len</name> <operator>+</operator> <name>length_code_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>curr_src_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nalu_ct</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <name>nalu_ct</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CMVideoCodecType</name></type> <name>get_cm_codec_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case> <return>return <expr><name>kCMVideoCodecType_H264</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case> <return>return <expr><name>kCMVideoCodecType_HEVC</name></expr>;</return>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_params_size</name><parameter_list>(

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CMVideoFormatDescriptionRef</name></type> <name>vid_fmt</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ps_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_count_bad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vtctx</name><operator>-&gt;</operator><name>get_param_set_func</name></name><argument_list>(<argument><expr><name>vid_fmt</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ps_count</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_count_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ps_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ps_count</name> <operator>||</operator> <name>is_count_bad</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ps_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vtctx</name><operator>-&gt;</operator><name>get_param_set_func</name></name><argument_list>(<argument><expr><name>vid_fmt</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ps_size</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>is_count_bad</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name>ps_size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting parameter set sizes: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>total_size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_param_sets</name><parameter_list>(

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CMVideoFormatDescriptionRef</name></type> <name>vid_fmt</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ps_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_count_bad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vtctx</name><operator>-&gt;</operator><name>get_param_set_func</name></name><argument_list>(<argument><expr><name>vid_fmt</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ps_count</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>is_count_bad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ps_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ps_count</name> <operator>||</operator> <name>is_count_bad</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>ps_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>next_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vtctx</name><operator>-&gt;</operator><name>get_param_set_func</name></name><argument_list>(<argument><expr><name>vid_fmt</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ps</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ps_size</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>is_count_bad</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next_offset</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>ps_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_size</name> <operator>&lt;</operator> <name>next_offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: buffer too small for parameter sets.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>start_code</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>next_offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting parameter set data: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMVideoFormatDescriptionRef</name></type> <name>vid_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>total_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vid_fmt</name> <operator>=</operator> <call><name>CMSampleBufferGetFormatDescription</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vid_fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No video format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>get_params_size</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>vid_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get parameter sets.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>total_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>total_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>copy_param_sets</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>vid_fmt</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not copy param sets.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vtenc_output_callback</name><parameter_list>(

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sourceFrameCtx</name></decl></parameter>,

<parameter><decl><type><name>OSStatus</name></type> <name>status</name></decl></parameter>,

<parameter><decl><type><name>VTEncodeInfoFlags</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ExtraSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><name>sourceFrameCtx</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>async_error</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>sample_buffer</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error encoding frame: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_async_error</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><name>AVERROR_EXTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sample_buffer</name></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>set_status</name> <init>= <expr><call><name>set_extradata</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set_status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_async_error</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><name>set_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vtenc_q_push</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><name>sample_buffer</name></expr></argument>, <argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_length_code_size</name><parameter_list>(

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buffer</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMVideoFormatDescriptionRef</name></type> <name>vid_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vid_fmt</name> <operator>=</operator> <call><name>CMSampleBufferGetFormatDescription</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vid_fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting buffer format description.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>vtctx</name><operator>-&gt;</operator><name>get_param_set_func</name></name><argument_list>(<argument><expr><name>vid_fmt</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>isize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting length code size: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>isize</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_vt_h264_profile_level</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name> <modifier>*</modifier></type><name>profile_level_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>profile</name> <init>= <expr><name><name>vtctx</name><operator>-&gt;</operator><name>profile</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>profile</name> <operator>==</operator> <name>H264_PROF_AUTO</name> <operator>&amp;&amp;</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <ternary><condition><expr><name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr> ?</condition><then> <expr><name>H264_PROF_MAIN</name></expr> </then><else>: <expr><name>H264_PROF_BASELINE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>profile</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_PROF_AUTO</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>H264_PROF_BASELINE</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Baseline_AutoLevel</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Baseline_1_3</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Baseline_3_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Baseline_3_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Baseline_3_2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">40</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Baseline_4_0</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">41</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Baseline_4_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">42</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Baseline_4_2</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">50</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Baseline_5_0</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">51</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Baseline_5_1</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">52</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Baseline_5_2</name></name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>H264_PROF_MAIN</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Main_AutoLevel</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Main_3_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Main_3_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Main_3_2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">40</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Main_4_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">41</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Main_4_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">42</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Main_4_2</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">50</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_Main_5_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">51</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Main_5_1</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">52</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Main_5_2</name></name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>H264_PROF_HIGH</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_AutoLevel</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_3_0</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">31</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_3_1</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_3_2</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">40</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_4_0</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">41</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_4_1</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">42</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_4_2</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">50</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>kVTProfileLevel_H264_High_5_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">51</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_5_1</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">52</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_High_5_2</name></name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>H264_PROF_EXTENDED</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Extended_AutoLevel</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">50</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_H264_Extended_5_0</name></name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>profile_level_val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid Profile/Level.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_vt_hevc_profile_level</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name> <modifier>*</modifier></type><name>profile_level_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>profile</name> <init>= <expr><name><name>vtctx</name><operator>-&gt;</operator><name>profile</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>profile</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEVC_PROF_AUTO</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>HEVC_PROF_MAIN</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_HEVC_Main_AutoLevel</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_PROF_MAIN10</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>profile_level_val</name> <operator>=</operator>

<name><name>compat_keys</name><operator>.</operator><name>kVTProfileLevel_HEVC_Main10_AutoLevel</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>profile_level_val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid Profile/Level.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cv_pixel_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>avctx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVColorRange</name></name></type> <name>range</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>av_pixel_format</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>range_guessed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>range_guessed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>range_guessed</name> <operator>=</operator> <name>range</name> <operator>!=</operator> <name>AVCOL_RANGE_MPEG</name> <operator>&amp;&amp;</operator>

<name>range</name> <operator>!=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_NV12</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>av_pixel_format</name> <operator>=</operator> <ternary><condition><expr><name>range</name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr> ?</condition><then>

<expr><name>kCVPixelFormatType_420YpCbCr8BiPlanarFullRange</name></expr> </then><else>:

<expr><name>kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>av_pixel_format</name> <operator>=</operator> <ternary><condition><expr><name>range</name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr> ?</condition><then>

<expr><name>kCVPixelFormatType_420YpCbCr8PlanarFullRange</name></expr> </then><else>:

<expr><name>kCVPixelFormatType_420YpCbCr8Planar</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>AV_PIX_FMT_P010LE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>av_pixel_format</name> <operator>=</operator> <ternary><condition><expr><name>range</name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr> ?</condition><then>

<expr><name>kCVPixelFormatType_420YpCbCr10BiPlanarFullRange</name></expr> </then><else>:

<expr><name>kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>av_pixel_format</name> <operator>=</operator> <name>kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_color_attr</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>CFMutableDictionaryRef</name></type> <name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,

<argument><expr><name>kCVImageBufferColorPrimariesKey</name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>transfer_function</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,

<argument><expr><name>kCVImageBufferTransferFunctionKey</name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>transfer_function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>ycbcr_matrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>dict</name></expr></argument>,

<argument><expr><name>kCVImageBufferYCbCrMatrixKey</name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>ycbcr_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_cv_pixel_buffer_info</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CFMutableDictionaryRef</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>cv_color_format_num</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>width_num</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>height_num</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>pixel_buffer_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cv_color_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>get_cv_pixel_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cv_color_format</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pixel_buffer_info</name> <operator>=</operator> <call><name>CFDictionaryCreateMutable</name><argument_list>(

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><literal type="number">20</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFCopyStringDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pixel_buffer_info</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>pbinfo_nomem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cv_color_format_num</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberSInt32Type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cv_color_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cv_color_format_num</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>pbinfo_nomem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>pixel_buffer_info</name></expr></argument>,

<argument><expr><name>kCVPixelBufferPixelFormatTypeKey</name></expr></argument>,

<argument><expr><name>cv_color_format_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vt_release_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cv_color_format_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width_num</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberSInt32Type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>width_num</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>pixel_buffer_info</name></expr></argument>,

<argument><expr><name>kCVPixelBufferWidthKey</name></expr></argument>,

<argument><expr><name>width_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vt_release_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>width_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>height_num</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberSInt32Type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>height_num</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>pbinfo_nomem</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>pixel_buffer_info</name></expr></argument>,

<argument><expr><name>kCVPixelBufferHeightKey</name></expr></argument>,

<argument><expr><name>height_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vt_release_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>height_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_color_attr</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pixel_buffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dict</name> <operator>=</operator> <name>pixel_buffer_info</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>pbinfo_nomem</name>:</label>

<expr_stmt><expr><call><name>vt_release_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cv_color_format_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vt_release_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>width_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vt_release_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>height_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_buffer_info</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pixel_buffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cv_color_primaries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name> <modifier>*</modifier></type><name>primaries</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorPrimaries</name></name></type> <name>pri</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>pri</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_PRI_UNSPECIFIED</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>primaries</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT470BG</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>primaries</name> <operator>=</operator> <name>kCVImageBufferColorPrimaries_EBU_3213</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_SMPTE170M</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>primaries</name> <operator>=</operator> <name>kCVImageBufferColorPrimaries_SMPTE_C</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT709</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>primaries</name> <operator>=</operator> <name>kCVImageBufferColorPrimaries_ITU_R_709_2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_PRI_BT2020</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>primaries</name> <operator>=</operator> <name><name>compat_keys</name><operator>.</operator><name>kCVImageBufferColorPrimaries_ITU_R_2020</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Color primaries %s is not supported.\n"</literal></expr></argument>, <argument><expr><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name>pri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>primaries</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cv_transfer_function</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name> <modifier>*</modifier></type><name>transfer_fnc</name></decl></parameter>,

<parameter><decl><type><name>CFNumberRef</name> <modifier>*</modifier></type><name>gamma_level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVColorTransferCharacteristic</name></name></type> <name>trc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Float32</name></type> <name>gamma</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>gamma_level</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>trc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_TRC_UNSPECIFIED</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_BT709</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>kCVImageBufferTransferFunction_ITU_R_709_2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_SMPTE240M</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>kCVImageBufferTransferFunction_SMPTE_240M_1995</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_KCVIMAGEBUFFERTRANSFERFUNCTION_SMPTE_ST_2084_PQ</name></expr></cpp:if>

<case>case <expr><name>AVCOL_TRC_SMPTE2084</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_KCVIMAGEBUFFERTRANSFERFUNCTION_LINEAR</name></expr></cpp:if>

<case>case <expr><name>AVCOL_TRC_LINEAR</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>kCVImageBufferTransferFunction_Linear</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_KCVIMAGEBUFFERTRANSFERFUNCTION_ITU_R_2100_HLG</name></expr></cpp:if>

<case>case <expr><name>AVCOL_TRC_ARIB_STD_B67</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>kCVImageBufferTransferFunction_ITU_R_2100_HLG</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AVCOL_TRC_GAMMA22</name></expr>:</case>

<expr_stmt><expr><name>gamma</name> <operator>=</operator> <literal type="number">2.2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>kCVImageBufferTransferFunction_UseGamma</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>gamma_level</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberFloat32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_GAMMA28</name></expr>:</case>

<expr_stmt><expr><name>gamma</name> <operator>=</operator> <literal type="number">2.8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>kCVImageBufferTransferFunction_UseGamma</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>gamma_level</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>kCFNumberFloat32Type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_TRC_BT2020_10</name></expr>:</case>

<case>case <expr><name>AVCOL_TRC_BT2020_12</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name><name>compat_keys</name><operator>.</operator><name>kCVImageBufferTransferFunction_ITU_R_2020</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>transfer_fnc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Transfer function %s is not supported.\n"</literal></expr></argument>, <argument><expr><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name>trc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cv_ycbcr_matrix</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>CFStringRef</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>)</parameter_list> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVCOL_SPC_BT709</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>matrix</name> <operator>=</operator> <name>kCVImageBufferYCbCrMatrix_ITU_R_709_2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_SPC_UNSPECIFIED</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>matrix</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_SPC_BT470BG</name></expr>:</case>

<case>case <expr><name>AVCOL_SPC_SMPTE170M</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>matrix</name> <operator>=</operator> <name>kCVImageBufferYCbCrMatrix_ITU_R_601_4</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_SPC_SMPTE240M</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>matrix</name> <operator>=</operator> <name>kCVImageBufferYCbCrMatrix_SMPTE_240M_1995</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>matrix</name> <operator>=</operator> <name><name>compat_keys</name><operator>.</operator><name>kCVImageBufferYCbCrMatrix_ITU_R_2020</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Color space %s is not supported.\n"</literal></expr></argument>, <argument><expr><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtenc_create_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CMVideoCodecType</name></type> <name>codec_type</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name></type> <name>profile_level</name></decl></parameter>,

<parameter><decl><type><name>CFNumberRef</name></type> <name>gamma_level</name></decl></parameter>,

<parameter><decl><type><name>CFDictionaryRef</name></type> <name>enc_info</name></decl></parameter>,

<parameter><decl><type><name>CFDictionaryRef</name></type> <name>pixel_buffer_info</name></decl></parameter>,

<parameter><decl><type><name>VTCompressionSessionRef</name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SInt32</name></type> <name>bit_rate</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SInt32</name></type> <name>max_rate</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>bit_rate_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>bytes_per_second</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>one_second</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>data_rate_limits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>bytes_per_second_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>one_second_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>nums</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>VTCompressionSessionCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name>codec_type</name></expr></argument>,

<argument><expr><name>enc_info</name></expr></argument>,

<argument><expr><name>pixel_buffer_info</name></expr></argument>,

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>vtenc_output_callback</name></expr></argument>,

<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>||</operator> <operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot create compression session: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>allow_sw</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Try -allow_sw 1. The hardware encoder may be busy, or not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bit_rate_num</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberSInt32Type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bit_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bit_rate_num</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_AverageBitRate</name></expr></argument>,

<argument><expr><name>bit_rate_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>bit_rate_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting bitrate property: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name> <operator>&amp;&amp;</operator> <name>max_rate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytes_per_second_value</name> <operator>=</operator> <name>max_rate</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_per_second</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberSInt64Type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bytes_per_second_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes_per_second</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>one_second_value</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>one_second</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberSInt64Type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>one_second_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one_second</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>bytes_per_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>bytes_per_second</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>one_second</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_rate_limits</name> <operator>=</operator> <call><name>CFArrayCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>nums</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeArrayCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_rate_limits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>bytes_per_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>one_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_DataRateLimits</name></expr></argument>,

<argument><expr><name>data_rate_limits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>bytes_per_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>one_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>data_rate_limits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting max bitrate property: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>profile_level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_ProfileLevel</name></expr></argument>,

<argument><expr><name>profile_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting profile/level property: %d. Output will be encoded using a supported profile/level combination.\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>interval</name> <init>= <expr><call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberIntType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interval</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_MaxKeyFrameInterval</name></expr></argument>,

<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting 'max key-frame interval' property: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>frames_before</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_MoreFramesBeforeStart</name></expr></argument>,

<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>kVTPropertyNotSupportedErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"frames_before property is not supported on this device. Ignoring.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting frames_before property: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>frames_after</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_MoreFramesAfterEnd</name></expr></argument>,

<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>kVTPropertyNotSupportedErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"frames_after property is not supported on this device. Ignoring.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting frames_after property: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>par</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>avpar</name> <init>= <expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avpar</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpar</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>avpar</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avpar</name><operator>-&gt;</operator><name>den</name></name></expr></argument>,

<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberIntType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>avpar</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>den</name> <operator>=</operator> <call><name>CFNumberCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>kCFNumberIntType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>avpar</name><operator>-&gt;</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>par</name> <operator>=</operator> <call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFCopyStringDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>par</name> <operator>||</operator> <operator>!</operator><name>num</name> <operator>||</operator> <operator>!</operator><name>den</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>par</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>den</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(

<argument><expr><name>par</name></expr></argument>,

<argument><expr><name>kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing</name></expr></argument>,

<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(

<argument><expr><name>par</name></expr></argument>,

<argument><expr><name>kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing</name></expr></argument>,

<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_PixelAspectRatio</name></expr></argument>,

<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error setting pixel aspect ratio to %d:%d: %d.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>transfer_function</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_TransferFunction</name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>transfer_function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not set transfer function: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>ycbcr_matrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_YCbCrMatrix</name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>ycbcr_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not set ycbcr matrix: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_ColorPrimaries</name></expr></argument>,

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not set color primaries: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gamma_level</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kCVImageBufferGammaLevelKey</name></expr></argument>,

<argument><expr><name>gamma_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not set gamma level: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_AllowFrameReordering</name></expr></argument>,

<argument><expr><name>kCFBooleanFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting 'allow frame reordering' property: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>entropy</name></name> <operator>!=</operator> <name>VT_ENTROPY_NOT_SET</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>entropy</name> <init>= <expr><ternary><condition><expr><name><name>vtctx</name><operator>-&gt;</operator><name>entropy</name></name> <operator>==</operator> <name>VT_CABAC</name></expr> ?</condition><then>

<expr><name><name>compat_keys</name><operator>.</operator><name>kVTH264EntropyMode_CABAC</name></name></expr></then><else>:

<expr><name><name>compat_keys</name><operator>.</operator><name>kVTH264EntropyMode_CAVLC</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name><name>compat_keys</name><operator>.</operator><name>kVTCompressionPropertyKey_H264EntropyMode</name></name></expr></argument>,

<argument><expr><name>entropy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting entropy property: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>realtime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionSetProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name><name>compat_keys</name><operator>.</operator><name>kVTCompressionPropertyKey_RealTime</name></name></expr></argument>,

<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting realtime property: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTCompressionSessionPrepareToEncodeFrames</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot prepare encoder: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtenc_configure_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>enc_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name>pixel_buffer_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMVideoCodecType</name></type> <name>codec_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>profile_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>gamma_level</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>codec_type</name> <operator>=</operator> <call><name>get_cm_codec_type</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: no mapping for AVCodecID %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>get_param_set_func</name></name> <operator>=</operator> <name>CMVideoFormatDescriptionGetH264ParameterSetAtIndex</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>&amp;&amp;</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>H264_PROF_BASELINE</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cannot use B-frames with baseline profile. Output will not contain B-frames.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>entropy</name></name> <operator>==</operator> <name>VT_CABAC</name> <operator>&amp;&amp;</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>H264_PROF_BASELINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"CABAC entropy requires 'main' or 'high' profile, but baseline was requested. Encode will not use CABAC entropy.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>entropy</name></name> <operator>=</operator> <name>VT_ENTROPY_NOT_SET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_vt_h264_profile_level</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>profile_level</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>get_param_set_func</name></name> <operator>=</operator> <name><name>compat_keys</name><operator>.</operator><name>CMVideoFormatDescriptionGetHEVCParameterSetAtIndex</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>get_param_set_func</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_vt_hevc_profile_level</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>profile_level</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>enc_info</name> <operator>=</operator> <call><name>CFDictionaryCreateMutable</name><argument_list>(

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><literal type="number">20</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFCopyStringDictionaryKeyCallBacks</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>kCFTypeDictionaryValueCallBacks</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc_info</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TARGET_OS_IPHONE</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>require_sw</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>enc_info</name></expr></argument>,

<argument><expr><name><name>compat_keys</name><operator>.</operator><name>kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder</name></name></expr></argument>,

<argument><expr><name>kCFBooleanFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>allow_sw</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>enc_info</name></expr></argument>,

<argument><expr><name><name>compat_keys</name><operator>.</operator><name>kVTVideoEncoderSpecification_RequireHardwareAcceleratedVideoEncoder</name></name></expr></argument>,

<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CFDictionarySetValue</name><argument_list>(<argument><expr><name>enc_info</name></expr></argument>,

<argument><expr><name><name>compat_keys</name><operator>.</operator><name>kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder</name></name></expr></argument>,

<argument><expr><name>kCFBooleanTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>create_cv_pixel_buffer_info</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pixel_buffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>init_cleanup</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pixel_buffer_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>dts_delta</name></name> <operator>=</operator> <ternary><condition><expr><name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_cv_transfer_function</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>transfer_function</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gamma_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_cv_ycbcr_matrix</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>ycbcr_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_cv_color_primaries</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_populate_extradata</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>codec_type</name></expr></argument>,

<argument><expr><name>profile_level</name></expr></argument>,

<argument><expr><name>gamma_level</name></expr></argument>,

<argument><expr><name>enc_info</name></expr></argument>,

<argument><expr><name>pixel_buffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>init_cleanup</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_create_encoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>codec_type</name></expr></argument>,

<argument><expr><name>profile_level</name></expr></argument>,

<argument><expr><name>gamma_level</name></expr></argument>,

<argument><expr><name>enc_info</name></expr></argument>,

<argument><expr><name>pixel_buffer_info</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>init_cleanup</name>:</label>

<if_stmt><if>if <condition>(<expr><name>gamma_level</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>gamma_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_buffer_info</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>pixel_buffer_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>enc_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vtenc_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFBooleanRef</name></type> <name>has_b_frames_cfbool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_ctrl</name></expr></argument>, <argument><expr><name>loadVTEncSymbols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cv_sample_sent</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_configure_encoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTSessionCopyProperty</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kVTCompressionPropertyKey_AllowFrameReordering</name></expr></argument>,

<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>has_b_frames_cfbool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name> <operator>&amp;&amp;</operator> <name>has_b_frames_cfbool</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <call><name>CFBooleanGetValue</name><argument_list>(<argument><expr><name>has_b_frames_cfbool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>has_b_frames_cfbool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vtenc_get_frame_info</name><parameter_list>(<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_key_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>attachments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>attachment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFBooleanRef</name></type> <name>not_sync</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>attachments</name> <operator>=</operator> <call><name>CMSampleBufferGetSampleAttachmentsArray</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>attachments</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_key_frame</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>attachment</name> <operator>=</operator> <call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>attachments</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CFDictionaryGetValueIfPresent</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>,

<argument><expr><name>kCMSampleAttachmentKey_NotSync</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>not_sync</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_key_frame</name> <operator>=</operator> <operator>!</operator><call><name>CFBooleanGetValue</name><argument_list>(<argument><expr><name>not_sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_key_frame</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_post_sei_nal_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nal_type</name></decl></parameter>)</parameter_list><block>{<block_content>

<return>return <expr><name>nal_type</name> <operator>!=</operator> <name>H264_NAL_SEI</name> <operator>&amp;&amp;</operator>

<name>nal_type</name> <operator>!=</operator> <name>H264_NAL_SPS</name> <operator>&amp;&amp;</operator>

<name>nal_type</name> <operator>!=</operator> <name>H264_NAL_PPS</name> <operator>&amp;&amp;</operator>

<name>nal_type</name> <operator>!=</operator> <name>H264_NAL_AUD</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_sei_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nal_data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>nal_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>sei_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nal_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sei_payload_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sei_payload_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>sei_end</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nal_start</name> <init>= <expr><name>nal_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nal_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nal_type</name> <operator>=</operator> <operator>*</operator><name>nal_data</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_type</name> <operator>!=</operator> <name>H264_NAL_SEI</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nal_data</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_size</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal_data</name><index>[<expr><name>nal_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nal_size</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>nal_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nal_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<do>do<block>{<block_content>

<expr_stmt><expr><name>sei_payload_type</name> <operator>+=</operator> <operator>*</operator><name>nal_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_data</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_size</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>nal_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nal_data</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nal_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected end of SEI NAL Unit parsing type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do<block>{<block_content>

<expr_stmt><expr><name>sei_payload_size</name> <operator>+=</operator> <operator>*</operator><name>nal_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_data</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_size</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>nal_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>nal_data</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>nal_size</name> <operator>&lt;</operator> <name>sei_payload_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected end of SEI NAL Unit parsing size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nal_data</name> <operator>+=</operator> <name>sei_payload_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_size</name> <operator>-=</operator> <name>sei_payload_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>sei_end</name> <operator>=</operator> <name>nal_data</name></expr>;</expr_stmt>

<return>return <expr><name>nal_data</name> <operator>-</operator> <name>nal_start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_emulation_prev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>src_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>ssize_t</name></type> <name>dst_offset</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>zeros</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wrote_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dst_end</name> <init>= <expr><name>dst</name> <operator>+</operator> <name>dst_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src_end</name> <init>= <expr><name>src</name> <operator>+</operator> <name>src_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_at</name> <init>= <expr><ternary><condition><expr><name>dst_offset</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>dst_offset</name> <operator>-</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start_at</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dst_offset</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>dst_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zeros</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>zeros</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_start</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <name>src_end</name></expr>;</condition> <incr><expr><name>src</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>zeros</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>insert_ep3_byte</name> <init>= <expr><operator>*</operator><name>src</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_ep3_byte</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zeros</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&lt;</operator> <name>dst_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zeros</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>zeros</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>wrote_bytes</name> <operator>=</operator> <name>dst</name> <operator>-</operator> <name>dst_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&gt;</operator> <name>dst_end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><name>wrote_bytes</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>wrote_bytes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_sei</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExtraSEI</name> <modifier>*</modifier></type><name>sei</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sei_type</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sei_start</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>remaining_sei_size</name> <init>= <expr><name><name>sei</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>remaining_dst_size</name> <init>= <expr><name>dst_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_written</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remaining_dst_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>sei_type</name> <operator>&amp;&amp;</operator> <name>remaining_dst_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sei_byte</name> <init>= <expr><ternary><condition><expr><name>sei_type</name> <operator>&gt;</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>sei_type</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>sei_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sei_type</name> <operator>-=</operator> <name>sei_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_dst_size</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>remaining_sei_size</name> <operator>&amp;&amp;</operator> <name>remaining_dst_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size_byte</name> <init>= <expr><ternary><condition><expr><name>remaining_sei_size</name> <operator>&gt;</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><name>remaining_sei_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>size_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_sei_size</name> <operator>-=</operator> <name>size_byte</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_dst_size</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>remaining_dst_size</name> <operator>&lt;</operator> <name><name>sei</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header_bytes</name> <operator>=</operator> <name>dst</name> <operator>-</operator> <name>sei_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>header_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>=</operator> <call><name>copy_emulation_prev</name><argument_list>(<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>sei_start</name></expr></argument>,

<argument><expr><name>offset</name></expr></argument>,

<argument><expr><name>dst_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bytes_written</name> <operator>+=</operator> <name>header_bytes</name></expr>;</expr_stmt>

<return>return <expr><name>bytes_written</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_replace_length_codes</name><parameter_list>(

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>length_code_size</name></decl></parameter>,

<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buffer</name></decl></parameter>,

<parameter><decl><type><name>ExtraSEI</name> <modifier>*</modifier></type><name>sei</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_data</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>dst_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>src_size</name> <init>= <expr><call><name>CMSampleBufferGetTotalSampleSize</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>remaining_src_size</name> <init>= <expr><name>src_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>remaining_dst_size</name> <init>= <expr><name>dst_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>src_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wrote_sei</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>size_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>nal_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMBlockBufferRef</name></type> <name>block</name> <init>= <expr><call><name>CMSampleBufferGetDataBuffer</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>length_code_size</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>remaining_src_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>curr_src_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>curr_dst_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>box_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_box</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMBlockBufferCopyDataBytes</name><argument_list>(<argument><expr><name>block</name></expr></argument>,

<argument><expr><name>src_offset</name></expr></argument>,

<argument><expr><name>length_code_size</name></expr></argument>,

<argument><expr><name>size_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot copy length: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMBlockBufferCopyDataBytes</name><argument_list>(<argument><expr><name>block</name></expr></argument>,

<argument><expr><name>src_offset</name> <operator>+</operator> <name>length_code_size</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>nal_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot copy type: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nal_type</name> <operator>&amp;=</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length_code_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>box_len</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>box_len</name> <operator>|=</operator> <name><name>size_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sei</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>wrote_sei</name> <operator>&amp;&amp;</operator> <call><name>is_post_sei_nal_type</name><argument_list>(<argument><expr><name>nal_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wrote_bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>start_code</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_dst_size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_data</name> <operator>=</operator> <name>H264_NAL_SEI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_data</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_dst_size</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>wrote_bytes</name> <operator>=</operator> <call><name>write_sei</name><argument_list>(<argument><expr><name>sei</name></expr></argument>,

<argument><expr><name>H264_SEI_TYPE_USER_DATA_REGISTERED</name></expr></argument>,

<argument><expr><name>dst_data</name></expr></argument>,

<argument><expr><name>remaining_dst_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wrote_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>wrote_bytes</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>remaining_dst_size</name> <operator>-=</operator> <name>wrote_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>wrote_bytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining_dst_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_data</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_data</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_dst_size</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>wrote_sei</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>curr_src_len</name> <operator>=</operator> <name>box_len</name> <operator>+</operator> <name>length_code_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_dst_len</name> <operator>=</operator> <name>box_len</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining_src_size</name> <operator>&lt;</operator> <name>curr_src_len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining_dst_size</name> <operator>&lt;</operator> <name>curr_dst_len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_box</name> <operator>=</operator> <name>dst_data</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>start_code</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CMBlockBufferCopyDataBytes</name><argument_list>(<argument><expr><name>block</name></expr></argument>,

<argument><expr><name>src_offset</name> <operator>+</operator> <name>length_code_size</name></expr></argument>,

<argument><expr><name>box_len</name></expr></argument>,

<argument><expr><name>dst_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot copy data: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sei</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>wrote_sei</name> <operator>&amp;&amp;</operator> <name>nal_type</name> <operator>==</operator> <name>H264_NAL_SEI</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>wrote_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_sei_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>new_sei</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_sei_length</name> <operator>=</operator> <call><name>find_sei_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dst_box</name></expr></argument>, <argument><expr><name>box_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_sei_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wrote_bytes</name> <operator>=</operator> <call><name>write_sei</name><argument_list>(<argument><expr><name>sei</name></expr></argument>,

<argument><expr><name>H264_SEI_TYPE_USER_DATA_REGISTERED</name></expr></argument>,

<argument><expr><name>new_sei</name></expr></argument>,

<argument><expr><name>remaining_dst_size</name> <operator>-</operator> <name>old_sei_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wrote_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>wrote_bytes</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_sei</name> <operator>+</operator> <name>wrote_bytes</name> <operator>&gt;=</operator> <name>dst_data</name> <operator>+</operator> <name>remaining_dst_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_sei</name><index>[<expr><name>wrote_bytes</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_bytes</name> <operator>=</operator> <name>wrote_bytes</name> <operator>-</operator> <operator>(</operator><name>dst_box</name> <operator>+</operator> <name>box_len</name> <operator>-</operator> <name>new_sei</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>extra_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_dst_size</name> <operator>-=</operator> <name>extra_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wrote_sei</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src_offset</name> <operator>+=</operator> <name>curr_src_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_data</name> <operator>+=</operator> <name>curr_dst_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_src_size</name> <operator>-=</operator> <name>curr_src_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining_dst_size</name> <operator>-=</operator> <name>curr_dst_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_sei_msg_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExtraSEI</name><modifier>*</modifier></type> <name>sei</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>copied_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sei</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>copied_size</name> <operator>=</operator> <operator>-</operator><call><name>copy_emulation_prev</name><argument_list>(<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sei</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <literal type="number">255</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>copied_size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>copied_size</name> <operator>+</operator> <name><name>sei</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>type</name> <operator>/</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtenc_cm_to_avpacket</name><parameter_list>(

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CMSampleBufferRef</name></type> <name>sample_buffer</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><name>ExtraSEI</name> <modifier>*</modifier></type><name>sei</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_key_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>add_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length_code_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>in_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>out_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sei_nalu_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dts_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>time_base_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nalu_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMTime</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMTime</name></type> <name>dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMVideoFormatDescriptionRef</name></type> <name>vid_fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vtenc_get_frame_info</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_key_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>get_length_code_size</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sample_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length_code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>add_header</name> <operator>=</operator> <name>is_key_frame</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>add_header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vid_fmt</name> <operator>=</operator> <call><name>CMSampleBufferGetFormatDescription</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vid_fmt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot get format description.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>get_params_size</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>vid_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>count_nalus</name><argument_list>(<argument><expr><name>length_code_size</name></expr></argument>, <argument><expr><name>sample_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nalu_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sei</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>msg_size</name> <init>= <expr><call><name>get_sei_msg_bytes</name><argument_list>(<argument><expr><name>sei</name></expr></argument>,

<argument><expr><name>H264_SEI_TYPE_USER_DATA_REGISTERED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sei_nalu_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>msg_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in_buf_size</name> <operator>=</operator> <call><name>CMSampleBufferGetTotalSampleSize</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_buf_size</name> <operator>=</operator> <name>header_size</name> <operator>+</operator>

<name>in_buf_size</name> <operator>+</operator>

<name>sei_nalu_size</name> <operator>+</operator>

<name>nalu_count</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>length_code_size</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>out_buf_size</name></expr></argument>, <argument><expr><name>out_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>add_header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>copy_param_sets</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>vid_fmt</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>out_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>copy_replace_length_codes</name><argument_list>(

<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>length_code_size</name></expr></argument>,

<argument><expr><name>sample_buffer</name></expr></argument>,

<argument><expr><name>sei</name></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>header_size</name></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>header_size</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error copying packet data: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_key_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <call><name>CMSampleBufferGetPresentationTimeStamp</name><argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <call><name>CMSampleBufferGetDecodeTimeStamp</name> <argument_list>(<argument><expr><name>sample_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CMTIME_IS_INVALID</name><argument_list>(<argument><expr><name>dts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dts</name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DTS is invalid.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dts_delta</name> <operator>=</operator> <ternary><condition><expr><name><name>vtctx</name><operator>-&gt;</operator><name>dts_delta</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>vtctx</name><operator>-&gt;</operator><name>dts_delta</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>time_base_num</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pts</name><operator>.</operator><name>value</name></name> <operator>/</operator> <name>time_base_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>dts</name><operator>.</operator><name>value</name></name> <operator>/</operator> <name>time_base_num</name> <operator>-</operator> <name>dts_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>out_buf_size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cv_pixel_info</name><parameter_list>(

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>plane_count</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>widths</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>heights</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>strides</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>contiguous_buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>av_format</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>av_color_range</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>range_guessed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>get_cv_pixel_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>av_format</name></expr></argument>, <argument><expr><name>av_color_range</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range_guessed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not get pixel format for color format '%s' range '%s'.\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>av_format</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>av_color_range</name> <operator>&gt;</operator> <name>AVCOL_RANGE_UNSPECIFIED</name> <operator>&amp;&amp;</operator>

<name>av_color_range</name> <operator>&lt;</operator> <name>AVCOL_RANGE_NB</name></expr> ?</condition><then>

<expr><call><name>av_color_range_name</name><argument_list>(<argument><expr><name>av_color_range</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>range_guessed</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>warned_color_range</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>warned_color_range</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Color range not set for %s. Using MPEG range.\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>av_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>av_format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>plane_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>widths</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strides</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>widths</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strides</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>plane_count</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>widths</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strides</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>widths</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strides</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>widths</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strides</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_P010LE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>plane_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>widths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strides</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><literal type="number">64</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>widths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>heights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>strides</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&amp;</operator> <operator>-</operator><literal type="number">64</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(

<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not get frame format info for color %d range %d.\n"</literal></expr></argument>,

<argument><expr><name>av_format</name></expr></argument>,

<argument><expr><name>av_color_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>contiguous_buf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>plane_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>plane_count</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>strides</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>contiguous_buf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>contiguous_buf_size</name> <operator>+=</operator> <name><name>strides</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_avframe_to_pixel_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>CVPixelBufferRef</name></type> <name>cv_img</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_strides</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name> <modifier>*</modifier></type><name>plane_rows</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>plane_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>src_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>copy_bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CVPixelBufferLockBaseAddress</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(

<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error: Could not lock base address of CVPixelBuffer: %d.\n"</literal></expr></argument>,

<argument><expr><name>status</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CVPixelBufferIsPlanar</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>plane_count</name> <operator>=</operator> <call><name>CVPixelBufferGetPlaneCount</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>plane_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CVPixelBufferUnlockBaseAddress</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error: different number of planes in AVFrame and CVPixelBuffer.\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_addr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>CVPixelBufferGetBaseAddressOfPlane</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_addr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>=</operator> <call><name>CVPixelBufferGetBytesPerRowOfPlane</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_stride</name> <operator>=</operator> <name><name>plane_strides</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>plane_rows</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_stride</name> <operator>==</operator> <name>src_stride</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_addr</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>src_stride</name> <operator>*</operator> <name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>copy_bytes</name> <operator>=</operator> <ternary><condition><expr><name>dst_stride</name> <operator>&lt;</operator> <name>src_stride</name></expr> ?</condition><then> <expr><name>dst_stride</name></expr> </then><else>: <expr><name>src_stride</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_addr</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>src_addr</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>copy_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CVPixelBufferUnlockBaseAddress</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error: different number of planes in AVFrame and non-planar CVPixelBuffer.\n"</literal></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst_addr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>CVPixelBufferGetBaseAddress</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_addr</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_stride</name> <operator>=</operator> <call><name>CVPixelBufferGetBytesPerRow</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_stride</name> <operator>=</operator> <name><name>plane_strides</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>plane_rows</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_stride</name> <operator>==</operator> <name>src_stride</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_addr</name></expr></argument>, <argument><expr><name>src_addr</name></expr></argument>, <argument><expr><name>src_stride</name> <operator>*</operator> <name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>copy_bytes</name> <operator>=</operator> <ternary><condition><expr><name>dst_stride</name> <operator>&lt;</operator> <name>src_stride</name></expr> ?</condition><then> <expr><name>dst_stride</name></expr> </then><else>: <expr><name>src_stride</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_addr</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>dst_stride</name></expr></argument>, <argument><expr><name>src_addr</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>src_stride</name></expr></argument>, <argument><expr><name>copy_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CVPixelBufferUnlockBaseAddress</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: Could not unlock CVPixelBuffer base address: %d.\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_cv_pixel_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>CVPixelBufferRef</name> <modifier>*</modifier></type><name>cv_img</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>widths</name> <index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>heights</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>strides</name><index>[<expr><name>AV_NUM_DATA_POINTERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>contiguous_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferPoolRef</name></type> <name>pix_buf_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VTEncContext</name><modifier>*</modifier></type> <name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cv_img</name> <operator>=</operator> <operator>(</operator><name>CVPixelBufferRef</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>*</operator><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRetain</name><argument_list>(<argument><expr><operator>*</operator><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>widths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>widths</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>heights</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>heights</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>strides</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strides</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>get_cv_pixel_info</name><argument_list>(

<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>frame</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>color</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>plane_count</name></expr></argument>,

<argument><expr><name>widths</name></expr></argument>,

<argument><expr><name>heights</name></expr></argument>,

<argument><expr><name>strides</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>contiguous_buf_size</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(

<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error: Cannot convert format %d color_range %d: %d\n"</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name></expr></argument>,

<argument><expr><name>status</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix_buf_pool</name> <operator>=</operator> <call><name>VTCompressionSessionGetPixelBufferPool</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pix_buf_pool</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>OSStatus</name></type> <name>vtstatus</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vtstatus</name> <operator>=</operator> <call><name>VTCompressionSessionPrepareToEncodeFrames</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vtstatus</name> <operator>==</operator> <name>kVTInvalidSessionErr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_configure_encoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pix_buf_pool</name> <operator>=</operator> <call><name>VTCompressionSessionGetPixelBufferPool</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pix_buf_pool</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not get pixel buffer pool.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"VT session restarted because of a "</literal>

<literal type="string">"kVTInvalidSessionErr error.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CVPixelBufferPoolCreatePixelBuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>pix_buf_pool</name></expr></argument>,

<argument><expr><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not create pixel buffer from pool: %d.\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>copy_avframe_to_pixel_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>*</operator><name>cv_img</name></expr></argument>, <argument><expr><name>strides</name></expr></argument>, <argument><expr><name>heights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><operator>*</operator><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cv_img</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_encoder_dict_h264</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>CFDictionaryRef</name><modifier>*</modifier></type> <name>dict_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>dict</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>keys</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>kVTEncodeFrameOptionKey_ForceKeyFrame</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>vals</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>kCFBooleanTrue</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>CFDictionaryCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dict</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dict_out</name> <operator>=</operator> <name>dict</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtenc_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CMTime</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>frame_dict</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>cv_img</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>side_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ExtraSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>create_cv_pixel_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv_img</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>create_encoder_dict_h264</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side_data</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_A53_CC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>a53_cc</name></name> <operator>&amp;&amp;</operator> <name>side_data</name> <operator>&amp;&amp;</operator> <name><name>side_data</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sei</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sei</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sei</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory for closed captions, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_alloc_a53_sei</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sei</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sei</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory for closed captions, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sei</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>CMTimeMake</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTCompressionSessionEncodeFrame</name><argument_list>(

<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>cv_img</name></expr></argument>,

<argument><expr><name>time</name></expr></argument>,

<argument><expr><name>kCMTimeInvalid</name></expr></argument>,

<argument><expr><name>frame_dict</name></expr></argument>,

<argument><expr><name>sei</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_dict</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>frame_dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>cv_img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot encode frame: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vtenc_frame</name><parameter_list>(

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>get_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMSampleBufferRef</name></type> <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ExtraSEI</name> <modifier>*</modifier></type><name>sei</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_send_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>vtctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>end_nopkt</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame_ct_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>first_pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame_ct_in</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>dts_delta</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>first_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame_ct_in</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>flushing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTCompressionSessionCompleteFrames</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kCMTimeIndefinite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error flushing frames: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>end_nopkt</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>get_frame</name> <operator>=</operator> <name><name>vtctx</name><operator>-&gt;</operator><name>dts_delta</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>frame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>get_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end_nopkt</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_q_pop</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><operator>!</operator><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end_nopkt</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end_nopkt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_cm_to_avpacket</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sei</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sei</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>sei</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end_nopkt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>end_nopkt</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vtenc_populate_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CMVideoCodecType</name></type> <name>codec_type</name></decl></parameter>,

<parameter><decl><type><name>CFStringRef</name></type> <name>profile_level</name></decl></parameter>,

<parameter><decl><type><name>CFNumberRef</name></type> <name>gamma_level</name></decl></parameter>,

<parameter><decl><type><name>CFDictionaryRef</name></type> <name>enc_info</name></decl></parameter>,

<parameter><decl><type><name>CFDictionaryRef</name></type> <name>pixel_buffer_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferPoolRef</name></type> <name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CVPixelBufferRef</name></type> <name>pix_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMTime</name></type> <name>time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CMSampleBufferRef</name></type> <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_create_encoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>codec_type</name></expr></argument>,

<argument><expr><name>profile_level</name></expr></argument>,

<argument><expr><name>gamma_level</name></expr></argument>,

<argument><expr><name>enc_info</name></expr></argument>,

<argument><expr><name>pixel_buffer_info</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>pe_cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>VTCompressionSessionGetPixelBufferPool</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting pixel buffer pool.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>pe_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>CVPixelBufferPoolCreatePixelBuffer</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>pool</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pix_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>kCVReturnSuccess</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating frame from pool: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>pe_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>CMTimeMake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTCompressionSessionEncodeFrame</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>pix_buf</name></expr></argument>,

<argument><expr><name>time</name></expr></argument>,

<argument><expr><name>kCMTimeInvalid</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error sending frame for extradata: %d\n"</literal></expr></argument>,

<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>pe_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>VTCompressionSessionCompleteFrames</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kCMTimeIndefinite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>pe_cleanup</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>vtenc_q_pop</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"popping: %d\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>pe_cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>pe_cleanup</name>:</label>

<if_stmt><if>if<condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>frame_ct_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vtenc_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VTEncContext</name> <modifier>*</modifier></type><name>vtctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>cv_sample_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtctx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VTCompressionSessionCompleteFrames</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>,

<argument><expr><name>kCMTimeIndefinite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_frame_queue</name><argument_list>(<argument><expr><name>vtctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>transfer_function</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>transfer_function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>transfer_function</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vtctx</name><operator>-&gt;</operator><name>ycbcr_matrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>vtctx</name><operator>-&gt;</operator><name>ycbcr_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vtctx</name><operator>-&gt;</operator><name>ycbcr_matrix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>avc_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>,

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>hevc_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>,

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_P010LE</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_OPTIONS</name></cpp:macro> <cpp:value>{ "allow_sw", "Allow software encoding", OFFSET(allow_sw), AV_OPT_TYPE_BOOL, { .i64 = 0 }, 0, 1, VE }, { "require_sw", "Require software encoding", OFFSET(require_sw), AV_OPT_TYPE_BOOL, { .i64 = 0 }, 0, 1, VE }, { "realtime", "Hint that encoding should happen in real-time if not faster (e.g. capturing from camera).", OFFSET(realtime), AV_OPT_TYPE_BOOL, { .i64 = 0 }, 0, 1, VE }, { "frames_before", "Other frames will come before the frames in this session. This helps smooth concatenation issues.", OFFSET(frames_before), AV_OPT_TYPE_BOOL, { .i64 = 0 }, 0, 1, VE }, { "frames_after", "Other frames will come after the frames in this session. This helps smooth concatenation issues.", OFFSET(frames_after), AV_OPT_TYPE_BOOL, { .i64 = 0 }, 0, 1, VE },</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VTEncContext, x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>h264_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"Profile"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>H264_PROF_AUTO</name></expr> }</block></expr>, <expr><name>H264_PROF_AUTO</name></expr>, <expr><name>H264_PROF_COUNT</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"baseline"</literal></expr>, <expr><literal type="string">"Baseline Profile"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>H264_PROF_BASELINE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">"Main Profile"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>H264_PROF_MAIN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"high"</literal></expr>, <expr><literal type="string">"High Profile"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>H264_PROF_HIGH</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"extended"</literal></expr>, <expr><literal type="string">"Extend Profile"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>H264_PROF_EXTENDED</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Level"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"1.3"</literal></expr>, <expr><literal type="string">"Level 1.3, only available with Baseline Profile"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">13</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3.0"</literal></expr>, <expr><literal type="string">"Level 3.0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">30</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3.1"</literal></expr>, <expr><literal type="string">"Level 3.1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">31</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3.2"</literal></expr>, <expr><literal type="string">"Level 3.2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">32</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4.0"</literal></expr>, <expr><literal type="string">"Level 4.0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">40</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4.1"</literal></expr>, <expr><literal type="string">"Level 4.1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">41</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4.2"</literal></expr>, <expr><literal type="string">"Level 4.2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">42</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.0"</literal></expr>, <expr><literal type="string">"Level 5.0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">50</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.1"</literal></expr>, <expr><literal type="string">"Level 5.1"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">51</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.2"</literal></expr>, <expr><literal type="string">"Level 5.2"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">52</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"coder"</literal></expr>, <expr><literal type="string">"Entropy coding"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>entropy</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VT_ENTROPY_NOT_SET</name></expr> }</block></expr>, <expr><name>VT_ENTROPY_NOT_SET</name></expr>, <expr><name>VT_CABAC</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cavlc"</literal></expr>, <expr><literal type="string">"CAVLC entropy coding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VT_CAVLC</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vlc"</literal></expr>, <expr><literal type="string">"CAVLC entropy coding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VT_CAVLC</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cabac"</literal></expr>, <expr><literal type="string">"CABAC entropy coding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VT_CABAC</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ac"</literal></expr>, <expr><literal type="string">"CABAC entropy coding"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>VT_CABAC</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"coder"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"a53cc"</literal></expr>, <expr><literal type="string">"Use A53 Closed Captions (if available)"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>a53_cc</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VE</name></expr> }</block></expr>,

<expr><name>COMMON_OPTIONS</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>h264_videotoolbox_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"h264_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>h264_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_h264_videotoolbox_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VideoToolbox H.264 Encoder"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <name>avc_pix_fmts</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vtenc_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>vtenc_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vtenc_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>h264_videotoolbox_class</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>hevc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"Profile"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HEVC_PROF_AUTO</name></expr> }</block></expr>, <expr><name>HEVC_PROF_AUTO</name></expr>, <expr><name>HEVC_PROF_COUNT</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">"Main Profile"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HEVC_PROF_MAIN</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"main10"</literal></expr>, <expr><literal type="string">"Main10 Profile"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HEVC_PROF_MAIN10</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<expr><name>COMMON_OPTIONS</name>

<block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>hevc_videotoolbox_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"hevc_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>hevc_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_hevc_videotoolbox_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_videotoolbox"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"VideoToolbox H.265 Encoder"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VTEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <name>hevc_pix_fmts</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vtenc_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>vtenc_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vtenc_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_HARDWARE</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>hevc_videotoolbox_class</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"videotoolbox"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
