<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\scpr3.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scpr.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>renew_table3</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>nsym</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cntsum</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>freqs</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>freqs1</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>cnts</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dectab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">4096</literal> <operator>/</operator> <name>nsym</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name>b</name> <operator>-</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>cntsum</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name>nsym</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>nsym</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>freqs</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqs1</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnts</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name>a</name> <operator>+</operator> <literal type="number">128</literal> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>f</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dectab</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reinit_tables3</name><parameter_list>(<parameter><decl><type><name>SCPRContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4096</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_model3</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>renew_table3</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>renew_table3</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>renew_table3</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>renew_table3</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>renew_table3</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>renew_table3</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>renew_table3</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode3</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name> <init>= <expr><name>a</name> <operator>*</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>&amp;</operator> <literal type="number">0xFFF</literal><operator>)</operator> <operator>-</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>code</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x800000</literal> <operator>&amp;&amp;</operator> <name>bytestream2_get_bytes_left</name><operator>(</operator><name>gb</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rescale</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>totfr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">256</literal> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>-=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>totfr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_symbol</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>totfr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <name>index</name></expr>;</condition> <incr><expr><name>c</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>symbol</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>maxpos</name></name> <operator>&gt;=</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>maxpos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>totfr</name> <operator>+=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>totfr</name> <operator>+</operator> <literal type="number">50</literal> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rescale</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>totfr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_adaptive45</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rccode</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>maxpos</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><operator>*</operator><name>c</name></expr></init></decl>, <decl><type ref="prev"/><name>totfr</name> <init>= <expr><operator>*</operator><name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>e</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>maxpos</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>maxpos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rccode</name> <operator>&gt;&gt;=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>maxpos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>maxpos</name></expr>]</index></name> <operator>+=</operator> <literal type="number">4096</literal> <operator>-</operator> <name>e</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>f</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>q</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>p</name> <init>= <expr><name>e</name> <operator>+</operator> <name>f</name> <operator>-</operator> <name>g</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>q</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rccode</name> <operator>&lt;</operator> <name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>rccode</name> <operator>-</operator> <name>e</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>rccode</name> <operator>&lt;&lt;</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>maxpos</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>add_symbol</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totfr</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>totfr</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>k</name> <operator>&gt;</operator> <name>rccode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <operator>*</operator><name>value</name> <operator>-</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>e</name> <operator>&lt;&lt;</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>k</name> <operator>&lt;&lt;</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>maxpos</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>q</name></expr>]</index></name> <operator>+=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>totfr</name> <operator>+=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>!=</operator> <name>maxpos</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>q</name></expr>]</index></name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>maxpos</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>maxpos</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>totfr</name> <operator>+</operator> <literal type="number">50</literal> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rescale</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totfr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>totfr</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <name>f</name> <operator>-</operator> <name>g</name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>maxpos</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>g</name> <operator>+</operator> <name>rccode</name> <operator>-</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>rccode</name> <operator>&lt;&lt;</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>add_symbol</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totfr</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>totfr</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model6_to_7</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>length</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>freqs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>freqs1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cnts</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>freqs</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>freqs1</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnts</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>cnts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cntsum</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>length</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqs</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqs1</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnts</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name> <operator>-</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>freqs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqs1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>e</name> <operator>+</operator> <literal type="number">127</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>f</name> <operator>+</operator> <name>e</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name> <operator>-</operator> <name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>dectab</name><index>[<expr><name>p</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_sum</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">256</literal> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>m</name><operator>-&gt;</operator><name>fshift</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>fshift</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rescale_dec</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>cnts</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>freqs</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>fshift</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cnts</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cnts</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name><name>cnts</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>cnts</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>fshift</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>fshift</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">256</literal> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name></expr> ?</condition><then> <expr><name><name>m</name><operator>-&gt;</operator><name>fshift</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>b</name></expr>]</index></name> <operator>-=</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>e</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model5_to_6</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">256</literal> <operator>-</operator> <name>c</name></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;=</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>d</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>g</name> <operator>=</operator> <name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>q</name> <operator>&lt;&lt;</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>&lt;&lt;</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>-</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>fshift</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>n</name><operator>.</operator><name>fshift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>f</name> <operator>=</operator> <name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>d</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>d</name> <operator>=</operator> <ternary><condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>g</name></expr> ?</condition><then> <expr><name>f</name> <operator>+</operator> <name>g</name> <operator>+</operator> <operator>(</operator><name>value</name> <operator>-</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>n</name><operator>.</operator><name>fshift</name></name><operator>)</operator></expr> </then><else>: <expr><name>value</name> <operator>&lt;&lt;</operator> <name><name>n</name><operator>.</operator><name>fshift</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>e</name> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">25</literal> <operator>&lt;&lt;</operator> <name><name>n</name><operator>.</operator><name>fshift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>+</operator> <name>e</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rescale_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>calc_sum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>size</name></name></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>f</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name></expr>]</index></name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>c</name></expr>]</index></name></expr><operator>,</operator> <expr><name>q</name> <operator>&gt;</operator> <name>k</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>grow_dec</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_dec</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sym</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <literal type="number">40</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>sym</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name></expr>]</index></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>f2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>f1</name> <operator>-</operator> <operator>(</operator><name>f1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>incr_cntdec</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">25</literal> <operator>&lt;&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>len</name></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name><index>[<expr><name>len</name></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rescale_dec</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_adaptive6</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>p</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>code</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>k</name> <operator>&gt;</operator> <name>code</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>incr_cntdec</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>d</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>code</name> <operator>-</operator> <operator>(</operator><name>d</name> <operator>+</operator> <name>c</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>f</name> <operator>+</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>c</name> <operator>+</operator> <operator>(</operator><name>f</name> <operator>&lt;&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>code</name> <operator>&gt;&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>q</name> <operator>&lt;&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>fshift</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>add_dec</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>grow_dec</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>add_dec</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>incr_cntdec</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmpbytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model1_to_2</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>b</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model1_to_4</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>n</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>symbols</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>cmpbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>n</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>maxpos</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model1_to_5</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>freqs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>symbols</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>cmpbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>maxpos</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">256</literal> <operator>-</operator> <name>size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>a</name> <operator>+=</operator> <name>freqs</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>freqs</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cntsum</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_static1</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>update_model1_to_4</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>update_model1_to_5</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>update_model1_to_2</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model2_to_6</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>a4</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>symbols</name></name></expr></argument>, <argument><expr><literal type="number">1u</literal></expr></argument>, <argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">256</literal> <operator>-</operator> <name>c</name> <operator>+</operator> <operator>(</operator><literal type="number">64</literal> <operator>*</operator> <name>c</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;=</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>cmpbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>g</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>q</name> <operator>&lt;&lt;</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>p</name></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>&lt;&lt;</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>l</name> <operator>-</operator> <operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>+=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>fshift</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calc_sum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>d</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>d</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model2_to_3</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_static2</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>update_model2_to_6</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>update_model2_to_3</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model3_to_7</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <operator>(</operator><literal type="number">4096</literal> <operator>-</operator> <operator>(</operator><literal type="number">256</literal> <operator>-</operator> <name>c</name><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <name>d</name> <operator>-</operator> <operator>(</operator><name>d</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name>c</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>g</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>value</name></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>value</name></expr>]</index></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>c</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>cntsum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><literal type="number">256</literal> <operator>&gt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>cntsum</name></name> <operator>+=</operator> <name><name>n</name><operator>.</operator><name>cnts</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>freqs1</name><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>e</name></expr>]</index></name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">128</literal> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr><operator>,</operator> <expr><name>f</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <name>g</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>f</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>dectab</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_static3</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>update_model3_to_7</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sync_code3</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>code1</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc</name><operator>-&gt;</operator><name>code1</name></name> <operator>==</operator> <literal type="number">0x20000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>code1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_value3</name><parameter_list>(<parameter><decl><type><name>SCPRContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>cntsum</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>freqs1</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>freqs2</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>cnts</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dectable</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>dectable</name><index>[<expr><operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>&amp;</operator> <literal type="number">0xFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>freqs2</name><index>[<expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <operator>(</operator><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>&amp;</operator> <literal type="number">0xFFF</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>r</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cnts</name><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>freqs1</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>freqs2</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cntsum</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cntsum</name> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>cntsum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>cnts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqs2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>freqs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">127</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>g</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>q</name> <operator>-</operator> <name>g</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dectable</name><index>[<expr><name>j</name> <operator>+</operator> <name>g</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>e</name> <operator>-</operator> <operator>(</operator><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cnts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cntsum</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_sum5</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">256</literal> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cntsum</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_model4_to_5</name><parameter_list>(<parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PixelModel3</name></type> <name>n</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>totfr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;</operator> <name>value</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>g</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr><operator>,</operator> <expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>symbols</name><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <name><name>n</name><operator>.</operator><name>freqs</name><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>n</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rescale</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totfr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>calc_sum5</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_unit3</name><parameter_list>(<parameter><decl><type><name>SCPRContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PixelModel3</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>symbols</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_static1</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_static2</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_static3</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>param</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>freqs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decode_adaptive45</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_model4_to_5</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decode_adaptive45</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>cntsum</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_model5_to_6</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>decode_adaptive6</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>update_model6_to_7</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<return>return <expr><call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>freqs</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>freqs1</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cnts</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>dectab</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_units3</name><parameter_list>(<parameter><decl><type><name>SCPRContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>red</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>green</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>blue</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cx1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_unit3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>*</operator><name>cx</name> <operator>+</operator> <operator>*</operator><name>cx1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>, <argument><expr><name>red</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cx1</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cx</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFC0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <operator>*</operator><name>red</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_unit3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>*</operator><name>cx</name> <operator>+</operator> <operator>*</operator><name>cx1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>, <argument><expr><name>green</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cx1</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cx</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFC0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <operator>*</operator><name>green</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_unit3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pixel_model3</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>*</operator><name>cx</name> <operator>+</operator> <operator>*</operator><name>cx1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr></argument>, <argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cx1</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>cx</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFC0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cx</name> <operator>=</operator> <operator>*</operator><name>blue</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_rangecoder3</name><parameter_list>(<parameter><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>code1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decompress_i3</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCPRContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RangeCoder</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cx1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>off</name></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>backstep</name> <init>= <expr><name>linesize</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>clr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lx</name></decl>, <decl><type ref="prev"/><name>ly</name></decl>, <decl><type ref="prev"/><name>ptype</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_rangecoder3</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reinit_tables3</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_units3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>run</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>clr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lx</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ly</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>-</operator><name>linesize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_units3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_run_i</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ptype</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ly</name></expr></argument>,

<argument><expr><name>backstep</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decompress_p3</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plinesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SCPRContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cx1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backstep</name> <init>= <expr><name>linesize</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mvx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mvy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_rangecoder3</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>min</name> <operator>+=</operator> <name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>range_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max</name> <operator>+=</operator> <name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min</name> <operator>&gt;</operator> <name>max</name> <operator>||</operator> <name>min</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nbcount</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nbcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>min</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fill</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fill_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>cntsum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>cnts</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>count_model3</name><operator>.</operator><name>dectab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>min</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nbcount</name></name> <operator>&amp;&amp;</operator> <name>count</name><operator>--</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>min</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_copy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nby</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nbx</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sy1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sy2</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>, <decl><type ref="prev"/><name>sx1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sx2</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nbx</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nbx</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sxy_model3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sx2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sy2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nbx</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name>y</name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>, <decl><type ref="prev"/><name>bx</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>code</name></name> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name>a</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>code</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFF800</literal><operator>)</operator> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>code</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x800000</literal> <operator>&amp;&amp;</operator> <name>bytestream2_get_bytes_left</name><operator>(</operator><name>gb</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>code</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sync_code3</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">511</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mvx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">511</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_model3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mvy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mvx</name> <operator>-=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mvy</name> <operator>-=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>by</name> <operator>+</operator> <name>mvy</name> <operator>+</operator> <name>sy1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>bx</name> <operator>+</operator> <name>mvx</name> <operator>+</operator> <name>sx1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name>by</name> <operator>+</operator> <name>mvy</name> <operator>+</operator> <name>sy1</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator> <name>bx</name> <operator>+</operator> <name>mvx</name> <operator>+</operator> <name>sx1</name> <operator>&gt;=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sy2</name> <operator>-</operator> <name>sy1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>by</name> <operator>+</operator> <name>sy1</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>by</name> <operator>+</operator> <name>mvy</name> <operator>+</operator> <name>sy1</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sx2</name> <operator>-</operator> <name>sx1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bx</name> <operator>+</operator> <name>sx1</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>bx</name> <operator>+</operator> <name>mvx</name> <operator>+</operator> <name>sx1</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>by</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>sy1</name><operator>)</operator> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>bx</name> <operator>+</operator> <name>sx1</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>prev</name><index>[<expr><operator>(</operator><name>by</name> <operator>+</operator> <name>mvy</name> <operator>+</operator> <name>sy1</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>plinesize</name> <operator>+</operator> <name>bx</name> <operator>+</operator> <name>sx1</name> <operator>+</operator> <name>mvx</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>bx</name> <init>= <expr><name>x</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sx1</name></expr></init></decl>, <decl><type ref="prev"/><name>by</name> <init>= <expr><name>y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sy1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>clr</name></decl>, <decl><type ref="prev"/><name>ptype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>y</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>sy2</name> <operator>&amp;&amp;</operator> <name>by</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>op_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_units3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>clr</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ptype</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_value3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>cntsum</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name><name>freqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>cnts</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_model3</name><index>[<expr><name>ptype</name></expr>]</index></name><operator>.</operator><name>dectab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_run_p</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ptype</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>plinesize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>by</name></expr></argument>,

<argument><expr><name>backstep</name></expr></argument>, <argument><expr><name>sx1</name></expr></argument>, <argument><expr><name>sx2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
