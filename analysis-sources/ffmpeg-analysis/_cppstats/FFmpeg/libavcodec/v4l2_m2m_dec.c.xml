<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\v4l2_m2m_dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/videodev2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_context.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_m2m.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"v4l2_fmt.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_try_start</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>V4L2m2mPriv</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>context</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>capture</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>capture</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>output</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_selection</name></name></type> <name>selection</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>output</name><operator>-&gt;</operator><name>streamon</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_context_set_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VIDIOC_STREAMON on output context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>capture</name><operator>-&gt;</operator><name>streamon</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>capture</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_G_FMT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>capture</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"VIDIOC_G_FMT ioctl\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <call><name>ff_v4l2_format_v4l2_to_avfmt</name><argument_list>(<argument><expr><name><name>capture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>fmt</name><operator>.</operator><name>pix_mp</name><operator>.</operator><name>pixelformat</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_RAWVIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>av_pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selection</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selection</name><operator>.</operator><name>r</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>selection</name><operator>.</operator><name>r</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_S_SELECTION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_G_SELECTION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"VIDIOC_G_SELECTION ioctl\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"crop output %dx%d\n"</literal></expr></argument>, <argument><expr><name><name>selection</name><operator>.</operator><name>r</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>selection</name><operator>.</operator><name>r</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>selection</name><operator>.</operator><name>r</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>selection</name><operator>.</operator><name>r</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>capture</name><operator>-&gt;</operator><name>buffers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_context_init</name><argument_list>(<argument><expr><name>capture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't request capture buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_context_set_status</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>VIDIOC_STREAMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"VIDIOC_STREAMON, on capture context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_prepare_decoder</name><parameter_list>(<parameter><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>v4l2_event_subscription</name></name></type> <name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sub</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>V4L2_EVENT_SOURCE_CHANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>VIDIOC_SUBSCRIBE_EVENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>output</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"the v4l2 driver does not support VIDIOC_SUBSCRIBE_EVENT\n"</literal>

<literal type="string">"you must provide codec_height and codec_width on input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>v4l2_receive_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>V4L2m2mPriv</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name><operator>)</operator><operator>-&gt;</operator><name>context</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>capture</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>capture</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier><specifier>const</specifier></type> <name>output</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>avpkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buf_pkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>avpkt</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_pkt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf_pkt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_decode_get_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>draining</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>dequeue</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_context_enqueue_packet</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_pkt</name></name> <operator>=</operator> <name>avpkt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>v4l2_try_start</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>dequeue</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buf_pkt</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>ff_v4l2_context_dequeue_frame</name><argument_list>(<argument><expr><name>capture</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>v4l2_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2Context</name> <modifier>*</modifier></type><name>capture</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2m2mPriv</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_m2m_create_context</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>capture</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>capture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>capture</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>capture</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>av_codec_id</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>av_pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>av_codec_id</name></name> <operator>=</operator> <name>AV_CODEC_ID_RAWVIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>capture</name><operator>-&gt;</operator><name>av_pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_v4l2_m2m_codec_init</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"can't configure decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>self_ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>context_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>v4l2_prepare_decoder</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>v4l2_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V4L2m2mPriv</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>V4L2m2mContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buf_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_v4l2_m2m_codec_end</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(V4L2m2mPriv, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>V4L_M2M_DEFAULT_OPTS</name></expr>,

<expr><block>{ <expr><literal type="string">"num_capture_buffers"</literal></expr>, <expr><literal type="string">"Number of buffers in the capture context"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>num_capture_buffers</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">20</literal></expr>}</block></expr>, <expr><literal type="number">20</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M2MDEC_CLASS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass v4l2_m2m_ ##NAME ##_dec_class = { .class_name = #NAME "_v4l2m2m_decoder", .item_name = av_default_item_name, .option = options, .version = LIBAVUTIL_VERSION_INT, };</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M2MDEC</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>LONGNAME</name></type></parameter>, <parameter><type><name>CODEC</name></type></parameter>, <parameter><type><name>bsf_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>M2MDEC_CLASS(NAME) AVCodec ff_ ##NAME ##_v4l2m2m_decoder = { .name = #NAME "_v4l2m2m" , .long_name = NULL_IF_CONFIG_SMALL("V4L2 mem2mem " LONGNAME " decoder wrapper"), .type = AVMEDIA_TYPE_VIDEO, .id = CODEC , .priv_data_size = sizeof(V4L2m2mPriv), .priv_class = &amp;v4l2_m2m_ ##NAME ##_dec_class, .init = v4l2_decode_init, .receive_frame = v4l2_receive_frame, .close = v4l2_decode_close, .bsfs = bsf_name, .capabilities = AV_CODEC_CAP_HARDWARE | AV_CODEC_CAP_DELAY | AV_CODEC_CAP_AVOID_PROBING, .caps_internal = FF_CODEC_CAP_SETS_PKT_DTS, .wrapper_name = "v4l2m2m", }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>h264</name></expr></argument>, <argument><expr><literal type="string">"H.264"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_H264</name></expr></argument>, <argument><expr><literal type="string">"h264_mp4toannexb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>hevc</name></expr></argument>, <argument><expr><literal type="string">"HEVC"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_HEVC</name></expr></argument>, <argument><expr><literal type="string">"hevc_mp4toannexb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>mpeg1</name></expr></argument>, <argument><expr><literal type="string">"MPEG1"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_MPEG1VIDEO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>mpeg2</name></expr></argument>, <argument><expr><literal type="string">"MPEG2"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>mpeg4</name></expr></argument>, <argument><expr><literal type="string">"MPEG4"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_MPEG4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>h263</name></expr></argument>, <argument><expr><literal type="string">"H.263"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_H263</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>vc1</name></expr></argument> , <argument><expr><literal type="string">"VC1"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_VC1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>vp8</name></expr></argument>, <argument><expr><literal type="string">"VP8"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_VP8</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M2MDEC</name><argument_list>(<argument><expr><name>vp9</name></expr></argument>, <argument><expr><literal type="string">"VP9"</literal></expr></argument>, <argument><expr><name>AV_CODEC_ID_VP9</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</unit>
