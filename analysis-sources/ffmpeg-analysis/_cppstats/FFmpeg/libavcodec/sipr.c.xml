<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\sipr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_pitch_delay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SUBFRAME_COUNT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sipr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"siprdata.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SiprModeParam</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>bits_per_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>subframe_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>frames_per_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pitch_sharp_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>number_of_fc_indexes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ma_predictor_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>vq_indexes_bits</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pitch_delay_bits</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>gp_index_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fc_index_bits</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>gc_index_bits</name></decl>;</decl_stmt> 

}</block></struct></type> <name>SiprModeParam</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SiprModeParam</name></type> <name><name>modes</name><index>[<expr><name>MODE_COUNT</name></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>MODE_16k</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>mode_name</name> <operator>=</operator> <literal type="string">"16k"</literal></expr>,

<expr><operator>.</operator><name>bits_per_frame</name> <operator>=</operator> <literal type="number">160</literal></expr>,

<expr><operator>.</operator><name>subframe_count</name> <operator>=</operator> <name>SUBFRAME_COUNT_16k</name></expr>,

<expr><operator>.</operator><name>frames_per_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>pitch_sharp_factor</name> <operator>=</operator> <literal type="number">0.00</literal></expr>,

<expr><operator>.</operator><name>number_of_fc_indexes</name> <operator>=</operator> <literal type="number">10</literal></expr>,

<expr><operator>.</operator><name>ma_predictor_bits</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>vq_indexes_bits</name> <operator>=</operator> <block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>pitch_delay_bits</name> <operator>=</operator> <block>{<expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>gp_index_bits</name> <operator>=</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>fc_index_bits</name> <operator>=</operator> <block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>gc_index_bits</name> <operator>=</operator> <literal type="number">5</literal></expr>

}</block></expr>,

<expr><index>[<expr><name>MODE_8k5</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>mode_name</name> <operator>=</operator> <literal type="string">"8k5"</literal></expr>,

<expr><operator>.</operator><name>bits_per_frame</name> <operator>=</operator> <literal type="number">152</literal></expr>,

<expr><operator>.</operator><name>subframe_count</name> <operator>=</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>frames_per_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>pitch_sharp_factor</name> <operator>=</operator> <literal type="number">0.8</literal></expr>,

<expr><operator>.</operator><name>number_of_fc_indexes</name> <operator>=</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>ma_predictor_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>vq_indexes_bits</name> <operator>=</operator> <block>{<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>pitch_delay_bits</name> <operator>=</operator> <block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>gp_index_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>fc_index_bits</name> <operator>=</operator> <block>{<expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>gc_index_bits</name> <operator>=</operator> <literal type="number">7</literal></expr>

}</block></expr>,

<expr><index>[<expr><name>MODE_6k5</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>mode_name</name> <operator>=</operator> <literal type="string">"6k5"</literal></expr>,

<expr><operator>.</operator><name>bits_per_frame</name> <operator>=</operator> <literal type="number">232</literal></expr>,

<expr><operator>.</operator><name>subframe_count</name> <operator>=</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>frames_per_packet</name> <operator>=</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>pitch_sharp_factor</name> <operator>=</operator> <literal type="number">0.8</literal></expr>,

<expr><operator>.</operator><name>number_of_fc_indexes</name> <operator>=</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>ma_predictor_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>vq_indexes_bits</name> <operator>=</operator> <block>{<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>pitch_delay_bits</name> <operator>=</operator> <block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>gp_index_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>fc_index_bits</name> <operator>=</operator> <block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>gc_index_bits</name> <operator>=</operator> <literal type="number">7</literal></expr>

}</block></expr>,

<expr><index>[<expr><name>MODE_5k0</name></expr>]</index> <operator>=</operator> <block>{

<expr><operator>.</operator><name>mode_name</name> <operator>=</operator> <literal type="string">"5k0"</literal></expr>,

<expr><operator>.</operator><name>bits_per_frame</name> <operator>=</operator> <literal type="number">296</literal></expr>,

<expr><operator>.</operator><name>subframe_count</name> <operator>=</operator> <literal type="number">5</literal></expr>,

<expr><operator>.</operator><name>frames_per_packet</name> <operator>=</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>pitch_sharp_factor</name> <operator>=</operator> <literal type="number">0.85</literal></expr>,

<expr><operator>.</operator><name>number_of_fc_indexes</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>ma_predictor_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>vq_indexes_bits</name> <operator>=</operator> <block>{<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>pitch_delay_bits</name> <operator>=</operator> <block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>gp_index_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>fc_index_bits</name> <operator>=</operator> <block>{<expr><literal type="number">10</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>gc_index_bits</name> <operator>=</operator> <literal type="number">7</literal></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>ff_pow_0_5</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>,

<expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>,

<expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>,

<expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>, <expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dequant</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>cbs</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_vec</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_vec</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>stride</name><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name><name>cbs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>stride</name><operator>*</operator><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stride</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf_decode_fp</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsfnew</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsf_history</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>SiprParameters</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>lsf_tmp</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dequant</name><argument_list>(<argument><expr><name>lsf_tmp</name></expr></argument>, <argument><expr><name><name>parm</name><operator>-&gt;</operator><name>vq_indexes</name></name></expr></argument>, <argument><expr><name>lsf_codebooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsfnew</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lsf_history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.33</literal> <operator>+</operator> <name><name>lsf_tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>mean_lsf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_sort_nearly_sorted_floats</name><argument_list>(<argument><expr><name>lsfnew</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_set_min_dist_lsf</name><argument_list>(<argument><expr><name>lsfnew</name></expr></argument>, <argument><expr><name>LSFQ_DIFF_MIN</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsfnew</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>lsfnew</name><index>[<expr><name>LP_FILTER_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.3</literal> <operator>*</operator> <name>M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lsf_history</name></expr></argument>, <argument><expr><name>lsf_tmp</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lsf_history</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsfnew</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name><name>lsfnew</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>lsfnew</name><index>[<expr><name>LP_FILTER_ORDER</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">6.153848</literal> <operator>/</operator> <name>M_PI</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pitch_sharpening</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pitch_lag_int</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>beta</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>fixed_vector</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pitch_lag_int</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFR_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fixed_vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>beta</name> <operator>*</operator> <name><name>fixed_vector</name><index>[<expr><name>i</name> <operator>-</operator> <name>pitch_lag_int</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_parameters</name><parameter_list>(<parameter><decl><type><name>SiprParameters</name><modifier>*</modifier></type> <name>parms</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>pgb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>SiprModeParam</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ma_predictor_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>ma_pred_switch</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>ma_predictor_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>vq_indexes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>vq_indexes_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>subframe_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>pitch_delay</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pitch_delay_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>gp_index_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>gp_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>gp_index_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>number_of_fc_indexes</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>fc_indexes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fc_index_bits</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>parms</name><operator>-&gt;</operator><name>gc_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>pgb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>gc_index_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sipr_decode_lp</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsfnew</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lsfold</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>Az</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_subfr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>lsfint</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>t0</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>num_subfr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>t0</name> <operator>*</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_subfr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsfint</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>lsfold</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>t</name><operator>)</operator> <operator>+</operator> <name>t</name> <operator>*</operator> <name><name>lsfnew</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_amrwb_lsp2lpc</name><argument_list>(<argument><expr><name>lsfint</name></expr></argument>, <argument><expr><name>Az</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Az</name> <operator>+=</operator> <name>LP_FILTER_ORDER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>t0</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eval_ir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>Az</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_lag</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>freq</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>pitch_sharp_factor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>tmp1</name><index>[<expr><name>SUBFR_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><name>LP_FILTER_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmp1</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Az</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_pow_0_55</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp2</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>Az</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_pow_0_7</name> <index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp1</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">37</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>freq</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>SUBFR_SIZE</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pitch_sharpening</name><argument_list>(<argument><expr><name>pitch_lag</name></expr></argument>, <argument><expr><name>pitch_sharp_factor</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convolute_with_sparse</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AMRFixed</name> <modifier>*</modifier></type><name>pulses</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>shape</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pulses</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>pulses</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>pulses</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>shape</name><index>[<expr><name>j</name> <operator>-</operator> <name><name>pulses</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>postfilter_5k0</name><parameter_list>(<parameter><decl><type><name>SiprContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>buf</name><index>[<expr><name>SUBFR_SIZE</name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pole_out</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>lpc_n</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>lpc_d</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>lpc_d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_pow_0_75</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpc_n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ff_pow_0_5</name> <index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pole_out</name> <operator>-</operator> <name>LP_FILTER_ORDER</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_mem</name></name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>pole_out</name></expr></argument>, <argument><expr><name>lpc_d</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>SUBFR_SIZE</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_mem</name></name></expr></argument>, <argument><expr><name>pole_out</name> <operator>+</operator> <name>SUBFR_SIZE</name> <operator>-</operator> <name>LP_FILTER_ORDER</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tilt_compensation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tilt_mem</name></name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>, <argument><expr><name>pole_out</name></expr></argument>, <argument><expr><name>SUBFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pole_out</name> <operator>-</operator> <name>LP_FILTER_ORDER</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_mem5k0</name></name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pole_out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_mem5k0</name></name></expr></argument>, <argument><expr><name>pole_out</name> <operator>+</operator> <name>SUBFR_SIZE</name> <operator>-</operator> <name>LP_FILTER_ORDER</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pole_out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_zero_synthesis_filterf</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>lpc_n</name></expr></argument>, <argument><expr><name>pole_out</name></expr></argument>, <argument><expr><name>SUBFR_SIZE</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_fixed_sparse</name><parameter_list>(<parameter><decl><type><name>AMRFixed</name> <modifier>*</modifier></type><name>fixed_sparse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>pulses</name></decl></parameter>,

<parameter><decl><type><name>SiprMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>low_gain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MODE_6k5</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_8k5</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator> <name><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pulses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x100</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1.0</literal></expr></then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<ternary><condition><expr><operator>(</operator><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then>

<expr><operator>-</operator><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr> ]</index></name></expr> </then><else>: <expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MODE_5k0</name></expr>:</case>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>low_gain</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x200</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">4</literal> <operator>-</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>index</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pulse_subset</name> <init>= <expr><operator>(</operator><name><name>pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>pulse_subset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>pulse_subset</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pulses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x200</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>fixed_sparse</name><operator>-&gt;</operator><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fixed_sparse</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>SiprContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>SiprParameters</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subframe_count</name> <init>= <expr><name><name>modes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index></name><operator>.</operator><name>subframe_count</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name> <init>= <expr><name>subframe_count</name> <operator>*</operator> <name>SUBFR_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>Az</name><index>[<expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <name>MAX_SUBFRAME_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>excitation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>ir_buf</name><index>[<expr><name>SUBFR_SIZE</name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>lsf_new</name><index>[<expr><name>LP_FILTER_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>impulse_response</name> <init>= <expr><name>ir_buf</name> <operator>+</operator> <name>LP_FILTER_ORDER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>synth</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>synth_buf</name></name> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>t0_first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMRFixed</name></type> <name>fixed_cb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ir_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lsf_decode_fp</name><argument_list>(<argument><expr><name>lsf_new</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsf_history</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sipr_decode_lp</name><argument_list>(<argument><expr><name>lsf_new</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp_history</name></name></expr></argument>, <argument><expr><name>Az</name></expr></argument>, <argument><expr><name>subframe_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp_history</name></name></expr></argument>, <argument><expr><name>lsf_new</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>excitation</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>excitation</name></name> <operator>+</operator> <name>PITCH_DELAY_MAX</name> <operator>+</operator> <name>L_INTERPOL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pAz</name> <init>= <expr><name>Az</name> <operator>+</operator> <name>i</name><operator>*</operator><name>LP_FILTER_ORDER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>fixed_vector</name><index>[<expr><name>SUBFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>T0</name></decl>,<decl><type ref="prev"/><name>T0_frac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pitch_gain</name></decl>, <decl><type ref="prev"/><name>gain_code</name></decl>, <decl><type ref="prev"/><name>avg_energy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_decode_pitch_lag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T0_frac</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>pitch_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t0_first</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_5k0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_5k0</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t0_first</name> <operator>=</operator> <name>T0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_acelp_interpolatef</name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>excitation</name> <operator>-</operator> <name>T0</name> <operator>+</operator> <operator>(</operator><name>T0_frac</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>,

<argument><expr><name>ff_b60_sinc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,

<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>T0_frac</name><operator>)</operator><operator>%</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>,

<argument><expr><name>SUBFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_fixed_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed_cb</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>fc_indexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_pitch_gain</name></name> <operator>&lt;</operator> <literal type="number">0.8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>eval_ir</name><argument_list>(<argument><expr><name>pAz</name></expr></argument>, <argument><expr><name>T0</name></expr></argument>, <argument><expr><name>impulse_response</name></expr></argument>, <argument><expr><name><name>modes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index></name><operator>.</operator><name>pitch_sharp_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>convolute_with_sparse</name><argument_list>(<argument><expr><name>fixed_vector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixed_cb</name></expr></argument>, <argument><expr><name>impulse_response</name></expr></argument>,

<argument><expr><name>SUBFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avg_energy</name> <operator>=</operator> <operator>(</operator><literal type="number">0.01</literal> <operator>+</operator> <call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name>fixed_vector</name></expr></argument>,

<argument><expr><name>fixed_vector</name></expr></argument>,

<argument><expr><name>SUBFR_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator>

<name>SUBFR_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>past_pitch_gain</name></name> <operator>=</operator> <name>pitch_gain</name> <operator>=</operator> <name><name>gain_cb</name><index>[<expr><name><name>params</name><operator>-&gt;</operator><name>gc_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_code</name> <operator>=</operator> <call><name>ff_amr_set_fixed_gain</name><argument_list>(<argument><expr><name><name>gain_cb</name><index>[<expr><name><name>params</name><operator>-&gt;</operator><name>gc_index</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>avg_energy</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>energy_history</name></name></expr></argument>,

<argument><expr><literal type="number">34</literal> <operator>-</operator> <literal type="number">15.0</literal><operator>/</operator><operator>(</operator><literal type="number">0.05</literal><operator>*</operator><name>M_LN10</name><operator>/</operator><name>M_LN2</name><operator>)</operator></expr></argument>,

<argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_weighted_vector_sumf</name><argument_list>(<argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>fixed_vector</name></expr></argument>,

<argument><expr><name>pitch_gain</name></expr></argument>, <argument><expr><name>gain_code</name></expr></argument>, <argument><expr><name>SUBFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pitch_gain</name> <operator>*=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>pitch_gain</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pitch_gain</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>pitch_gain</name></expr></argument>, <argument><expr><literal type="number">0.4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gain_mem</name></name> <operator>=</operator> <literal type="number">0.7</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gain_mem</name></name> <operator>+</operator> <literal type="number">0.3</literal> <operator>*</operator> <name>pitch_gain</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gain_mem</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>gain_mem</name></name></expr></argument>, <argument><expr><name>pitch_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_code</name> <operator>*=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gain_mem</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SUBFR_SIZE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fixed_vector</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>excitation</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>gain_code</name> <operator>*</operator> <name><name>fixed_vector</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_5k0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>postfilter_5k0</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pAz</name></expr></argument>, <argument><expr><name>fixed_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_syn5k0</name></name> <operator>+</operator> <name>LP_FILTER_ORDER</name> <operator>+</operator> <name>i</name><operator>*</operator><name>SUBFR_SIZE</name></expr></argument>,

<argument><expr><name>pAz</name></expr></argument>, <argument><expr><name>excitation</name></expr></argument>, <argument><expr><name>SUBFR_SIZE</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filterf</name><argument_list>(<argument><expr><name>synth</name> <operator>+</operator> <name>i</name><operator>*</operator><name>SUBFR_SIZE</name></expr></argument>, <argument><expr><name>pAz</name></expr></argument>, <argument><expr><name>fixed_vector</name></expr></argument>,

<argument><expr><name>SUBFR_SIZE</name></expr></argument>, <argument><expr><name>LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>excitation</name> <operator>+=</operator> <name>SUBFR_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>synth</name> <operator>-</operator> <name>LP_FILTER_ORDER</name></expr></argument>, <argument><expr><name>synth</name> <operator>+</operator> <name>frame_size</name> <operator>-</operator> <name>LP_FILTER_ORDER</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_5k0</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>energy</name> <init>= <expr><call><name>avpriv_scalarproduct_float_c</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_syn5k0</name></name> <operator>+</operator> <name>LP_FILTER_ORDER</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFR_SIZE</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_syn5k0</name></name> <operator>+</operator> <name>LP_FILTER_ORDER</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>SUBFR_SIZE</name></expr></argument>,

<argument><expr><name>SUBFR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_adaptive_gain_control</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>synth</name><index>[<expr><name>i</name> <operator>*</operator> <name>SUBFR_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>synth</name><index>[<expr><name>i</name> <operator>*</operator> <name>SUBFR_SIZE</name></expr>]</index></name></expr></argument>, <argument><expr><name>energy</name></expr></argument>,

<argument><expr><name>SUBFR_SIZE</name></expr></argument>, <argument><expr><literal type="number">0.9</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_agc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_syn5k0</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>postfilter_syn5k0</name></name> <operator>+</operator> <name>frame_size</name></expr></argument>,

<argument><expr><name>LP_FILTER_ORDER</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>excitation</name></name></expr></argument>, <argument><expr><name>excitation</name> <operator>-</operator> <name>PITCH_DELAY_MAX</name> <operator>-</operator> <name>L_INTERPOL</name></expr></argument>,

<argument><expr><operator>(</operator><name>PITCH_DELAY_MAX</name> <operator>+</operator> <name>L_INTERPOL</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>ff_acelp_apply_order_2_transfer_function</name><argument_list>(<argument>out_data</argument>, <argument>synth</argument>,

<argument>(const float[<literal type="number">2</literal>]) {-<literal type="number">1.99997</literal></argument> , <argument><literal type="number">1.000000000</literal>}</argument>,

<argument>(const float[<literal type="number">2</literal>]) {-<literal type="number">1.93307352</literal></argument>, <argument><literal type="number">0.935891986</literal>}</argument>,

<argument><literal type="number">0.939805806</literal></argument>,

<argument>ctx-&gt;highpass_filt_mem</argument>,

<argument>frame_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>sipr_decoder_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SiprContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">20</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_16k</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">19</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_8k5</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">29</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_6k5</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">37</literal></expr>:</case> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_5k0</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">12200</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_16k</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">7500</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_8k5</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">5750</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_6k5</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MODE_5k0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Invalid block_align: %d. Mode %s guessed based on bitrate: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>, <argument><expr><name><name>modes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index></name><operator>.</operator><name>mode_name</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Mode: %s\n"</literal></expr></argument>, <argument><expr><name><name>modes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index></name><operator>.</operator><name>mode_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_16k</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_sipr_init_16k</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_frame</name></name> <operator>=</operator> <name>ff_sipr_decode_frame_16k</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_frame</name></name> <operator>=</operator> <name>decode_frame</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LP_FILTER_ORDER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lsp_history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <operator>(</operator><name>LP_FILTER_ORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>energy_history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">14</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sipr_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SiprContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name><init>=<expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SiprParameters</name></type> <name>parm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SiprModeParam</name> <modifier>*</modifier></type><name>mode_par</name> <init>= <expr><operator>&amp;</operator><name><name>modes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subframe_size</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_16k</name></expr> ?</condition><then> <expr><name>L_SUBFR_16k</name></expr> </then><else>: <expr><name>SUBFR_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>mode_par</name><operator>-&gt;</operator><name>bits_per_frame</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Error processing packet: packet size (%d) too small\n"</literal></expr></argument>,

<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>mode_par</name><operator>-&gt;</operator><name>frames_per_packet</name></name> <operator>*</operator> <name>subframe_size</name> <operator>*</operator>

<name><name>mode_par</name><operator>-&gt;</operator><name>subframe_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>mode_par</name><operator>-&gt;</operator><name>bits_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mode_par</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>decode_parameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>mode_par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>decode_frame</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>subframe_size</name> <operator>*</operator> <name><name>mode_par</name><operator>-&gt;</operator><name>subframe_count</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>mode_par</name><operator>-&gt;</operator><name>bits_per_frame</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_sipr_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sipr"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RealAudio SIPR / ACELP.NET"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SIPR</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SiprContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>sipr_decoder_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>sipr_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
