<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\rv30dsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264qpel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv34dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV30_LOWPASS</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##rv30_tpel8_h_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, const int C1, const int C2){const int h = 8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i;for(i = 0; i &lt; h; i++){OP(dst[0], (-(src[-1]+src[2]) + src[0]*C1 + src[1]*C2 + 8)&gt;&gt;4);OP(dst[1], (-(src[ 0]+src[3]) + src[1]*C1 + src[2]*C2 + 8)&gt;&gt;4);OP(dst[2], (-(src[ 1]+src[4]) + src[2]*C1 + src[3]*C2 + 8)&gt;&gt;4);OP(dst[3], (-(src[ 2]+src[5]) + src[3]*C1 + src[4]*C2 + 8)&gt;&gt;4);OP(dst[4], (-(src[ 3]+src[6]) + src[4]*C1 + src[5]*C2 + 8)&gt;&gt;4);OP(dst[5], (-(src[ 4]+src[7]) + src[5]*C1 + src[6]*C2 + 8)&gt;&gt;4);OP(dst[6], (-(src[ 5]+src[8]) + src[6]*C1 + src[7]*C2 + 8)&gt;&gt;4);OP(dst[7], (-(src[ 6]+src[9]) + src[7]*C1 + src[8]*C2 + 8)&gt;&gt;4);dst += dstStride;src += srcStride;}}static void OPNAME ##rv30_tpel8_v_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, const int C1, const int C2){const int w = 8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i;for(i = 0; i &lt; w; i++){const int srcA = src[-1*srcStride];const int src0 = src[0 *srcStride];const int src1 = src[1 *srcStride];const int src2 = src[2 *srcStride];const int src3 = src[3 *srcStride];const int src4 = src[4 *srcStride];const int src5 = src[5 *srcStride];const int src6 = src[6 *srcStride];const int src7 = src[7 *srcStride];const int src8 = src[8 *srcStride];const int src9 = src[9 *srcStride];OP(dst[0*dstStride], (-(srcA+src2) + src0*C1 + src1*C2 + 8)&gt;&gt;4);OP(dst[1*dstStride], (-(src0+src3) + src1*C1 + src2*C2 + 8)&gt;&gt;4);OP(dst[2*dstStride], (-(src1+src4) + src2*C1 + src3*C2 + 8)&gt;&gt;4);OP(dst[3*dstStride], (-(src2+src5) + src3*C1 + src4*C2 + 8)&gt;&gt;4);OP(dst[4*dstStride], (-(src3+src6) + src4*C1 + src5*C2 + 8)&gt;&gt;4);OP(dst[5*dstStride], (-(src4+src7) + src5*C1 + src6*C2 + 8)&gt;&gt;4);OP(dst[6*dstStride], (-(src5+src8) + src6*C1 + src7*C2 + 8)&gt;&gt;4);OP(dst[7*dstStride], (-(src6+src9) + src7*C1 + src8*C2 + 8)&gt;&gt;4);dst++;src++;}}static void OPNAME ##rv30_tpel8_hv_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){const int w = 8;const int h = 8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i, j;for(j = 0; j &lt; h; j++){for(i = 0; i &lt; w; i++){OP(dst[i], (src[srcStride*-1+i-1] -12*src[srcStride*-1+i] -6*src[srcStride*-1+i+1] +src[srcStride*-1+i+2]+-12*src[srcStride* 0+i-1] +144*src[srcStride* 0+i] +72*src[srcStride* 0+i+1] -12*src[srcStride* 0+i+2] +-6*src[srcStride* 1+i-1] +72*src[srcStride* 1+i] +36*src[srcStride* 1+i+1] -6*src[srcStride* 1+i+2] +src[srcStride* 2+i-1] -12*src[srcStride* 2+i] -6*src[srcStride* 2+i+1] +src[srcStride* 2+i+2] +128)&gt;&gt;8);}src += srcStride;dst += dstStride;}}static void OPNAME ##rv30_tpel8_hhv_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){const int w = 8;const int h = 8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i, j;for(j = 0; j &lt; h; j++){for(i = 0; i &lt; w; i++){OP(dst[i], (src[srcStride*-1+i-1] -12*src[srcStride*-1+i+1] -6*src[srcStride*-1+i] +src[srcStride*-1+i+2]+-12*src[srcStride* 0+i-1] +144*src[srcStride* 0+i+1] +72*src[srcStride* 0+i] -12*src[srcStride* 0+i+2]+-6*src[srcStride* 1+i-1] +72*src[srcStride* 1+i+1] +36*src[srcStride* 1+i] -6*src[srcStride* 1+i+2]+src[srcStride* 2+i-1] -12*src[srcStride* 2+i+1] -6*src[srcStride* 2+i] +src[srcStride* 2+i+2]+128)&gt;&gt;8);}src += srcStride;dst += dstStride;}}static void OPNAME ##rv30_tpel8_hvv_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){const int w = 8;const int h = 8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i, j;for(j = 0; j &lt; h; j++){for(i = 0; i &lt; w; i++){OP(dst[i], (src[srcStride*-1+i-1] -12*src[srcStride*-1+i] -6*src[srcStride*-1+i+1] +src[srcStride*-1+i+2]+-6*src[srcStride* 0+i-1] +72*src[srcStride* 0+i] +36*src[srcStride* 0+i+1] -6*src[srcStride* 0+i+2]+-12*src[srcStride* 1+i-1] +144*src[srcStride* 1+i] +72*src[srcStride* 1+i+1] -12*src[srcStride* 1+i+2]+src[srcStride* 2+i-1] -12*src[srcStride* 2+i] -6*src[srcStride* 2+i+1] +src[srcStride* 2+i+2]+128)&gt;&gt;8);}src += srcStride;dst += dstStride;}}static void OPNAME ##rv30_tpel8_hhvv_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){const int w = 8;const int h = 8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i, j;for(j = 0; j &lt; h; j++){for(i = 0; i &lt; w; i++){OP(dst[i], (36*src[i+srcStride*0] +54*src[i+1+srcStride*0] +6*src[i+2+srcStride*0]+54*src[i+srcStride*1] +81*src[i+1+srcStride*1] +9*src[i+2+srcStride*1]+6*src[i+srcStride*2] + 9*src[i+1+srcStride*2] + src[i+2+srcStride*2]+128)&gt;&gt;8);}src += srcStride;dst += dstStride;}}static void OPNAME ##rv30_tpel16_v_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, const int C1, const int C2){OPNAME ##rv30_tpel8_v_lowpass(dst , src , dstStride, srcStride, C1, C2);OPNAME ##rv30_tpel8_v_lowpass(dst+8, src+8, dstStride, srcStride, C1, C2);src += 8*srcStride;dst += 8*dstStride;OPNAME ##rv30_tpel8_v_lowpass(dst , src , dstStride, srcStride, C1, C2);OPNAME ##rv30_tpel8_v_lowpass(dst+8, src+8, dstStride, srcStride, C1, C2);}static void OPNAME ##rv30_tpel16_h_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, const int C1, const int C2){OPNAME ##rv30_tpel8_h_lowpass(dst , src , dstStride, srcStride, C1, C2);OPNAME ##rv30_tpel8_h_lowpass(dst+8, src+8, dstStride, srcStride, C1, C2);src += 8*srcStride;dst += 8*dstStride;OPNAME ##rv30_tpel8_h_lowpass(dst , src , dstStride, srcStride, C1, C2);OPNAME ##rv30_tpel8_h_lowpass(dst+8, src+8, dstStride, srcStride, C1, C2);}static void OPNAME ##rv30_tpel16_hv_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){OPNAME ##rv30_tpel8_hv_lowpass(dst , src , dstStride, srcStride);OPNAME ##rv30_tpel8_hv_lowpass(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;OPNAME ##rv30_tpel8_hv_lowpass(dst , src , dstStride, srcStride);OPNAME ##rv30_tpel8_hv_lowpass(dst+8, src+8, dstStride, srcStride);}static void OPNAME ##rv30_tpel16_hhv_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){OPNAME ##rv30_tpel8_hhv_lowpass(dst , src , dstStride, srcStride);OPNAME ##rv30_tpel8_hhv_lowpass(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;OPNAME ##rv30_tpel8_hhv_lowpass(dst , src , dstStride, srcStride);OPNAME ##rv30_tpel8_hhv_lowpass(dst+8, src+8, dstStride, srcStride);}static void OPNAME ##rv30_tpel16_hvv_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){OPNAME ##rv30_tpel8_hvv_lowpass(dst , src , dstStride, srcStride);OPNAME ##rv30_tpel8_hvv_lowpass(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;OPNAME ##rv30_tpel8_hvv_lowpass(dst , src , dstStride, srcStride);OPNAME ##rv30_tpel8_hvv_lowpass(dst+8, src+8, dstStride, srcStride);}static void OPNAME ##rv30_tpel16_hhvv_lowpass(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){OPNAME ##rv30_tpel8_hhvv_lowpass(dst , src , dstStride, srcStride);OPNAME ##rv30_tpel8_hhvv_lowpass(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;OPNAME ##rv30_tpel8_hhvv_lowpass(dst , src , dstStride, srcStride);OPNAME ##rv30_tpel8_hhvv_lowpass(dst+8, src+8, dstStride, srcStride);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV30_MC</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##rv30_tpel ##SIZE ##_mc10_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv30_tpel ##SIZE ##_h_lowpass(dst, src, stride, stride, 12, 6);}static void OPNAME ##rv30_tpel ##SIZE ##_mc20_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv30_tpel ##SIZE ##_h_lowpass(dst, src, stride, stride, 6, 12);}static void OPNAME ##rv30_tpel ##SIZE ##_mc01_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv30_tpel ##SIZE ##_v_lowpass(dst, src, stride, stride, 12, 6);}static void OPNAME ##rv30_tpel ##SIZE ##_mc02_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv30_tpel ##SIZE ##_v_lowpass(dst, src, stride, stride, 6, 12);}static void OPNAME ##rv30_tpel ##SIZE ##_mc11_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv30_tpel ##SIZE ##_hv_lowpass(dst, src, stride, stride);}static void OPNAME ##rv30_tpel ##SIZE ##_mc12_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv30_tpel ##SIZE ##_hvv_lowpass(dst, src, stride, stride);}static void OPNAME ##rv30_tpel ##SIZE ##_mc21_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv30_tpel ##SIZE ##_hhv_lowpass(dst, src, stride, stride);}static void OPNAME ##rv30_tpel ##SIZE ##_mc22_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##rv30_tpel ##SIZE ##_hhvv_lowpass(dst, src, stride, stride);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = (((a)+cm[b]+1)&gt;&gt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = cm[b]</cpp:value></cpp:define>

<macro><name>RV30_LOWPASS</name><argument_list>(<argument>put_</argument> , <argument>op_put</argument>)</argument_list></macro>

<macro><name>RV30_LOWPASS</name><argument_list>(<argument>avg_</argument> , <argument>op_avg</argument>)</argument_list></macro>

<macro><name>RV30_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>RV30_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>RV30_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>RV30_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_rv30dsp_init</name><parameter_list>(<parameter><decl><type><name>RV34DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264ChromaContext</name></type> <name>h264chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264QpelContext</name></type> <name>qpel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_rv34dsp_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264chroma_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h264chroma</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264qpel_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qpel</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel16_mc10_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel16_mc20_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel16_mc01_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel16_mc11_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel16_mc21_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel16_mc02_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel16_mc12_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel16_mc22_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel16_mc10_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel16_mc20_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel16_mc01_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel16_mc11_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel16_mc21_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel16_mc02_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel16_mc12_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel16_mc22_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel8_mc10_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel8_mc20_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel8_mc01_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel8_mc11_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel8_mc21_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel8_mc02_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel8_mc12_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>put_rv30_tpel8_mc22_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>qpel</name><operator>.</operator><name>avg_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel8_mc10_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel8_mc20_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel8_mc01_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel8_mc11_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel8_mc21_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel8_mc02_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel8_mc12_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>avg_rv30_tpel8_mc22_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>put_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h264chroma</name><operator>.</operator><name>put_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avg_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h264chroma</name><operator>.</operator><name>avg_h264_chroma_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
