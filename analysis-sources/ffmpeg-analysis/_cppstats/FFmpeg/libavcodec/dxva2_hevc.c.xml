<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dxva2_hevc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dxva2_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SLICES</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<struct>struct <name>hevc_dxva2_picture_context</name> <block>{

<decl_stmt><decl><type><name>DXVA_PicParams_HEVC</name></type> <name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA_Qmatrix_HEVC</name></type> <name>qm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA_Slice_HEVC_Short</name></type> <name><name>slice_short</name><index>[<expr><name>MAX_SLICES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bitstream_size</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_picture_entry</name><parameter_list>(<parameter><decl><type><name>DXVA_PicEntry_HEVC</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name>index</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>index</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>==</operator> <name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>bPicEntry</name></name> <operator>=</operator> <name>index</name> <operator>|</operator> <operator>(</operator><name>flag</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_refpic_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DXVA_PicParams_HEVC</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>surface_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>RefPicList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pp</name><operator>-&gt;</operator><name>RefPicList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPicEntry</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <name>surface_index</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0xff</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_picture_parameters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>DXVA_PicParams_HEVC</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>PicWidthInMinCbsY</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>min_cb_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>PicHeightInMinCbsY</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>min_cb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wFormatAndSequenceInfoFlags</name></name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_picture_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>CurrPic</name></name></expr></argument>, <argument><expr><call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>current_picture</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>sps_max_dec_pic_buffering_minus1</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_min_luma_coding_block_size_minus3</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_diff_max_min_luma_coding_block_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_min_transform_block_size_minus2</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_diff_max_min_transform_block_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_trafo_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_short_term_ref_pic_sets</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>init_qp_minus26</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_ref_pic_set_sps_flag</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_rps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>ucNumDeltaPocsOfRefRpsIdx</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_rps</name><operator>-&gt;</operator><name>rps_idx_num_delta_pocs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>wNumBitsForShortTermRPSInSlice</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_ref_pic_set_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dwCodingParamToolFlags</name></name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>sao_enabled</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_max_pcm_cb_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>loop_filter_disable_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>sps_strong_intra_smoothing_enable_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>sign_data_hiding_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>cabac_init_present_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>dwCodingSettingPicturePropertyFlags</name></name> <operator>=</operator> <operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>pic_slice_level_chroma_qp_offsets_present_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr> ?</condition><then> <expr><name><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>seq_loop_filter_across_slices_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_override_enabled_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>disable_dbf</name></name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>lists_modification_present_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>slice_header_extension_present_flag</name></name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><call><name>IS_IRAP</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><call><name>IS_IDR</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><call><name>IS_IRAP</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">19</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pps_cb_qp_offset</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pps_cr_qp_offset</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_tile_columns_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>num_tile_rows_minus1</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>column_width_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>row_height_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pps_beta_offset_div2</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>beta_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>pps_tc_offset_div2</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>tc_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>log2_parallel_merge_level_minus2</name></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_parallel_merge_level</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>CurrPicOrderCntVal</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pp</name><operator>-&gt;</operator><name>RefPicList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><name>frame</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>DPB</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>current_picture</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>HEVC_FRAME_FLAG_LONG_REF</name> <operator>|</operator> <name>HEVC_FRAME_FLAG_SHORT_REF</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_picture_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>RefPicList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ff_dxva2_get_surface_index</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEVC_FRAME_FLAG_LONG_REF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>PicOrderCntValList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>RefPicList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bPicEntry</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>PicOrderCntValList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_REF_LIST</name><parameter_list>(<parameter><type><name>ref_idx</name></type></parameter>, <parameter><type><name>ref_list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ const RefPicList *rpl = &amp;h-&gt;rps[ref_idx]; for (i = 0, j = 0; i &lt; FF_ARRAY_ELEMS(pp-&gt;ref_list); i++) { const HEVCFrame *frame = NULL; while (!frame &amp;&amp; j &lt; rpl-&gt;nb_refs) frame = rpl-&gt;ref[j++]; if (frame) pp-&gt;ref_list[i] = get_refpic_index(pp, ff_dxva2_get_surface_index(avctx, ctx, frame-&gt;frame)); else pp-&gt;ref_list[i] = 0xff; } }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DO_REF_LIST</name><argument_list>(<argument><expr><name>ST_CURR_BEF</name></expr></argument>, <argument><expr><name>RefPicSetStCurrBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO_REF_LIST</name><argument_list>(<argument><expr><name>ST_CURR_AFT</name></expr></argument>, <argument><expr><name>RefPicSetStCurrAfter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO_REF_LIST</name><argument_list>(<argument><expr><name>LT_CURR</name></expr></argument>, <argument><expr><name>RefPicSetLtCurr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>StatusReportFeedbackNumber</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>DXVA_CONTEXT_REPORT_ID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_scaling_lists</name><parameter_list>(<parameter><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>DXVA_Qmatrix_HEVC</name> <modifier>*</modifier></type><name>qm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ScalingList</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>qm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>qm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ff_hevc_diag_scan4x4_y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>ff_hevc_diag_scan4x4_x</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>ucScalingLists0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>ff_hevc_diag_scan8x8_y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>ff_hevc_diag_scan8x8_x</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>ucScalingLists1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>ucScalingLists2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>ucScalingLists3</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>ucScalingListDCCoefSizeID2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>qm</name><operator>-&gt;</operator><name>ucScalingListDCCoefSizeID3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_slice_short</name><parameter_list>(<parameter><decl><type><name>DXVA_Slice_HEVC_Short</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>BSNALunitDataLocation</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>wBadSliceChopping</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_bitstream_and_slice_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>bs</name></decl></parameter>,

<parameter><decl><type><name>DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>current_picture</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DXVA_Slice_HEVC_Short</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dxva_data_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dxva_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>dxva_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>slice_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>slice_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>padding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_BITSTREAM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>ID3D11VideoContext_GetDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>,

<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,

<argument><expr><name>type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_data_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_BitStreamDateBufferType</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectXVideoDecoder_GetBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>,

<argument><expr><name>type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dxva_data_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dxva_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dxva_data</name> <operator>=</operator> <name>dxva_data_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <name>dxva_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>dxva_data</name> <operator>+</operator> <name>dxva_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>start_code</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>start_code_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_code</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slice</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_short</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>BSNALunitDataLocation</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_code_size</name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <name>current</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to build bitstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>BSNALunitDataLocation</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name> <operator>=</operator> <name>start_code_size</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>start_code</name></expr></argument>, <argument><expr><name>start_code_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>start_code_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>padding</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>current</name> <operator>-</operator> <name>dxva_data</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice</name> <operator>&amp;&amp;</operator> <name>padding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>SliceBytesInBuffer</name></name> <operator>+=</operator> <name>padding</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>ID3D11VideoContext_ReleaseDecoderBuffer</name><argument_list>(<argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>video_context</name></expr></argument>, <argument><expr><call><name>D3D11VA_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirectXVideoDecoder_ReleaseBuffer</name><argument_list>(<argument><expr><call><name>DXVA2_CONTEXT</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decoder</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>ff_dxva2_is_d3d11</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>D3D11_VIDEO_DECODER_BUFFER_DESC</name> <modifier>*</modifier></type><name>dsc11</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc11</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc11</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>BufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc11</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DXVA2_DecodeBufferDesc</name> <modifier>*</modifier></type><name>dsc2</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dsc2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dsc2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>CompressedBufferType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>DataSize</name></name> <operator>=</operator> <name>current</name> <operator>-</operator> <name>dxva_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsc2</name><operator>-&gt;</operator><name>NumMBsInBuffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>DXVA2_SliceControlBufferType</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>slice_data</name> <operator>=</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_short</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_size</name> <operator>=</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_short</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>current</name> <operator>-</operator> <name>dxva_data</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_dxva2_commit_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>,

<argument><expr><name>type</name></expr></argument>,

<argument><expr><name>slice_data</name></expr></argument>, <argument><expr><name>slice_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_hevc_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDXVAContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>DXVA_CONTEXT</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DXVA_CONTEXT_VALID</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ctx_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_picture_parameters</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_scaling_lists</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>qm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_hevc_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>current_picture</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>current_picture</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>position</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&gt;=</operator> <name>MAX_SLICES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>position</name> <operator>=</operator> <name>buffer</name> <operator>-</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_slice_short</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_short</name><index>[<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxva2_hevc_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_dxva2_picture_context</name></name> <modifier>*</modifier></type><name>ctx_pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name><operator>.</operator><name>dwCodingParamToolFlags</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ctx_pic</name><operator>-&gt;</operator><name>bitstream_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_dxva2_common_end_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>pp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><ternary><condition><expr><name>scale</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ctx_pic</name><operator>-&gt;</operator><name>qm</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>scale</name></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx_pic</name><operator>-&gt;</operator><name>qm</name></name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>commit_bitstream_and_slice_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HEVC_DXVA2_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_hevc_dxva2_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_dxva2"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_hevc_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_hevc_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_hevc_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>hevc_dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HEVC_D3D11VA_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_hevc_d3d11va_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_d3d11va"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_hevc_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_hevc_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_hevc_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>hevc_dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HEVC_D3D11VA2_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_hevc_d3d11va2_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_d3d11va2"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_dxva2_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_dxva2_decode_uninit</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>dxva2_hevc_start_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>dxva2_hevc_decode_slice</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>dxva2_hevc_end_frame</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>ff_dxva2_common_frame_params</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>hevc_dxva2_picture_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFDXVASharedContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
