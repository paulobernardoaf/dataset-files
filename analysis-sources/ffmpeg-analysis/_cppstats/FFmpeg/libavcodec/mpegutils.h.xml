<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegutils.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_SKIPPED</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICT_TOP_FIELD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICT_BOTTOM_FIELD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICT_FRAME</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELAYED_PIC_REF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MB_BYTES</name></cpp:macro> <cpp:value>(30 * 16 * 16 * 3 / 8 + 120)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FCODE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_INTRA4x4</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_INTRA16x16</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_INTRA_PCM</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_16x16</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_16x8</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_8x16</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_8x8</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_INTERLACED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_DIRECT2</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_ACPRED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_GMC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_SKIP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_P0L0</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_P1L0</name></cpp:macro> <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_P0L1</name></cpp:macro> <cpp:value>(1 &lt;&lt; 14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_P1L1</name></cpp:macro> <cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_L0</name></cpp:macro> <cpp:value>(MB_TYPE_P0L0 | MB_TYPE_P1L0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_L1</name></cpp:macro> <cpp:value>(MB_TYPE_P0L1 | MB_TYPE_P1L1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_L0L1</name></cpp:macro> <cpp:value>(MB_TYPE_L0 | MB_TYPE_L1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_QUANT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_CBP</name></cpp:macro> <cpp:value>(1 &lt;&lt; 17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB_TYPE_INTRA</name></cpp:macro> <cpp:value>MB_TYPE_INTRA4x4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INTRA4x4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_INTRA4x4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INTRA16x16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_INTRA16x16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_PCM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_INTRA_PCM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INTRA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INTER</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; (MB_TYPE_16x16 | MB_TYPE_16x8 | MB_TYPE_8x16 | MB_TYPE_8x8))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SKIP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_SKIP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INTRA_PCM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_INTRA_PCM)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INTERLACED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_INTERLACED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIRECT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_DIRECT2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_GMC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_GMC)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_16X16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_16x16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_16X8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_16x8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_8X16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_8x16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_8X8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_8x8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SUB_8X8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_16x16)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SUB_8X4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_16x8)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SUB_4X8</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_8x16)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SUB_4X4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_8x8)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_ACPRED</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_ACPRED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_QUANT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_QUANT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_DIR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>part</name></type></parameter>, <parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; (MB_TYPE_P0L0 &lt;&lt; ((part) + 2 * (list))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USES_LIST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; ((MB_TYPE_P0L0 | MB_TYPE_P1L0) &lt;&lt; (2 * (list))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_CBP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &amp; MB_TYPE_CBP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_INTRA</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_INTER</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_INTER4V</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_SKIPPED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_DIRECT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_FORWARD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_BACKWARD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_BIDIR</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_INTER_I</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_FORWARD_I</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_BACKWARD_I</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_BIDIR_I</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CANDIDATE_MB_TYPE_DIRECT0</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPLACE_OFFSET</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<enum>enum <name>OutputFormat</name> <block>{

<decl><name>FMT_MPEG1</name></decl>,

<decl><name>FMT_H261</name></decl>,

<decl><name>FMT_H263</name></decl>,

<decl><name>FMT_MJPEG</name></decl>,

}</block>;</enum>

<function_decl><type><name>void</name></type> <name>ff_draw_horiz_band</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>picture_structure</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first_field</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>low_delay</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name></type> <name>ff_print_debug_info2</name><argument_list>(<argument><expr><name>AVCodecContext</name> <operator>*</operator><name>avctx</name></expr></argument>, <argument><expr><name>AVFrame</name> <operator>*</operator><name>pict</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>mbskip_table</name></expr></argument>,

<argument><expr><name>uint32_t</name> <operator>*</operator><name>mbtype_table</name></expr></argument>, <argument><expr><name>int8_t</name> <operator>*</operator><name>qscale_table</name></expr></argument>, <argument><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name><name>motion_val</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><name>int</name> <operator>*</operator><name>low_delay</name></expr></argument>,

<argument><expr><name>int</name> <name>mb_width</name></expr></argument>, <argument><expr><name>int</name> <name>mb_height</name></expr></argument>, <argument><expr><name>int</name> <name>mb_stride</name></expr></argument>, <argument><expr><name>int</name> <name>quarter_sample</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
