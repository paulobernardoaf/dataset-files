<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\smc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPAIR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CQUAD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COCTET</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLORS_PER_TABLE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>SmcContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>color_pairs</name><index>[<expr><name>COLORS_PER_TABLE</name> <operator>*</operator> <name>CPAIR</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>color_quads</name><index>[<expr><name>COLORS_PER_TABLE</name> <operator>*</operator> <name>CQUAD</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>color_octets</name><index>[<expr><name>COLORS_PER_TABLE</name> <operator>*</operator> <name>COCTET</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>SmcContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BLOCK_COUNT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(opcode &amp; 0x10) ? (1 + bytestream2_get_byte(&amp;s-&gt;gb)) : 1 + (opcode &amp; 0x0F);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADVANCE_BLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ pixel_ptr += 4; if (pixel_ptr &gt;= width) { pixel_ptr = 0; row_ptr += stride * 4; } total_blocks--; if (total_blocks &lt; !!n_blocks) { av_log(s-&gt;avctx, AV_LOG_INFO, "warning: block counter just went negative (this should not happen)\n"); return; } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smc_decode_stream</name><parameter_list>(<parameter><decl><type><name>SmcContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><call><name>bytestream2_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>opcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>color_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>color_flags_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>color_flags_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flag_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pixels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>image_size</name> <init>= <expr><name>height</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_x</name></decl>, <decl><type ref="prev"/><name>pixel_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_inc</name> <init>= <expr><name>stride</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_block_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_block_ptr1</name></decl>, <decl><type ref="prev"/><name>prev_block_ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_block_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_table_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_pair_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_quad_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_octet_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <call><name>bytestream2_get_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>!=</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"warning: MOV chunk size != encoded chunk size (%d != %d); using MOV chunk size\n"</literal></expr></argument>,

<argument><expr><name>chunk_size</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>total_blocks</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>total_blocks</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row_ptr</name> <operator>&gt;=</operator> <name>image_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"SMC decoder just went out of bounds (row ptr = %d, height = %d)\n"</literal></expr></argument>,

<argument><expr><name>row_ptr</name></expr></argument>, <argument><expr><name>image_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"input too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opcode</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x00</literal></expr>:</case>

<case>case <expr><literal type="number">0x10</literal></expr>:</case>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <call><name>GET_BLOCK_COUNT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>

<case>case <expr><literal type="number">0x30</literal></expr>:</case>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <call><name>GET_BLOCK_COUNT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row_ptr</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pixel_ptr</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"encountered repeat block opcode (%02X) but no blocks rendered yet\n"</literal></expr></argument>,

<argument><expr><name>opcode</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr1</name> <operator>=</operator>

<operator>(</operator><name>row_ptr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr1</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_block_ptr</name> <operator>=</operator> <name>prev_block_ptr1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>prev_block_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0x40</literal></expr>:</case>

<case>case <expr><literal type="number">0x50</literal></expr>:</case>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <call><name>GET_BLOCK_COUNT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_blocks</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>row_ptr</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pixel_ptr</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"encountered repeat block opcode (%02X) but not enough blocks rendered yet\n"</literal></expr></argument>,

<argument><expr><name>opcode</name> <operator>&amp;</operator> <literal type="number">0xF0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr1</name> <operator>=</operator> <operator>(</operator><name>row_ptr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pixel_ptr</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr1</name> <operator>=</operator> <operator>(</operator><name>row_ptr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>row_inc</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr1</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr2</name> <operator>=</operator> <operator>(</operator><name>row_ptr</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>row_inc</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr2</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_block_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_block_flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr</name> <operator>=</operator> <name>prev_block_ptr2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev_block_ptr</name> <operator>=</operator> <name>prev_block_ptr1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev_block_flag</name> <operator>=</operator> <operator>!</operator><name>prev_block_flag</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>prev_block_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0x60</literal></expr>:</case>

<case>case <expr><literal type="number">0x70</literal></expr>:</case>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <call><name>GET_BLOCK_COUNT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<case>case <expr><literal type="number">0x90</literal></expr>:</case>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CPAIR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>CPAIR</name> <operator>*</operator> <name>color_pair_index</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_pairs</name><index>[<expr><name>color_table_index</name></expr>]</index></name> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>CPAIR</name> <operator>*</operator> <name>color_pair_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color_pair_index</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_pair_index</name> <operator>==</operator> <name>COLORS_PER_TABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color_pair_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>CPAIR</name> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color_flags</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag_mask</name> <operator>=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color_flags</name> <operator>&amp;</operator> <name>flag_mask</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <name>color_table_index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <name>color_table_index</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>flag_mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>color_pairs</name><index>[<expr><name>pixel</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0xA0</literal></expr>:</case>

<case>case <expr><literal type="number">0xB0</literal></expr>:</case>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xA0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CQUAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>CQUAD</name> <operator>*</operator> <name>color_quad_index</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_quads</name><index>[<expr><name>color_table_index</name></expr>]</index></name> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>CQUAD</name> <operator>*</operator> <name>color_quad_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color_quad_index</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_quad_index</name> <operator>==</operator> <name>COLORS_PER_TABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color_quad_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>CQUAD</name> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color_flags</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag_mask</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <name>color_table_index</name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>color_flags</name> <operator>&gt;&gt;</operator> <name>flag_mask</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>flag_mask</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>color_quads</name><index>[<expr><name>pixel</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0xC0</literal></expr>:</case>

<case>case <expr><literal type="number">0xD0</literal></expr>:</case>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COCTET</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>COCTET</name> <operator>*</operator> <name>color_octet_index</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_octets</name><index>[<expr><name>color_table_index</name></expr>]</index></name> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>COCTET</name> <operator>*</operator> <name>color_octet_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color_octet_index</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color_octet_index</name> <operator>==</operator> <name>COLORS_PER_TABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>color_octet_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>color_table_index</name> <operator>=</operator> <name>COCTET</name> <operator>*</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val1</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val2</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val3</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>color_flags_a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val1</name> <operator>&amp;</operator> <literal type="number">0xFFF0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>color_flags_b</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>val3</name> <operator>&amp;</operator> <literal type="number">0xFFF0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name>val1</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val2</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val3</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>color_flags</name> <operator>=</operator> <name>color_flags_a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag_mask</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_y</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color_flags</name> <operator>=</operator> <name>color_flags_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flag_mask</name> <operator>=</operator> <literal type="number">21</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel</name> <operator>=</operator> <name>color_table_index</name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>color_flags</name> <operator>&gt;&gt;</operator> <name>flag_mask</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>flag_mask</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>color_octets</name><index>[<expr><name>pixel</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0xE0</literal></expr>:</case>

<expr_stmt><expr><name>n_blocks</name> <operator>=</operator> <operator>(</operator><name>opcode</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>n_blocks</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_ptr</name> <operator>=</operator> <name>row_ptr</name> <operator>+</operator> <name>pixel_ptr</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pixel_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>pixel_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pixel_x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>pixel_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pixels</name><index>[<expr><name>block_ptr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block_ptr</name> <operator>+=</operator> <name>row_inc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ADVANCE_BLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0xF0</literal></expr>:</case>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"0xF0 opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>smc_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SmcContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>smc_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SmcContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pal_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PALETTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pal_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_blocks</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>total_blocks</name> <operator>/</operator> <literal type="number">1024</literal> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pal</name> <operator>&amp;&amp;</operator> <name>pal_size</name> <operator>==</operator> <name>AVPALETTE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Palette size %d is wrong\n"</literal></expr></argument>, <argument><expr><name>pal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>smc_decode_stream</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>smc_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SmcContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_smc_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"smc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"QuickTime Graphics (SMC)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SMC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SmcContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>smc_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>smc_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>smc_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
