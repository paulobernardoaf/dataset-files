<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cbs_jpeg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_jpeg.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ff_cbs_trace_header(ctx, name); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>call</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { err = (call); if (err &lt; 0) return err; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSCRIPTS</name><parameter_list>(<parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(subs &gt; 0 ? ((int[subs + 1]){ subs, __VA_ARGS__ }) : NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>u</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xu(width, name, range_min, range_max, 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>us</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>sub</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>xu(width, name, range_min, range_max, 1, sub)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READWRITE</name></cpp:macro> <cpp:value>read</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RWContext</name></cpp:macro> <cpp:value>GetBitContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cbs_jpeg_read_ ##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xu</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value; CHECK(ff_cbs_read_unsigned(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), &amp;value, range_min, range_max)); current-&gt;name = value; } while (0)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_jpeg_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READWRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RWContext</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xu</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READWRITE</name></cpp:macro> <cpp:value>write</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RWContext</name></cpp:macro> <cpp:value>PutBitContext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cbs_jpeg_write_ ##name</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xu</name><parameter_list>(<parameter><type><name>width</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>range_min</name></type></parameter>, <parameter><type><name>range_max</name></type></parameter>, <parameter><type><name>subs</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t value = current-&gt;name; CHECK(ff_cbs_write_unsigned(ctx, rw, width, #name, SUBSCRIPTS(subs, __VA_ARGS__), value, range_min, range_max)); } while (0)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_jpeg_syntax_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READWRITE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RWContext</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>xu</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_jpeg_free_application_data</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawApplicationData</name> <modifier>*</modifier></type><name>ad</name> <init>= <expr><operator>(</operator><name>JPEGRawApplicationData</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ad</name><operator>-&gt;</operator><name>Ap_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_jpeg_free_comment</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawComment</name> <modifier>*</modifier></type><name>comment</name> <init>= <expr><operator>(</operator><name>JPEGRawComment</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comment</name><operator>-&gt;</operator><name>Cm_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cbs_jpeg_free_scan</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawScan</name> <modifier>*</modifier></type><name>scan</name> <init>= <expr><operator>(</operator><name>JPEGRawScan</name><operator>*</operator><operator>)</operator><name>content</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_jpeg_split_fragment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>data_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unit</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>marker</name></decl>, <decl><type ref="prev"/><name>next_start</name></decl>, <decl><type ref="prev"/><name>next_marker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Discarding %d bytes at "</literal>

<literal type="string">"beginning of image.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid JPEG image: "</literal>

<literal type="string">"no SOI marker found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>marker</name> <operator>!=</operator> <name>JPEG_MARKER_SOI</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid JPEG image: first "</literal>

<literal type="string">"marker is %02x, should be SOI.\n"</literal></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&amp;&amp;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid JPEG image: "</literal>

<literal type="string">"no image content found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>unit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>unit</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>marker</name> <operator>==</operator> <name>JPEG_MARKER_EOI</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>marker</name> <operator>==</operator> <name>JPEG_MARKER_SOS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&amp;&amp;</operator>

<name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_marker</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_marker</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid JPEG image: "</literal>

<literal type="string">"truncated at %02x marker.\n"</literal></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>length</name> <operator>&gt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid JPEG image: "</literal>

<literal type="string">"truncated at %02x marker segment.\n"</literal></expr></argument>, <argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_marker</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><operator>++</operator><name>i</name></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&amp;&amp;</operator>

<name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_marker</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next_marker</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>marker</name> <operator>==</operator> <name>JPEG_MARKER_SOS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data_ref</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>length</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>length</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>data_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_ref</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>data_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next_marker</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <name>next_marker</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>next_start</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_jpeg_read_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JPEG_MARKER_SOF0</name> <operator>&amp;&amp;</operator>

<name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;=</operator> <name>JPEG_MARKER_SOF3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JPEGRawFrameHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_jpeg_read_frame_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JPEG_MARKER_APPN</name> <operator>&amp;&amp;</operator>

<name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;=</operator> <name>JPEG_MARKER_APPN</name> <operator>+</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JPEGRawApplicationData</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_jpeg_free_application_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_jpeg_read_application_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JPEG_MARKER_SOS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawScan</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_alloc_unit_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JPEGRawScan</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cbs_jpeg_free_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_jpeg_read_scan_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pos</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>scan</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGMENT</name><parameter_list>(<parameter><type><name>marker</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>free</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case JPEG_MARKER_ ##marker: { err = ff_cbs_alloc_unit_content(ctx, unit, sizeof(type), free); if (err &lt; 0) return err; err = cbs_jpeg_read_ ##func(ctx, &amp;gbc, unit-&gt;content); if (err &lt; 0) return err; } break</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SEGMENT</name><argument_list>(<argument><expr><name>DQT</name></expr></argument>, <argument><expr><name>JPEGRawQuantisationTableSpecification</name></expr></argument>, <argument><expr><name>dqt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SEGMENT</name><argument_list>(<argument><expr><name>DHT</name></expr></argument>, <argument><expr><name>JPEGRawHuffmanTableSpecification</name></expr></argument>, <argument><expr><name>dht</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SEGMENT</name><argument_list>(<argument><expr><name>COM</name></expr></argument>, <argument><expr><name>JPEGRawComment</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs_jpeg_free_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SEGMENT</name></cpp:undef>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_jpeg_write_scan</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawScan</name> <modifier>*</modifier></type><name>scan</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_jpeg_write_scan_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>data_size</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;</operator> <call><name>put_bits_left</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>put_bits_ptr</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_put_bytes</name><argument_list>(<argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_jpeg_write_segment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JPEG_MARKER_SOF0</name> <operator>&amp;&amp;</operator>

<name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;=</operator> <name>JPEG_MARKER_SOF3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_jpeg_write_frame_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>JPEG_MARKER_APPN</name> <operator>&amp;&amp;</operator>

<name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;=</operator> <name>JPEG_MARKER_APPN</name> <operator>+</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>cbs_jpeg_write_application_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEGMENT</name><parameter_list>(<parameter><type><name>marker</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case JPEG_MARKER_ ##marker: err = cbs_jpeg_write_ ##func(ctx, pbc, unit-&gt;content); break;</cpp:value></cpp:define>

<expr_stmt><expr><call><name>SEGMENT</name><argument_list>(<argument><expr><name>DQT</name></expr></argument>, <argument><expr><name>dqt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SEGMENT</name><argument_list>(<argument><expr><name>DHT</name></expr></argument>, <argument><expr><name>dht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SEGMENT</name><argument_list>(<argument><expr><name>COM</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_jpeg_write_unit</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pbc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JPEG_MARKER_SOS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>cbs_jpeg_write_scan</name> <argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>cbs_jpeg_write_segment</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>pbc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cbs_jpeg_assemble_fragment</name><parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>dp</name></decl>, <decl><type ref="prev"/><name>sp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>unit</name> <operator>=</operator> <operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JPEG_MARKER_SOS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sp</name> <operator>&lt;</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>sp</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>JPEG_MARKER_SOI</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>unit</name> <operator>=</operator> <operator>&amp;</operator><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>JPEG_MARKER_SOS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>dp</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>sp</name> <operator>&lt;=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>dp</name></expr></argument>, <argument><expr><name><name>unit</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>sp</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>sp</name> <operator>&lt;</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</condition> <incr><expr><name>sp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>sp</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>sp</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>dp</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>JPEG_MARKER_EOI</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>dp</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>CodedBitstreamType</name></type> <name>ff_cbs_type_jpeg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_id</name> <operator>=</operator> <name>AV_CODEC_ID_MJPEG</name></expr>,

<expr><operator>.</operator><name>split_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_jpeg_split_fragment</name></expr>,

<expr><operator>.</operator><name>read_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_jpeg_read_unit</name></expr>,

<expr><operator>.</operator><name>write_unit</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_jpeg_write_unit</name></expr>,

<expr><operator>.</operator><name>assemble_fragment</name> <operator>=</operator> <operator>&amp;</operator><name>cbs_jpeg_assemble_fragment</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
