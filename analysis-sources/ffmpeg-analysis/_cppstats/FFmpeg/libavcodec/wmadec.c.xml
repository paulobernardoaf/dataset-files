<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\wmadec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wma.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPVLCBITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPMAX</name></cpp:macro> <cpp:value>((19 + EXPVLCBITS - 1) / EXPVLCBITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HGAINVLCBITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HGAINMAX</name></cpp:macro> <cpp:value>((13 + HGAINVLCBITS - 1) / HGAINVLCBITS)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>wma_lsp_to_curve_init</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_floats</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%s[%d]:\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%4d: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">" %8.*f"</literal></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wma_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>flags2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"block_align is not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>extradata</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMAV1</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags2</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>extradata</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMAV2</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags2</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>extradata</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_exp_vlc</name></name> <operator>=</operator> <name>flags2</name> <operator>&amp;</operator> <literal type="number">0x0001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_bit_reservoir</name></name> <operator>=</operator> <name>flags2</name> <operator>&amp;</operator> <literal type="number">0x0002</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_variable_block_len</name></name> <operator>=</operator> <name>flags2</name> <operator>&amp;</operator> <literal type="number">0x0004</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_WMAV2</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>extradata</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0xd</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>use_variable_block_len</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Disabling use_variable_block_len, if this fails contact the ffmpeg developers and send us the file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_variable_block_len</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_exponent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>ff_wma_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>flags2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_block_sizes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">32768.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_noise_coding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hgain_vlc</name></name></expr></argument>, <argument><expr><name>HGAINVLCBITS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_wma_hgain_huffbits</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ff_wma_hgain_huffbits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ff_wma_hgain_huffcodes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_exp_vlc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>exp_vlc</name></name></expr></argument>, <argument><expr><name>EXPVLCBITS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_aac_scalefactor_bits</name></expr></argument>)</argument_list></sizeof></expr></argument>, 

<argument><expr><name>ff_aac_scalefactor_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ff_aac_scalefactor_code</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wma_lsp_to_curve_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>pow_m1_4</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{

<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl>;</decl_stmt>

}</block> <decl><name>u</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</union>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>v</name></name> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name><name>u</name><operator>.</operator><name>v</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">23</literal> <operator>-</operator> <name>LSP_POW_BITS</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LSP_POW_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>u</name><operator>.</operator><name>v</name></name> <operator>&lt;&lt;</operator> <name>LSP_POW_BITS</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">127</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lsp_pow_m_table1</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lsp_pow_m_table2</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>lsp_pow_e_table</name><index>[<expr><name>e</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>f</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>wma_lsp_to_curve_init</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>wdel</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wdel</name> <operator>=</operator> <name>M_PI</name> <operator>/</operator> <name>frame_len</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsp_cos_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2.0f</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>wdel</name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">126</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsp_pow_e_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>exp2f</name><argument_list>(<argument><expr><name>e</name> <operator>*</operator> <operator>-</operator><literal type="number">0.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LSP_POW_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LSP_POW_BITS</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>m</name> <operator>*</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>LSP_POW_BITS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal><operator>/</operator><call><name>sqrt</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsp_pow_m_table1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsp_pow_m_table2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wma_lsp_to_curve</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>val_max_ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>val_max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lsp_cos_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NB_LSP_COEFS</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>*=</operator> <name>w</name> <operator>-</operator> <name><name>lsp</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>*=</operator> <name>w</name> <operator>-</operator> <name><name>lsp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>*=</operator> <name>p</name> <operator>*</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>-</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>*=</operator> <name>q</name> <operator>*</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>+</operator> <name>w</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>p</name> <operator>+</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>pow_m1_4</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>val_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val_max</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>val_max_ptr</name> <operator>=</operator> <name>val_max</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_exp_lsp</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>lsp_coefs</name><index>[<expr><name>NB_LSP_COEFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_LSP_COEFS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>lsp_coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_wma_lsp_codebook</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>wma_lsp_to_curve</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exponents</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>max_exponent</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>, <argument><expr><name>lsp_coefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>pow_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.7782794100389e-04</literal></expr>, <expr><literal type="number">2.0535250264571e-04</literal></expr>,

<expr><literal type="number">2.3713737056617e-04</literal></expr>, <expr><literal type="number">2.7384196342644e-04</literal></expr>,

<expr><literal type="number">3.1622776601684e-04</literal></expr>, <expr><literal type="number">3.6517412725484e-04</literal></expr>,

<expr><literal type="number">4.2169650342858e-04</literal></expr>, <expr><literal type="number">4.8696752516586e-04</literal></expr>,

<expr><literal type="number">5.6234132519035e-04</literal></expr>, <expr><literal type="number">6.4938163157621e-04</literal></expr>,

<expr><literal type="number">7.4989420933246e-04</literal></expr>, <expr><literal type="number">8.6596432336006e-04</literal></expr>,

<expr><literal type="number">1.0000000000000e-03</literal></expr>, <expr><literal type="number">1.1547819846895e-03</literal></expr>,

<expr><literal type="number">1.3335214321633e-03</literal></expr>, <expr><literal type="number">1.5399265260595e-03</literal></expr>,

<expr><literal type="number">1.7782794100389e-03</literal></expr>, <expr><literal type="number">2.0535250264571e-03</literal></expr>,

<expr><literal type="number">2.3713737056617e-03</literal></expr>, <expr><literal type="number">2.7384196342644e-03</literal></expr>,

<expr><literal type="number">3.1622776601684e-03</literal></expr>, <expr><literal type="number">3.6517412725484e-03</literal></expr>,

<expr><literal type="number">4.2169650342858e-03</literal></expr>, <expr><literal type="number">4.8696752516586e-03</literal></expr>,

<expr><literal type="number">5.6234132519035e-03</literal></expr>, <expr><literal type="number">6.4938163157621e-03</literal></expr>,

<expr><literal type="number">7.4989420933246e-03</literal></expr>, <expr><literal type="number">8.6596432336006e-03</literal></expr>,

<expr><literal type="number">1.0000000000000e-02</literal></expr>, <expr><literal type="number">1.1547819846895e-02</literal></expr>,

<expr><literal type="number">1.3335214321633e-02</literal></expr>, <expr><literal type="number">1.5399265260595e-02</literal></expr>,

<expr><literal type="number">1.7782794100389e-02</literal></expr>, <expr><literal type="number">2.0535250264571e-02</literal></expr>,

<expr><literal type="number">2.3713737056617e-02</literal></expr>, <expr><literal type="number">2.7384196342644e-02</literal></expr>,

<expr><literal type="number">3.1622776601684e-02</literal></expr>, <expr><literal type="number">3.6517412725484e-02</literal></expr>,

<expr><literal type="number">4.2169650342858e-02</literal></expr>, <expr><literal type="number">4.8696752516586e-02</literal></expr>,

<expr><literal type="number">5.6234132519035e-02</literal></expr>, <expr><literal type="number">6.4938163157621e-02</literal></expr>,

<expr><literal type="number">7.4989420933246e-02</literal></expr>, <expr><literal type="number">8.6596432336007e-02</literal></expr>,

<expr><literal type="number">1.0000000000000e-01</literal></expr>, <expr><literal type="number">1.1547819846895e-01</literal></expr>,

<expr><literal type="number">1.3335214321633e-01</literal></expr>, <expr><literal type="number">1.5399265260595e-01</literal></expr>,

<expr><literal type="number">1.7782794100389e-01</literal></expr>, <expr><literal type="number">2.0535250264571e-01</literal></expr>,

<expr><literal type="number">2.3713737056617e-01</literal></expr>, <expr><literal type="number">2.7384196342644e-01</literal></expr>,

<expr><literal type="number">3.1622776601684e-01</literal></expr>, <expr><literal type="number">3.6517412725484e-01</literal></expr>,

<expr><literal type="number">4.2169650342858e-01</literal></expr>, <expr><literal type="number">4.8696752516586e-01</literal></expr>,

<expr><literal type="number">5.6234132519035e-01</literal></expr>, <expr><literal type="number">6.4938163157621e-01</literal></expr>,

<expr><literal type="number">7.4989420933246e-01</literal></expr>, <expr><literal type="number">8.6596432336007e-01</literal></expr>,

<expr><literal type="number">1.0000000000000e+00</literal></expr>, <expr><literal type="number">1.1547819846895e+00</literal></expr>,

<expr><literal type="number">1.3335214321633e+00</literal></expr>, <expr><literal type="number">1.5399265260595e+00</literal></expr>,

<expr><literal type="number">1.7782794100389e+00</literal></expr>, <expr><literal type="number">2.0535250264571e+00</literal></expr>,

<expr><literal type="number">2.3713737056617e+00</literal></expr>, <expr><literal type="number">2.7384196342644e+00</literal></expr>,

<expr><literal type="number">3.1622776601684e+00</literal></expr>, <expr><literal type="number">3.6517412725484e+00</literal></expr>,

<expr><literal type="number">4.2169650342858e+00</literal></expr>, <expr><literal type="number">4.8696752516586e+00</literal></expr>,

<expr><literal type="number">5.6234132519035e+00</literal></expr>, <expr><literal type="number">6.4938163157621e+00</literal></expr>,

<expr><literal type="number">7.4989420933246e+00</literal></expr>, <expr><literal type="number">8.6596432336007e+00</literal></expr>,

<expr><literal type="number">1.0000000000000e+01</literal></expr>, <expr><literal type="number">1.1547819846895e+01</literal></expr>,

<expr><literal type="number">1.3335214321633e+01</literal></expr>, <expr><literal type="number">1.5399265260595e+01</literal></expr>,

<expr><literal type="number">1.7782794100389e+01</literal></expr>, <expr><literal type="number">2.0535250264571e+01</literal></expr>,

<expr><literal type="number">2.3713737056617e+01</literal></expr>, <expr><literal type="number">2.7384196342644e+01</literal></expr>,

<expr><literal type="number">3.1622776601684e+01</literal></expr>, <expr><literal type="number">3.6517412725484e+01</literal></expr>,

<expr><literal type="number">4.2169650342858e+01</literal></expr>, <expr><literal type="number">4.8696752516586e+01</literal></expr>,

<expr><literal type="number">5.6234132519035e+01</literal></expr>, <expr><literal type="number">6.4938163157621e+01</literal></expr>,

<expr><literal type="number">7.4989420933246e+01</literal></expr>, <expr><literal type="number">8.6596432336007e+01</literal></expr>,

<expr><literal type="number">1.0000000000000e+02</literal></expr>, <expr><literal type="number">1.1547819846895e+02</literal></expr>,

<expr><literal type="number">1.3335214321633e+02</literal></expr>, <expr><literal type="number">1.5399265260595e+02</literal></expr>,

<expr><literal type="number">1.7782794100389e+02</literal></expr>, <expr><literal type="number">2.0535250264571e+02</literal></expr>,

<expr><literal type="number">2.3713737056617e+02</literal></expr>, <expr><literal type="number">2.7384196342644e+02</literal></expr>,

<expr><literal type="number">3.1622776601684e+02</literal></expr>, <expr><literal type="number">3.6517412725484e+02</literal></expr>,

<expr><literal type="number">4.2169650342858e+02</literal></expr>, <expr><literal type="number">4.8696752516586e+02</literal></expr>,

<expr><literal type="number">5.6234132519035e+02</literal></expr>, <expr><literal type="number">6.4938163157621e+02</literal></expr>,

<expr><literal type="number">7.4989420933246e+02</literal></expr>, <expr><literal type="number">8.6596432336007e+02</literal></expr>,

<expr><literal type="number">1.0000000000000e+03</literal></expr>, <expr><literal type="number">1.1547819846895e+03</literal></expr>,

<expr><literal type="number">1.3335214321633e+03</literal></expr>, <expr><literal type="number">1.5399265260595e+03</literal></expr>,

<expr><literal type="number">1.7782794100389e+03</literal></expr>, <expr><literal type="number">2.0535250264571e+03</literal></expr>,

<expr><literal type="number">2.3713737056617e+03</literal></expr>, <expr><literal type="number">2.7384196342644e+03</literal></expr>,

<expr><literal type="number">3.1622776601684e+03</literal></expr>, <expr><literal type="number">3.6517412725484e+03</literal></expr>,

<expr><literal type="number">4.2169650342858e+03</literal></expr>, <expr><literal type="number">4.8696752516586e+03</literal></expr>,

<expr><literal type="number">5.6234132519035e+03</literal></expr>, <expr><literal type="number">6.4938163157621e+03</literal></expr>,

<expr><literal type="number">7.4989420933246e+03</literal></expr>, <expr><literal type="number">8.6596432336007e+03</literal></expr>,

<expr><literal type="number">1.0000000000000e+04</literal></expr>, <expr><literal type="number">1.1547819846895e+04</literal></expr>,

<expr><literal type="number">1.3335214321633e+04</literal></expr>, <expr><literal type="number">1.5399265260595e+04</literal></expr>,

<expr><literal type="number">1.7782794100389e+04</literal></expr>, <expr><literal type="number">2.0535250264571e+04</literal></expr>,

<expr><literal type="number">2.3713737056617e+04</literal></expr>, <expr><literal type="number">2.7384196342644e+04</literal></expr>,

<expr><literal type="number">3.1622776601684e+04</literal></expr>, <expr><literal type="number">3.6517412725484e+04</literal></expr>,

<expr><literal type="number">4.2169650342858e+04</literal></expr>, <expr><literal type="number">4.8696752516586e+04</literal></expr>,

<expr><literal type="number">5.6234132519035e+04</literal></expr>, <expr><literal type="number">6.4938163157621e+04</literal></expr>,

<expr><literal type="number">7.4989420933246e+04</literal></expr>, <expr><literal type="number">8.6596432336007e+04</literal></expr>,

<expr><literal type="number">1.0000000000000e+05</literal></expr>, <expr><literal type="number">1.1547819846895e+05</literal></expr>,

<expr><literal type="number">1.3335214321633e+05</literal></expr>, <expr><literal type="number">1.5399265260595e+05</literal></expr>,

<expr><literal type="number">1.7782794100389e+05</literal></expr>, <expr><literal type="number">2.0535250264571e+05</literal></expr>,

<expr><literal type="number">2.3713737056617e+05</literal></expr>, <expr><literal type="number">2.7384196342644e+05</literal></expr>,

<expr><literal type="number">3.1622776601684e+05</literal></expr>, <expr><literal type="number">3.6517412725484e+05</literal></expr>,

<expr><literal type="number">4.2169650342858e+05</literal></expr>, <expr><literal type="number">4.8696752516586e+05</literal></expr>,

<expr><literal type="number">5.6234132519035e+05</literal></expr>, <expr><literal type="number">6.4938163157621e+05</literal></expr>,

<expr><literal type="number">7.4989420933246e+05</literal></expr>, <expr><literal type="number">8.6596432336007e+05</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_exp_vlc</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_exp</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>max_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q_end</name></decl>, <decl><type ref="prev"/><name>iv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ptab</name> <init>= <expr><name>pow_tab</name> <operator>+</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>iptab</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>ptab</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponent_bands</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>exponents</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_end</name> <operator>=</operator> <name>q</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_scale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_exp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ptab</name><index>[<expr><name>last_exp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iv</name> <operator>=</operator> <name><name>iptab</name><index>[<expr><name>last_exp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_scale</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <do>do <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>n</name> <operator>-=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do></block_content></block></switch>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>last_exp</name> <operator>=</operator> <literal type="number">36</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>q_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exp_vlc</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>EXPVLCBITS</name></expr></argument>, <argument><expr><name>EXPMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Exponent vlc invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_exp</name> <operator>+=</operator> <name>code</name> <operator>-</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>last_exp</name> <operator>+</operator> <literal type="number">60</literal> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>pow_tab</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Exponent out of range: %d\n"</literal></expr></argument>,

<argument><expr><name>last_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ptab</name><index>[<expr><name>last_exp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iv</name> <operator>=</operator> <name><name>iptab</name><index>[<expr><name>last_exp</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>max_scale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_scale</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <do>do <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name>n</name> <operator>-=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do></block_content></block></switch>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_exponent</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>max_scale</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wma_window</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_len</name></decl>, <decl><type ref="prev"/><name>bsize</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_block_len_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>windows</name><index>[<expr><name>bsize</name></expr>]</index></name></expr></argument>,

<argument><expr><name>out</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>block_len</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_block_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name> <operator>-</operator> <name>block_len</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_block_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>windows</name><index>[<expr><name>bsize</name></expr>]</index></name></expr></argument>,

<argument><expr><name>out</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>n</name> <operator>+</operator> <name>block_len</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>n</name> <operator>+</operator> <name>block_len</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_block_len_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>windows</name><index>[<expr><name>bsize</name></expr>]</index></name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>block_len</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>next_block_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name> <operator>-</operator> <name>block_len</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>next_block_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>windows</name><index>[<expr><name>bsize</name></expr>]</index></name></expr></argument>,

<argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <name>n</name> <operator>+</operator> <name>block_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wma_decode_block</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>bsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coef_nb_bits</name></decl>, <decl><type ref="prev"/><name>total_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>nb_coefs</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mdct_norm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>mdct</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"***decode_block: %d:%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_variable_block_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_block_sizes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>reset_block_lengths</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reset_block_lengths</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_block_sizes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"prev_block_len_bits %d out of range\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_block_len_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_block_sizes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"block_len_bits %d out of range\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_block_len_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_block_len_bits</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_block_sizes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"next_block_len_bits %d out of range\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_block_len_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_block_len_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_block_len_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_block_sizes</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"block_len_bits not initialized to a valid value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_pos</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"frame_len overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ms_stereo</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>|=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_gain</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"total_gain overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>total_gain</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>coef_nb_bits</name> <operator>=</operator> <call><name>ff_wma_total_gain_to_bits</name><argument_list>(<argument><expr><name>total_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs_end</name><index>[<expr><name>bsize</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs_start</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nb_coefs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_noise_coding</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponent_high_sizes</name><index>[<expr><name>bsize</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>high_band_coded</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nb_coefs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponent_high_bands</name><index>[<expr><name>bsize</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponent_high_sizes</name><index>[<expr><name>bsize</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>high_band_coded</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">19</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hgain_vlc</name><operator>.</operator><name>table</name></name></expr></argument>,

<argument><expr><name>HGAINVLCBITS</name></expr></argument>, <argument><expr><name>HGAINMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"hgain vlc invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>code</name> <operator>-</operator> <literal type="number">18</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>high_band_values</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name><operator>)</operator> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_exp_vlc</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decode_exp_vlc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>decode_exp_lsp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exponents_bsize</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>bsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exponents_initialized</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>exponents_initialized</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WMACoef</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coefs1</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tindex</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ms_stereo</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WMACoef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_wma_run_level_decode</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>coef_vlc</name><index>[<expr><name>tindex</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>level_table</name><index>[<expr><name>tindex</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_table</name><index>[<expr><name>tindex</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>nb_coefs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name></expr></argument>, <argument><expr><name>coef_nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n4</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mdct_norm</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>n4</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mdct_norm</name> <operator>*=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WMACoef</name> <modifier>*</modifier></type><name>coefs1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>coefs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>exponents</name></decl>, <decl><type ref="prev"/><name>mult</name></decl>, <decl><type ref="prev"/><name>mult1</name></decl>, <decl><type ref="prev"/><name>noise</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>, <decl><type ref="prev"/><name>last_high_band</name></decl>, <decl><type ref="prev"/><name>esize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>exp_power</name><index>[<expr><name>HIGH_BAND_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>coefs1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs1</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>exponents</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponents</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>esize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponents_bsize</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mult</name> <operator>=</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name>total_gain</name> <operator>*</operator> <literal type="number">0.05</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>max_exponent</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mult</name> <operator>*=</operator> <name>mdct_norm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>coefs</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_noise_coding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mult1</name> <operator>=</operator> <name>mult</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs_start</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>coefs</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name></expr>]</index></name> <operator>*</operator>

<name><name>exponents</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name></expr>]</index></name> <operator>*</operator> <name>mult1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator>

<operator>(</operator><name>NOISE_TAB_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponent_high_sizes</name><index>[<expr><name>bsize</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>exponents</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponents</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>high_band_start</name><index>[<expr><name>bsize</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>last_high_band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponent_high_bands</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>high_band_coded</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>e2</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>exponents</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>+=</operator> <name>v</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>exp_power</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>e2</name> <operator>/</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_high_band</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%d: power=%f (%d)\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>exp_power</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exponents</name> <operator>+=</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>exponents</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponents</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>coefs_start</name></name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>high_band_start</name><index>[<expr><name>bsize</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs_start</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>exponent_high_bands</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>high_band_coded</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mult1</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>exp_power</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <name><name>exp_power</name><index>[<expr><name>last_high_band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mult1</name> <operator>=</operator> <name>mult1</name> <operator>*</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>high_band_values</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mult1</name> <operator>=</operator> <name>mult1</name> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_exponent</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_mult</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mult1</name> <operator>*=</operator> <name>mdct_norm</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>noise</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>NOISE_TAB_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>coefs</name><operator>++</operator> <operator>=</operator> <name>noise</name> <operator>*</operator> <name><name>exponents</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name></expr>]</index></name> <operator>*</operator> <name>mult1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>exponents</name> <operator>+=</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>noise</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>NOISE_TAB_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>coefs</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>coefs1</name><operator>++</operator><operator>)</operator> <operator>+</operator> <name>noise</name><operator>)</operator> <operator>*</operator>

<name><name>exponents</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>exponents</name> <operator>+=</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs_end</name><index>[<expr><name>bsize</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mult1</name> <operator>=</operator> <name>mult</name> <operator>*</operator> <name><name>exponents</name><index>[<expr><operator>(</operator><operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bsize</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>esize</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>coefs</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name></expr>]</index></name> <operator>*</operator> <name>mult1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>noise_index</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>NOISE_TAB_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs_start</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>coefs</name><operator>++</operator> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>nb_coefs</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>coefs</name><operator>++</operator> <operator>=</operator> <name><name>coefs1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>exponents</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <name>bsize</name> <operator>&gt;&gt;</operator> <name>esize</name></expr>]</index></name> <operator>*</operator> <name>mult</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>coefs_end</name><index>[<expr><name>bsize</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>coefs</name><operator>++</operator> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_floats</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"exponents"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exponents</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_floats</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"coefs"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ms_stereo</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"rare ms-stereo case happened\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>butterflies_float</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>next</name>:</label>

<expr_stmt><expr><name>mdct</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct_ctx</name><index>[<expr><name>bsize</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n4</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n4</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_coded</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_calc</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ms_stereo</name></name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>block_pos</name></name> <operator>-</operator> <name>n4</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wma_window</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_out</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_pos</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_pos</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wma_decode_frame</name><parameter_list>(<parameter><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>samples_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"***decode_frame: %d size=%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>wma_decode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>samples_offset</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_out</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>frame_out</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_out</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_out</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>frame_out</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dump_floats</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>samples_offset</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wma_decode_superframe</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name></decl>, <decl><type ref="prev"/><name>bit_offset</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"***decode_superframe:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Input packet size too small (%d &lt; %d)\n"</literal></expr></argument>,

<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_bit_reservoir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_frames</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_error</name> <init>= <expr><name>nb_frames</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_error</name></expr> ?</condition><then> <expr><name>AV_LOG_ERROR</name></expr> </then><else>: <expr><name>AV_LOG_WARNING</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"nb_frames is %d bits left %d\n"</literal></expr></argument>,

<argument><expr><name>nb_frames</name></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator>

<name>MAX_CODED_SUPERFRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_superframe</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><name>buf_size</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>nb_frames</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>float</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>use_bit_reservoir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_offset</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>byte_offset_bits</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_offset</name> <operator>&gt;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid last frame bit offset %d &gt; buf size %d (%d)\n"</literal></expr></argument>,

<argument><expr><name>bit_offset</name></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>bit_offset</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator>

<name>MAX_CODED_SUPERFRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_superframe</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>bit_offset</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_superframe</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>bit_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_bitoffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_bitoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>wma_decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>samples_offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples_offset</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_frames</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>bit_offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>byte_offset_bits</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>MAX_CODED_SUPERFRAME_SIZE</name> <operator>*</operator> <literal type="number">8</literal> <operator>||</operator> <name>pos</name> <operator>&gt;</operator> <name>buf_size</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><name>pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>buf_size</name> <operator>-</operator> <operator>(</operator><name>pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reset_block_lengths</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_frames</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>wma_decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>samples_offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples_offset</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>bit_offset</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>byte_offset_bits</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bitoffset</name></name> <operator>=</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MAX_CODED_SUPERFRAME_SIZE</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"len %d invalid\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_superframe</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>wma_decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>samples_offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples_offset</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%d %d %d %d outbytes:%"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" eaten:%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len_bits</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_len_bits</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_len</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator> <name>samples</name> <operator>-</operator> <operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WMACodecContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bitoffset</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>last_superframe_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMAV1_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wmav1_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmav1"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Audio 1"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMAV1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WMACodecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>wma_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_wma_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>wma_decode_superframe</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMAV2_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_wmav2_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmav2"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Windows Media Audio 2"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMAV2</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WMACodecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>wma_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_wma_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>wma_decode_superframe</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
