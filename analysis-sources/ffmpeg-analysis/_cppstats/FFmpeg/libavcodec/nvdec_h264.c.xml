<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\nvdec_h264.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dpb_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>CUVIDH264DPBENTRY</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>frame_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name> <init>= <expr><operator>(</operator><name>FrameDecodeData</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>private_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NVDECFrame</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name><name>fdd</name><operator>-&gt;</operator><name>hwaccel_priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>PicIdx</name></name> <operator>=</operator> <ternary><condition><expr><name>cf</name></expr> ?</condition><then> <expr><name><name>cf</name><operator>-&gt;</operator><name>idx</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>FrameIdx</name></name> <operator>=</operator> <name>frame_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>is_long_term</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>long_ref</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>not_existing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>used_for_reference</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>FieldOrderCnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>FieldOrderCnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_h264_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVDECContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDPICPARAMS</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic_params</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDH264PICPARAMS</name> <modifier>*</modifier></type><name>ppc</name> <init>= <expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>CodecSpecific</name><operator>.</operator><name>h264</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVDECFrame</name> <modifier>*</modifier></type><name>cf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dpb_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_nvdec_start_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fdd</name> <operator>=</operator> <operator>(</operator><name>FrameDecodeData</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>private_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <operator>(</operator><name>NVDECFrame</name><operator>*</operator><operator>)</operator><name><name>fdd</name><operator>-&gt;</operator><name>hwaccel_priv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>CUVIDPICPARAMS</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>PicWidthInMbs</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr>,

<expr><operator>.</operator><name>FrameHeightInMbs</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>,

<expr><operator>.</operator><name>CurrPicIdx</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>idx</name></name></expr>,

<expr><operator>.</operator><name>field_pic_flag</name> <operator>=</operator> <call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bottom_field_flag</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>,

<expr><operator>.</operator><name>second_field</name> <operator>=</operator> <call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name></expr>,

<expr><operator>.</operator><name>ref_pic_flag</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>nal_ref_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>intra_pic_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name><name>CodecSpecific</name><operator>.</operator><name>h264</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>log2_max_frame_num_minus4</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name> <operator>-</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>pic_order_cnt_type</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name></expr>,

<expr><operator>.</operator><name>log2_max_pic_order_cnt_lsb_minus4</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>delta_pic_order_always_zero_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name></expr>,

<expr><operator>.</operator><name>frame_mbs_only_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>,

<expr><operator>.</operator><name>direct_8x8_inference_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name></expr>,

<expr><operator>.</operator><name>num_ref_frames</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr>,

<expr><operator>.</operator><name>residual_colour_transform_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>residual_color_transform_flag</name></name></expr>,

<expr><operator>.</operator><name>bit_depth_luma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>bit_depth_chroma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>qpprime_y_zero_transform_bypass_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>transform_bypass</name></name></expr>,

<expr><operator>.</operator><name>entropy_coding_mode_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cabac</name></name></expr>,

<expr><operator>.</operator><name>pic_order_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_order_present</name></name></expr>,

<expr><operator>.</operator><name>num_ref_idx_l0_active_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>num_ref_idx_l1_active_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>weighted_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_pred</name></name></expr>,

<expr><operator>.</operator><name>weighted_bipred_idc</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name></expr>,

<expr><operator>.</operator><name>pic_init_qp_minus26</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name> <operator>-</operator> <literal type="number">26</literal></expr>,

<expr><operator>.</operator><name>deblocking_filter_control_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_parameters_present</name></name></expr>,

<expr><operator>.</operator><name>redundant_pic_cnt_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present</name></name></expr>,

<expr><operator>.</operator><name>transform_8x8_mode_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr>,

<expr><operator>.</operator><name>MbaffFrameFlag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>constrained_intra_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred</name></name></expr>,

<expr><operator>.</operator><name>chroma_qp_index_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>second_chroma_qp_index_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>ref_pic_flag</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>nal_ref_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>frame_num</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>,

<expr><operator>.</operator><name><name>CurrFieldOrderCnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name><name>CurrFieldOrderCnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

}</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>WeightScale4x4</name></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix4</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>WeightScale4x4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>WeightScale8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>WeightScale8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>WeightScale8x8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_matrix8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>WeightScale8x8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dpb_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dpb_add</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ppc</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>dpb_size</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>frame_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dpb_add</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ppc</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>dpb_size</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dpb_size</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>dpb</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>PicIdx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_h264_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NVDECContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDPICPARAMS</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic_params</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bitstream_allocated</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets_allocated</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name> <operator>+=</operator> <name>size</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_SI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>intra_pic_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_h264_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_nvdec_frame_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>hw_frames_ctx</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_h264_nvdec_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"h264_nvdec"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_H264</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>nvdec_h264_start_frame</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>ff_nvdec_end_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>nvdec_h264_decode_slice</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>nvdec_h264_frame_params</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_nvdec_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_nvdec_decode_uninit</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NVDECContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
