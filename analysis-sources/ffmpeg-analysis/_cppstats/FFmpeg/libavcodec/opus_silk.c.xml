<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\opus_silk.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opustab.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>SilkFrame</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>coded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>nlsf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>lpc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>output</name> <index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>SILK_HISTORY</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>lpc_history</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>SILK_HISTORY</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>primarylag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_voiced</name></decl>;</decl_stmt>

}</block></struct></type> <name>SilkFrame</name>;</typedef>

<struct>struct <name>SilkContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>midonly</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subframes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sflength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nlsf_interp_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>OpusBandwidth</name></name></type> <name>bandwidth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SilkFrame</name></type> <name><name>frame</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>prev_stereo_weights</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>stereo_weights</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_coded_channels</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>silk_stabilize_lsf</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>nlsf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>min_delta</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pass</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pass</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>min_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>nlsf</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>!=</operator> <name>order</name></expr> ?</condition><then> <expr><name><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">32768</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>high</name> <operator>-</operator> <name>low</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>min_delta</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>min_diff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_diff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>min_diff</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>min_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <name>order</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">32768</literal> <operator>-</operator> <name><name>min_delta</name><index>[<expr><name>order</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>min_center</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_center</name> <init>= <expr><literal type="number">32768</literal></expr></init></decl>, <decl><type ref="prev"/><name>center_val</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>min_center</name> <operator>+=</operator> <name><name>min_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>min_center</name> <operator>+=</operator> <name><name>min_delta</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_center</name> <operator>-=</operator> <name><name>min_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>max_center</name> <operator>-=</operator> <name><name>min_delta</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>center_val</name> <operator>=</operator> <name><name>nlsf</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>nlsf</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>center_val</name> <operator>=</operator> <operator>(</operator><name>center_val</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>center_val</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>center_val</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>max_center</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>min_center</name></expr></argument>, <argument><expr><name>center_val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>center_val</name> <operator>-</operator> <operator>(</operator><name><name>min_delta</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>nlsf</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>min_delta</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>value</name> <init>= <expr><name><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>nlsf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>value</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>nlsf</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>nlsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>min_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>min_delta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>nlsf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>min_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>nlsf</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32768</literal> <operator>-</operator> <name><name>min_delta</name><index>[<expr><name>order</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">32768</literal> <operator>-</operator> <name><name>min_delta</name><index>[<expr><name>order</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name><operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>nlsf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>min_delta</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nlsf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>min_delta</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>silk_is_lpc_stable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>lpc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>DC_resp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lpc32</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>totalinvgain</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>lpc32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prevrow</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>DC_resp</name> <operator>+=</operator> <name><name>lpc</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>DC_resp</name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>order</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>gaindiv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fbits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">16773022</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>row</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>gaindiv</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>-</operator> <call><name>MULH</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totalinvgain</name> <operator>=</operator> <call><name>MULH</name><argument_list>(<argument><expr><name>totalinvgain</name></expr></argument>, <argument><expr><name>gaindiv</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>totalinvgain</name> <operator>&gt;=</operator> <literal type="number">107374</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fbits</name> <operator>=</operator> <call><name>opus_ilog</name><argument_list>(<argument><expr><name>gaindiv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>gaindiv</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>fbits</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>-</operator> <call><name>MULL</name><argument_list>(<argument><expr><name>gaindiv</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">15</literal> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>fbits</name><operator>)</operator></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>gain</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>error</name> <operator>*</operator> <name>gain</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prevrow</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>lpc32</name><index>[<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>av_sat_sub32</name><argument_list>(<argument><expr><name><name>prevrow</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ROUND_MULL</name><argument_list>(<argument><expr><name><name>prevrow</name><index>[<expr><name>k</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tmp</name> <init>= <expr><call><name>ROUND_MULL</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>fbits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name> <argument_list type="generic">&lt; <argument><expr><name>INT32_MIN</name> <operator>||</operator> <name>tmp</name></expr></argument> &gt;</argument_list></name> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>silk_lsp2poly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>lsp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name><name>pol</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>half_order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>half_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pol</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pol</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>ROUND_MULL</name><argument_list>(<argument><expr><name><name>lsp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pol</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>pol</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <call><name>ROUND_MULL</name><argument_list>(<argument><expr><name><name>lsp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pol</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name><name>lsp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>silk_lsf2lpc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>nlsf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>lpcf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lsp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lpc32</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lpc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>nlsf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>nlsf</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>order</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>ff_silk_lsf_ordering_nbmb</name><index>[<expr><name>k</name></expr>]</index></name></expr> </then><else>: <expr><name><name>ff_silk_lsf_ordering_wb</name><index>[<expr><name>k</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>k2</name></expr>]</index></name> <operator>=</operator> <name><name>ff_silk_cosine</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>k2</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>ff_silk_cosine</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ff_silk_cosine</name><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>k2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lsp</name><index>[<expr><name>k2</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>silk_lsp2poly</name><argument_list>(<argument><expr><name>lsp</name></expr></argument> , <argument><expr><name>p</name></expr></argument>, <argument><expr><name>order</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>silk_lsp2poly</name><argument_list>(<argument><expr><name>lsp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>order</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>k</name> <argument_list type="generic">&lt; <argument><expr><name>order</name></expr></argument>&gt;</argument_list></name><operator>&gt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>p_tmp</name> <init>= <expr><name><name>p</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>q_tmp</name> <init>= <expr><name><name>q</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>q</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>q_tmp</name> <operator>-</operator> <name>p_tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpc32</name><index>[<expr><name>order</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>q_tmp</name> <operator>-</operator> <name>p_tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxabs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name> <init>= <expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>maxabs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxabs</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>maxabs</name> <operator>=</operator> <operator>(</operator><name>maxabs</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>maxabs</name> <operator>&gt;</operator> <literal type="number">32767</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chirp</name></decl>, <decl><type ref="prev"/><name>chirp_base</name></decl>;</decl_stmt> 

<expr_stmt><expr><name>maxabs</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>maxabs</name></expr></argument>, <argument><expr><literal type="number">163838</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>chirp_base</name> <operator>=</operator> <name>chirp</name> <operator>=</operator> <literal type="number">65470</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>maxabs</name> <operator>-</operator> <literal type="number">32767</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>maxabs</name> <operator>*</operator> <operator>(</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>ROUND_MULL</name><argument_list>(<argument><expr><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>chirp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chirp</name> <operator>=</operator> <operator>(</operator><name>chirp_base</name> <operator>*</operator> <name>chirp</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>silk_is_lpc_stable</name><argument_list>(<argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chirp</name></decl>, <decl><type ref="prev"/><name>chirp_base</name></decl>;</decl_stmt>

<expr_stmt><expr><name>chirp_base</name> <operator>=</operator> <name>chirp</name> <operator>=</operator> <literal type="number">65536</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>ROUND_MULL</name><argument_list>(<argument><expr><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>chirp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lpc32</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chirp</name> <operator>=</operator> <operator>(</operator><name>chirp_base</name> <operator>*</operator> <name>chirp</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lpcf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">4096.0f</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>silk_decode_lpc</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SilkFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name><name>lpc_leadin</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name><name>lpc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lpc_order</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>has_lpc_leadin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>voiced</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>order</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name>lsf_i1</name></decl>, <decl><type ref="prev"/><name><name>lsf_i2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsf_res</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>nlsf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><operator>*</operator><name>lpc_order</name> <operator>=</operator> <name>order</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>wb</name></name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>lsf_i1</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>ff_silk_model_lsf_s1</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>wb</name></name></expr>]</index><index>[<expr><name>voiced</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>wb</name></name></expr> ?</condition><then> <expr><name><name>ff_silk_lsf_s2_model_sel_wb</name> <index>[<expr><name>lsf_i1</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>ff_silk_lsf_s2_model_sel_nbmb</name><index>[<expr><name>lsf_i1</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lsf_i2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>ff_silk_model_lsf_s2</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lsf_i2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsf_i2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_lsf_s2_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>lsf_i2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lsf_i2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_lsf_s2_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qstep</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>wb</name></name></expr> ?</condition><then> <expr><literal type="number">9830</literal></expr> </then><else>: <expr><literal type="number">11796</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lsf_res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lsf_i2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lsf_i2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lsf_res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">102</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>lsf_i2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>lsf_res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <literal type="number">102</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lsf_res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lsf_res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>qstep</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>order</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>weight</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>wb</name></name></expr> ?</condition><then> <expr><name><name>ff_silk_lsf_pred_weights_wb</name> <index>[<expr><name><name>ff_silk_lsf_weight_sel_wb</name> <index>[<expr><name>lsf_i1</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>ff_silk_lsf_pred_weights_nbmb</name><index>[<expr><name><name>ff_silk_lsf_weight_sel_nbmb</name><index>[<expr><name>lsf_i1</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lsf_res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>lsf_res</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>weight</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>codebook</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>wb</name></name></expr> ?</condition><then> <expr><name><name>ff_silk_lsf_codebook_wb</name> <index>[<expr><name>lsf_i1</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>ff_silk_lsf_codebook_nbmb</name><index>[<expr><name>lsf_i1</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>next</name></decl>, <decl><type ref="prev"/><name>weight_sq</name></decl>, <decl><type ref="prev"/><name>weight</name></decl>, <decl><type ref="prev"/><name>ipart</name></decl>, <decl><type ref="prev"/><name>fpart</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>codebook</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>codebook</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>order</name></expr> ?</condition><then> <expr><name><name>codebook</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">256</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>weight_sq</name> <operator>=</operator> <operator>(</operator><literal type="number">1024</literal> <operator>/</operator> <operator>(</operator><name>cur</name> <operator>-</operator> <name>prev</name><operator>)</operator> <operator>+</operator> <literal type="number">1024</literal> <operator>/</operator> <operator>(</operator><name>next</name> <operator>-</operator> <name>cur</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ipart</name> <operator>=</operator> <call><name>opus_ilog</name><argument_list>(<argument><expr><name>weight_sq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fpart</name> <operator>=</operator> <operator>(</operator><name>weight_sq</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>ipart</name><operator>-</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>ipart</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">32768</literal></expr> </then><else>: <expr><literal type="number">46214</literal></expr></else></ternary><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>ipart</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">213</literal> <operator>*</operator> <name>fpart</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>cur</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <operator>(</operator><name><name>lsf_res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">16384</literal><operator>)</operator> <operator>/</operator> <name>weight</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>silk_stabilize_lsf</name><argument_list>(<argument><expr><name>nlsf</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>wb</name></name></expr> ?</condition><then> <expr><name>ff_silk_lsf_min_spacing_wb</name></expr> </then><else>:

<expr><name>ff_silk_lsf_min_spacing_nbmb</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>has_lpc_leadin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subframes</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_lsf_interpolation_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>coded</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>has_lpc_leadin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>nlsf_leadin</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nlsf_leadin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>frame</name><operator>-&gt;</operator><name>nlsf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>silk_lsf2lpc</name><argument_list>(<argument><expr><name>nlsf_leadin</name></expr></argument>, <argument><expr><name>lpc_leadin</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lpc_leadin</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>lpc</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nlsf_interp_factor</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>silk_lsf2lpc</name><argument_list>(<argument><expr><name>nlsf</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nlsf_interp_factor</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>silk_lsf2lpc</name><argument_list>(<argument><expr><name>nlsf</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nlsf</name></name></expr></argument>, <argument><expr><name>nlsf</name></expr></argument>, <argument><expr><name>order</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>nlsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>lpc</name></name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><name>order</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>lpc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>silk_count_children</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>total</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name><name>child</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>total</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,

<argument><expr><name><name>ff_silk_model_pulse_location</name><index>[<expr><name>model</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>total</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>total</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>total</name> <operator>-</operator> <name><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>silk_decode_excitation</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,

<parameter><decl><type><name>float</name><modifier>*</modifier></type> <name>excitationf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>qoffset_high</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>voiced</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shellblocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ratelevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pulsecount</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>lsbcount</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>excitation</name><index>[<expr><literal type="number">320</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_lcg_seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shellblocks</name> <operator>=</operator> <name><name>ff_silk_shell_blocks</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subframes</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ratelevel</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>ff_silk_model_exc_rate</name><index>[<expr><name>voiced</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shellblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pulsecount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>ff_silk_model_pulse_count</name><index>[<expr><name>ratelevel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pulsecount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>pulsecount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">17</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name><name>lsbcount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pulsecount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>ff_silk_model_pulse_count</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>lsbcount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pulsecount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>ff_silk_model_pulse_count</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shellblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pulsecount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type> <name>location</name> <init>= <expr><name>excitation</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>branch</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>branch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pulsecount</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>silk_count_children</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>branch</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>branch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>silk_count_children</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>branch</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>branch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>silk_count_children</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>branch</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>branch</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>silk_count_children</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>branch</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>location</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>excitation</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shellblocks</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit</name> <operator>&lt;</operator> <name><name>lsbcount</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>bit</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>

<call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_excitation_lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shellblocks</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>ff_silk_model_excitation_sign</name><index>[<expr><name>active</name> <operator>+</operator>

<name>voiced</name></expr>]</index><index>[<expr><name>qoffset_high</name></expr>]</index><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>pulsecount</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>shellblocks</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name> <operator>*</operator> <literal type="number">256</literal> <operator>|</operator> <name><name>ff_silk_quant_offset</name><index>[<expr><name>voiced</name></expr>]</index><index>[<expr><name>qoffset_high</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seed</name> <operator>=</operator> <literal type="number">196314165</literal> <operator>*</operator> <name>seed</name> <operator>+</operator> <literal type="number">907633515</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seed</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seed</name> <operator>+=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>excitationf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>excitation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">8388608.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SILK_MAX_LAG</name></cpp:macro> <cpp:value>(288 + LTP_ORDER / 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTP_ORDER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>silk_decode_frame</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>frame_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coded_channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>active</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>active1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>voiced</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>qoffset_high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>order</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>lpc_leadin</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lpc_body</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>residual</name><index>[<expr><name>SILK_MAX_LAG</name> <operator>+</operator> <name>SILK_HISTORY</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_lpc_leadin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ltpscale</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitchlag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>ltptaps</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>sf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>SilkFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>frame</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>+</operator> <name>channel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>coded_channels</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>channel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>wi</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ws</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_stereo_s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_stereo_s2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ws</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_stereo_s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_stereo_s2</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ws</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_stereo_s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_silk_stereo_weights</name><index>[<expr><name><name>wi</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name><name>ff_silk_stereo_weights</name><index>[<expr><name><name>wi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ff_silk_stereo_weights</name><index>[<expr><name><name>wi</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">6554</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>*</operator> <operator>(</operator><name><name>ws</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stereo_weights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">8192.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stereo_weights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>w</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">8192.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>midonly</name></name> <operator>=</operator> <ternary><condition><expr><name>active1</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_mid_only</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qoffset_high</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_frame_type_inactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>voiced</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_frame_type_active</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>qoffset_high</name> <operator>=</operator> <name>type</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>voiced</name> <operator>=</operator> <name>type</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log_gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ipart</name></decl>, <decl><type ref="prev"/><name>fpart</name></decl>, <decl><type ref="prev"/><name>lingain</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>frame_num</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>coded</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>ff_silk_model_gain_highbits</name><index>[<expr><name>active</name> <operator>+</operator> <name>voiced</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>log_gain</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_gain_lowbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>coded</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>log_gain</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>log_gain</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>log_gain</name></name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta_gain</name> <init>= <expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_gain_delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>log_gain</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>delta_gain</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">16</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>log_gain</name></name> <operator>+</operator> <name>delta_gain</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>log_gain</name></name> <operator>=</operator> <name>log_gain</name></expr>;</expr_stmt>

<expr_stmt><expr><name>log_gain</name> <operator>=</operator> <operator>(</operator><name>log_gain</name> <operator>*</operator> <literal type="number">0x1D1C71</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">2090</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ipart</name> <operator>=</operator> <name>log_gain</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fpart</name> <operator>=</operator> <name>log_gain</name> <operator>&amp;</operator> <literal type="number">127</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lingain</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ipart</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>-</operator><literal type="number">174</literal> <operator>*</operator> <name>fpart</name> <operator>*</operator> <operator>(</operator><literal type="number">128</literal><operator>-</operator><name>fpart</name><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>fpart</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>ipart</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gain</name> <operator>=</operator> <name>lingain</name> <operator>/</operator> <literal type="number">65536.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>silk_decode_lpc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>lpc_leadin</name></expr></argument>, <argument><expr><name>lpc_body</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>has_lpc_leadin</name></expr></argument>, <argument><expr><name>voiced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>voiced</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lag_absolute</name> <init>= <expr><operator>(</operator><operator>!</operator><name>frame_num</name> <operator>||</operator> <operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>prev_voiced</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>primarylag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ltpfilter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type> <name>offsets</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lag_absolute</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_pitch_delta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>primarylag</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>primarylag</name></name> <operator>+</operator> <name>delta</name> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lag_absolute</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lag_absolute</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>highbits</name></decl>, <decl><type ref="prev"/><name>lowbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>model</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>ff_silk_model_pitch_lowbits_nb</name></expr>, <expr><name>ff_silk_model_pitch_lowbits_mb</name></expr>,

<expr><name>ff_silk_model_pitch_lowbits_wb</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>highbits</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_pitch_highbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lowbits</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>model</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>primarylag</name> <operator>=</operator> <name><name>ff_silk_pitch_min_lag</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>]</index></name> <operator>+</operator>

<name>highbits</name><operator>*</operator><name><name>ff_silk_pitch_scale</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>]</index></name> <operator>+</operator> <name>lowbits</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>primarylag</name></name> <operator>=</operator> <name>primarylag</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>subframes</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offsets</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>==</operator> <name>OPUS_BANDWIDTH_NARROWBAND</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>ff_silk_pitch_offset_nb10ms</name><index>[<expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,

<argument><expr><name>ff_silk_model_pitch_contour_nb10ms</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>

</then><else>: <expr><name><name>ff_silk_pitch_offset_mbwb10ms</name><index>[<expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,

<argument><expr><name>ff_silk_model_pitch_contour_mbwb10ms</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>offsets</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>==</operator> <name>OPUS_BANDWIDTH_NARROWBAND</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>ff_silk_pitch_offset_nb20ms</name><index>[<expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,

<argument><expr><name>ff_silk_model_pitch_contour_nb20ms</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>

</then><else>: <expr><name><name>ff_silk_pitch_offset_mbwb20ms</name><index>[<expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,

<argument><expr><name>ff_silk_model_pitch_contour_mbwb20ms</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pitchlag</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>primarylag</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ff_silk_pitch_min_lag</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ff_silk_pitch_max_lag</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ltpfilter</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ff_silk_model_ltp_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>filter_sel</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>ff_silk_model_ltp_filter0_sel</name></expr>, <expr><name>ff_silk_model_ltp_filter1_sel</name></expr>,

<expr><name>ff_silk_model_ltp_filter2_sel</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>filter_taps</name><index>[]</index></name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">5</literal></expr>]</index> <operator>=</operator> <block>{

<expr><name>ff_silk_ltp_filter0_taps</name></expr>, <expr><name>ff_silk_ltp_filter1_taps</name></expr>, <expr><name>ff_silk_ltp_filter2_taps</name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>filter_sel</name><index>[<expr><name>ltpfilter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ltptaps</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>filter_taps</name><index>[<expr><name>ltpfilter</name></expr>]</index><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <literal type="number">128.0f</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>voiced</name> <operator>&amp;&amp;</operator> <name>frame_num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ltpscale</name> <operator>=</operator> <name><name>ff_silk_ltp_scale_factor</name><index>[<expr><call><name>ff_opus_rc_dec_cdf</name><argument_list>(<argument><expr><name>rc</name></expr></argument>,

<argument><expr><name>ff_silk_model_ltp_scale_index</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>/</operator> <literal type="number">16384.0f</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ltpscale</name> <operator>=</operator> <literal type="number">15565.0f</literal><operator>/</operator><literal type="number">16384.0f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>silk_decode_excitation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>residual</name> <operator>+</operator> <name>SILK_MAX_LAG</name></expr></argument>, <argument><expr><name>qoffset_high</name></expr></argument>,

<argument><expr><name>active</name></expr></argument>, <argument><expr><name>voiced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>output_channels</name></name> <operator>==</operator> <name>channel</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subframes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type> <name>lpc_coeff</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>has_lpc_leadin</name><operator>)</operator></expr> ?</condition><then> <expr><name>lpc_leadin</name></expr> </then><else>: <expr><name>lpc_body</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name>SILK_HISTORY</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sflength</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>resptr</name> <init>= <expr><name>residual</name> <operator>+</operator> <name>SILK_MAX_LAG</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sflength</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>lpc</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>lpc_history</name></name> <operator>+</operator> <name>SILK_HISTORY</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sflength</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>voiced</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>out_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>nlsf_interp_factor</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_end</name> <operator>=</operator> <operator>-</operator><name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sflength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>ltpscale</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>out_end</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sflength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator> <name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pitchlag</name> <operator>-</operator> <name>LTP_ORDER</name><operator>/</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>out_end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>lpc_coeff</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>dst</name><index>[<expr><name>j</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>resptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name> <operator>/</operator> <name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>out_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>rescale</name> <init>= <expr><name><name>sf</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>gain</name> <operator>/</operator> <name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gain</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>out_end</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>resptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name>rescale</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sflength</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>resptr</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>LTP_ORDER</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ltptaps</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>resptr</name><index>[<expr><name>j</name> <operator>-</operator> <name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pitchlag</name> <operator>+</operator> <name>LTP_ORDER</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>resptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sflength</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>resptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>gain</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>order</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>lpc_coeff</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>lpc</name><index>[<expr><name>j</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>prev_voiced</name></name> <operator>=</operator> <name>voiced</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>lpc_history</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>lpc_history</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr></argument>, <argument><expr><name>SILK_HISTORY</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>output</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr></argument>, <argument><expr><name>SILK_HISTORY</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>coded</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>silk_unmix_ms</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>mid</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>output</name> <operator>+</operator> <name>SILK_HISTORY</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>side</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>output</name> <operator>+</operator> <name>SILK_HISTORY</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w0_prev</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prev_stereo_weights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w1_prev</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prev_stereo_weights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>stereo_weights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>stereo_weights</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name><name>ff_silk_stereo_interp_len</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>interp0</name> <init>= <expr><name>w0_prev</name> <operator>+</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>w0</name> <operator>-</operator> <name>w0_prev</name><operator>)</operator> <operator>/</operator> <name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>interp1</name> <init>= <expr><name>w1_prev</name> <operator>+</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>w1</name> <operator>-</operator> <name>w1_prev</name><operator>)</operator> <operator>/</operator> <name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>p0</name> <init>= <expr><literal type="number">0.25</literal> <operator>*</operator> <operator>(</operator><name><name>mid</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>mid</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>mid</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>interp1</name><operator>)</operator> <operator>*</operator> <name><name>mid</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>side</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>interp0</name> <operator>*</operator> <name>p0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>interp1</name><operator>)</operator> <operator>*</operator> <name><name>mid</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>side</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>interp0</name> <operator>*</operator> <name>p0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>p0</name> <init>= <expr><literal type="number">0.25</literal> <operator>*</operator> <operator>(</operator><name><name>mid</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>mid</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>mid</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>w1</name><operator>)</operator> <operator>*</operator> <name><name>mid</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>side</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>w0</name> <operator>*</operator> <name>p0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>w1</name><operator>)</operator> <operator>*</operator> <name><name>mid</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>side</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>w0</name> <operator>*</operator> <name>p0</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_stereo_weights</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>stereo_weights</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>stereo_weights</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>silk_flush_frame</name><parameter_list>(<parameter><decl><type><name>SilkFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>coded</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>lpc_history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>lpc_history</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>lpc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>lpc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nlsf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nlsf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>log_gain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>primarylag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>prev_voiced</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>coded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_silk_decode_superframe</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>OpusBandwidth</name></name></type> <name>bandwidth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>coded_channels</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>duration_ms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>active</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>redundancy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bandwidth</name> <operator>&gt;</operator> <name>OPUS_BANDWIDTH_WIDEBAND</name> <operator>||</operator>

<name>coded_channels</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>duration_ms</name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameters passed "</literal>

<literal type="string">"to the SILK decoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_frames</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>duration_ms</name> <operator>&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>duration_ms</name> <operator>&gt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subframes</name></name> <operator>=</operator> <name>duration_ms</name> <operator>/</operator> <name>nb_frames</name> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sflength</name></name> <operator>=</operator> <literal type="number">20</literal> <operator>*</operator> <operator>(</operator><name>bandwidth</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flength</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sflength</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bandwidth</name></name> <operator>=</operator> <name>bandwidth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>wb</name></name> <operator>=</operator> <name>bandwidth</name> <operator>==</operator> <name>OPUS_BANDWIDTH_WIDEBAND</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coded_channels</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_coded_channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>silk_flush_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_coded_channels</name></name> <operator>=</operator> <name>coded_channels</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coded_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nb_frames</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>active</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>redundancy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>redundancy</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"LBRR frames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_frames</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>coded_channels</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>midonly</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>silk_decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>coded_channels</name></expr></argument>, <argument><expr><name><name>active</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>active</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>midonly</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coded</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>silk_flush_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>coded_channels</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>output_channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>output_channels</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>output</name> <operator>+</operator> <name>SILK_HISTORY</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>flength</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>silk_unmix_ms</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>midonly</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>nb_frames</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>flength</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_silk_free</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_silk_flush</name><parameter_list>(<parameter><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>silk_flush_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>silk_flush_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_stereo_weights</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_stereo_weights</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_silk_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>SilkContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SilkContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>output_channels</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>output_channels</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of output channels: %d\n"</literal></expr></argument>,

<argument><expr><name>output_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_channels</name></name> <operator>=</operator> <name>output_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_silk_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
