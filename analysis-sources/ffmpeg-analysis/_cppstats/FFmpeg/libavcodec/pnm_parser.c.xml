<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\pnm_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pnm.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>PNMParseContext</name> <block>{

<decl_stmt><decl><type><name>ParseContext</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>remaining_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ascii_scan</name></decl>;</decl_stmt>

}</block></struct></type><name>PNMParseContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pnm_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>poutbuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poutbuf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PNMParseContext</name> <modifier>*</modifier></type><name>pnmpc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ParseContext</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><operator>&amp;</operator><name><name>pnmpc</name><operator>-&gt;</operator><name>pc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PNMContext</name></type> <name>pnmctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>END_NOT_FOUND</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name></expr></argument>, <argument><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name><name>pc</name><operator>-&gt;</operator><name>overread</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>overread_index</name></name> <operator>+=</operator> <name><name>pc</name><operator>-&gt;</operator><name>overread</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>overread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pnmpc</name><operator>-&gt;</operator><name>remaining_bytes</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>inc</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>pnmpc</name><operator>-&gt;</operator><name>remaining_bytes</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>skip</name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pnmpc</name><operator>-&gt;</operator><name>remaining_bytes</name></name> <operator>-=</operator> <name>inc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pnmpc</name><operator>-&gt;</operator><name>remaining_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>retry</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pnmctx</name><operator>.</operator><name>bytestream_start</name></name> <operator>=</operator>

<name><name>pnmctx</name><operator>.</operator><name>bytestream</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pnmctx</name><operator>.</operator><name>bytestream_end</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pnmctx</name><operator>.</operator><name>bytestream_start</name></name> <operator>=</operator>

<name><name>pnmctx</name><operator>.</operator><name>bytestream</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <name>skip</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pnmctx</name><operator>.</operator><name>bytestream_end</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name> <operator>-</operator> <name>skip</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_pnm_decode_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pnmctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pnmctx</name><operator>.</operator><name>bytestream</name></name> <operator>&lt;</operator> <name><name>pnmctx</name><operator>.</operator><name>bytestream_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pnmpc</name><operator>-&gt;</operator><name>ascii_scan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>step</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pnmctx</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>pnmctx</name><operator>.</operator><name>bytestream_start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>skip</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pnmctx</name><operator>.</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><name><name>pnmctx</name><operator>.</operator><name>bytestream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>pnmctx</name><operator>.</operator><name>bytestream_end</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sync</name> <init>= <expr><name>bs</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pnmpc</name><operator>-&gt;</operator><name>ascii_scan</name></name> <operator>&lt;=</operator> <name>end</name> <operator>-</operator> <name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs</name> <operator>+=</operator> <name><name>pnmpc</name><operator>-&gt;</operator><name>ascii_scan</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>bs</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sync</name> <operator>=</operator> <name>bs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>bs</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>end</name><operator>-</operator><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bs</name> <operator>=</operator> <name>match</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>bs</name> <operator>-</operator> <name><name>pnmctx</name><operator>.</operator><name>bytestream_start</name></name> <operator>+</operator> <name>skip</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pnmpc</name><operator>-&gt;</operator><name>ascii_scan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>END_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pnmpc</name><operator>-&gt;</operator><name>ascii_scan</name></name> <operator>=</operator> <name>sync</name> <operator>-</operator> <name><name>pnmctx</name><operator>.</operator><name>bytestream</name></name> <operator>+</operator> <name>skip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pnmctx</name><operator>.</operator><name>bytestream</name></name> <operator>-</operator> <name><name>pnmctx</name><operator>.</operator><name>bytestream_start</name></name> <operator>+</operator> <name>skip</name>

<operator>+</operator> <call><name>av_image_get_buffer_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>END_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name><name>pnmctx</name><operator>.</operator><name>bytestream_start</name></name> <operator>!=</operator> <name>buf</name> <operator>+</operator> <name>skip</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>-=</operator> <name><name>pc</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pnmpc</name><operator>-&gt;</operator><name>remaining_bytes</name></name> <operator>=</operator> <name>next</name> <operator>-</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>END_NOT_FOUND</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>ff_combine_frame</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>poutbuf_size</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<return>return <expr><name>next</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_pnm_parser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_PGM</name></expr>, <expr><name>AV_CODEC_ID_PGMYUV</name></expr>, <expr><name>AV_CODEC_ID_PPM</name></expr>,

<expr><name>AV_CODEC_ID_PBM</name></expr>, <expr><name>AV_CODEC_ID_PAM</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PNMParseContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>pnm_parse</name></expr>,

<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>ff_parse_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
