<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\av1_frame_split_bsf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_av1.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AV1FSplitContext</name> <block>{

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>buffer_pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>temporal_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_frame_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_frame_idx</name></decl>;</decl_stmt>

}</block></struct></type> <name>AV1FSplitContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av1_frame_split_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1FSplitContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temporal_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>split</name> <init>= <expr><operator>!</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_cbs_read_packet</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse temporal unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>passthrough</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>td</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_FRAME</name> <operator>||</operator>

<name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_FRAME_HEADER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_frames</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_TILE_LIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Large scale tiles are unsupported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>passthrough</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nb_frames</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_idx</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name> <operator>=</operator> <name>nb_frames</name></expr>;</expr_stmt>

<expr_stmt><expr><name>split</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>split</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_frame_type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_idx</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>td</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>unit</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_FRAME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1RawOBU</name> <modifier>*</modifier></type><name>obu</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Frame OBU found when Tile data for a "</literal>

<literal type="string">"previous frame was expected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>passthrough</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame</name><operator>.</operator><name>header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_frame_type</name> <operator>=</operator> <name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_idx</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_idx</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_FRAME_HEADER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1RawOBU</name> <modifier>*</modifier></type><name>obu</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Frame Header OBU found when Tile data for a "</literal>

<literal type="string">"previous frame was expected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>passthrough</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame_header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_frame_type</name> <operator>=</operator> <name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>obu_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_idx</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>show_existing_frame</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_idx</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_TILE_GROUP</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1RawOBU</name> <modifier>*</modifier></type><name>obu</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawTileGroup</name> <modifier>*</modifier></type><name>group</name> <init>= <expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>tile_group</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name> <operator>||</operator> <name>cur_frame_type</name> <operator>!=</operator> <name>AV1_OBU_FRAME_HEADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unexpected Tile Group OBU found before a "</literal>

<literal type="string">"Frame Header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>passthrough</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>group</name><operator>-&gt;</operator><name>tg_end</name></name> <operator>==</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>tile_rows</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame_idx</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>frame</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_ref</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>td</name><operator>-&gt;</operator><name>units</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_idx</name></name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>show_existing_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>show_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>passthrough</name>:</label>

<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CodedBitstreamUnitType</name></type> <name><name>decompose_unit_types</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV1_OBU_TEMPORAL_DELIMITER</name></expr>,

<expr><name>AV1_OBU_SEQUENCE_HEADER</name></expr>,

<expr><name>AV1_OBU_FRAME_HEADER</name></expr>,

<expr><name>AV1_OBU_TILE_GROUP</name></expr>,

<expr><name>AV1_OBU_FRAME</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av1_frame_split_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1FSplitContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temporal_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name> <operator>=</operator> <call><name>av_packet_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_AV1</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name><operator>-&gt;</operator><name>decompose_unit_types</name></name> <operator>=</operator> <operator>(</operator><name>CodedBitstreamUnitType</name><operator>*</operator><operator>)</operator><name>decompose_unit_types</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name><operator>-&gt;</operator><name>nb_decompose_unit_types</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>decompose_unit_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_cbs_read_extradata</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>av1_frame_split_flush</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1FSplitContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temporal_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>av1_frame_split_close</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1FSplitContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temporal_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>av1_frame_split_codec_ids</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_CODEC_ID_AV1</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_av1_frame_split_bsf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"av1_frame_split"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AV1FSplitContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>av1_frame_split_init</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>av1_frame_split_flush</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>av1_frame_split_close</name></expr>,

<expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>av1_frame_split_filter</name></expr>,

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>av1_frame_split_codec_ids</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
