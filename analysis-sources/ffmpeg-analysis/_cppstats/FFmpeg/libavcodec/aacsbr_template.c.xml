<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacsbr_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/qsort.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>aacsbr_tableinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">320</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr_qmf_window_us</name><index>[<expr><literal type="number">320</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>sbr_qmf_window_us</name><index>[<expr><literal type="number">320</literal> <operator>-</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>sbr_qmf_window_us</name><index>[<expr><literal type="number">384</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>sbr_qmf_window_us</name><index>[<expr><literal type="number">384</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr_qmf_window_us</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>sbr_qmf_window_us</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">320</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr_qmf_window_ds</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>sbr_qmf_window_us</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name> <name>AAC_RENAME</name></type>(<name>ff_aac_sbr_init</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sbr_codes</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sbr_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>table_size</name></decl>, <decl><type ref="prev"/><name>elem_size</name></decl>;</decl_stmt>

}</block> <decl><name><name>sbr_tmp</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>t_huffman_env_1_5dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>f_huffman_env_1_5dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>t_huffman_env_bal_1_5dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>f_huffman_env_bal_1_5dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>t_huffman_env_3_0dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>f_huffman_env_3_0dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>t_huffman_env_bal_3_0dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>f_huffman_env_bal_3_0dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>t_huffman_noise_3_0dB</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>SBR_VLC_ROW</name><argument_list>(<argument><expr><name>t_huffman_noise_bal_3_0dB</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1098</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1092</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1026</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1058</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1052</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">544</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">544</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">592</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SBR_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aacsbr_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>AAC_RENAME</name></type>(<name>ff_ps_init</name>)<parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_turnoff</name><parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>ready_for_dequant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SpectrumParameters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name> <name>AAC_RENAME</name></type>(<name>ff_aac_sbr_ctx_init</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id_aac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>mdct_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>id_aac</name></name> <operator>=</operator> <name>id_aac</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>synthesis_filterbank_samples_offset</name> <operator>=</operator> <name>SBR_SYNTHESIS_BUF_SIZE</name> <operator>-</operator> <operator>(</operator><literal type="number">1280</literal> <operator>-</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>synthesis_filterbank_samples_offset</name> <operator>=</operator> <name>SBR_SYNTHESIS_BUF_SIZE</name> <operator>-</operator> <operator>(</operator><literal type="number">1280</literal> <operator>-</operator> <literal type="number">128</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME_32</name><argument_list>(<argument><expr><name>ff_mdct_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">64</literal> <operator>*</operator> <literal type="number">32768.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME_32</name><argument_list>(<argument><expr><name>ff_mdct_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>mdct_ana</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2.0</literal> <operator>*</operator> <literal type="number">32768.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_ps_ctx_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sbrdsp_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aacsbr_func_ptr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name> <name>AAC_RENAME</name></type>(<name>ff_aac_sbr_ctx_close</name>)<parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>AAC_RENAME_32</name><argument_list>(<argument><expr><name>ff_mdct_end</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME_32</name><argument_list>(<argument><expr><name>ff_mdct_end</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>mdct_ana</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsort_comparison_function_int16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name>a</name> <operator>-</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name>b</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>in_table_int16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last_el</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>needle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last_el</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>needle</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_make_f_tablelim</name><parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_bands</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>bands_warped</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><call><name>Q23</name><argument_list>(<argument><expr><literal type="number">1.32715174233856803909f</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>Q23</name><argument_list>(<argument><expr><literal type="number">1.18509277094158210129f</literal></expr></argument>)</argument_list></call></expr>, 

<macro><name>Q23</name><argument_list>(<argument><literal type="number">1.11987160404675912501f</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name></type> <name>lim_bands_per_octave_warped</name> <init>= <expr><name><name>bands_warped</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_bands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>patch_borders</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>patch_borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch_borders</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>patch_borders</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>patch_num_subbands</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>patch_borders</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>patch_borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>uint16_t</name></expr></argument>,

<argument><expr><name>qsort_comparison_function_int16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_lim</name></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>out</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_lim</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>in</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&gt;=</operator> <operator>*</operator><name>out</name> <operator>*</operator> <name>lim_bands_per_octave_warped</name></expr>)</condition> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>&gt;=</operator> <operator>*</operator><name>out</name> <operator>*</operator> <name>lim_bands_per_octave_warped</name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><operator>*</operator><operator>++</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <operator>*</operator><name>out</name> <operator>||</operator>

<operator>!</operator><call><name>in_table_int16</name><argument_list>(<argument><expr><name>patch_borders</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr></argument>, <argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_lim</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>in_table_int16</name><argument_list>(<argument><expr><name>patch_borders</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr></argument>, <argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_lim</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>++</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while> <if_stmt><else>else <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_lim</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>read_sbr_header</name><parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cnt</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs_header_extra_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bs_header_extra_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_bs_limiter_bands</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_bands</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SpectrumParameters</name></type> <name>old_spectrum_params</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>ready_for_dequant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_spectrum_params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SpectrumParameters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_amp_res_header</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_start_freq</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_stop_freq</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_xover_band</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>bs_header_extra_1</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_header_extra_2</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_header_extra_1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_freq_scale</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_alter_scale</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_noise_bands</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_freq_scale</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_alter_scale</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_noise_bands</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_spectrum_params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SpectrumParameters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_header_extra_2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_bands</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_gains</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_interpol_freq</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_smoothing_mode</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_bands</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_gains</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_interpol_freq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_smoothing_mode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_limiter_bands</name></name> <operator>!=</operator> <name>old_bs_limiter_bands</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sbr</name><operator>-&gt;</operator><name>reset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sbr_make_f_tablelim</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>array_min_int16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>min</name> <init>= <expr><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nel</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>min</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_n_master</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_master</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bs_xover_band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n_master</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid n_master: %d\n"</literal></expr></argument>, <argument><expr><name>n_master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_xover_band</name> <operator>&gt;=</operator> <name>n_master</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid bitstream, crossover band index beyond array bounds: %d\n"</literal></expr></argument>,

<argument><expr><name>bs_xover_band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbr_make_f_master</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>SpectrumParameters</name> <modifier>*</modifier></type><name>spectrum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>temp</name></decl>, <decl><type ref="prev"/><name>max_qmf_subbands</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start_min</name></decl>, <decl><type ref="prev"/><name>stop_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>sbr_offset_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>stop_dk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">16000</literal></expr>:</case>

<expr_stmt><expr><name>sbr_offset_ptr</name> <operator>=</operator> <name><name>sbr_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">22050</literal></expr>:</case>

<expr_stmt><expr><name>sbr_offset_ptr</name> <operator>=</operator> <name><name>sbr_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24000</literal></expr>:</case>

<expr_stmt><expr><name>sbr_offset_ptr</name> <operator>=</operator> <name><name>sbr_offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32000</literal></expr>:</case>

<expr_stmt><expr><name>sbr_offset_ptr</name> <operator>=</operator> <name><name>sbr_offset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">44100</literal></expr>:</case> <case>case <expr><literal type="number">48000</literal></expr>:</case> <case>case <expr><literal type="number">64000</literal></expr>:</case>

<expr_stmt><expr><name>sbr_offset_ptr</name> <operator>=</operator> <name><name>sbr_offset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">88200</literal></expr>:</case> <case>case <expr><literal type="number">96000</literal></expr>:</case> <case>case <expr><literal type="number">128000</literal></expr>:</case> <case>case <expr><literal type="number">176400</literal></expr>:</case> <case>case <expr><literal type="number">192000</literal></expr>:</case>

<expr_stmt><expr><name>sbr_offset_ptr</name> <operator>=</operator> <name><name>sbr_offset</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported sample rate for SBR: %d\n"</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;</operator> <literal type="number">32000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;</operator> <literal type="number">64000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">4000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>start_min</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stop_min</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>start_min</name> <operator>+</operator> <name><name>sbr_offset_ptr</name><index>[<expr><name><name>spectrum</name><operator>-&gt;</operator><name>bs_start_freq</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spectrum</name><operator>-&gt;</operator><name>bs_stop_freq</name></name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>stop_min</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_bands</name><argument_list>(<argument><expr><name>stop_dk</name></expr></argument>, <argument><expr><name>stop_min</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>stop_dk</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>qsort_comparison_function_int16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>spectrum</name><operator>-&gt;</operator><name>bs_stop_freq</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>stop_dk</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>spectrum</name><operator>-&gt;</operator><name>bs_stop_freq</name></name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>spectrum</name><operator>-&gt;</operator><name>bs_stop_freq</name></name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal><operator>*</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid bs_stop_freq: %d\n"</literal></expr></argument>, <argument><expr><name><name>spectrum</name><operator>-&gt;</operator><name>bs_stop_freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">32000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_qmf_subbands</name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <literal type="number">44100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_qmf_subbands</name> <operator>=</operator> <literal type="number">35</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;=</operator> <literal type="number">48000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_qmf_subbands</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>max_qmf_subbands</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid bitstream, too many QMF subbands: %d\n"</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spectrum</name><operator>-&gt;</operator><name>bs_freq_scale</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dk</name></decl>, <decl><type ref="prev"/><name>k2diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dk</name> <operator>=</operator> <name><name>spectrum</name><operator>-&gt;</operator><name>bs_alter_scale</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>dk</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>dk</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_n_master</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_xover_band</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>dk</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>k2diff</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name> <operator>*</operator> <name>dk</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k2diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-=</operator> <operator>(</operator><name>k2diff</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k2diff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>half_bands</name> <init>= <expr><literal type="number">7</literal> <operator>-</operator> <name><name>spectrum</name><operator>-&gt;</operator><name>bs_freq_scale</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>two_regions</name></decl>, <decl><type ref="prev"/><name>num_bands_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vdk0_max</name></decl>, <decl><type ref="prev"/><name>vdk1_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>vk0</name><index>[<expr><literal type="number">49</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>nz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><literal type="number">49</literal> <operator>*</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">110</literal> <operator>*</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>two_regions</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>two_regions</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>/</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>fixed_log</name><argument_list>(<argument><expr><name>tmp</name> <operator>-</operator> <literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>tmp</name> <operator>*</operator> <name>CONST_RECIP_LN2</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>nz</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>half_bands</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_bands_0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">0x400000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>num_bands_0</name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>half_bands</name> <operator>*</operator> <call><name>log2f</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name>num_bands_0</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid num_bands_0: %d\n"</literal></expr></argument>, <argument><expr><name>num_bands_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vk0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_bands</name><argument_list>(<argument><expr><name>vk0</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>num_bands_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>vk0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>num_bands_0</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>qsort_comparison_function_int16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vdk0_max</name> <operator>=</operator> <name><name>vk0</name><index>[<expr><name>num_bands_0</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vk0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>num_bands_0</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vk0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid vDk0[%d]: %d\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>vk0</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vk0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>vk0</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>two_regions</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>vk1</name><index>[<expr><literal type="number">49</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>num_bands_1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>/</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>fixed_log</name><argument_list>(<argument><expr><name>tmp</name> <operator>-</operator> <literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>tmp</name> <operator>*</operator> <name>CONST_RECIP_LN2</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>nz</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>half_bands</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>spectrum</name><operator>-&gt;</operator><name>bs_alter_scale</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>tmp</name> <operator>*</operator> <name>CONST_076923</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_bands_1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">0x400000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>float</name></type> <name>invwarp</name> <init>= <expr><ternary><condition><expr><name><name>spectrum</name><operator>-&gt;</operator><name>bs_alter_scale</name></name></expr> ?</condition><then> <expr><literal type="number">0.76923076923076923077f</literal></expr>

</then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_bands_1</name> <init>= <expr><call><name>lrintf</name><argument_list>(<argument><expr><name>half_bands</name> <operator>*</operator> <name>invwarp</name> <operator>*</operator>

<call><name>log2f</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>make_bands</name><argument_list>(<argument><expr><name>vk1</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>num_bands_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vdk1_min</name> <operator>=</operator> <call><name>array_min_int16</name><argument_list>(<argument><expr><name>vk1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>num_bands_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vdk1_min</name> <operator>&lt;</operator> <name>vdk0_max</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>change</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>vk1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>num_bands_1</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>qsort_comparison_function_int16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>change</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>vdk0_max</name> <operator>-</operator> <name><name>vk1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>vk1</name><index>[<expr><name>num_bands_1</name></expr>]</index></name> <operator>-</operator> <name><name>vk1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vk1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>change</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vk1</name><index>[<expr><name>num_bands_1</name></expr>]</index></name> <operator>-=</operator> <name>change</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AV_QSORT</name><argument_list>(<argument><expr><name>vk1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>num_bands_1</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>qsort_comparison_function_int16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vk1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>num_bands_1</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vk1</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid vDk1[%d]: %d\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>vk1</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vk1</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>vk1</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name> <operator>=</operator> <name>num_bands_0</name> <operator>+</operator> <name>num_bands_1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_n_master</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_xover_band</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vk0</name></expr></argument>,

<argument><expr><operator>(</operator><name>num_bands_0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name>num_bands_0</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>vk1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>num_bands_1</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name> <operator>=</operator> <name>num_bands_0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_n_master</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_xover_band</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name></name></expr></argument>, <argument><expr><name>vk0</name></expr></argument>, <argument><expr><operator>(</operator><name>num_bands_0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbr_hf_calc_npatches</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>last_k</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>last_msb</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msb</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>usb</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>goal_sb</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1000</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>goal_sb</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>goal_sb</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>odd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>last_k</name> <operator>&amp;&amp;</operator> <name>msb</name> <operator>==</operator> <name>last_msb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"patch construction failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_k</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_msb</name> <operator>=</operator> <name>msb</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>k</name></expr>;</init> <condition><expr><name>i</name> <operator>==</operator> <name>k</name> <operator>||</operator> <name>sb</name> <operator>&gt;</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>msb</name> <operator>-</operator> <name>odd</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sb</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>odd</name> <operator>=</operator> <operator>(</operator><name>sb</name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many patches: %d\n"</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>patch_num_subbands</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>sb</name> <operator>-</operator> <name>usb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>patch_start_subband</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>odd</name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>patch_num_subbands</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>patch_num_subbands</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>usb</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>msb</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>msb</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name>sb</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>sb</name> <operator>!=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>sbr</name><operator>-&gt;</operator><name>patch_num_subbands</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbr_make_f_derived</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>nz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_master</name></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_xover_band</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_xover_band</name></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_master</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Stop frequency border too high: %d\n"</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Start frequency border too high: %d\n"</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>-</operator> <name>temp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>/</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>temp</name> <operator>&lt;</operator> <literal type="number">0x40000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>fixed_log</name><argument_list>(<argument><expr><name>temp</name> <operator>-</operator> <literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>temp</name> <operator>*</operator> <name>CONST_RECIP_LN2</name> <operator>+</operator> <literal type="number">0x20000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>nz</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_noise_bands</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name> <operator>=</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">0x400000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name><operator>.</operator><name>bs_noise_bands</name></name> <operator>*</operator>

<call><name>log2f</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many noise floor scale factors: %d\n"</literal></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablenoise</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>temp</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablenoise</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name><index>[<expr><name>temp</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>sbr_hf_calc_npatches</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sbr_make_f_tablelim</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_indexnoise</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_indexnoise</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>get_bits1_vector</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vec</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>elements</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elements</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>ceil_log2</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_sbr_grid</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bs_pointer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abs_bord_trail</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_rel_lead</name></decl>, <decl><type ref="prev"/><name>num_rel_trail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bs_num_env_old</name> <init>= <expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bs_frame_class</name></decl>, <decl><type ref="prev"/><name>bs_num_env</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_amp_res</name></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>bs_amp_res_header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env_num_env_old</name></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>bs_num_env_old</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>bs_frame_class</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FIXFIX</name></expr>:</case>

<expr_stmt><expr><name>bs_num_env</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_num_env</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid bitstream, too many SBR envelopes in FIXFIX type SBR frame: %d\n"</literal></expr></argument>,

<argument><expr><name>bs_num_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>=</operator> <name>bs_num_env</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rel_lead</name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_amp_res</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name> <operator>=</operator> <name>abs_bord_trail</name></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_bord_trail</name> <operator>=</operator> <operator>(</operator><name>abs_bord_trail</name> <operator>+</operator> <operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator>

<name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rel_lead</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>abs_bord_trail</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>FIXVAR</name></expr>:</case>

<expr_stmt><expr><name>abs_bord_trail</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rel_trail</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>=</operator> <name>num_rel_trail</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name> <operator>=</operator> <name>abs_bord_trail</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rel_trail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bs_pointer</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ceil_log2</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>VARFIX</name></expr>:</case>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rel_lead</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>=</operator> <name>num_rel_lead</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name> <operator>=</operator> <name>abs_bord_trail</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rel_lead</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bs_pointer</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ceil_log2</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_bits1_vector</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VARVAR</name></expr>:</case>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_bord_trail</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rel_lead</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rel_trail</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bs_num_env</name> <operator>=</operator> <name>num_rel_lead</name> <operator>+</operator> <name>num_rel_trail</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_num_env</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid bitstream, too many SBR envelopes in VARVAR type SBR frame: %d\n"</literal></expr></argument>,

<argument><expr><name>bs_num_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>=</operator> <name>bs_num_env</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name> <operator>=</operator> <name>abs_bord_trail</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rel_lead</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_rel_trail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>bs_pointer</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ceil_log2</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_bits1_vector</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_frame_class</name></name> <operator>=</operator> <name>bs_frame_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>bs_pointer</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bs_pointer</name> <operator>&gt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid bitstream, bs_pointer points to a middle noise border outside the time borders table: %d\n"</literal></expr></argument>,

<argument><expr><name>bs_pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not strictly monotone time borders\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_noise</name></name> <operator>=</operator> <operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_q</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_noise</name></name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_noise</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_frame_class</name></name> <operator>==</operator> <name>FIXFIX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_frame_class</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>-</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>bs_pointer</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bs_pointer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>bs_pointer</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>bs_pointer</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>bs_num_env_old</name><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>bs_frame_class</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>bs_pointer</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>bs_pointer</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>bs_frame_class</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bs_pointer</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>bs_pointer</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_sbr_grid</name><parameter_list>(<parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SBRData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name><name>dst</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>t_env_num_env_old</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name><name>dst</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>dst</name><operator>-&gt;</operator><name>bs_num_env</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bs_freq_res</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>bs_freq_res</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>bs_freq_res</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dst</name><operator>-&gt;</operator><name>bs_freq_res</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>t_env</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>t_env</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>t_env</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>t_q</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>t_q</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>t_q</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bs_num_env</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bs_amp_res</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bs_amp_res</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bs_num_noise</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bs_num_noise</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>bs_frame_class</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>bs_frame_class</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_sbr_dtdf</name><parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>get_bits1_vector</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_df_env</name></name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_bits1_vector</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_df_noise</name></name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_noise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_sbr_invf</name><parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_invf_mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_sbr_envelope</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator><name>t_huff</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>f_huff</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_lav</name></decl>, <decl><type ref="prev"/><name>f_lav</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>bs_coupling</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>odd</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_coupling</name></name> <operator>&amp;&amp;</operator> <name>ch</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_amp_res</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>T_HUFFMAN_ENV_BAL_3_0DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>T_HUFFMAN_ENV_BAL_3_0DB</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>F_HUFFMAN_ENV_BAL_3_0DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>F_HUFFMAN_ENV_BAL_3_0DB</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>T_HUFFMAN_ENV_BAL_1_5DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>T_HUFFMAN_ENV_BAL_1_5DB</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>F_HUFFMAN_ENV_BAL_1_5DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>F_HUFFMAN_ENV_BAL_1_5DB</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_amp_res</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>T_HUFFMAN_ENV_3_0DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>T_HUFFMAN_ENV_3_0DB</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>F_HUFFMAN_ENV_3_0DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>F_HUFFMAN_ENV_3_0DB</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>T_HUFFMAN_ENV_1_5DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>T_HUFFMAN_ENV_1_5DB</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>F_HUFFMAN_ENV_1_5DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>F_HUFFMAN_ENV_1_5DB</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_df_env</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>delta</name> <operator>*</operator> <operator>(</operator><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>t_huff</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>t_lav</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">127U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"env_facs_q %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>+</operator> <name>odd</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>delta</name> <operator>*</operator> <operator>(</operator><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>t_huff</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>t_lav</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">127U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"env_facs_q %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><name>j</name></expr> ?</condition><then> <expr><literal type="number">2</literal><operator>*</operator><name>j</name> <operator>-</operator> <name>odd</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>delta</name> <operator>*</operator> <operator>(</operator><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>t_huff</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>t_lav</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">127U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"env_facs_q %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>delta</name> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>delta</name> <operator>*</operator> <operator>(</operator><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>f_huff</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>f_lav</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">127U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"env_facs_q %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>env_facs_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_sbr_noise</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator><name>t_huff</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>f_huff</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t_lav</name></decl>, <decl><type ref="prev"/><name>f_lav</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>bs_coupling</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_coupling</name></name> <operator>&amp;&amp;</operator> <name>ch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>T_HUFFMAN_NOISE_BAL_3_0DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>T_HUFFMAN_NOISE_BAL_3_0DB</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>F_HUFFMAN_ENV_BAL_3_0DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>F_HUFFMAN_ENV_BAL_3_0DB</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>T_HUFFMAN_NOISE_3_0DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>T_HUFFMAN_NOISE_3_0DB</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_huff</name> <operator>=</operator> <name><name>vlc_sbr</name><index>[<expr><name>F_HUFFMAN_ENV_3_0DB</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_lav</name> <operator>=</operator> <name><name>vlc_sbr_lav</name><index>[<expr><name>F_HUFFMAN_ENV_3_0DB</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_noise</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_df_noise</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>delta</name> <operator>*</operator> <operator>(</operator><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>t_huff</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>t_lav</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">30U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"noise_facs_q %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>delta</name> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>delta</name> <operator>*</operator> <operator>(</operator><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>f_huff</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>f_lav</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">30U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"noise_facs_q %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_noise</name></name></expr>]</index></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs_q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_sbr_extension</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bs_extension_id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_bits_left</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>bs_extension_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXTENSION_ID_PS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Parametric Stereo signaled to be not-present but was found in the bitstream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>*</operator><name>num_bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>num_bits_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>num_bits_left</name> <operator>-=</operator> <call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_ps_read_data</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>, <argument><expr><operator>*</operator><name>num_bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_HE_V2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>bs_extension_id</name> <operator>||</operator> <operator>*</operator><name>num_bits_left</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator> <call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>*</operator><name>num_bits_left</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Reserved SBR extensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>*</operator><name>num_bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>num_bits_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_sbr_single_channel_element</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>read_sbr_grid</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>read_sbr_dtdf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sbr_invf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_envelope</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_noise</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bs_add_harmonic_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_bits1_vector</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bs_add_harmonic</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_sbr_channel_pair_element</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>bs_coupling</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_sbr_grid</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>copy_sbr_grid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sbr_dtdf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sbr_dtdf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sbr_invf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>bs_invf_mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>bs_invf_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_envelope</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_noise</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_envelope</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_noise</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_sbr_grid</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>read_sbr_grid</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>read_sbr_dtdf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sbr_dtdf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sbr_invf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sbr_invf</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_envelope</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_envelope</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_noise</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_sbr_noise</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bs_add_harmonic_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_bits1_vector</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bs_add_harmonic</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bs_add_harmonic_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_bits1_vector</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bs_add_harmonic</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>read_sbr_data</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id_aac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cnt</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>id_aac</name></name> <operator>=</operator> <name>id_aac</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>ready_for_dequant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>id_aac</name> <operator>==</operator> <name>TYPE_SCE</name> <operator>||</operator> <name>id_aac</name> <operator>==</operator> <name>TYPE_CCE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_sbr_single_channel_element</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>cnt</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id_aac</name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_sbr_channel_pair_element</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>cnt</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid bitstream - cannot apply SBR to element type %d\n"</literal></expr></argument>, <argument><expr><name>id_aac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>cnt</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>num_bits_left</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>num_bits_left</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_bits_left</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>num_bits_left</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>num_bits_left</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_bits_left</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_sbr_extension</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>num_bits_left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SBR Extension over read.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bits_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_reset</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sbr_make_f_master</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>spectrum_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sbr_make_f_derived</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"SBR reset failed. Switching SBR to pure upsampling mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name> <name>AAC_RENAME</name></type>(<name>ff_decode_sbr_extension</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb_host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id_aac</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_sbr_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_align_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name> <init>= <expr><operator>*</operator><name>gb_host</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name>gbc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb_host</name></expr></argument>, <argument><expr><name>cnt</name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ext_sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ext_sample_rate</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>crc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>num_sbr_bits</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx_and_m_pushed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_sbr_bits</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>num_sbr_bits</name> <operator>+=</operator> <call><name>read_sbr_header</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>reset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sbr_reset</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_sbr_bits</name> <operator>+=</operator> <call><name>read_sbr_data</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>id_aac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_align_bits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>cnt</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>num_sbr_bits</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>num_sbr_bits</name> <operator>+</operator> <name>num_align_bits</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>&gt;</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Expected to read %d SBR bytes actually read %d.\n"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cnt</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>sbr_qmf_analysis</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_analysis</name><argument_list>(<argument><expr><name>AVFixedDSPContext</name> <operator>*</operator><name>dsp</name></expr></argument>, <argument><expr><name>FFTContext</name> <operator>*</operator><name>mdct</name></expr></argument>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<argument><expr><specifier>static</specifier> <name>void</name> <macro><name>sbr_qmf_analysis</name><argument_list>(<argument>AVFloatDSPContext *dsp</argument>, <argument>FFTContext *mdct</argument>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<argument>SBRDSPContext *sbrdsp</argument>, <argument>const INTFLOAT *in</argument>, <argument>INTFLOAT *x</argument>,

<argument>INTFLOAT z[<literal type="number">320</literal>]</argument>, <argument>INTFLOAT W[<literal type="number">2</literal>][<literal type="number">32</literal>][<literal type="number">32</literal>][<literal type="number">2</literal>]</argument>, <argument>int buf_idx</argument>)</argument_list></macro>

<block>{

<expr><name>int</name> <name>i</name></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr><name>int</name> <name>j</name></expr>;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><name>x</name><operator>+</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">320</literal><operator>-</operator><literal type="number">32</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;

<expr><call><name>memcpy</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">288</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>sbr_qmf_window_ds</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">320</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>sum64x5</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>qmf_pre_shuffle</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">64</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"sbr_qmf_analysis: value %09d too large, setting to %09d\n"</literal></expr></argument>,

<argument><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt/>}</block_content> else if (z[j] &lt; -(1&lt;&lt;24</block></if></if_stmt>)</block_content></block></for>)</block_content> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"sbr_qmf_analysis: value %09d too small, setting to %09d\n"</literal></expr></argument>,

<argument><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt/>}</block_content>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

mdct-&gt;imdct_half(mdct</block></block><operator>,</operator> <expr_stmt><expr><name>z</name></expr><operator>,</operator> <expr><name>z</name><operator>+</operator><literal type="number">64</literal></expr></expr_stmt></for></block></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>qmf_post_shuffle</name></name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>buf_idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></function>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>sbr_qmf_synthesis</name></expr></argument>)</argument_list></call></expr></cpp:if>
static <function><type><name>void</name></type> <name>sbr_qmf_synthesis</name><parameter_list>(<parameter><decl><type><name>FFTContext</name> <modifier>*</modifier></type><name>mdct</name></decl></parameter>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<parameter><decl><type><name>SBRDSPContext</name> <modifier>*</modifier></type><name>sbrdsp</name></decl></parameter>, <parameter><decl><type><name>AVFixedDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<parameter><decl><type><name>SBRDSPContext</name> <modifier>*</modifier></type><name>sbrdsp</name></decl></parameter>, <parameter><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>INTFLOAT</name></type> <name><name>mdct_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>v0</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>v_off</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>div</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>sbr_qmf_window</name> <init>= <expr><ternary><condition><expr><name>div</name></expr> ?</condition><then> <expr><name>sbr_qmf_window_ds</name></expr> </then><else>: <expr><name>sbr_qmf_window_us</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>step</name> <init>= <expr><literal type="number">128</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>v_off</name> <operator>&lt;</operator> <name>step</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>saved_samples</name> <init>= <expr><operator>(</operator><literal type="number">1280</literal> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>div</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v0</name><index>[<expr><name>SBR_SYNTHESIS_BUF_SIZE</name> <operator>-</operator> <name>saved_samples</name></expr>]</index></name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>saved_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v_off</name> <operator>=</operator> <name>SBR_SYNTHESIS_BUF_SIZE</name> <operator>-</operator> <name>saved_samples</name> <operator>-</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>v_off</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v0</name> <operator>+</operator> <operator>*</operator><name>v_off</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>div</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[ <expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">32</literal><operator>+</operator><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">31</literal><operator>-</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>qmf_deint_neg</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>neg_odd_64</name></name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>mdct</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name>mdct</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbrdsp</name><operator>-&gt;</operator><name>qmf_deint_bfly</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdct_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul</name></name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name></expr></argument> , <argument><expr><name>sbr_qmf_window</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">192</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator> <literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">256</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">128</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">448</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">192</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">512</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">256</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">704</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">320</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">768</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">384</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator> <literal type="number">960</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">448</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator><literal type="number">1024</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">512</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <operator>(</operator><literal type="number">1216</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>sbr_qmf_window</name> <operator>+</operator> <operator>(</operator><literal type="number">576</literal> <operator>&gt;&gt;</operator> <name>div</name><operator>)</operator></expr></argument>, <argument><expr><name>out</name></expr></argument> , <argument><expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>div</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbr_lf_gen</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>INTFLOAT</name></type> <name><name>X_low</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>W</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>t_HFGen</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_f</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>X_low</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>X_low</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>t_HFGen</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_f</name> <operator>+</operator> <name>t_HFGen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X_low</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>W</name><index>[<expr><name>buf_idx</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <name>t_HFGen</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X_low</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>W</name><index>[<expr><name>buf_idx</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <name>t_HFGen</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>buf_idx</name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>buf_idx</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>t_HFGen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X_low</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>W</name><index>[<expr><name>buf_idx</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <name>i_f</name> <operator>-</operator> <name>t_HFGen</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X_low</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>W</name><index>[<expr><name>buf_idx</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <name>i_f</name> <operator>-</operator> <name>t_HFGen</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sbr_hf_gen</name><argument_list>(<argument><expr><name>AACContext</name> <operator>*</operator><name>ac</name></expr></argument>, <argument><expr><name>SpectralBandReplication</name> <operator>*</operator><name>sbr</name></expr></argument>,

<argument><expr><name>INTFLOAT</name> <name><name>X_high</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>INTFLOAT</name> <name><name>X_low</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>alpha0</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>alpha1</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>INTFLOAT</name> <name><name>bw_array</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>t_env</name></expr></argument>,

<argument><expr><name>int</name> <name>bs_num_env</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>num_patches</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>patch_num_subbands</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>patch_start_subband</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>g</name> <operator>&lt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablenoise</name><index>[<expr><name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>g</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"ERROR : no subband found for frequency %d\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>hf_gen</name></name><argument_list>(<argument><expr><name><name>X_high</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr></argument>,

<argument><expr><name><name>X_low</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr></argument>,

<argument><expr><name><name>alpha0</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>alpha1</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bw_array</name><index>[<expr><name>g</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>t_env</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>t_env</name><index>[<expr><name>bs_num_env</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>X_high</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>k</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>X_high</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbr_x_gen</name><parameter_list>(<parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>Y0</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>Y1</name><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>X_low</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_f</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_Temp</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>t_env_num_env_old</name> <operator>-</operator> <name>i_f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>X</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_Temp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>X_low</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>X_low</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_Temp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>Y0</name><index>[<expr><name>i</name> <operator>+</operator> <name>i_f</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>Y0</name><index>[<expr><name>i</name> <operator>+</operator> <name>i_f</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i_Temp</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">38</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>X_low</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>X_low</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i_Temp</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_f</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>Y1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>Y1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbr_mapping</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>,

<parameter><decl><type><name>SBRData</name> <modifier>*</modifier></type><name>ch_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>e_a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>ilim</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><ternary><condition><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name></name></expr> </then><else>: <expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"kx != f_table{high,low}[0]. "</literal>

<literal type="string">"Derived frequency tables were not regenerated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ilim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_origmapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>env_facs</name><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_noise</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n_q</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablenoise</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablenoise</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>q_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>noise_facs</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_add_harmonic_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>m_midpoint</name> <init>=

<expr><operator>(</operator><name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>m_midpoint</name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_add_harmonic</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator>

<operator>(</operator><name>e</name> <operator>&gt;=</operator> <name><name>e_a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>m_midpoint</name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ilim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>additional_sinusoid_present</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>m</name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>additional_sinusoid_present</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>s_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>additional_sinusoid_present</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>table</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>s_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ch_data</name><operator>-&gt;</operator><name>s_indexmapped</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_env_estimate</name><argument_list>(<argument><expr><call><name>AAC_FLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>e_curr</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">48</literal></expr>]</index></expr></argument>, <argument><expr><name>INTFLOAT</name> <name><name>X_high</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>SpectralBandReplication</name> <operator>*</operator><name>sbr</name></expr></argument>, <argument><expr><name>SBRData</name> <operator>*</operator><name>ch_data</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kx1</name> <init>= <expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>bs_interpol_freq</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>SoftFloat</name></type> <name>recip_env_size</name> <init>= <expr><call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">0x20000000</literal> <operator>/</operator> <operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>recip_env_size</name> <init>= <expr><literal type="number">0.5f</literal> <operator>/</operator> <operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>int</name></type> <name>ilb</name> <init>= <expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iub</name> <init>= <expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>sum</name> <init>= <expr><call><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>sum_square</name></name><argument_list>(<argument><expr><name><name>X_high</name><index>[<expr><name>m</name><operator>+</operator><name>kx1</name></expr>]</index></name> <operator>+</operator> <name>ilb</name></expr></argument>, <argument><expr><name>iub</name> <operator>-</operator> <name>ilb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>e_curr</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>recip_env_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>e_curr</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>*</operator> <name>recip_env_size</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>bs_num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>env_size</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ilb</name> <init>= <expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iub</name> <init>= <expr><name><name>ch_data</name><operator>-&gt;</operator><name>t_env</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>ENVELOPE_ADJUSTMENT_OFFSET</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><ternary><condition><expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablehigh</name></name></expr> </then><else>: <expr><name><name>sbr</name><operator>-&gt;</operator><name>f_tablelow</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>n</name><index>[<expr><name><name>ch_data</name><operator>-&gt;</operator><name>bs_freq_res</name><index>[<expr><name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>SoftFloat</name></type> <name>sum</name> <init>= <expr><name>FLOAT_0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SoftFloat</name></type> <name>den</name> <init>= <expr><call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">0x20000000</literal> <operator>/</operator> <operator>(</operator><name>env_size</name> <operator>*</operator> <operator>(</operator><name><name>table</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>table</name><index>[<expr><name>p</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><call><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>sum_square</name></name><argument_list>(<argument><expr><name><name>X_high</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>ilb</name></expr></argument>, <argument><expr><name>iub</name> <operator>-</operator> <name>ilb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>den</name> <init>= <expr><name>env_size</name> <operator>*</operator> <operator>(</operator><name><name>table</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>table</name><index>[<expr><name>p</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>sum_square</name></name><argument_list>(<argument><expr><name><name>X_high</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>ilb</name></expr></argument>, <argument><expr><name>iub</name> <operator>-</operator> <name>ilb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sum</name> <operator>/=</operator> <name>den</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>e_curr</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>k</name> <operator>-</operator> <name>kx1</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name> <name>AAC_RENAME</name></type>(<name>ff_sbr_apply</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SpectralBandReplication</name> <modifier>*</modifier></type><name>sbr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id_aac</name></decl></parameter>,

<parameter><decl><type><name>INTFLOAT</name><modifier>*</modifier></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name><modifier>*</modifier></type> <name>R</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>downsampled</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ext_sample_rate</name></name> <operator>&lt;</operator> <name><name>sbr</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nch</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>id_aac</name> <operator>==</operator> <name>TYPE_CPE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>id_aac</name> <operator>!=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>id_aac</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>id_aac</name> <operator>==</operator> <name>TYPE_LFE</name></expr> ?</condition><then> <expr><name>AV_LOG_VERBOSE</name></expr> </then><else>: <expr><name>AV_LOG_WARNING</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"element type mismatch %d != %d\n"</literal></expr></argument>, <argument><expr><name>id_aac</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>id_aac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>start</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sbr</name><operator>-&gt;</operator><name>ready_for_dequant</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No quantized data read for sbr_dequant.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_turnoff</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sbr</name><operator>-&gt;</operator><name>kx_and_m_pushed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx_and_m_pushed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sbr_dequant</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name>id_aac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>ready_for_dequant</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>nch</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sbr_qmf_analysis</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>mdct_ana</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>ch</name></expr> ?</condition><then> <expr><name>R</name></expr> </then><else>: <expr><name>L</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>analysis_filterbank_samples</name></expr></argument>,

<argument><expr><operator>(</operator><name>INTFLOAT</name><operator>*</operator><operator>)</operator><name><name>sbr</name><operator>-&gt;</operator><name>qmf_filter_scratch</name></name></expr></argument>,

<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>W</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>Ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbr</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sbr_lf_gen</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X_low</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>W</name></expr></argument>,

<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>Ypos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>Ypos</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>sbr</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sbr_hf_inverse_filter</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>alpha0</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>alpha1</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>X_low</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_chirp</name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>bs_num_env</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_hf_gen</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X_high</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>X_low</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>alpha0</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>alpha1</name></name></expr></argument>,

<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>bw_array</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>t_env</name></expr></argument>,

<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>bs_num_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sbr_mapping</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>e_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sbr_env_estimate</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>e_curr</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X_high</name></name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbr_gain_calc</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sbr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>e_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>sbr</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sbr_hf_assemble</name></name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>Y</name><index>[<expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>Ypos</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>X_high</name></name></expr></argument>,

<argument><expr><name>sbr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>e_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>sbr</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>sbr_x_gen</name></name><argument_list>(<argument><expr><name>sbr</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>Y</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>Ypos</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>Y</name><index>[ <expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>Ypos</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>sbr</name><operator>-&gt;</operator><name>X_low</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sbr</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_ps_apply</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>kx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sbr</name><operator>-&gt;</operator><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nch</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sbr_qmf_synthesis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>,

<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>qmf_filter_scratch</name></name></expr></argument>,

<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>synthesis_filterbank_samples</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>synthesis_filterbank_samples_offset</name></expr></argument>,

<argument><expr><name>downsampled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nch</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sbr_qmf_synthesis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>,

<argument><expr><name>R</name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>qmf_filter_scratch</name></name></expr></argument>,

<argument><expr><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>synthesis_filterbank_samples</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sbr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>synthesis_filterbank_samples_offset</name></expr></argument>,

<argument><expr><name>downsampled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aacsbr_func_ptr_init</name><parameter_list>(<parameter><decl><type><name>AACSBRContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sbr_lf_gen</name></name> <operator>=</operator> <name>sbr_lf_gen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sbr_hf_assemble</name></name> <operator>=</operator> <name>sbr_hf_assemble</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sbr_x_gen</name></name> <operator>=</operator> <name>sbr_x_gen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sbr_hf_inverse_filter</name></name> <operator>=</operator> <name>sbr_hf_inverse_filter</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_aacsbr_func_ptr_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
