<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\arm\cabac.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ARMV6T2_INLINE</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/cabac.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_cabac_inline</name></cpp:macro> <cpp:value>get_cabac_inline_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_cabac_inline_arm</name><parameter_list>(<parameter><decl><type><name>CABACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>reg_b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reg_c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"ldrb %[bit] , [%[state]] \n\t"

"add %[r_b] , %[tables] , %[lps_off] \n\t"

"mov %[tmp] , %[range] \n\t"

"and %[range] , %[range] , #0xC0 \n\t"

"add %[r_b] , %[r_b] , %[bit] \n\t"

"ldrb %[range] , [%[r_b], %[range], lsl #1] \n\t"

"add %[r_b] , %[tables] , %[norm_off] \n\t"

"sub %[r_c] , %[tmp] , %[range] \n\t"

"lsl %[tmp] , %[r_c] , #17 \n\t"

"cmp %[tmp] , %[low] \n\t"

"it gt \n\t"

"movgt %[range] , %[r_c] \n\t"

"itt cc \n\t"

"mvncc %[bit] , %[bit] \n\t"

"subcc %[low] , %[low] , %[tmp] \n\t"

"add %[r_c] , %[tables] , %[mlps_off] \n\t"

"ldrb %[tmp] , [%[r_b], %[range]] \n\t"

"ldrb %[r_b] , [%[r_c], %[bit]] \n\t"

"lsl %[low] , %[low] , %[tmp] \n\t"

"lsl %[range] , %[range] , %[tmp] \n\t"

"uxth %[r_c] , %[low] \n\t"

"strb %[r_b] , [%[state]] \n\t"

"tst %[r_c] , %[r_c] \n\t"

"bne 2f \n\t"

"ldr %[r_c] , [%[c], %[byte]] \n\t"

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UNCHECKED_BITSTREAM_READER</name></expr></cpp:if>

"ldrh %[tmp] , [%[r_c]] \n\t"

"add %[r_c] , %[r_c] , #2 \n\t"

"str %[r_c] , [%[c], %[byte]] \n\t"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

"ldr %[r_b] , [%[c], %[end]] \n\t"

"ldrh %[tmp] , [%[r_c]] \n\t"

"cmp %[r_c] , %[r_b] \n\t"

"itt lt \n\t"

"addlt %[r_c] , %[r_c] , #2 \n\t"

"strlt %[r_c] , [%[c], %[byte]] \n\t"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

"sub %[r_c] , %[low] , #1 \n\t"

"add %[r_b] , %[tables] , %[norm_off] \n\t"

"eor %[r_c] , %[low] , %[r_c] \n\t"

"rev %[tmp] , %[tmp] \n\t"

"lsr %[r_c] , %[r_c] , #15 \n\t"

"lsr %[tmp] , %[tmp] , #15 \n\t"

"ldrb %[r_c] , [%[r_b], %[r_c]] \n\t"

"movw %[r_b] , #0xFFFF \n\t"

"sub %[tmp] , %[tmp] , %[r_b] \n\t"

"rsb %[r_c] , %[r_c] , #7 \n\t"

"lsl %[tmp] , %[tmp] , %[r_c] \n\t"

"add %[low] , %[low] , %[tmp] \n\t"

"2: \n\t"

: [bit]"=&amp;r"(bit),

[low]"+&amp;r"(c-&gt;low),

[range]"+&amp;r"(c-&gt;range),

[r_b]"=&amp;r"(reg_b),

[r_c]"=&amp;r"(reg_c),

[tmp]"=&amp;r"(tmp)

: [c]"r"(c),

[state]"r"(state),

[tables]"r"(ff_h264_cabac_tables),

[byte]"M"(offsetof(CABACContext, bytestream)),

[end]"M"(offsetof(CABACContext, bytestream_end)),

[norm_off]"I"(H264_NORM_SHIFT_OFFSET),

[lps_off]"I"(H264_LPS_RANGE_OFFSET),

[mlps_off]"I"(H264_MLPS_STATE_OFFSET + 128)

: "memory", "cc"

);</asm>

<return>return <expr><name>bit</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
