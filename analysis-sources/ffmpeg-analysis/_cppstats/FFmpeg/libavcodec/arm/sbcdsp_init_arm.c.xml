<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\arm\sbcdsp_init_arm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/arm/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/sbcdsp.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_sbc_analyze_4_armv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sbc_analyze_8_armv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sbc_analyze_4_neon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sbc_analyze_8_neon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>consts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_sbc_calc_scalefactors_neon</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>sb_sample_f</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name><name>scale_factor</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subbands</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sbc_calc_scalefactors_j_neon</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>sb_sample_f</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name><name>scale_factor</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subbands</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sbc_enc_process_input_4s_neon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nchannels</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sbc_enc_process_input_8s_neon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pcm</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>SBC_X_BUFFER_SIZE</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nchannels</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>ff_sbcdsp_joint_bits_mask</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>

}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (a * 2) + 1, (a * 2) + 0, (b * 2) + 1, (b * 2) + 0, (c * 2) + 1, (c * 2) + 0, (d * 2) + 1, (d * 2) + 0 }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (a * 2) + 0, (a * 2) + 1, (b * 2) + 0, (b * 2) + 1, (c * 2) + 0, (c * 2) + 1, (d * 2) + 0, (d * 2) + 1 }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>ff_sbc_input_perm_4</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><call><name>PERM</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>PERM</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>ff_sbc_input_perm_8</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{

<expr><call><name>PERM</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PERM</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PERM</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>PERM</name><argument_list>( <argument><literal type="number">5</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

}</block></expr>;</expr_stmt>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_sbcdsp_init_arm</name><parameter_list>(<parameter><decl><type><name>SBCDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_armv6</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4</name></name> <operator>=</operator> <name>ff_sbc_analyze_4_armv6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name> <operator>=</operator> <name>ff_sbc_analyze_8_armv6</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_neon</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_4</name></name> <operator>=</operator> <name>ff_sbc_analyze_4_neon</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_analyze_8</name></name> <operator>=</operator> <name>ff_sbc_analyze_8_neon</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_calc_scalefactors</name></name> <operator>=</operator> <name>ff_sbc_calc_scalefactors_neon</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_calc_scalefactors_j</name></name> <operator>=</operator> <name>ff_sbc_calc_scalefactors_j_neon</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>increment</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_enc_process_input_4s</name></name> <operator>=</operator> <name>ff_sbc_enc_process_input_4s_neon</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sbc_enc_process_input_8s</name></name> <operator>=</operator> <name>ff_sbc_enc_process_input_8s_neon</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
