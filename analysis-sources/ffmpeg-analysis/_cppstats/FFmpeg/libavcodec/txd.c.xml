<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\txd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texturedsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXD_DXT1</name></cpp:macro> <cpp:value>0x31545844</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TXD_DXT3</name></cpp:macro> <cpp:value>0x33545844</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>txd_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TextureDSPContext</name></type> <name>dxtc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>d3d_format</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>, <decl><type ref="prev"/><name>stride</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_texturedsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dxtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d3d_format</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>version</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>version</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Texture data version %u"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator> <name>depth</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGBA</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Color depth of %u"</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stride</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pal</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>w</name> <operator>*</operator> <name>h</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>d3d_format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>unsupported</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><name>TXD_DXT1</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name><name>dxtc</name><operator>.</operator><name>dxt1_block</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>TXD_DXT3</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>ptr</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>j</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name><name>dxtc</name><operator>.</operator><name>dxt3_block</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<goto>goto <name>unsupported</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>d3d_format</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0x15</literal></expr>:</case>

<case>case <expr><literal type="number">0x16</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>h</name> <operator>*</operator> <name>w</name> <operator>*</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<goto>goto <name>unsupported</name>;</goto>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

<label><name>unsupported</name>:</label>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"d3d format (%08x)"</literal></expr></argument>, <argument><expr><name>d3d_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_txd_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"txd"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Renderware TXD (TeXture Dictionary) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TXD</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>txd_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
