<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacdec.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FLOAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FIXED_32</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_FIXED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdct15.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lpc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kbdwin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacdectab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adts_header.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbrt_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacsbr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arm/aac.h"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_MIPS</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mips/aacdec_mips.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>reset_predict_state</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VMUL2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name> <modifier>*</modifier></type><name>VMUL2</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>*</operator><name>scale</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>&gt;&gt;</operator><literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VMUL4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name> <modifier>*</modifier></type><name>VMUL4</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>*</operator><name>scale</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>&gt;&gt;</operator><literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>&gt;&gt;</operator><literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>&gt;&gt;</operator><literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VMUL2S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name> <modifier>*</modifier></type><name>VMUL2S</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s0</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>s1</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>*</operator><name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s0</name><operator>.</operator><name>i</name></name> <operator>^=</operator> <name>sign</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><operator>.</operator><name>i</name></name> <operator>^=</operator> <name>sign</name> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <name><name>s0</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>&gt;&gt;</operator><literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name> <operator>*</operator> <name><name>s1</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VMUL4S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name> <modifier>*</modifier></type><name>VMUL4S</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>idx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nz</name> <init>= <expr><name>idx</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>s</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <operator>*</operator><name>scale</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>i</name></name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>&lt;&lt;=</operator> <name>nz</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>nz</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>i</name></name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>&gt;&gt;</operator><literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>&lt;&lt;=</operator> <name>nz</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>nz</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>i</name></name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>&gt;&gt;</operator><literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>&lt;&lt;=</operator> <name>nz</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>i</name></name> <operator>^</operator> <operator>(</operator><name>sign</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>&gt;&gt;</operator><literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>t</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>float</name></type> <name>flt16_round</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>+</operator> <literal type="number">0x00008000U</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal></expr>;</expr_stmt>

<return>return <expr><name><name>tmp</name><operator>.</operator><name>f</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>float</name></type> <name>flt16_even</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>+</operator> <literal type="number">0x00007FFFU</literal> <operator>+</operator> <operator>(</operator><name><name>tmp</name><operator>.</operator><name>i</name></name> <operator>&amp;</operator> <literal type="number">0x00010000U</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF0000U</literal></expr>;</expr_stmt>

<return>return <expr><name><name>tmp</name><operator>.</operator><name>f</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>float</name></type> <name>flt16_trunc</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>pf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>pun</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pun</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pun</name><operator>.</operator><name>i</name></name> <operator>&amp;=</operator> <literal type="number">0xFFFF0000U</literal></expr>;</expr_stmt>

<return>return <expr><name><name>pun</name><operator>.</operator><name>f</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>predict</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>output_enable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a</name> <init>= <expr><literal type="number">0.953125</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>alpha</name> <init>= <expr><literal type="number">0.90625</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>e0</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>r0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cor0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>cor1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>var0</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name></expr></init></decl>, <decl><type ref="prev"/><name>var1</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <ternary><condition><expr><name>var0</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>cor0</name> <operator>*</operator> <call><name>flt16_even</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name>var0</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>k2</name> <operator>=</operator> <ternary><condition><expr><name>var1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>cor1</name> <operator>*</operator> <call><name>flt16_even</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name>var1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>pv</name> <operator>=</operator> <call><name>flt16_round</name><argument_list>(<argument><expr><name>k1</name> <operator>*</operator> <name>r0</name> <operator>+</operator> <name>k2</name> <operator>*</operator> <name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output_enable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>coef</name> <operator>+=</operator> <name>pv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e0</name> <operator>=</operator> <operator>*</operator><name>coef</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e0</name> <operator>-</operator> <name>k1</name> <operator>*</operator> <name>r0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>alpha</name> <operator>*</operator> <name>cor1</name> <operator>+</operator> <name>r1</name> <operator>*</operator> <name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>alpha</name> <operator>*</operator> <name>var1</name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><name>r1</name> <operator>*</operator> <name>r1</name> <operator>+</operator> <name>e1</name> <operator>*</operator> <name>e1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cor0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>alpha</name> <operator>*</operator> <name>cor0</name> <operator>+</operator> <name>r0</name> <operator>*</operator> <name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>var0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>alpha</name> <operator>*</operator> <name>var0</name> <operator>+</operator> <literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><name>r0</name> <operator>*</operator> <name>r0</name> <operator>+</operator> <name>e0</name> <operator>*</operator> <name>e0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r1</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <operator>(</operator><name>r0</name> <operator>-</operator> <name>k1</name> <operator>*</operator> <name>e0</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>r0</name></name> <operator>=</operator> <call><name>flt16_trunc</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <name>e0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_dependent_coupling</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,

<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>cce</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>cce</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>group</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_LTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Dependent coupling is not supported together with LTP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cce</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>ZERO_BT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>gain</name> <init>= <expr><name><name>cce</name><operator>-&gt;</operator><name>coup</name><operator>.</operator><name>gain</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>offsets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>+=</operator> <name>gain</name> <operator>*</operator> <name><name>src</name><index>[<expr><name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dest</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_independent_coupling</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,

<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>gain</name> <init>= <expr><name><name>cce</name><operator>-&gt;</operator><name>coup</name><operator>.</operator><name>gain</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>cce</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ret</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1024</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmac_scalar</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacdec_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAS_SYNC_WORD</name></cpp:macro> <cpp:value>0x2b7</cpp:value></cpp:define> 

<struct>struct <name>LATMContext</name> <block>{

<decl_stmt><decl><type><name>AACContext</name></type> <name>aac_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>initialized</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>audio_mux_version_A</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_length_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_length</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>latm_get_value</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>get_bits_long</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>latm_decode_audio_specific_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>LATMContext</name></name> <modifier>*</modifier></type><name>latmctx</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>asclen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><operator>&amp;</operator><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG4AudioConfig</name></type> <name>m4ac</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>config_start_bit</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sync_extension</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_consumed</name></decl>, <decl><type ref="prev"/><name>esize</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>asclen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sync_extension</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>asclen</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>asclen</name></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>config_start_bit</name> <operator>+</operator> <name>asclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>config_start_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>asclen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gbc</name> <operator>=</operator> <operator>*</operator><name>gb</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bits_consumed</name> <operator>=</operator> <call><name>decode_audio_specific_config_gb</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m4ac</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>config_start_bit</name></expr></argument>,

<argument><expr><name>sync_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits_consumed</name> <operator>&lt;</operator> <name>config_start_bit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bits_consumed</name> <operator>-=</operator> <name>config_start_bit</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>asclen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>asclen</name> <operator>=</operator> <name>bits_consumed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>latmctx</name><operator>-&gt;</operator><name>initialized</name></name> <operator>||</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name> <operator>!=</operator> <name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name> <operator>||</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>!=</operator> <name><name>m4ac</name><operator>.</operator><name>chan_config</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>latmctx</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"audio config changed (sample_rate=%d, chan_config=%d)\n"</literal></expr></argument>, <argument><expr><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"initializing latmctx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>latmctx</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>esize</name> <operator>=</operator> <operator>(</operator><name>asclen</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <name>esize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>esize</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>esize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gbc</name> <operator>=</operator> <operator>*</operator><name>gb</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>esize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name><operator>+</operator><name>esize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>asclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_stream_mux_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>LATMContext</name></name> <modifier>*</modifier></type><name>latmctx</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>audio_mux_version</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>latmctx</name><operator>-&gt;</operator><name>audio_mux_version_A</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_mux_version</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>latmctx</name><operator>-&gt;</operator><name>audio_mux_version_A</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>latmctx</name><operator>-&gt;</operator><name>audio_mux_version_A</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>audio_mux_version</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>latm_get_value</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Multiple programs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Multiple layers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>audio_mux_version</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>latm_decode_audio_specific_config</name><argument_list>(<argument><expr><name>latmctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ascLen</name> <init>= <expr><call><name>latm_get_value</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>latm_decode_audio_specific_config</name><argument_list>(<argument><expr><name>latmctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ascLen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>latmctx</name><operator>-&gt;</operator><name>frame_length_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>latmctx</name><operator>-&gt;</operator><name>frame_length_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>latmctx</name><operator>-&gt;</operator><name>frame_length</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>audio_mux_version</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>latm_get_value</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>esc</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>esc</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>esc</name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_payload_length_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>LATMContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_length_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mux_slot_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mux_slot_length</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition>;</do>

<return>return <expr><name>mux_slot_length</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_length_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_length</name></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_length_type</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>frame_length_type</name></name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>frame_length_type</name></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_audio_mux_element</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>LATMContext</name></name> <modifier>*</modifier></type><name>latmctx</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>use_same_mux</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_same_mux</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>read_stream_mux_config</name><argument_list>(<argument><expr><name>latmctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"no decoder config found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>latmctx</name><operator>-&gt;</operator><name>audio_mux_version_A</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mux_slot_length_bytes</name> <init>= <expr><call><name>read_payload_length_info</name><argument_list>(<argument><expr><name>latmctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mux_slot_length_bytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mux_slot_length_bytes</name> <operator>*</operator> <literal type="number">8LL</literal></expr></argument> &gt;</argument_list></name> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"incomplete frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mux_slot_length_bytes</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">256</literal> <operator>&lt;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"frame length mismatch %d &lt;&lt; %d\n"</literal></expr></argument>,

<argument><expr><name>mux_slot_length_bytes</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>latm_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>LATMContext</name></name> <modifier>*</modifier></type><name>latmctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>muxlength</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LOAS_SYNC_WORD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>muxlength</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>muxlength</name> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>read_audio_mux_element</name><argument_list>(<argument><expr><name>latmctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>err</name></expr> </then><else>: <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>latmctx</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>push_output_configuration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>decode_audio_specific_config</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>m4ac</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name><operator>*</operator><literal type="number">8LL</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pop_output_configuration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>latmctx</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"ADTS header detected, probably as result of configuration "</literal>

<literal type="string">"misparsing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>latmctx</name><operator>-&gt;</operator><name>aac_ctx</name><operator>.</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AOT_ER_AAC_LC</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LTP</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_ELD</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>aac_decode_er_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>got_frame_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>aac_decode_frame_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>got_frame_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>muxlength</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>latm_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>LATMContext</name></name> <modifier>*</modifier></type><name>latmctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>aac_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>latmctx</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <operator>!</operator><name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aac_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aac"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AAC (Advanced Audio Coding)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AACContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>aac_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aac_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>aac_decode_frame</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_CHANNEL_CONF</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <name>aac_channel_layout</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aac_decoder_class</name></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_aac_profiles</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aac_latm_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aac_latm"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AAC LATM (Advanced Audio Coding LATM syntax)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AAC_LATM</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>LATMContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>latm_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aac_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>latm_decode_frame</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_CHANNEL_CONF</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <name>aac_channel_layout</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_aac_profiles</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
