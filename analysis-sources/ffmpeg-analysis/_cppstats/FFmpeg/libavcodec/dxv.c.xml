<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dxv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lzf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"texturedsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DXVContext</name> <block>{

<decl_stmt><decl><type><name>TextureDSPContext</name></type> <name>texdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tex_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ctex_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tex_rat</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tex_step</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ctex_step</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>tex_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>ctex_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>slice_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>op_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>op_size</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>texture_block_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>texture_block_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctexture_block_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctexture_block_h</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>tex_funct</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>tex_funct_planar</name><index>[<expr><literal type="number">2</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane0</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride0</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane1</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>DXVContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decompress_indices</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>block</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name>AV_RL24</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>extract_component</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>yo0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yo1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>yo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>yo0</name> <operator>==</operator> <name>yo1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yo</name> <operator>=</operator> <name>yo0</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yo</name> <operator>=</operator> <name>yo0</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yo</name> <operator>=</operator> <name>yo1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>yo0</name> <operator>&gt;</operator> <name>yo1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yo</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>code</name><operator>)</operator> <operator>*</operator> <name>yo0</name> <operator>+</operator>

<operator>(</operator><name>code</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>yo1</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yo</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>yo</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>code</name><operator>)</operator> <operator>*</operator> <name>yo0</name> <operator>+</operator>

<operator>(</operator><name>code</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>yo1</name><operator>)</operator> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>yo</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cocg_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane0</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride0</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane1</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>co_indices</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cg_indices</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>co0</name> <init>= <expr><operator>*</operator><operator>(</operator><name>block</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>co1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>block</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cg0</name> <init>= <expr><operator>*</operator><operator>(</operator><name>block</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cg1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>block</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decompress_indices</name><argument_list>(<argument><expr><name>co_indices</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decompress_indices</name><argument_list>(<argument><expr><name>cg_indices</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>co_code</name> <init>= <expr><name><name>co_indices</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cg_code</name> <init>= <expr><name><name>cg_indices</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>plane0</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>extract_component</name><argument_list>(<argument><expr><name>cg0</name></expr></argument>, <argument><expr><name>cg1</name></expr></argument>, <argument><expr><name>cg_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>plane1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>extract_component</name><argument_list>(<argument><expr><name>co0</name></expr></argument>, <argument><expr><name>co1</name></expr></argument>, <argument><expr><name>co_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>plane0</name> <operator>+=</operator> <name>stride0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>plane1</name> <operator>+=</operator> <name>stride1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">16</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yao_subblock</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>yo_indices</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>yo0</name> <init>= <expr><operator>*</operator><operator>(</operator><name>block</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>yo1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>block</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decompress_indices</name><argument_list>(<argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>yo_code</name> <init>= <expr><name><name>yo_indices</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>extract_component</name><argument_list>(<argument><expr><name>yo0</name></expr></argument>, <argument><expr><name>yo1</name></expr></argument>, <argument><expr><name>yo_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yo_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>unused0</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>unused1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>yo_indices</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">32</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>yao_block</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane0</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride0</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>plane3</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>yo_indices</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>a_indices</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>plane0</name></expr></argument>, <argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>stride0</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>plane3</name></expr></argument>, <argument><expr><name>a_indices</name></expr></argument>, <argument><expr><name>stride1</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>plane0</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>stride0</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>plane3</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>a_indices</name></expr></argument>, <argument><expr><name>stride1</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>plane0</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>stride0</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>plane3</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>a_indices</name></expr></argument>, <argument><expr><name>stride1</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>plane0</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>yo_indices</name></expr></argument>, <argument><expr><name>stride0</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yao_subblock</name><argument_list>(<argument><expr><name>plane3</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>a_indices</name></expr></argument>, <argument><expr><name>stride1</name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">64</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decompress_texture_thread</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_nb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w_block</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h_block</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_slice</name></decl>, <decl><type ref="prev"/><name>end_slice</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_slice</name> <operator>=</operator> <name>h_block</name> <operator>*</operator> <name>slice</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_slice</name> <operator>=</operator> <name>h_block</name> <operator>*</operator> <operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_slice</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_slice</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>y</name> <operator>*</operator> <name>w_block</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w_block</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct</name></name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_w</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>d</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_slice</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_slice</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name> <operator>!=</operator> <literal type="number">64</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>y</name> <operator>*</operator> <name>w_block</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w_block</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct_planar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>p0</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_w</name></name><operator>,</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<ternary><condition><expr><name>p3</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>p3</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_w</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>,</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>,</operator>

<name>d</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>w_block</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h_block</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_slice</name> <operator>=</operator> <name>h_block</name> <operator>*</operator> <name>slice</name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_slice</name> <operator>=</operator> <name>h_block</name> <operator>*</operator> <operator>(</operator><name>slice</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>start_slice</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_slice</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><name>y</name> <operator>*</operator> <name>w_block</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w_block</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct_planar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>p0</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_w</name></name><operator>,</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name>p1</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_w</name></name><operator>,</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>

<name>c</name> <operator>+</operator> <operator>(</operator><name>off</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ctex_step</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKPOINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (state == 0) { if (bytestream2_get_bytes_left(gbc) &lt; 4) return AVERROR_INVALIDDATA; value = bytestream2_get_le32(gbc); state = 16; } op = value &amp; 0x3; value &gt;&gt;= 2; state--; switch (op) { case 1: idx = x; break; case 2: idx = (bytestream2_get_byte(gbc) + 2) * x; if (idx &gt; pos) { av_log(avctx, AV_LOG_ERROR, "idx %d &gt; %d\n", idx, pos); return AVERROR_INVALIDDATA; } break; case 3: idx = (bytestream2_get_le16(gbc) + 0x102) * x; if (idx &gt; pos) { av_log(avctx, AV_LOG_ERROR, "idx %d &gt; %d\n", idx, pos); return AVERROR_INVALIDDATA; } break; } } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_dxt1</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECKPOINT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CHECKPOINT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECKPOINT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>OpcodeTable</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>val2</name></decl>;</decl_stmt>

}</block></struct></type> <name>OpcodeTable</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_ltable</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nb_elements</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>half</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>, <decl><type ref="prev"/><name>bits</name> <init>= <expr><literal type="number">1023</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>, <decl><type ref="prev"/><name>input</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rshift</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>lshift</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>left</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>bits</name> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>bits</name> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <name>rshift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lshift</name> <operator>-=</operator> <name>rshift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table</name><index>[<expr><name>counter</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lshift</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>+=</operator> <name>input</name> <operator>&lt;&lt;</operator> <name>lshift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lshift</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>half</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>half</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rshift</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>table</name><index>[<expr><name>counter</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>counter</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>nb_elements</name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">256</literal> <operator>-</operator> <name>counter</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lshift</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_optable</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>table0</name></decl></parameter>, <parameter><decl><type><name>OpcodeTable</name> <modifier>*</modifier></type><name>table1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_elements</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>table2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val0</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>table2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>table0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_elements</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>table2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val0</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <name><name>table0</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>table2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>table2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name><name>table2</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name><name>table1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>val1</name> <operator>=</operator> <name>k</name></expr>;</init> <condition><expr><name><name>k</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">256</literal> <operator>&amp;&amp;</operator> <name>j</name></expr></argument> &gt;</argument_list></name> <name><name>table2</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">383</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>nb_elements</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>table0</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>nb_elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val0</name> <operator>=</operator> <name><name>table1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <name><name>table2</name><index>[<expr><name>val0</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table2</name><index>[<expr><name>val0</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">31</literal> <operator>-</operator> <call><name>ff_clz</name><argument_list>(<argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>table1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val2</name> <operator>=</operator> <literal type="number">10</literal> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <operator>(</operator><name>val1</name> <operator>&lt;&lt;</operator> <name><name>table1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val2</name><operator>)</operator> <operator>-</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_opcodes</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_elements</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpcodeTable</name></type> <name><name>optable</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>lshift</name></decl>, <decl><type ref="prev"/><name>rshift</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size_in_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>endoffset</name></decl>, <decl><type ref="prev"/><name>newoffset</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fill_optable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>optable</name></expr></argument>, <argument><expr><name>nb_elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size_in_bits</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endoffset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_in_bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>endoffset</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>endoffset</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>endoffset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>endoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rshift</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>size_in_bits</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lshift</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>rshift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>next</name> <operator>&gt;&gt;</operator> <name>rshift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>op_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>optable</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>val1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>optable</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>val2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>val</name> <operator>+</operator> <name>lshift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>next</name> <operator>&lt;&lt;</operator> <name>lshift</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>val</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>newoffset</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lshift</name> <operator>=</operator> <name>sum</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>optable</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>newoffset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>endoffset</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>(</operator><name>size_in_bits</name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_opcodes</name><parameter_list>(<parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>op_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dstp</name></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>elements</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fill_ltable</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_opcodes</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>dstp</name></expr></argument>, <argument><expr><name>op_size</name></expr></argument>, <argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_cgo</name><parameter_list>(<parameter><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tex_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tex_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>op_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>oindex</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>op_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dstp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>statep</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>tab1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>*</operator><name>dstp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tptr0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tptr1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tptr3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oi</name> <init>= <expr><operator>*</operator><name>oindex</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><operator>*</operator><name>statep</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opcode</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>oi</name> <operator>&gt;=</operator> <name>op_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <name><name>op_data</name><index>[<expr><name>oi</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opcode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>opcode</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>opcode</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vv</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>vv</name></expr></argument> &gt;</argument_list></name> <name>dst</name> <operator>-</operator> <name>tex_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr0</name> <operator>=</operator> <name>dst</name> <operator>-</operator> <name>vv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>tptr0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>tptr0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>tptr0</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab0</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab0</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>tptr3</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab0</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>tptr3</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab0</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name>tptr0</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr0</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr1</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab0</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>dst</name> <operator>-</operator> <name>tex_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr0</name> <operator>=</operator> <name>dst</name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr0</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>tptr0</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab0</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name>tptr1</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><name>tptr1</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr3</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name>tptr1</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr3</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">11</literal></expr>:</case>

<expr_stmt><expr><name>tptr0</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr0</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr3</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr1</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><name>tptr1</name> <operator>=</operator> <name><name>tab0</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>dst</name> <operator>-</operator> <name>tex_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr0</name> <operator>=</operator> <name>dst</name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr0</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>tptr0</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">13</literal></expr>:</case>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<expr_stmt><expr><name>tptr3</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">15</literal></expr>:</case>

<expr_stmt><expr><name>tptr3</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name>tptr3</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr3</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tptr1</name> <operator>=</operator> <name><name>tab1</name><index>[<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tptr1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>tptr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>tptr1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>dst</name> <operator>-</operator> <name>tex_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>AV_RL16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><operator>-</operator><name>v</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><operator>-</operator><name>v</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFu</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>-</operator> <name>tex_data</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;</operator> <name>tex_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>oindex</name> <operator>=</operator> <name>oi</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dstp</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>statep</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_cocg</name><parameter_list>(<parameter><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tex_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tex_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>op_data0</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>op_data1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_op_size0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_op_size1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>tab2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>tab0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>tab3</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>tab1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op_offset</name> <init>= <expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>op_size0</name> <init>= <expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>op_size1</name> <init>= <expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_start</name> <init>= <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip0</name></decl>, <decl><type ref="prev"/><name>skip1</name></decl>, <decl><type ref="prev"/><name>oi0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>oi1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>state0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>state1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op_offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">12</literal> <operator>||</operator> <name>op_offset</name> <operator>-</operator> <literal type="number">12</literal></expr></argument> &gt;</argument_list></name> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>tex_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>op_offset</name> <operator>-</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op_size0</name> <operator>&gt;</operator> <name>max_op_size0</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>skip0</name> <operator>=</operator> <call><name>dxv_decompress_opcodes</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>op_data0</name></expr></argument>, <argument><expr><name>op_size0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip0</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>skip0</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op_size1</name> <operator>&gt;</operator> <name>max_op_size1</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>skip1</name> <operator>=</operator> <call><name>dxv_decompress_opcodes</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>op_data1</name></expr></argument>, <argument><expr><name>op_size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>skip1</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>data_start</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab0</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab2</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab3</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dst</name> <operator>+</operator> <literal type="number">10</literal> <operator>&lt;</operator> <name>tex_data</name> <operator>+</operator> <name>tex_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxv_decompress_cgo</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>tex_data</name></expr></argument>, <argument><expr><name>tex_size</name></expr></argument>, <argument><expr><name>op_data0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi0</name></expr></argument>, <argument><expr><name>op_size0</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state0</name></expr></argument>, <argument><expr><name>tab0</name></expr></argument>, <argument><expr><name>tab1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxv_decompress_cgo</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>tex_data</name></expr></argument>, <argument><expr><name>tex_size</name></expr></argument>, <argument><expr><name>op_data1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi1</name></expr></argument>, <argument><expr><name>op_size1</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>, <argument><expr><name>tab2</name></expr></argument>, <argument><expr><name>tab3</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>data_start</name> <operator>-</operator> <literal type="number">12</literal> <operator>+</operator> <name>op_offset</name> <operator>+</operator> <name>skip0</name> <operator>+</operator> <name>skip1</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_yo</name><parameter_list>(<parameter><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tex_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tex_size</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>op_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_op_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>op_offset</name> <init>= <expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>op_size</name> <init>= <expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_start</name> <init>= <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>table0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>table1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip</name></decl>, <decl><type ref="prev"/><name>oi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>vv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>op_offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>op_offset</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> &gt;</argument_list></name> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>tex_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>op_offset</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op_size</name> <operator>&gt;</operator> <name>max_op_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>dxv_decompress_opcodes</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>op_data</name></expr></argument>, <argument><expr><name>op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>skip</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>data_start</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vv</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table0</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table1</name><index>[<expr><literal type="number">0x9E3779B1</literal> <operator>*</operator> <operator>(</operator><call><name>AV_RL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dst</name> <operator>&lt;</operator> <name>tex_data</name> <operator>+</operator> <name>tex_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxv_decompress_cgo</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>tex_data</name></expr></argument>, <argument><expr><name>tex_size</name></expr></argument>, <argument><expr><name>op_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi</name></expr></argument>, <argument><expr><name>op_size</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>table0</name></expr></argument>, <argument><expr><name>table1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>data_start</name> <operator>+</operator> <name>op_offset</name> <operator>+</operator> <name>skip</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_ycg6</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxv_decompress_yo</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dxv_decompress_cocg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_size</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_yg10</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dxv_decompress_cocg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dxv_decompress_cocg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_size</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_dxt5</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>op</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>probe</name></decl>, <decl><type ref="prev"/><name>check</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>run</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>value</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name><operator>--</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>check</name> <operator>==</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>probe</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>check</name> <operator>+=</operator> <name>probe</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>probe</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>check</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>check</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<continue>continue;</continue>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>probe</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>+=</operator> <name>probe</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>probe</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name>pos</name> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CHECKPOINT</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name>pos</name> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CHECKPOINT</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>idx</name> <operator>&gt;</operator> <name>pos</name> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECKPOINT</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>pos</name> <operator>-</operator> <name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pos</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_lzf</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_lzf_uncompress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decompress_raw</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>tframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decompress_tex</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msgcomp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>msgtext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version_major</name></decl>, <decl><type ref="prev"/><name>version_minor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>old_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_block_w</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGBA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_RGB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct_planar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct_planar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>

<case>case <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>decompress_tex</name> <operator>=</operator> <name>dxv_decompress_dxt1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texdsp</name><operator>.</operator><name>dxt1_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgcomp</name> <operator>=</operator> <literal type="string">"DXTR1"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgtext</name> <operator>=</operator> <literal type="string">"DXT1"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>decompress_tex</name> <operator>=</operator> <name>dxv_decompress_dxt5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texdsp</name><operator>.</operator><name>dxt5_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgcomp</name> <operator>=</operator> <literal type="string">"DXTR5"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgtext</name> <operator>=</operator> <literal type="string">"DXT5"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>decompress_tex</name> <operator>=</operator> <name>dxv_decompress_ycg6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct_planar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>yo_block</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct_planar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cocg_block</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_step</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgcomp</name> <operator>=</operator> <literal type="string">"YOCOCG6"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgtext</name> <operator>=</operator> <literal type="string">"YCG6"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_block_w</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_h</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_w</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_YCOCG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name>decompress_tex</name> <operator>=</operator> <name>dxv_decompress_yg10</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct_planar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>yao_block</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct_planar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cocg_block</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_step</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgcomp</name> <operator>=</operator> <literal type="string">"YAOCOCG10"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>msgtext</name> <operator>=</operator> <literal type="string">"YG10"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_block_w</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_h</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_w</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_YCOCG</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>tag</name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old_type</name> <operator>=</operator> <name>tag</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>version_major</name> <operator>=</operator> <operator>(</operator><name>old_type</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_type</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msgcomp</name> <operator>=</operator> <literal type="string">"RAW"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>decompress_tex</name> <operator>=</operator> <name>dxv_decompress_raw</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>msgcomp</name> <operator>=</operator> <literal type="string">"LZF"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>decompress_tex</name> <operator>=</operator> <name>dxv_decompress_lzf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_type</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msgtext</name> <operator>=</operator> <literal type="string">"DXT5"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texdsp</name><operator>.</operator><name>dxt5_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_type</name> <operator>&amp;</operator> <literal type="number">0x20</literal> <operator>||</operator> <name>version_major</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msgtext</name> <operator>=</operator> <literal type="string">"DXT1"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_funct</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texdsp</name><operator>.</operator><name>dxt1_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported header (0x%08"</literal><name>PRIX32</name><literal type="string">")\n."</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>thread_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctexture_block_h</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>version_major</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>version_minor</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>msgcomp</name> <operator>=</operator> <literal type="string">"RAW"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>decompress_tex</name> <operator>=</operator> <name>dxv_decompress_raw</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%s compression with %s texture (version %d.%d)\n"</literal></expr></argument>,

<argument><expr><name>msgcomp</name></expr></argument>, <argument><expr><name>msgtext</name></expr></argument>, <argument><expr><name>version_major</name></expr></argument>, <argument><expr><name>version_minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Incomplete or invalid file (header %d, left %u).\n"</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_rat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctex_data</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ctex_size</name></name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>op_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decompress_tex</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w_block</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_w</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h_block</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>texture_block_h</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w_block</name> <operator>*</operator> <name>h_block</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_step</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tex_size</name></name> <operator>*</operator> <literal type="number">8LL</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>tframe</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tframe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>decompress_texture_thread</name></expr></argument>,

<argument><expr><name><name>tframe</name><operator>.</operator><name>f</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tframe</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tframe</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid image size %dx%d.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_texturedsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>texdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dxv_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DXVContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tex_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ctex_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>op_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dxv_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dxv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Resolume DXV"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DXV</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>dxv_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>dxv_decode</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>dxv_close</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DXVContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator>

<name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator>

<name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator>

<name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
