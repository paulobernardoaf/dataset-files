<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ilbcdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ilbcdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPC_N_20MS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPC_N_30MS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPC_N_MAX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSF_NSPLIT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NASUB_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LPC_FILTERORDER</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSUB_MAX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBL</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST_MEM_L_TBL</name></cpp:macro> <cpp:value>85</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_LF_TBL</name></cpp:macro> <cpp:value>147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_SHORT_LEN_20MS</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_SHORT_LEN_30MS</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKL_MAX</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_MEML</name></cpp:macro> <cpp:value>147</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_NSTAGES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_HALFFILTERLEN</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CB_FILTERLEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENH_NBLOCKS_TOT</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENH_BLOCKL</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENH_BUFL</name></cpp:macro> <cpp:value>(ENH_NBLOCKS_TOT)*ENH_BLOCKL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENH_BUFL_FILTEROVERHEAD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCKL_MAX</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSUB_20MS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSUB_30MS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSUB_MAX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NASUB_20MS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NASUB_30MS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NASUB_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_LEN</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_SHORT_LEN_30MS</name></cpp:macro> <cpp:value>58</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATE_SHORT_LEN_20MS</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPL_MUL_16_16</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int32_t) (((int16_t)(a)) * ((int16_t)(b))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPL_MUL_16_16_RSFT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SPL_MUL_16_16(a, b) &gt;&gt; (c))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ILBCFrame</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsf</name><index>[<expr><name>LSF_NSPLIT</name><operator>*</operator><name>LPC_N_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cb_index</name><index>[<expr><name>CB_NSTAGES</name><operator>*</operator><operator>(</operator><name>NASUB_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>gain_index</name><index>[<expr><name>CB_NSTAGES</name><operator>*</operator><operator>(</operator><name>NASUB_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>ifm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>state_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>idx</name><index>[<expr><name>STATE_SHORT_LEN_30MS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>firstbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>start</name></decl>;</decl_stmt>

}</block></struct></type> <name>ILBCFrame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ILBCContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enhancer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ILBCFrame</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_enh_pl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consPLICount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_lag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state_short_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lpc_n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>nasub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>nsub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>no_of_words</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>no_of_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsfdeq</name><index>[<expr><name>LPC_FILTERORDER</name><operator>*</operator><name>LPC_N_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsfold</name><index>[<expr><name>LPC_FILTERORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>syntMem</name><index>[<expr><name>LPC_FILTERORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsfdeqold</name><index>[<expr><name>LPC_FILTERORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>weightdenum</name><index>[<expr><operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>NSUB_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>syntdenum</name><index>[<expr><name>NSUB_MAX</name> <operator>*</operator> <operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>old_syntdenum</name><index>[<expr><name>NSUB_MAX</name> <operator>*</operator> <operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>enh_buf</name><index>[<expr><name>ENH_BUFL</name><operator>+</operator><name>ENH_BUFL_FILTEROVERHEAD</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>enh_period</name><index>[<expr><name>ENH_NBLOCKS_TOT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>prevResidual</name><index>[<expr><name>NSUB_MAX</name><operator>*</operator><name>SUBL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>decresidual</name><index>[<expr><name>BLOCKL_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>plc_residual</name><index>[<expr><name>BLOCKL_MAX</name> <operator>+</operator> <name>LPC_FILTERORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>seed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>prevPLI</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>prevScale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>prevLag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>per_square</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>prev_lpc</name><index>[<expr><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>plc_lpc</name><index>[<expr><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>hpimemx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>hpimemy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ILBCContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpack_frame</name><parameter_list>(<parameter><decl><type><name>ILBCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ILBCFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>lsf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>lsf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>lsf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state_first</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>ifm</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>lsf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>lsf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>lsf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>state_first</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>ifm</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">57</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">58</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">56</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">57</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>cb_index</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>gain_index</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>index_conv</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">44</literal> <operator>&amp;&amp;</operator> <name><name>index</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">108</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">108</literal> <operator>&amp;&amp;</operator> <name><name>index</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf_dequantization</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsfdeq</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>lpc_n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cb_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LSF_NSPLIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>lsf_dim_codebook</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>lsfdeq</name><index>[<expr><name>pos</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>lsf_codebook</name><index>[<expr><name>cb_pos</name> <operator>+</operator> <name><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lsf_dim_codebook</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>lsf_dim_codebook</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_pos</name> <operator>+=</operator> <name><name>lsf_size_codebook</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lsf_dim_codebook</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>lpc_n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LSF_NSPLIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>lsf_dim_codebook</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>lsfdeq</name><index>[<expr><name>LPC_FILTERORDER</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>lsf_codebook</name><index>[<expr><name>cb_pos</name> <operator>+</operator>

<name><name>index</name><index>[<expr><name>LSF_NSPLIT</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lsf_dim_codebook</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>lsf_dim_codebook</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_pos</name> <operator>+=</operator> <name><name>lsf_size_codebook</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>lsf_dim_codebook</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf_check_stability</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_vectors</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>nb_vectors</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>dim</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>m</name> <operator>*</operator> <name>dim</name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lsf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">319</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lsf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lsf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">160</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lsf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">160</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <literal type="number">160</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">160</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">82</literal></expr></argument>, <argument><expr><literal type="number">25723</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf_interpolate</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>in1</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>coef</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>invcoef</name> <init>= <expr><literal type="number">16384</literal> <operator>-</operator> <name>coef</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>coef</name> <operator>*</operator> <name><name>in1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>invcoef</name> <operator>*</operator> <name><name>in2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">8192</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf2lsp</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsf</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>freq</name> <operator>=</operator> <operator>(</operator><name><name>lsf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">20861</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>freq</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>freq</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>cos_derivative_tbl</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cos_tbl</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_lsp_poly</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16777216</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1024</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>l</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr><operator>,</operator> <expr><name>l</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>f</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>high</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>high</name> <operator>*</operator> <name><name>lsp</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>low</name> <operator>*</operator> <name><name>lsp</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-=</operator> <name><name>lsp</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsf2poly</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lsf2lsp</name><argument_list>(<argument><expr><name>lsf</name></expr></argument>, <argument><expr><name>lsp</name></expr></argument>, <argument><expr><name>LPC_FILTERORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lsp_poly</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_lsp_poly</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lsp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsp_interpolate2polydec</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsf1</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsf2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lsftmp</name><index>[<expr><name>LPC_FILTERORDER</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lsf_interpolate</name><argument_list>(<argument><expr><name>lsftmp</name></expr></argument>, <argument><expr><name>lsf1</name></expr></argument>, <argument><expr><name>lsf2</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lsf2poly</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>lsftmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bw_expand</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsp_interpolate</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>syntdenum</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>weightdenum</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lsfdeq</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>ILBCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lp</name><index>[<expr><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lsfdeq2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>lp_length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lsfdeq2</name> <operator>=</operator> <name>lsfdeq</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lp_length</name> <operator>=</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>lsp_interpolate2polydec</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>.</operator><name>lsfdeqold</name></name></expr></argument>, <argument><expr><name>lsfdeq</name></expr></argument>, <argument><expr><name><name>lsf_weight_30ms</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>syntdenum</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>lp_length</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bw_expand</name><argument_list>(<argument><expr><name>weightdenum</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>kLpcChirpSyntDenum</name></expr></argument>, <argument><expr><name>lp_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>lp_length</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>lsp_interpolate2polydec</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>lsfdeq</name></expr></argument>, <argument><expr><name>lsfdeq2</name></expr></argument>,

<argument><expr><name><name>lsf_weight_30ms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>syntdenum</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>lp_length</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bw_expand</name><argument_list>(<argument><expr><name>weightdenum</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>kLpcChirpSyntDenum</name></expr></argument>, <argument><expr><name>lp_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>lp_length</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>lsp_interpolate2polydec</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsfdeqold</name></name></expr></argument>, <argument><expr><name>lsfdeq</name></expr></argument>,

<argument><expr><name><name>lsf_weight_20ms</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>syntdenum</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>lp_length</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bw_expand</name><argument_list>(<argument><expr><name>weightdenum</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>kLpcChirpSyntDenum</name></expr></argument>, <argument><expr><name>lp_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>lp_length</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsfdeqold</name></name></expr></argument>, <argument><expr><name>lsfdeq2</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsfdeqold</name></name></expr></argument>, <argument><expr><name>lsfdeq</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_mafq12</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>in_ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out_ptr</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>B_length</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>o</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>b_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>x_ptr</name> <init>= <expr><operator>&amp;</operator><name><name>in_ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>B_length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>o</name> <operator>+=</operator> <name><name>b_ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>*</operator><name>x_ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">134217728</literal></expr></argument>, <argument><expr><literal type="number">134215679</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>o</name> <operator>+</operator> <literal type="number">2048</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_arfq12</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>data_in</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>data_out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>coefficients</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>coefficients_length</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>data_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>data_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>coefficients_length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>coefficients</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>data_out</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>coefficients</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>data_in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">134217728</literal></expr></argument>, <argument><expr><literal type="number">134215679</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data_out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>output</name> <operator>+</operator> <literal type="number">2048</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>state_construct</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>ifm</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>synt_denum</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>Out_fix</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>maxVal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>numerator</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>LPC_FILTERORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>sampleValVec</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>STATE_SHORT_LEN_30MS</name> <operator>+</operator> <name>LPC_FILTERORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>sampleMaVec</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>STATE_SHORT_LEN_30MS</name> <operator>+</operator> <name>LPC_FILTERORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sampleVal</name> <init>= <expr><operator>&amp;</operator><name><name>sampleValVec</name><index>[<expr><name>LPC_FILTERORDER</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sampleMa</name> <init>= <expr><operator>&amp;</operator><name><name>sampleMaVec</name><index>[<expr><name>LPC_FILTERORDER</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sampleAr</name> <init>= <expr><operator>&amp;</operator><name><name>sampleValVec</name><index>[<expr><name>LPC_FILTERORDER</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>numerator</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>synt_denum</name><index>[<expr><name>LPC_FILTERORDER</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>maxVal</name> <operator>=</operator> <name><name>frg_quant_mod</name><index>[<expr><name>ifm</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>sampleVal</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>&amp;</operator><name><name>idx</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ifm</name> <operator>&lt;</operator> <literal type="number">37</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>tmp1</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name>maxVal</name></expr></argument>, <argument><expr><name><name>ilbc_state</name><index>[<expr><operator>(</operator><operator>*</operator><name>tmp2</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2097152</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ifm</name> <operator>&lt;</operator> <literal type="number">59</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>tmp1</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name>maxVal</name></expr></argument>, <argument><expr><name><name>ilbc_state</name><index>[<expr><operator>(</operator><operator>*</operator><name>tmp2</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">262144</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>tmp1</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name>maxVal</name></expr></argument>, <argument><expr><name><name>ilbc_state</name><index>[<expr><operator>(</operator><operator>*</operator><name>tmp2</name><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">65536</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sampleVal</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sampleValVec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LPC_FILTERORDER</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mafq12</name><argument_list>(<argument><expr><name>sampleVal</name></expr></argument>, <argument><expr><name>sampleMa</name></expr></argument>, <argument><expr><name>numerator</name></expr></argument>, <argument><expr><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>LPC_FILTERORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sampleMa</name><index>[<expr><name>len</name> <operator>+</operator> <name>LPC_FILTERORDER</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>-</operator> <name>LPC_FILTERORDER</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_arfq12</name><argument_list>(<argument><expr><name>sampleMa</name></expr></argument>, <argument><expr><name>sampleAr</name></expr></argument>, <argument><expr><name>synt_denum</name></expr></argument>, <argument><expr><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <operator>&amp;</operator><name><name>sampleAr</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>&amp;</operator><name><name>sampleAr</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name> <operator>=</operator> <name>Out_fix</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>tmp3</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>tmp1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>tmp2</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp3</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>gain_dequantization</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>scale</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1638</literal></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>max_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>scale</name> <operator>*</operator> <name><name>ilbc_gain</name><index>[<expr><name>stage</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">8192</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_rmultiplication</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>win</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>win</name><index>[<expr><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vector_multiplication</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>win</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>win</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_vector_and_shift</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>in1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>in2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_augmented_vector</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>cbVec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cbVecTmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>interpolation_length</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>ilow</name> <init>= <expr><name>index</name> <operator>-</operator> <name>interpolation_length</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cbVec</name></expr></argument>, <argument><expr><name>buffer</name> <operator>-</operator> <name>index</name></expr></argument>, <argument><expr><name>index</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vector_multiplication</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cbVec</name><index>[<expr><name>ilow</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name> <operator>-</operator> <name>index</name> <operator>-</operator> <name>interpolation_length</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>interpolation_length</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vector_rmultiplication</name><argument_list>(<argument><expr><name>cbVecTmp</name></expr></argument>, <argument><expr><name>buffer</name> <operator>-</operator> <name>interpolation_length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>alpha</name><index>[<expr><name>interpolation_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>interpolation_length</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_vector_and_shift</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cbVec</name><index>[<expr><name>ilow</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cbVec</name><index>[<expr><name>ilow</name></expr>]</index></name></expr></argument>, <argument><expr><name>cbVecTmp</name></expr></argument>, <argument><expr><name>interpolation_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cbVec</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>buffer</name> <operator>-</operator> <name>index</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>SUBL</name> <operator>-</operator> <name>index</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cbVec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_codebook</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>cbvec</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>mem</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name></type> <name>index</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name></type> <name>lMem</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name></type> <name>cbveclen</name></decl></parameter> 

)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>base_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>lag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tempbuff2</name><index>[<expr><name>SUBL</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>base_size</name> <operator>=</operator> <name>lMem</name> <operator>-</operator> <name>cbveclen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cbveclen</name> <operator>==</operator> <name>SUBL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base_size</name> <operator>+=</operator> <name>cbveclen</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>lMem</name> <operator>-</operator> <name>cbveclen</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>index</name> <operator>+</operator> <name>cbveclen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cbvec</name></expr></argument>, <argument><expr><name>mem</name> <operator>+</operator> <name>lMem</name> <operator>-</operator> <name>k</name></expr></argument>, <argument><expr><name>cbveclen</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>base_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>index</name> <operator>-</operator> <operator>(</operator><name>lMem</name> <operator>-</operator> <name>cbveclen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <name>cbveclen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>create_augmented_vector</name><argument_list>(<argument><expr><name>lag</name></expr></argument>, <argument><expr><name>mem</name> <operator>+</operator> <name>lMem</name></expr></argument>, <argument><expr><name>cbvec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>memIndTest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>-</operator> <name>base_size</name> <operator>&lt;</operator> <name>lMem</name> <operator>-</operator> <name>cbveclen</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>memIndTest</name> <operator>=</operator> <name>lMem</name> <operator>-</operator> <operator>(</operator><name>index</name> <operator>-</operator> <name>base_size</name> <operator>+</operator> <name>cbveclen</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name> <operator>-</operator> <name>CB_HALFFILTERLEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CB_HALFFILTERLEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name> <operator>+</operator> <name>lMem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CB_HALFFILTERLEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mafq12</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem</name><index>[<expr><name>memIndTest</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cbvec</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name>kCbFiltersRev</name></expr></argument>, <argument><expr><name>CB_FILTERLEN</name></expr></argument>, <argument><expr><name>cbveclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>memIndTest</name> <operator>=</operator> <name>lMem</name> <operator>-</operator> <name>cbveclen</name> <operator>-</operator> <name>CB_FILTERLEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name> <operator>+</operator> <name>lMem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CB_HALFFILTERLEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_mafq12</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem</name><index>[<expr><name>memIndTest</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tempbuff2</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name>kCbFiltersRev</name></expr></argument>, <argument><expr><name>CB_FILTERLEN</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>cbveclen</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <operator>(</operator><name>cbveclen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">20</literal> <operator>+</operator> <name>index</name> <operator>-</operator> <name>base_size</name> <operator>-</operator> <name>lMem</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>create_augmented_vector</name><argument_list>(<argument><expr><name>lag</name></expr></argument>, <argument><expr><name>tempbuff2</name> <operator>+</operator> <name>SUBL</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>cbvec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>construct_vector</name> <parameter_list>(

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>decvector</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>gain_index</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name></type> <name>lMem</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name></type> <name>veclen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>gain</name><index>[<expr><name>CB_NSTAGES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cbvec0</name><index>[<expr><name>SUBL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cbvec1</name><index>[<expr><name>SUBL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cbvec2</name><index>[<expr><name>SUBL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>a32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>gainPtr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gain_dequantization</name><argument_list>(<argument><expr><name><name>gain_index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>gain_dequantization</name><argument_list>(<argument><expr><name><name>gain_index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gain_dequantization</name><argument_list>(<argument><expr><name><name>gain_index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_codebook</name><argument_list>(<argument><expr><name>cbvec0</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lMem</name></expr></argument>, <argument><expr><name>veclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_codebook</name><argument_list>(<argument><expr><name>cbvec1</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lMem</name></expr></argument>, <argument><expr><name>veclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_codebook</name><argument_list>(<argument><expr><name>cbvec2</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lMem</name></expr></argument>, <argument><expr><name>veclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gainPtr</name> <operator>=</operator> <operator>&amp;</operator><name><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>veclen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a32</name> <operator>=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><operator>*</operator><name>gainPtr</name><operator>++</operator></expr></argument>, <argument><expr><name><name>cbvec0</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a32</name> <operator>+=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><operator>*</operator><name>gainPtr</name><operator>++</operator></expr></argument>, <argument><expr><name><name>cbvec1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a32</name> <operator>+=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><operator>*</operator><name>gainPtr</name></expr></argument>, <argument><expr><name><name>cbvec2</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gainPtr</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decvector</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>a32</name> <operator>+</operator> <literal type="number">8192</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reverse_memcpy</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>destPtr</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>sourcePtr</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>destPtr</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>sourcePtr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_residual</name><parameter_list>(<parameter><decl><type><name>ILBCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>ILBCFrame</name> <modifier>*</modifier></type><name>encbits</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>decresidual</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>syntdenum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>meml_gotten</name></decl>, <decl><type ref="prev"/><name>Nfor</name></decl>, <decl><type ref="prev"/><name>Nback</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>subcount</name></decl>, <decl><type ref="prev"/><name>subframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>reverseDecresidual</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>enh_buf</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>memVec</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prevResidual</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><operator>&amp;</operator><name><name>memVec</name><index>[<expr><name>CB_HALFFILTERLEN</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>STATE_LEN</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encbits</name><operator>-&gt;</operator><name>state_first</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <operator>(</operator><name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SUBL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <operator>(</operator><name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SUBL</name> <operator>+</operator> <name>diff</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>state_construct</name><argument_list>(<argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>ifm</name></name></expr></argument>, <argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>syntdenum</name><index>[<expr><operator>(</operator><name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>decresidual</name><index>[<expr><name>start_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>encbits</name><operator>-&gt;</operator><name>state_first</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>CB_MEML</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem</name> <operator>+</operator> <name>CB_MEML</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name></expr></argument>, <argument><expr><name>decresidual</name> <operator>+</operator> <name>start_pos</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>construct_vector</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decresidual</name><index>[<expr><name>start_pos</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>cb_index</name></name></expr></argument>, <argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>gain_index</name></name></expr></argument>, <argument><expr><name>mem</name> <operator>+</operator> <name>CB_MEML</name> <operator>-</operator> <name>ST_MEM_L_TBL</name></expr></argument>, <argument><expr><name>ST_MEM_L_TBL</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>meml_gotten</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reverse_memcpy</name><argument_list>(<argument><expr><name>mem</name> <operator>+</operator> <name>CB_MEML</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>decresidual</name> <operator>+</operator> <name>start_pos</name></expr></argument>, <argument><expr><name>meml_gotten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>CB_MEML</name> <operator>-</operator> <name>meml_gotten</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>construct_vector</name><argument_list>(<argument><expr><name>reverseDecresidual</name></expr></argument>, <argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>cb_index</name></name></expr></argument>, <argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>gain_index</name></name></expr></argument>, <argument><expr><name>mem</name> <operator>+</operator> <name>CB_MEML</name> <operator>-</operator> <name>ST_MEM_L_TBL</name></expr></argument>, <argument><expr><name>ST_MEM_L_TBL</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reverse_memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decresidual</name><index>[<expr><name>start_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>reverseDecresidual</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>subcount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Nfor</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsub</name></name> <operator>-</operator> <name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Nfor</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>CB_MEML</name> <operator>-</operator> <name>STATE_LEN</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem</name> <operator>+</operator> <name>CB_MEML</name> <operator>-</operator> <name>STATE_LEN</name></expr></argument>, <argument><expr><name>decresidual</name> <operator>+</operator> <operator>(</operator><name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SUBL</name></expr></argument>, <argument><expr><name>STATE_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>subframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subframe</name> <operator>&lt;</operator> <name>Nfor</name></expr>;</condition> <incr><expr><name>subframe</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>construct_vector</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decresidual</name><index>[<expr><operator>(</operator><name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>subframe</name><operator>)</operator> <operator>*</operator> <name>SUBL</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>cb_index</name></name> <operator>+</operator> <name>subcount</name> <operator>*</operator> <name>CB_NSTAGES</name></expr></argument>, <argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>gain_index</name></name> <operator>+</operator> <name>subcount</name> <operator>*</operator> <name>CB_NSTAGES</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>MEM_LF_TBL</name></expr></argument>, <argument><expr><name>SUBL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>mem</name> <operator>+</operator> <name>SUBL</name></expr></argument>, <argument><expr><operator>(</operator><name>CB_MEML</name> <operator>-</operator> <name>SUBL</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem</name> <operator>+</operator> <name>CB_MEML</name> <operator>-</operator> <name>SUBL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>decresidual</name><index>[<expr><operator>(</operator><name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>subframe</name><operator>)</operator> <operator>*</operator> <name>SUBL</name></expr>]</index></name></expr></argument>, <argument><expr><name>SUBL</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subcount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Nback</name> <operator>=</operator> <name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>Nback</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>meml_gotten</name> <operator>=</operator> <name>SUBL</name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nsub</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>encbits</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>meml_gotten</name> <operator>&gt;</operator> <name>CB_MEML</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>meml_gotten</name> <operator>=</operator> <name>CB_MEML</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>reverse_memcpy</name><argument_list>(<argument><expr><name>mem</name> <operator>+</operator> <name>CB_MEML</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>decresidual</name> <operator>+</operator> <operator>(</operator><name><name>encbits</name><operator>-&gt;</operator><name>start</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>SUBL</name></expr></argument>, <argument><expr><name>meml_gotten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>CB_MEML</name> <operator>-</operator> <name>meml_gotten</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>subframe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subframe</name> <operator>&lt;</operator> <name>Nback</name></expr>;</condition> <incr><expr><name>subframe</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>construct_vector</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>reverseDecresidual</name><index>[<expr><name>subframe</name> <operator>*</operator> <name>SUBL</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>cb_index</name></name> <operator>+</operator> <name>subcount</name> <operator>*</operator> <name>CB_NSTAGES</name></expr></argument>,

<argument><expr><name><name>encbits</name><operator>-&gt;</operator><name>gain_index</name></name> <operator>+</operator> <name>subcount</name> <operator>*</operator> <name>CB_NSTAGES</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>MEM_LF_TBL</name></expr></argument>, <argument><expr><name>SUBL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>mem</name> <operator>+</operator> <name>SUBL</name></expr></argument>, <argument><expr><operator>(</operator><name>CB_MEML</name> <operator>-</operator> <name>SUBL</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mem</name> <operator>+</operator> <name>CB_MEML</name> <operator>-</operator> <name>SUBL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>reverseDecresidual</name><index>[<expr><name>subframe</name> <operator>*</operator> <name>SUBL</name></expr>]</index></name></expr></argument>, <argument><expr><name>SUBL</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subcount</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>reverse_memcpy</name><argument_list>(<argument><expr><name>decresidual</name> <operator>+</operator> <name>SUBL</name> <operator>*</operator> <name>Nback</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>reverseDecresidual</name></expr></argument>, <argument><expr><name>SUBL</name> <operator>*</operator> <name>Nback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>max_abs_value_w16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>vector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>absolute</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maximum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vector</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>absolute</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>absolute</name> <operator>&gt;</operator> <name>maximum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maximum</name> <operator>=</operator> <name>absolute</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>maximum</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>get_size_in_bits</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0xFFFF0000</literal> <operator>&amp;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x0000FF00</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <name>bits</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x000000F0</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <name>bits</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x0000000C</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <name>bits</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x00000002</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <name>bits</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0x00000001</literal> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <name>bits</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>bits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scale_dot_product</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scaling</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>scaling</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>correlation</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>corr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ener</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name>lag</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>blen</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>srange</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>w16ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w16ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>blen</name> <operator>-</operator> <name>srange</name> <operator>-</operator> <name>lag</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>corr</name> <operator>=</operator> <call><name>scale_dot_product</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>blen</name> <operator>-</operator> <name>srange</name></expr>]</index></name></expr></argument>, <argument><expr><name>w16ptr</name></expr></argument>, <argument><expr><name>srange</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ener</name> <operator>=</operator> <call><name>scale_dot_product</name><argument_list>(<argument><expr><name>w16ptr</name></expr></argument>, <argument><expr><name>w16ptr</name></expr></argument>, <argument><expr><name>srange</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ener</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>corr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ener</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPL_SHIFT_W32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c) &gt;= 0) ? ((x) &lt;&lt; (c)) : ((x) &gt;&gt; (-(c))))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>norm_w32</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>~</operator><name>a</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ff_clz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>div_w32_w16</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>den</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>num</name> <operator>/</operator> <name>den</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0x7FFFFFFF</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_plc</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>plc_residual</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>plc_lpc</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name></type> <name>PLI</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>decresidual</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, 

<parameter><decl><type><name>int16_t</name></type> <name>inlag</name></decl></parameter>, 

<parameter><decl><type><name>ILBCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> 

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>cross</name></decl>, <decl><type ref="prev"/><name>ener</name></decl>, <decl><type ref="prev"/><name>cross_comp</name></decl>, <decl><type ref="prev"/><name>ener_comp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>measure</name></decl>, <decl><type ref="prev"/><name>max_measure</name></decl>, <decl><type ref="prev"/><name>energy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>max</name></decl>, <decl><type ref="prev"/><name>cross_square_max</name></decl>, <decl><type ref="prev"/><name>cross_square</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>lag</name></decl>, <decl><type ref="prev"/><name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>, <decl><type ref="prev"/><name>randlag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>shift1</name></decl>, <decl><type ref="prev"/><name>shift2</name></decl>, <decl><type ref="prev"/><name>shift3</name></decl>, <decl><type ref="prev"/><name>shift_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>scale3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>corrLen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tmpW32</name></decl>, <decl><type ref="prev"/><name>tmp2W32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>use_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>tot_gain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>max_perSquare</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>scale1</name></decl>, <decl><type ref="prev"/><name>scale2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>totscale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>nom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>denom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>pitchfact</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>use_lag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>randvec</name><index>[<expr><name>BLOCKL_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>PLI</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>consPLICount</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prevPLI</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>max_abs_value_w16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prevResidual</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale3</name> <operator>=</operator> <operator>(</operator><call><name>get_size_in_bits</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scale3</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scale3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prevScale</name></name> <operator>=</operator> <name>scale3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <name>inlag</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>corrLen</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>-</operator> <operator>(</operator><name>inlag</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>correlation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cross</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ener</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prevResidual</name></name></expr></argument>, <argument><expr><name>lag</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>corrLen</name></expr></argument>, <argument><expr><name>scale3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_max</name> <operator>=</operator> <call><name>get_size_in_bits</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>cross</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cross_square_max</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>cross</name></expr></argument>, <argument><expr><operator>-</operator><name>shift_max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>cross</name></expr></argument>, <argument><expr><operator>-</operator><name>shift_max</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>inlag</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>inlag</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>correlation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cross_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ener_comp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prevResidual</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>, <argument><expr><name>corrLen</name></expr></argument>, <argument><expr><name>scale3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift1</name> <operator>=</operator> <call><name>get_size_in_bits</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>cross_comp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cross_square</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>cross_comp</name></expr></argument>, <argument><expr><operator>-</operator><name>shift1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>cross_comp</name></expr></argument>, <argument><expr><operator>-</operator><name>shift1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift2</name> <operator>=</operator> <call><name>get_size_in_bits</name><argument_list>(<argument><expr><name>ener</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>measure</name> <operator>=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>ener</name></expr></argument>, <argument><expr><operator>-</operator><name>shift2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cross_square</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift3</name> <operator>=</operator> <call><name>get_size_in_bits</name><argument_list>(<argument><expr><name>ener_comp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_measure</name> <operator>=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>ener_comp</name></expr></argument>, <argument><expr><operator>-</operator><name>shift3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cross_square_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>shift_max</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>shift3</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>shift1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>shift2</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><operator>(</operator><name>shift_max</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>shift3</name> <operator>-</operator> <operator>(</operator><name>shift1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><operator>(</operator><name>shift1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>shift2</name> <operator>-</operator> <operator>(</operator><name>shift_max</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>shift3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>measure</name> <operator>&gt;&gt;</operator> <name>tmp1</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>max_measure</name> <operator>&gt;&gt;</operator> <name>tmp2</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cross_square_max</name> <operator>=</operator> <name>cross_square</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cross</name> <operator>=</operator> <name>cross_comp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_max</name> <operator>=</operator> <name>shift1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ener</name> <operator>=</operator> <name>ener_comp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp2W32</name> <operator>=</operator> <call><name>scale_dot_product</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prevResidual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>-</operator> <name>corrLen</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prevResidual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>-</operator> <name>corrLen</name></expr>]</index></name></expr></argument>, <argument><expr><name>corrLen</name></expr></argument>, <argument><expr><name>scale3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp2W32</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ener_comp</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scale1</name> <operator>=</operator> <call><name>norm_w32</name><argument_list>(<argument><expr><name>tmp2W32</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>tmp2W32</name></expr></argument>, <argument><expr><name>scale1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale2</name> <operator>=</operator> <call><name>norm_w32</name><argument_list>(<argument><expr><name>ener</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>ener</name></expr></argument>, <argument><expr><name>scale2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>totscale</name> <operator>=</operator> <name>scale1</name> <operator>+</operator> <name>scale2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>cross</name></expr></argument>, <argument><expr><operator>(</operator><name>totscale</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>cross</name></expr></argument>, <argument><expr><name>totscale</name> <operator>-</operator> <operator>(</operator><name>totscale</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nom</name> <operator>=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_perSquare</name> <operator>=</operator> <call><name>div_w32_w16</name><argument_list>(<argument><expr><name>nom</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>max_perSquare</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prevLag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_perSquare</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>per_square</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>use_gain</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>consPLICount</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>&gt;</operator> <literal type="number">320</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_gain</name> <operator>=</operator> <literal type="number">29491</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>consPLICount</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>&gt;</operator> <literal type="number">640</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_gain</name> <operator>=</operator> <literal type="number">22938</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>consPLICount</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>&gt;</operator> <literal type="number">960</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_gain</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>consPLICount</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>&gt;</operator> <literal type="number">1280</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_gain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_perSquare</name> <operator>&gt;</operator> <literal type="number">7868</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>pitchfact</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>max_perSquare</name> <operator>&gt;</operator> <literal type="number">839</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>ind</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>max_perSquare</name> <operator>&lt;</operator> <name><name>kPlcPerSqr</name><index>[<expr><name>ind</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ind</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ind</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>tmpW32</name> <operator>=</operator> <name><name>kPlcPitchFact</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>+</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><name><name>kPlcPfSlope</name><index>[<expr><name>ind</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>max_perSquare</name> <operator>-</operator> <name><name>kPlcPerSqr</name><index>[<expr><name>ind</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pitchfact</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>tmpW32</name></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>pitchfact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>use_lag</name> <operator>=</operator> <name>lag</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lag</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_lag</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>lag</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>energy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>, <argument><expr><literal type="number">31821</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">13849</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>randlag</name> <operator>=</operator> <literal type="number">53</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>seed</name></name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pick</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>randlag</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pick</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>randvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prevResidual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>+</operator> <name>pick</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>randvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prevResidual</name><index>[<expr><name>pick</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pick</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>use_lag</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pick</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>plc_residual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prevResidual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>+</operator> <name>pick</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>plc_residual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>plc_residual</name><index>[<expr><name>pick</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tot_gain</name> <operator>=</operator> <name>use_gain</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">160</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tot_gain</name> <operator>=</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><literal type="number">31130</literal></expr></argument>, <argument><expr><name>use_gain</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tot_gain</name> <operator>=</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><literal type="number">29491</literal></expr></argument>, <argument><expr><name>use_gain</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>plc_residual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><name>tot_gain</name></expr></argument>, <argument><expr><operator>(</operator><name>pitchfact</name> <operator>*</operator> <name><name>plc_residual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><literal type="number">32767</literal> <operator>-</operator> <name>pitchfact</name><operator>)</operator> <operator>*</operator> <name><name>randvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>energy</name> <operator>+=</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><name><name>plc_residual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plc_residual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>prevScale</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>energy</name> <operator>&lt;</operator> <call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">900</literal></expr></argument>, <argument><expr><operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>prevScale</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>energy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>plc_residual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>randvec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>plc_lpc</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>.</operator><name>prev_lpc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prevLag</name></name> <operator>=</operator> <name>lag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>per_square</name></name> <operator>=</operator> <name>max_perSquare</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>plc_residual</name></expr></argument>, <argument><expr><name>decresidual</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>plc_lpc</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>consPLICount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prevPLI</name></name> <operator>=</operator> <name>PLI</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prev_lpc</name></name></expr></argument>, <argument><expr><name>plc_lpc</name></expr></argument>, <argument><expr><operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prevResidual</name></name></expr></argument>, <argument><expr><name>plc_residual</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xcorr_coeff</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>regressor</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name>subl</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>searchLen</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>maxlag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>cross_corr_scale</name></decl>, <decl><type ref="prev"/><name>energy_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>cross_corr_sg_mod</name></decl>, <decl><type ref="prev"/><name>cross_corr_sg_mod_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>cross_corr</name></decl>, <decl><type ref="prev"/><name>energy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>cross_corr_mod</name></decl>, <decl><type ref="prev"/><name>energy_mod</name></decl>, <decl><type ref="prev"/><name>enery_mod_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>rp_beg</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>totscale</name></decl>, <decl><type ref="prev"/><name>totscale_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>scalediff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>new_crit</name></decl>, <decl><type ref="prev"/><name>max_crit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shifts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cross_corr_sg_mod_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>enery_mod_max</name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totscale_max</name> <operator>=</operator> <operator>-</operator><literal type="number">500</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>maxlag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>max_abs_value_w16</name><argument_list>(<argument><expr><name>regressor</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>subl</name> <operator>+</operator> <name>searchLen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rp_beg</name> <operator>=</operator> <name>regressor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rp_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>regressor</name><index>[<expr><name>subl</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>max_abs_value_w16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>regressor</name><index>[<expr><operator>-</operator><name>searchLen</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><name>subl</name> <operator>+</operator> <name>searchLen</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rp_beg</name> <operator>=</operator> <operator>&amp;</operator><name><name>regressor</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rp_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>regressor</name><index>[<expr><name>subl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">5000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shifts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shifts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>energy</name> <operator>=</operator> <call><name>scale_dot_product</name><argument_list>(<argument><expr><name>regressor</name></expr></argument>, <argument><expr><name>regressor</name></expr></argument>, <argument><expr><name>subl</name></expr></argument>, <argument><expr><name>shifts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>searchLen</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rp</name> <operator>=</operator> <operator>&amp;</operator><name><name>regressor</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cross_corr</name> <operator>=</operator> <call><name>scale_dot_product</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>, <argument><expr><name>subl</name></expr></argument>, <argument><expr><name>shifts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>energy</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>cross_corr</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cross_corr_scale</name> <operator>=</operator> <call><name>norm_w32</name><argument_list>(<argument><expr><name>cross_corr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cross_corr_mod</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>cross_corr</name></expr></argument>, <argument><expr><name>cross_corr_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>energy_scale</name> <operator>=</operator> <call><name>norm_w32</name><argument_list>(<argument><expr><name>energy</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>energy_mod</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>SPL_SHIFT_W32</name><argument_list>(<argument><expr><name>energy</name></expr></argument>, <argument><expr><name>energy_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cross_corr_sg_mod</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator> <call><name>SPL_MUL_16_16_RSFT</name><argument_list>(<argument><expr><name>cross_corr_mod</name></expr></argument>, <argument><expr><name>cross_corr_mod</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>totscale</name> <operator>=</operator> <name>energy_scale</name> <operator>-</operator> <operator>(</operator><name>cross_corr_scale</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>scalediff</name> <operator>=</operator> <name>totscale</name> <operator>-</operator> <name>totscale_max</name></expr>;</expr_stmt>

<expr_stmt><expr><name>scalediff</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>scalediff</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scalediff</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>scalediff</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scalediff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_crit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>cross_corr_sg_mod</name> <operator>*</operator> <name>enery_mod_max</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><operator>-</operator><name>scalediff</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>max_crit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>cross_corr_sg_mod_max</name> <operator>*</operator> <name>energy_mod</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>new_crit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>cross_corr_sg_mod</name> <operator>*</operator> <name>enery_mod_max</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>max_crit</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>cross_corr_sg_mod_max</name> <operator>*</operator> <name>energy_mod</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>scalediff</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_crit</name> <operator>&gt;</operator> <name>max_crit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cross_corr_sg_mod_max</name> <operator>=</operator> <name>cross_corr_sg_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name>enery_mod_max</name> <operator>=</operator> <name>energy_mod</name></expr>;</expr_stmt>

<expr_stmt><expr><name>totscale_max</name> <operator>=</operator> <name>totscale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>maxlag</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>energy</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>step</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>rp_end</name> <operator>*</operator> <operator>*</operator><name>rp_end</name> <operator>-</operator> <operator>*</operator><name>rp_beg</name> <operator>*</operator> <operator>*</operator><name>rp_beg</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>shifts</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rp_beg</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rp_end</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>maxlag</name> <operator>+</operator> <name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hp_output</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>signal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ba</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ba</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name><name>signal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>SPL_MUL_16_16</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>signal</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>signal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">268435455</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">268435456</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>INT32_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>-</operator> <operator>(</operator><name><name>y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ilbc_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ILBCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>plc_data</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plc_residual</name><index>[<expr><name>LPC_FILTERORDER</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ILBCFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpack_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>start</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>index_conv</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>cb_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lsf_dequantization</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsfdeq</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>lsf</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lsf_check_stability</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsfdeq</name></name></expr></argument>, <argument><expr><name>LPC_FILTERORDER</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lsp_interpolate</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>syntdenum</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>weightdenum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsfdeq</name></name></expr></argument>, <argument><expr><name>LPC_FILTERORDER</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_residual</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decresidual</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>syntdenum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_plc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plc_residual</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>plc_lpc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decresidual</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>syntdenum</name></name> <operator>+</operator> <operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nsub</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_lag</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decresidual</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>plc_residual</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>enhancer</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>lag</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <call><name>xcorr_coeff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decresidual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name><operator>-</operator><literal type="number">60</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decresidual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name><operator>-</operator><literal type="number">80</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lag</name> <operator>=</operator> <call><name>xcorr_coeff</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decresidual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name><operator>-</operator><name>ENH_BLOCKL</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decresidual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name><operator>-</operator><name>ENH_BLOCKL</name><operator>-</operator><literal type="number">20</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ENH_BLOCKL</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_lag</name></name> <operator>=</operator> <name>lag</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>plc_data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>decresidual</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plc_data</name><index>[<expr><operator>-</operator><name>LPC_FILTERORDER</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>syntMem</name></name></expr></argument>, <argument><expr><name>LPC_FILTERORDER</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>filter_arfq12</name><argument_list>(<argument><expr><name>plc_data</name><operator>+</operator><name>i</name><operator>*</operator><name>SUBL</name></expr></argument>, <argument><expr><name>plc_data</name><operator>+</operator><name>i</name><operator>*</operator><name>SUBL</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>syntdenum</name></name> <operator>+</operator> <name>i</name><operator>*</operator><operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>SUBL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>syntMem</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>plc_data</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name><operator>-</operator><name>LPC_FILTERORDER</name></expr>]</index></name></expr></argument>, <argument><expr><name>LPC_FILTERORDER</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>plc_data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hp_output</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>hp_out_coeffs</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>hpimemy</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>hpimemx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>old_syntdenum</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>syntdenum</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nsub</name></name><operator>*</operator><operator>(</operator><name>LPC_FILTERORDER</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_enh_pl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_enh_pl</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ilbc_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ILBCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">38</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>==</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;=</operator> <literal type="number">14000</literal></expr> ?</condition><then> <expr><literal type="number">30</literal></expr> </then><else>: <expr><literal type="number">20</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>=</operator> <literal type="number">240</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nsub</name></name> <operator>=</operator> <name>NSUB_30MS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nasub</name></name> <operator>=</operator> <name>NASUB_30MS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_n</name></name> <operator>=</operator> <name>LPC_N_30MS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name> <operator>=</operator> <name>STATE_SHORT_LEN_30MS</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_samples</name></name> <operator>=</operator> <literal type="number">160</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nsub</name></name> <operator>=</operator> <name>NSUB_20MS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nasub</name></name> <operator>=</operator> <name>NASUB_20MS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_n</name></name> <operator>=</operator> <name>LPC_N_20MS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>state_short_len</name></name> <operator>=</operator> <name>STATE_SHORT_LEN_20MS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ilbc_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ilbc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"iLBC (Internet Low Bitrate Codec)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ILBC</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ilbc_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ilbc_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ILBCContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
