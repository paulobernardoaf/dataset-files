<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\indeo5.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ivi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ivi_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"indeo5data.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>FRAMETYPE_INTRA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>FRAMETYPE_INTER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>FRAMETYPE_INTER_SCAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>FRAMETYPE_INTER_NOREF</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>FRAMETYPE_NULL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl> 

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IVI5_PIC_SIZE_ESC</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_gop_header</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>tile_size</name></decl>, <decl><type ref="prev"/><name>pic_size_indx</name></decl>, <decl><type ref="prev"/><name>mb_size</name></decl>, <decl><type ref="prev"/><name>blk_size</name></decl>, <decl><type ref="prev"/><name>is_scalable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_mat</name></decl>, <decl><type ref="prev"/><name>blk_size_changed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IVIBandDesc</name> <modifier>*</modifier></type><name>band</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>band1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>band2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IVIPicConfig</name></type> <name>pic_conf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_flags</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_hdr_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>gop_flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_flags</name></name> <operator>&amp;</operator> <name>IVI5_IS_PROTECTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>lock_word</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tile_size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>gop_flags</name></name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">64</literal> <operator>&lt;&lt;</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tile_size</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tile size: %d\n"</literal></expr></argument>, <argument><expr><name>tile_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_scalable</name> <operator>=</operator> <name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_scalable</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Scalability: unsupported subdivision! Luma bands: %d, chroma bands: %d\n"</literal></expr></argument>,

<argument><expr><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name></expr></argument>, <argument><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pic_size_indx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic_size_indx</name> <operator>==</operator> <name>IVI5_PIC_SIZE_ESC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name> <operator>=</operator> <name><name>ivi5_common_pic_sizes</name><index>[<expr><name>pic_size_indx</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name> <operator>=</operator> <name><name>ivi5_common_pic_sizes</name><index>[<expr><name>pic_size_indx</name> <operator>*</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_flags</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"YV12 picture format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_height</name></name> <operator>=</operator> <operator>(</operator><name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>chroma_width</name></name> <operator>=</operator> <operator>(</operator><name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tile_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>tile_height</name></name> <operator>=</operator> <name><name>pic_conf</name><operator>.</operator><name>pic_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>tile_width</name></name> <operator>=</operator> <name><name>pic_conf</name><operator>.</operator><name>pic_width</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pic_conf</name><operator>.</operator><name>tile_height</name></name> <operator>=</operator> <name><name>pic_conf</name><operator>.</operator><name>tile_width</name></name> <operator>=</operator> <name>tile_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ivi_pic_config_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pic_conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_invalid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_ivi_init_planes</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_conf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't reallocate color planes!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name></name> <operator>=</operator> <name>pic_conf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_scalable</name></name> <operator>=</operator> <name>is_scalable</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blk_size_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>!</operator><name>p</name></expr> ?</condition><then> <expr><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name></expr> </then><else>: <expr><name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>band</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>is_halfpel</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_size</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blk_size</name> <operator>=</operator> <literal type="number">8</literal> <operator>&gt;&gt;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_size</name> <operator>=</operator> <name>blk_size</name> <operator>&lt;&lt;</operator> <operator>!</operator><name>mb_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>blk_size</name><operator>==</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"4x4 luma blocks are unsupported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blk_size_changed</name> <operator>=</operator> <name>mb_size</name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>||</operator> <name>blk_size</name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blk_size_changed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <name>mb_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>=</operator> <name>blk_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Extended transform info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>=</operator> <name>ff_ivi_inverse_slant_8x8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>dc_transform</name></name> <operator>=</operator> <name>ff_ivi_dc_slant_2d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>ff_zigzag_direct</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>=</operator> <name>ff_ivi_row_slant8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>dc_transform</name></name> <operator>=</operator> <name>ff_ivi_dc_row_slant</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>ff_ivi_vertical_scan_8x8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>=</operator> <name>ff_ivi_col_slant8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>dc_transform</name></name> <operator>=</operator> <name>ff_ivi_dc_col_slant</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>ff_ivi_horizontal_scan_8x8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>=</operator> <name>ff_ivi_put_pixels_8x8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>dc_transform</name></name> <operator>=</operator> <name>ff_ivi_put_dc_pixel_8x8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>ff_ivi_horizontal_scan_8x8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>=</operator> <name>ff_ivi_inverse_slant_4x4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>dc_transform</name></name> <operator>=</operator> <name>ff_ivi_dc_slant_2d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name>ff_ivi_direct_scan_4x4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>is_2d_trans</name></name> <operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>==</operator> <name>ff_ivi_inverse_slant_8x8</name> <operator>||</operator>

<name><name>band</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>==</operator> <name>ff_ivi_inverse_slant_4x4</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"transform and block size mismatch (%d != %d)\n"</literal></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>transform_size</name></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quant_mat</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>quant_mat</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>quant_mat</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"quant_mat %d too large!\n"</literal></expr></argument>, <argument><expr><name>quant_mat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>intra_base</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ivi5_base_quant_8x8_intra</name><index>[<expr><name>quant_mat</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inter_base</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ivi5_base_quant_8x8_inter</name><index>[<expr><name>quant_mat</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>intra_scale</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ivi5_scale_quant_8x8_intra</name><index>[<expr><name>quant_mat</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inter_scale</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ivi5_scale_quant_8x8_inter</name><index>[<expr><name>quant_mat</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>intra_base</name></name> <operator>=</operator> <name>ivi5_base_quant_4x4_intra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inter_base</name></name> <operator>=</operator> <name>ivi5_base_quant_4x4_inter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>intra_scale</name></name> <operator>=</operator> <name>ivi5_scale_quant_4x4_intra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inter_scale</name></name> <operator>=</operator> <name>ivi5_scale_quant_4x4_inter</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"End marker missing!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>band1</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>band2</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>bands</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>mb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>is_halfpel</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>is_halfpel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>intra_base</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>intra_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>inter_base</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>inter_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>intra_scale</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>intra_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>inter_scale</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>inter_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>scan</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>scan</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>inv_transform</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>inv_transform</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>dc_transform</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>dc_transform</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>is_2d_trans</name></name> <operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>is_2d_trans</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band2</name><operator>-&gt;</operator><name>transform_size</name></name><operator>=</operator> <name><name>band1</name><operator>-&gt;</operator><name>transform_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>blk_size_changed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_ivi_init_tiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>, <argument><expr><name><name>pic_conf</name><operator>.</operator><name>tile_width</name></name></expr></argument>,

<argument><expr><name><name>pic_conf</name><operator>.</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Couldn't reallocate internal structures!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_flags</name></name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Alignment bits are not zero!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>skip_hdr_extension</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">8</literal><operator>*</operator><name>len</name> <operator>&gt;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block> while<condition>(<expr><name>len</name></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_pic_hdr</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x1F</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid picture start code!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_frame_type</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame type: %d \n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>FRAMETYPE_INTRA</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>FRAMETYPE_INTRA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_gop_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid GOP header, skipping frames.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_invalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_invalid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>FRAMETYPE_INTER_SCAL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>is_scalable</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Scalable inter frame in non scalable stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>FRAMETYPE_INTER</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>!=</operator> <name>FRAMETYPE_NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_hdr_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_hdr_extension</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ivi_dec_huff_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr></argument>,

<argument><expr><name>IVI_MB_HUFF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_band_hdr</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IVIBandDesc</name> <modifier>*</modifier></type><name>band</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>band_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>band_flags</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>band_flags</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>is_empty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name> <operator>=</operator> <name>band_flags</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inherit_qdelta</name></name> <operator>=</operator> <name>band_flags</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>qdelta_present</name></name> <operator>=</operator> <name>band_flags</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>qdelta_present</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>inherit_qdelta</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>band_flags</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name> <operator>&gt;</operator> <literal type="number">61</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many corrections: %d\n"</literal></expr></argument>,

<argument><expr><name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>band</name><operator>-&gt;</operator><name>num_corr</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>corr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>rvmap_sel</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>band_flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ivi_dec_huff_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>band_flags</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr></argument>, <argument><expr><name>IVI_BLK_HUFF</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>band</name><operator>-&gt;</operator><name>blk_vlc</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>checksum_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>checksum_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>checksum</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>band</name><operator>-&gt;</operator><name>glob_quant</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>band_flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_hdr_extension</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_mb_info</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>IVIBandDesc</name> <modifier>*</modifier></type><name>band</name></decl></parameter>,

<parameter><decl><type><name>IVITile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>mv_x</name></decl>, <decl><type ref="prev"/><name>mv_y</name></decl>, <decl><type ref="prev"/><name>mv_delta</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>, <decl><type ref="prev"/><name>mb_offset</name></decl>,

<decl><type ref="prev"/><name>mv_scale</name></decl>, <decl><type ref="prev"/><name>blks_per_mb</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IVIMbInfo</name> <modifier>*</modifier></type><name>mb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_mb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row_offset</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>pitch</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>mbs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_mb</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>ref_mbs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offs</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>ypos</name></name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>pitch</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>xpos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref_mb</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>qdelta_present</name></name> <operator>&amp;&amp;</operator> <name><name>band</name><operator>-&gt;</operator><name>inherit_qdelta</name></name><operator>)</operator> <operator>||</operator> <name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>num_MBs</name></name> <operator>!=</operator> <call><name>IVI_MBs_PER_TILE</name><argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Allocated tile size %d mismatches parameters %d\n"</literal></expr></argument>,

<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>num_MBs</name></name></expr></argument>, <argument><expr><call><name>IVI_MBs_PER_TILE</name><argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mv_scale</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>bands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mb_size</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_x</name> <operator>=</operator> <name>mv_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>ypos</name></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>ypos</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>mb_offset</name> <operator>=</operator> <name>offs</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>xpos</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name><name>tile</name><operator>-&gt;</operator><name>xpos</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>xpos</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>ypos</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>buf_offs</name></name> <operator>=</operator> <name>mb_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>FRAMETYPE_INTRA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Empty macroblock in an INTRA picture!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>cbp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>plane</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>band_num</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,

<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name> <operator>&amp;&amp;</operator> <name>ref_mb</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mv_scale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <call><name>ivi_scale_mv</name><argument_list>(<argument><expr><name><name>ref_mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <call><name>ivi_scale_mv</name><argument_list>(<argument><expr><name><name>ref_mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name> <operator>&amp;&amp;</operator> <name>ref_mb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>FRAMETYPE_INTRA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>blks_per_mb</name> <operator>=</operator> <ternary><condition><expr><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>!=</operator> <name><name>band</name><operator>-&gt;</operator><name>blk_size</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>cbp</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>blks_per_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>qdelta_present</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>inherit_qdelta</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ref_mb</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>q_delta</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>cbp</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>plane</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>band</name><operator>-&gt;</operator><name>band_num</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frame_flags</name></name> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,

<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name> <operator>=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>q_delta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mb</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>inherit_mv</name></name> <operator>&amp;&amp;</operator> <name>ref_mb</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mv_scale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <call><name>ivi_scale_mv</name><argument_list>(<argument><expr><name><name>ref_mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <call><name>ivi_scale_mv</name><argument_list>(<argument><expr><name><name>ref_mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr></argument>, <argument><expr><name>mv_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <name><name>ref_mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mv_delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,

<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_y</name> <operator>+=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name>mv_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mb_vlc</name><operator>.</operator><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,

<argument><expr><name>IVI_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mv_x</name> <operator>+=</operator> <call><name>IVI_TOSIGNED</name><argument_list>(<argument><expr><name>mv_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>=</operator> <name>mv_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>=</operator> <name>mv_y</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name><operator>=</operator> <name><name>band</name><operator>-&gt;</operator><name>is_halfpel</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mb</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>( <expr><name>x</name> <operator>+</operator> <operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name> <operator>&gt;&gt;</operator><name>s</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator> <operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name> <operator>&gt;&gt;</operator><name>s</name><operator>)</operator><operator>)</operator><operator>*</operator><name><name>band</name><operator>-&gt;</operator><name>pitch</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name>x</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name><operator>+</operator><name>s</name><operator>)</operator><operator>&gt;&gt;</operator><name>s</name><operator>)</operator> <operator>+</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>-</operator> <literal type="number">1</literal>

<operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator><operator>(</operator><operator>(</operator><name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name><operator>+</operator><name>s</name><operator>)</operator><operator>&gt;&gt;</operator><name>s</name><operator>)</operator><operator>)</operator><operator>*</operator><name><name>band</name><operator>-&gt;</operator><name>pitch</name></name> <operator>&gt;</operator> <name><name>band</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"motion vector %d %d outside reference\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><name>s</name> <operator>+</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv_x</name></name></expr></argument>, <argument><expr><name>y</name><operator>*</operator><name>s</name> <operator>+</operator> <name><name>mb</name><operator>-&gt;</operator><name>mv_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mb</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ref_mb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ref_mb</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mb_offset</name> <operator>+=</operator> <name><name>band</name><operator>-&gt;</operator><name>mb_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>offs</name> <operator>+=</operator> <name>row_offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>switch_buffers</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>prev_frame_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FRAMETYPE_INTRA</name></expr>:</case>

<case>case <expr><name>FRAMETYPE_INTER</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_switch</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst_buf</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_switch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref_buf</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_switch</name></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FRAMETYPE_INTER_SCAL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>inter_scal</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref2_buf</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inter_scal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst_buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref2_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref_buf</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ref2_buf</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FRAMETYPE_INTER_NOREF</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FRAMETYPE_INTRA</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_switch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>FRAMETYPE_INTER</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inter_scal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dst_buf</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_switch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref_buf</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>buf_switch</name></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FRAMETYPE_INTER_SCAL</name></expr>:</case>

<case>case <expr><name>FRAMETYPE_INTER_NOREF</name></expr>:</case>

<case>case <expr><name>FRAMETYPE_NULL</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_nonnull_frame</name><parameter_list>(<parameter><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>!=</operator> <name>FRAMETYPE_NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IVI45DecContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_invalid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_ivi_init_static_vlc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rvmap_tabs</name></name></expr></argument>, <argument><expr><name>ff_ivi_rvmap_tabs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_ivi_rvmap_tabs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>pic_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>pic_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>chroma_width</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>chroma_height</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>tile_width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>tile_height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>luma_bands</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name><operator>.</operator><name>chroma_bands</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ff_ivi_init_planes</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>planes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic_conf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't allocate color planes!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf_switch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inter_scal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_pic_hdr</name></name> <operator>=</operator> <name>decode_pic_hdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_band_hdr</name></name> <operator>=</operator> <name>decode_band_hdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_mb_info</name></name> <operator>=</operator> <name>decode_mb_info</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>switch_buffers</name></name> <operator>=</operator> <name>switch_buffers</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_nonnull_frame</name></name> <operator>=</operator> <name>is_nonnull_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>is_indeo4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_indeo5_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"indeo5"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Intel Indeo Video Interactive 5"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_INDEO5</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IVI45DecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_ivi_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_ivi_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
