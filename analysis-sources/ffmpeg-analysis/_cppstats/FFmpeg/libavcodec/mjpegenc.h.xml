<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mjpegenc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>MJpegHuffmanCode</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>table_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>mant</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MJpegHuffmanCode</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MJpegContext</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>huff_size_dc_luminance</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>huff_code_dc_luminance</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>huff_size_dc_chrominance</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>huff_code_dc_chrominance</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>huff_size_ac_luminance</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>huff_code_ac_luminance</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>huff_size_ac_chrominance</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>huff_code_ac_chrominance</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uni_ac_vlc_len</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uni_chroma_ac_vlc_len</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits_dc_luminance</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>val_dc_luminance</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits_dc_chrominance</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>val_dc_chrominance</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits_ac_luminance</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>val_ac_luminance</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits_ac_chrominance</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>val_ac_chrominance</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>huff_ncode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MJpegHuffmanCode</name> <modifier>*</modifier></type><name>huff_buffer</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MJpegContext</name>;</typedef>

<enum>enum <name>HuffmanTableOption</name> <block>{

<decl><name>HUFFMAN_TABLE_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>HUFFMAN_TABLE_OPTIMAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>NB_HUFFMAN_TABLE_OPTION</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_marker</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>JpegMarker</name></name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_mjpeg_encode_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mjpeg_encode_close</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_mjpeg_encode_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
