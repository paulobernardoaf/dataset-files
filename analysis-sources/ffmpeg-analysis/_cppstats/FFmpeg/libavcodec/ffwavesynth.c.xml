<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ffwavesynth.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIN_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_MAX_CHANNELS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF_TS</name></cpp:macro> <cpp:value>0x7FFFFFFFFFFFFFFF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PINK_UNIT</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<enum>enum <name>ws_interval_type</name> <block>{

<decl><name>WS_SINE</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

<decl><name>WS_NOISE</name> <init>= <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></init></decl>,

}</block>;</enum>

<struct>struct <name>ws_interval</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_start</name></decl>, <decl><type ref="prev"/><name>ts_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>phi0</name></decl>, <decl><type ref="prev"/><name>dphi0</name></decl>, <decl><type ref="prev"/><name>ddphi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>amp0</name></decl>, <decl><type ref="prev"/><name>damp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>phi</name></decl>, <decl><type ref="prev"/><name>dphi</name></decl>, <decl><type ref="prev"/><name>amp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>ws_interval_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>wavesynth_context</name> <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>cur_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ws_interval</name></name> <modifier>*</modifier></type><name>inter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dither_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pink_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>pink_pool</name><index>[<expr><name>PINK_UNIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>pink_need</name></decl>, <decl><type ref="prev"/><name>pink_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_inter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_inter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_inter</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCG_A</name></cpp:macro> <cpp:value>1284865837</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCG_C</name></cpp:macro> <cpp:value>4150755663</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCG_AI</name></cpp:macro> <cpp:value>849225893</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>lcg_next</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>*</operator> <name>LCG_A</name> <operator>+</operator> <name>LCG_C</name></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lcg_seek</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>dt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><operator>*</operator><name>s</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>LCG_A</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>LCG_C</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>dt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dt</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>t</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>*=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dt</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pink_fill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wavesynth_context</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>vt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pink_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ws</name><operator>-&gt;</operator><name>pink_need</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PINK_UNIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>-=</operator> <name><name>vt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>lcg_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>pink_state</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>vt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pink_pool</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>lcg_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>pink_state</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>lcg_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>pink_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>frac64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>%</operator> <name>b</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>/</operator> <name>b</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">48</literal></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">63</literal> <operator>||</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>phi_at</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ws_interval</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dt</name> <init>= <expr><name>ts</name> <operator>-</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>dt2</name> <init>= <expr><ternary><condition><expr><name>dt</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> 

<expr><name>dt</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>dt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>dt</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>dt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>in</name><operator>-&gt;</operator><name>phi0</name></name> <operator>+</operator> <name>dt</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>dphi0</name></name> <operator>+</operator> <name>dt2</name> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>ddphi</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wavesynth_seek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wavesynth_context</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ws_interval</name></name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>cur_inter</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;=</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>phi</name></name> <operator>=</operator> <call><name>phi_at</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>dphi</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>dphi0</name></name> <operator>+</operator> <operator>(</operator><name>ts</name> <operator>-</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name><operator>)</operator> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>ddphi</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>amp</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>amp0</name></name> <operator>+</operator> <operator>(</operator><name>ts</name> <operator>-</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name><operator>)</operator> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>damp</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>next_inter</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>next_ts</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name></expr> ?</condition><then> <expr><name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ts_start</name></expr> </then><else>: <expr><name>INF_TS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lcg_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>dither_state</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>ts</name> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>ws</name><operator>-&gt;</operator><name>cur_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>pink_need</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pink_ts_cur</name> <init>= <expr><operator>(</operator><name><name>ws</name><operator>-&gt;</operator><name>cur_ts</name></name> <operator>+</operator> <name>PINK_UNIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>PINK_UNIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pink_ts_next</name> <init>= <expr><name>ts</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>PINK_UNIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>ts</name> <operator>&amp;</operator> <operator>(</operator><name>PINK_UNIT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>lcg_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>pink_state</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>pink_ts_next</name> <operator>-</operator> <name>pink_ts_cur</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pink_fill</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pink_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pink_pos</name></name> <operator>=</operator> <name>PINK_UNIT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>cur_ts</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wavesynth_parse_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wavesynth_context</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ws_interval</name></name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>edata</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>edata_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>phi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dphi1</name></decl>, <decl><type ref="prev"/><name>dphi2</name></decl>, <decl><type ref="prev"/><name>dt</name></decl>, <decl><type ref="prev"/><name>cur_ts</name> <init>= <expr><operator>-</operator><literal type="number">0x8000000000000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>edata</name> <operator>=</operator> <name><name>avc</name><operator>-&gt;</operator><name>extradata</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>edata_end</name> <operator>=</operator> <name>edata</name> <operator>+</operator> <name><name>avc</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edata</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>edata_end</name> <operator>-</operator> <name>edata</name><operator>)</operator> <operator>/</operator> <literal type="number">24</literal> <operator>&lt;</operator> <name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>inter</name></name> <operator>=</operator> <call><name>av_calloc</name><argument_list>(<argument><expr><name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edata_end</name> <operator>-</operator> <name>edata</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>=</operator> <call><name>AV_RL64</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>=</operator> <call><name>AV_RL64</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edata</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>&lt;</operator> <name>cur_ts</name> <operator>||</operator>

<name><name>in</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>&lt;=</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>||</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>-</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name> <operator>&gt;</operator> <name>INT64_MAX</name></expr>

)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_ts</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dt</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_end</name></name> <operator>-</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WS_SINE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>edata_end</name> <operator>-</operator> <name>edata</name> <operator>&lt;</operator> <literal type="number">20</literal> <operator>||</operator> <name><name>avc</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f1</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>phi</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edata</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dphi1</name> <operator>=</operator> <call><name>frac64</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avc</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dphi2</name> <operator>=</operator> <call><name>frac64</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>avc</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>dphi0</name></name> <operator>=</operator> <name>dphi1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>ddphi</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>dphi2</name> <operator>-</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>dphi1</name><operator>)</operator> <operator>/</operator> <name>dt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>phi</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>phi</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x80000000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>phi</name> <operator>&gt;=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>phi0</name></name> <operator>=</operator> <call><name>phi_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>phi</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>phi0</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>phi</name> <operator>&lt;&lt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>WS_NOISE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>edata_end</name> <operator>-</operator> <name>edata</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>edata</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edata</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>amp0</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>a1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>damp</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>a2</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>a1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>dt</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>edata</name> <operator>!=</operator> <name>edata_end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wavesynth_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wavesynth_context</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>WS_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"This implementation is limited to %d channels.\n"</literal></expr></argument>,

<argument><expr><name>WS_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>wavesynth_parse_extradata</name><argument_list>(<argument><expr><name>avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid intervals definitions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>sin</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ws</name><operator>-&gt;</operator><name>sin</name></name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <name>SIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ws</name><operator>-&gt;</operator><name>sin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SIN_BITS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>sin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><literal type="number">32767</literal> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>i</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SIN_BITS</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>dither_state</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pink_need</name></name> <operator>+=</operator> <name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>WS_NOISE</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pink_state</name></name> <operator>=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'I'</literal></expr></argument>,<argument><expr><literal type="char">'N'</literal></expr></argument>,<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>pink_pos</name></name> <operator>=</operator> <name>PINK_UNIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wavesynth_seek</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avc</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>sin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wavesynth_synth_sample</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wavesynth_context</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>amp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ws_interval</name></name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"/><name>pink</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>all_ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ws</name><operator>-&gt;</operator><name>cur_inter</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>cur_inter</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ws</name><operator>-&gt;</operator><name>pink_pos</name></name> <operator>==</operator> <name>PINK_UNIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pink_fill</name><argument_list>(<argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pink</name> <operator>=</operator> <name><name>ws</name><operator>-&gt;</operator><name>pink_pool</name><index>[<expr><name><name>ws</name><operator>-&gt;</operator><name>pink_pos</name></name><operator>++</operator></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;=</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>amp</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>amp</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>amp</name></name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>damp</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WS_SINE</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>amp</name> <operator>*</operator> <name><name>ws</name><operator>-&gt;</operator><name>sin</name><index>[<expr><name><name>in</name><operator>-&gt;</operator><name>phi</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>SIN_BITS</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>phi</name></name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>dphi</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>dphi</name></name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>ddphi</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WS_NOISE</name></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>amp</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>pink</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>all_ch</name> <operator>|=</operator> <name><name>in</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>channels</name></name></expr><operator>,</operator> <expr><name>cv</name> <operator>=</operator> <name>channels</name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cv</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cv</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></while>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>lcg_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>dither_state</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>all_ch</name></expr><operator>,</operator> <expr><name>cv</name> <operator>=</operator> <name>channels</name></expr>;</init> <condition><expr><name>c</name></expr>;</condition> <incr><expr><name>c</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cv</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>cv</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wavesynth_enter_intervals</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>wavesynth_context</name></name> <modifier>*</modifier></type><name>ws</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ws_interval</name></name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>cur_inter</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ws</name><operator>-&gt;</operator><name>cur_inter</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ws</name><operator>-&gt;</operator><name>next_inter</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_start</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;=</operator> <name><name>in</name><operator>-&gt;</operator><name>ts_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>phi</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>phi0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>dphi</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>dphi0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>amp</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>amp0</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>next_inter</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>next_ts</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ws</name><operator>-&gt;</operator><name>nb_inter</name></name></expr> ?</condition><then> <expr><name><name>ws</name><operator>-&gt;</operator><name>inter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ts_start</name></expr> </then><else>: <expr><name>INF_TS</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wavesynth_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rframe</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rgot_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wavesynth_context</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>rframe</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>pcm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>channels</name><index>[<expr><name>WS_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>rgot_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>AV_RL64</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>!=</operator> <name><name>ws</name><operator>-&gt;</operator><name>cur_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wavesynth_seek</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>packet</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avc</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pcm</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>duration</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr><operator>,</operator> <expr><name>ts</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avc</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>channels</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;=</operator> <name><name>ws</name><operator>-&gt;</operator><name>next_ts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wavesynth_enter_intervals</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wavesynth_synth_sample</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avc</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>pcm</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>channels</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ws</name><operator>-&gt;</operator><name>cur_ts</name></name> <operator>+=</operator> <name>duration</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rgot_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>packet</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>wavesynth_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wavesynth_context</name></name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name><name>avc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>sin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ws</name><operator>-&gt;</operator><name>inter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ffwavesynth_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wavesynth"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Wave synthesis pseudo-codec"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_FFWAVESYNTH</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>wavesynth_context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>wavesynth_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>wavesynth_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>wavesynth_decode</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
