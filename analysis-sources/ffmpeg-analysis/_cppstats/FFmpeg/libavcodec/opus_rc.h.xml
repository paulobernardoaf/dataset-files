<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\opus_rc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_MAX_PACKET_SIZE</name></cpp:macro> <cpp:value>1275</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opus_ilog</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(av_log2(i) + !!(i))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>RawBitsContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cachelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cacheval</name></decl>;</decl_stmt>

}</block></struct></type> <name>RawBitsContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>OpusRangeCoder</name> <block>{

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RawBitsContext</name></type> <name>rb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>total_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>OPUS_MAX_PACKET_SIZE</name> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rng_cur</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ext</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>rem</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>waste</name></decl>;</decl_stmt>

}</block></struct></type> <name>OpusRangeCoder</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>opus_rc_tell</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>opus_rc_tell_frac</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>total_bits</name></decl>, <decl><type ref="prev"/><name>rcbuffer</name></decl>, <decl><type ref="prev"/><name>range</name></decl>;</decl_stmt>

<expr_stmt><expr><name>total_bits</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rcbuffer</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>range</name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>range</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>rcbuffer</name><operator>-</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>range</name> <operator>=</operator> <name>range</name> <operator>*</operator> <name>range</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>range</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rcbuffer</name> <operator>=</operator> <name>rcbuffer</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <name>bit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>range</name> <operator>&gt;&gt;=</operator> <name>bit</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>total_bits</name> <operator>-</operator> <name>rcbuffer</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_cdf</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>cdf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_enc_cdf</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>cdf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_log</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_enc_log</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_uint_step</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_enc_uint_step</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_uint_tri</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_enc_uint_tri</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qn</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>ff_opus_rc_dec_uint</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_enc_uint</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>ff_opus_rc_get_raw</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_put_raw</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_opus_rc_dec_laplace</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decay</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_enc_laplace</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>symbol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decay</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_opus_rc_dec_init</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_dec_raw_init</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>rightend</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_enc_end</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_opus_rc_enc_init</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_CHECKPOINT_UPDATE</name><parameter_list>(<parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rc_rollback_bits = opus_rc_tell_frac(rc); rc_rollback_ctx = *rc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_CHECKPOINT_SPAWN</name><parameter_list>(<parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint32_t rc_rollback_bits = opus_rc_tell_frac(rc); OpusRangeCoder rc_rollback_ctx = *rc</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_CHECKPOINT_BITS</name><parameter_list>(<parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(opus_rc_tell_frac(rc) - rc_rollback_bits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPUS_RC_CHECKPOINT_ROLLBACK</name><parameter_list>(<parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(rc, &amp;rc_rollback_ctx, sizeof(OpusRangeCoder));</cpp:value></cpp:define> 

</unit>
