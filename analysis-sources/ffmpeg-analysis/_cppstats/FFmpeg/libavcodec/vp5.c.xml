<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vp5.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp5data.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp5_parse_header</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name> <operator>=</operator> <operator>!</operator><call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp56_init_dequant</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>render_x</name></decl>, <decl><type ref="prev"/><name>render_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Interlacing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rows</name> <operator>||</operator> <operator>!</operator><name>cols</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid size %dx%d\n"</literal></expr></argument>,

<argument><expr><name>cols</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>rows</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>render_y</name> <operator>=</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>render_x</name> <operator>=</operator> <call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>render_x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>render_x</name> <operator>&gt;</operator> <name>cols</name> <operator>||</operator>

<name>render_y</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>render_y</name> <operator>&gt;</operator> <name>rows</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vp56_rac_gets</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name> <operator>||</operator> 

<literal type="number">16</literal><operator>*</operator><name>cols</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>||</operator>

<literal type="number">16</literal><operator>*</operator><name>rows</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>cols</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VP56_SIZE_CHANGE</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>macroblocks</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp5_parse_vector_adjustment</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>vect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comp</name></decl>, <decl><type ref="prev"/><name>di</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>comp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_dct</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_sig</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdi</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>di</name> <operator>|=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdi</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>vp56_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ff_vp56_pva_tree</name></expr></argument>,

<argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdv</name><index>[<expr><name>comp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>di</name> <operator>|</operator> <operator>(</operator><name>delta</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>^</operator> <operator>-</operator><name>sign</name><operator>)</operator> <operator>+</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vect</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vect</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp5_parse_vector_models</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comp</name></decl>, <decl><type ref="prev"/><name>node</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>comp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp5_vmc_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_dct</name><index>[<expr><name>comp</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp5_vmc_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_sig</name><index>[<expr><name>comp</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp5_vmc_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdi</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp5_vmc_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdi</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>comp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>comp</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>comp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp5_vmc_pct</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdv</name><index>[<expr><name>comp</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp5_parse_coeff_models</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>def_prob</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>node</name></decl>, <decl><type ref="prev"/><name>cg</name></decl>, <decl><type ref="prev"/><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ct</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pt</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>def_prob</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>def_prob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">11</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp5_dccv_pct</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>ct</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ct</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>ct</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>cg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cg</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>cg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">11</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>vp5_ract_pct</name><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>vp56_rac_gets_nn</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_ract</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frames</name><index>[<expr><name>VP56_FRAME_CURRENT</name></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_ract</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>def_prob</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ctx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ctx</name><operator>&lt;</operator><literal type="number">36</literal></expr>;</condition> <incr><expr><name>ctx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_dcct</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>*</operator> <name><name>vp5_dccv_lc</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>vp5_dccv_lc</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>ct</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ct</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>ct</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>pt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>pt</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>pt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>cg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>cg</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>cg</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ctx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ctx</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>ctx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>node</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>node</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>node</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>coeff_acct</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>model</name><operator>-&gt;</operator><name>coeff_ract</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>*</operator> <name><name>vp5_ract_lc</name><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>vp5_ract_lc</name><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp5_parse_coeff</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>permute</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>idct_scantable</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>model1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>model2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coeff</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>coeff_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>cg</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>ctx</name></decl>, <decl><type ref="prev"/><name>ctx_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>vpX_rac_is_end</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"End of AC stream reached in vp5_parse_coeff\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ct</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <literal type="number">6</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>not_null_dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>model1</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_dccv</name><index>[<expr><name>pt</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>model2</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_dcct</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>coeff_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>coeff_idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>vp56_rac_get_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ff_vp56_pc_tree</name></expr></argument>, <argument><expr><name>model1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <name><name>ff_vp56_coeff_bias</name><index>[<expr><name>idx</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>ff_vp56_coeff_bit_length</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ff_vp56_coeff_parse_table</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>coeff_idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>coeff_idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>coeff_idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>vp56_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>coeff</name> <operator>=</operator> <operator>(</operator><name>coeff</name> <operator>^</operator> <operator>-</operator><name>sign</name><operator>)</operator> <operator>+</operator> <name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coeff_idx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coeff</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>dequant_ac</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_coeff</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name><name>permute</name><index>[<expr><name>coeff_idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>coeff</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ct</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>model2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>coeff_idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>coeff_idx</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coeff_idx</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cg</name> <operator>=</operator> <name><name>vp5_coeff_groups</name><index>[<expr><name>coeff_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>coeff_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>model1</name> <operator>=</operator> <name><name>model</name><operator>-&gt;</operator><name>coeff_ract</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>model2</name> <operator>=</operator> <ternary><condition><expr><name>cg</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>model1</name></expr> </then><else>: <expr><name><name>model</name><operator>-&gt;</operator><name>coeff_acct</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><name>ct</name></expr>]</index><index>[<expr><name>cg</name></expr>]</index><index>[<expr><name>ctx</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ctx_last</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx_last</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx_last</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>coeff_idx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coeff_idx</name> <operator>&lt;</operator> <name>ctx_last</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>coeff_idx</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>ctx_last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>above_blocks</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>above_block_idx</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>not_null_dc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>coeff_ctx</name><index>[<expr><name><name>ff_vp56_b6to4</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>idct_selector</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp5_default_models_init</name><parameter_list>(<parameter><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56Model</name> <modifier>*</modifier></type><name>model</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>modelp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_sig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_dct</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdi</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x55</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdi</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name></name></expr></argument>, <argument><expr><name>ff_vp56_def_mb_types_stats</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>mb_types_stats</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdv</name></name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>model</name><operator>-&gt;</operator><name>vector_pdv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp5_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP56Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_vp5dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vp56dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vp56_coord_div</name></name> <operator>=</operator> <name>vp5_coord_div</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_vector_adjustment</name></name> <operator>=</operator> <name>vp5_parse_vector_adjustment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_coeff</name></name> <operator>=</operator> <name>vp5_parse_coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>default_models_init</name></name> <operator>=</operator> <name>vp5_default_models_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_vector_models</name></name> <operator>=</operator> <name>vp5_parse_vector_models</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_coeff_models</name></name> <operator>=</operator> <name>vp5_parse_coeff_models</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parse_header</name></name> <operator>=</operator> <name>vp5_parse_header</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vp5_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp5"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"On2 VP5"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP5</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP56Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vp5_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_vp56_free</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_vp56_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
