<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\vp9dsp_init.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp9dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cat</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##bpp##b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_fpel_func</name><parameter_list>(<parameter><type><name>avg</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_##avg##sz##bpp##_##opt(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_mc_func</name><parameter_list>(<parameter><type><name>avg</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>f_sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_##avg##_8tap_1d_##dir##_##sz##_##bpp##_##opt(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, const type (*filter)[f_sz])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_mc_funcs</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>fsz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decl_mc_func(put, sz, h, opt, type, fsz, bpp); decl_mc_func(avg, sz, h, opt, type, fsz, bpp); decl_mc_func(put, sz, v, opt, type, fsz, bpp); decl_mc_func(avg, sz, v, opt, type, fsz, bpp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_ipred_fn</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_ipred_##type##_##sz##x##sz##_##bpp##_##opt(uint8_t *dst, ptrdiff_t stride, const uint8_t *l, const uint8_t *a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_ipred_fns</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt4</name></type></parameter>, <parameter><type><name>opt8_16_32</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decl_ipred_fn(type, 4, bpp, opt4); decl_ipred_fn(type, 8, bpp, opt8_16_32); decl_ipred_fn(type, 16, bpp, opt8_16_32); decl_ipred_fn(type, 32, bpp, opt8_16_32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_itxfm_func</name><parameter_list>(<parameter><type><name>typea</name></type></parameter>, <parameter><type><name>typeb</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void cat(ff_vp9_##typea##_##typeb##_##size##x##size##_add_, bpp, _##opt)(uint8_t *dst, ptrdiff_t stride, int16_t *block, int eob)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_itxfm_funcs</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decl_itxfm_func(idct, idct, size, bpp, opt); decl_itxfm_func(iadst, idct, size, bpp, opt); decl_itxfm_func(idct, iadst, size, bpp, opt); decl_itxfm_func(iadst, iadst, size, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mc_rep_func</name><parameter_list>(<parameter><type><name>avg</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>hsz</name></type></parameter>, <parameter><type><name>hszb</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>f_sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_always_inline void ff_vp9_##avg##_8tap_1d_##dir##_##sz##_##bpp##_##opt(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, const type (*filter)[f_sz]) { ff_vp9_##avg##_8tap_1d_##dir##_##hsz##_##bpp##_##opt(dst, dst_stride, src, src_stride, h, filter); ff_vp9_##avg##_8tap_1d_##dir##_##hsz##_##bpp##_##opt(dst + hszb, dst_stride, src + hszb, src_stride, h, filter); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mc_rep_funcs</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>hsz</name></type></parameter>, <parameter><type><name>hszb</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>fsz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mc_rep_func(put, sz, hsz, hszb, h, opt, type, fsz, bpp) mc_rep_func(avg, sz, hsz, hszb, h, opt, type, fsz, bpp) mc_rep_func(put, sz, hsz, hszb, v, opt, type, fsz, bpp) mc_rep_func(avg, sz, hsz, hszb, v, opt, type, fsz, bpp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_8tap_1d_fn</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>f_opt</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>dvar</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void op##_8tap_##fname##_##sz##dir##_##bpp##_##opt(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { ff_vp9_##op##_8tap_1d_##dir##_##sz##_##bpp##_##opt(dst, dst_stride, src, src_stride, h, ff_filters_##f_opt[f][dvar - 1]); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filters_8tap_1d_fn</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>dvar</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>f_opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filter_8tap_1d_fn(op, sz, FILTER_8TAP_REGULAR, f_opt, regular, dir, dvar, bpp, opt) filter_8tap_1d_fn(op, sz, FILTER_8TAP_SHARP, f_opt, sharp, dir, dvar, bpp, opt) filter_8tap_1d_fn(op, sz, FILTER_8TAP_SMOOTH, f_opt, smooth, dir, dvar, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filters_8tap_1d_fn2</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>f_opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filters_8tap_1d_fn(op, sz, h, mx, bpp, opt, f_opt) filters_8tap_1d_fn(op, sz, v, my, bpp, opt, f_opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filters_8tap_1d_fn3</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt4</name></type></parameter>, <parameter><type><name>opt8</name></type></parameter>, <parameter><type><name>f_opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filters_8tap_1d_fn2(op, 64, bpp, opt8, f_opt) filters_8tap_1d_fn2(op, 32, bpp, opt8, f_opt) filters_8tap_1d_fn2(op, 16, bpp, opt8, f_opt) filters_8tap_1d_fn2(op, 8, bpp, opt8, f_opt) filters_8tap_1d_fn2(op, 4, bpp, opt4, f_opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filter_8tap_2d_fn</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>f_opt</name></type></parameter>, <parameter><type><name>fname</name></type></parameter>, <parameter><type><name>align</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>bytes</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void op##_8tap_##fname##_##sz##hv_##bpp##_##opt(uint8_t *dst, ptrdiff_t dst_stride, const uint8_t *src, ptrdiff_t src_stride, int h, int mx, int my) { LOCAL_ALIGNED_##align(uint8_t, temp, [71 * 64 * bytes]); ff_vp9_put_8tap_1d_h_##sz##_##bpp##_##opt(temp, 64 * bytes, src - 3 * src_stride, src_stride, h + 7, ff_filters_##f_opt[f][mx - 1]); ff_vp9_##op##_8tap_1d_v_##sz##_##bpp##_##opt(dst, dst_stride, temp + 3 * bytes * 64, 64 * bytes, h, ff_filters_##f_opt[f][my - 1]); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filters_8tap_2d_fn</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>align</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>bytes</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>f_opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filter_8tap_2d_fn(op, sz, FILTER_8TAP_REGULAR, f_opt, regular, align, bpp, bytes, opt) filter_8tap_2d_fn(op, sz, FILTER_8TAP_SHARP, f_opt, sharp, align, bpp, bytes, opt) filter_8tap_2d_fn(op, sz, FILTER_8TAP_SMOOTH, f_opt, smooth, align, bpp, bytes, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filters_8tap_2d_fn2</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>align</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>bytes</name></type></parameter>, <parameter><type><name>opt4</name></type></parameter>, <parameter><type><name>opt8</name></type></parameter>, <parameter><type><name>f_opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>filters_8tap_2d_fn(op, 64, align, bpp, bytes, opt8, f_opt) filters_8tap_2d_fn(op, 32, align, bpp, bytes, opt8, f_opt) filters_8tap_2d_fn(op, 16, align, bpp, bytes, opt8, f_opt) filters_8tap_2d_fn(op, 8, align, bpp, bytes, opt8, f_opt) filters_8tap_2d_fn(op, 4, align, bpp, bytes, opt4, f_opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_fpel_func</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][FILTER_8TAP_SMOOTH ][idx2][0][0] = dsp-&gt;mc[idx1][FILTER_8TAP_REGULAR][idx2][0][0] = dsp-&gt;mc[idx1][FILTER_8TAP_SHARP ][idx2][0][0] = dsp-&gt;mc[idx1][FILTER_BILINEAR ][idx2][0][0] = ff_vp9_##type##sz##bpp##_##opt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel1</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>idxh</name></type></parameter>, <parameter><type><name>idxv</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;mc[idx1][FILTER_8TAP_SMOOTH ][idx2][idxh][idxv] = type##_8tap_smooth_##sz##dir##_##bpp##_##opt; dsp-&gt;mc[idx1][FILTER_8TAP_REGULAR][idx2][idxh][idxv] = type##_8tap_regular_##sz##dir##_##bpp##_##opt; dsp-&gt;mc[idx1][FILTER_8TAP_SHARP ][idx2][idxh][idxv] = type##_8tap_sharp_##sz##dir##_##bpp##_##opt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel2</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel1(idx1, idx2, 1, 1, sz, hv, type, bpp, opt); init_subpel1(idx1, idx2, 0, 1, sz, v, type, bpp, opt); init_subpel1(idx1, idx2, 1, 0, sz, h, type, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel3_32_64</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel2(0, idx, 64, type, bpp, opt); init_subpel2(1, idx, 32, type, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel3_8to64</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel3_32_64(idx, type, bpp, opt); init_subpel2(2, idx, 16, type, bpp, opt); init_subpel2(3, idx, 8, type, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_subpel3</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_subpel3_8to64(idx, type, bpp, opt); init_subpel2(4, idx, 4, type, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_ipred_func</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name><name>enum</name></name></type></parameter></parameter_list></cpp:macro>, sz, bpp, opt) dsp-&gt;intra_pred[TX_##sz##X##sz][enum##_PRED] = cat(ff_vp9_ipred_##type##_##sz##x##sz##_, bpp, _##opt)</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_8_16_32_ipred_funcs</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name><name>enum</name></name></type></parameter></parameter_list></cpp:macro>, bpp, opt) init_ipred_func(type, enum, 8, bpp, opt); init_ipred_func(type, enum, 16, bpp, opt); init_ipred_func(type, enum, 32, bpp, opt)</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_ipred_funcs</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name><name>enum</name></name></type></parameter></parameter_list></cpp:macro>, bpp, opt) init_ipred_func(type, enum, 4, bpp, opt); init_8_16_32_ipred_funcs(type, enum, bpp, opt)</cpp:define>

<function_decl><type><name>void</name></type> <name>ff_vp9dsp_init_10bpp_x86</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitexact</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vp9dsp_init_12bpp_x86</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitexact</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_vp9dsp_init_16bpp_x86</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
