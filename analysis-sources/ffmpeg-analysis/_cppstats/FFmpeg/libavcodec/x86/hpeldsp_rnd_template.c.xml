<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\hpeldsp_rnd_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>av_unused</name> <specifier>static</specifier> <name>void</name></type> <name>DEF</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><name>pixels8_x2</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>block</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>pixels</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>line_size</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MOVQ_BFE</name><argument_list>(<argument><expr><name>mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%3, %3), %%"FF_REG_a" \n\t"

".p2align 3 \n\t"

"1: \n\t"

"movq (%1), %%mm0 \n\t"

"movq 1(%1), %%mm1 \n\t"

"movq (%1, %3), %%mm2 \n\t"

"movq 1(%1, %3), %%mm3 \n\t"

PAVGBP(%%mm0, %%mm1, %%mm4, %%mm2, %%mm3, %%mm5)

"movq %%mm4, (%2) \n\t"

"movq %%mm5, (%2, %3) \n\t"

"add %%"FF_REG_a", %1 \n\t"

"add %%"FF_REG_a", %2 \n\t"

"movq (%1), %%mm0 \n\t"

"movq 1(%1), %%mm1 \n\t"

"movq (%1, %3), %%mm2 \n\t"

"movq 1(%1, %3), %%mm3 \n\t"

PAVGBP(%%mm0, %%mm1, %%mm4, %%mm2, %%mm3, %%mm5)

"movq %%mm4, (%2) \n\t"

"movq %%mm5, (%2, %3) \n\t"

"add %%"FF_REG_a", %1 \n\t"

"add %%"FF_REG_a", %2 \n\t"

"subl $4, %0 \n\t"

"jnz 1b \n\t"

:"+g"(h), "+S"(pixels), "+D"(block)

:"r"((x86_reg)line_size)

:FF_REG_a, "memory");</asm>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>av_unused</name> <specifier>static</specifier> <name>void</name></type> <name>DEF</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><name>pixels16_x2</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>block</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>pixels</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>line_size</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MOVQ_BFE</name><argument_list>(<argument><expr><name>mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%3, %3), %%"FF_REG_a" \n\t"

".p2align 3 \n\t"

"1: \n\t"

"movq (%1), %%mm0 \n\t"

"movq 1(%1), %%mm1 \n\t"

"movq (%1, %3), %%mm2 \n\t"

"movq 1(%1, %3), %%mm3 \n\t"

PAVGBP(%%mm0, %%mm1, %%mm4, %%mm2, %%mm3, %%mm5)

"movq %%mm4, (%2) \n\t"

"movq %%mm5, (%2, %3) \n\t"

"movq 8(%1), %%mm0 \n\t"

"movq 9(%1), %%mm1 \n\t"

"movq 8(%1, %3), %%mm2 \n\t"

"movq 9(%1, %3), %%mm3 \n\t"

PAVGBP(%%mm0, %%mm1, %%mm4, %%mm2, %%mm3, %%mm5)

"movq %%mm4, 8(%2) \n\t"

"movq %%mm5, 8(%2, %3) \n\t"

"add %%"FF_REG_a", %1 \n\t"

"add %%"FF_REG_a", %2 \n\t"

"movq (%1), %%mm0 \n\t"

"movq 1(%1), %%mm1 \n\t"

"movq (%1, %3), %%mm2 \n\t"

"movq 1(%1, %3), %%mm3 \n\t"

PAVGBP(%%mm0, %%mm1, %%mm4, %%mm2, %%mm3, %%mm5)

"movq %%mm4, (%2) \n\t"

"movq %%mm5, (%2, %3) \n\t"

"movq 8(%1), %%mm0 \n\t"

"movq 9(%1), %%mm1 \n\t"

"movq 8(%1, %3), %%mm2 \n\t"

"movq 9(%1, %3), %%mm3 \n\t"

PAVGBP(%%mm0, %%mm1, %%mm4, %%mm2, %%mm3, %%mm5)

"movq %%mm4, 8(%2) \n\t"

"movq %%mm5, 8(%2, %3) \n\t"

"add %%"FF_REG_a", %1 \n\t"

"add %%"FF_REG_a", %2 \n\t"

"subl $4, %0 \n\t"

"jnz 1b \n\t"

:"+g"(h), "+S"(pixels), "+D"(block)

:"r"((x86_reg)line_size)

:FF_REG_a, "memory");</asm>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>av_unused</name> <specifier>static</specifier> <name>void</name></type> <name>DEF</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><name>pixels8_y2</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>block</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>pixels</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>line_size</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MOVQ_BFE</name><argument_list>(<argument><expr><name>mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%3, %3), %%"FF_REG_a" \n\t"

"movq (%1), %%mm0 \n\t"

".p2align 3 \n\t"

"1: \n\t"

"movq (%1, %3), %%mm1 \n\t"

"movq (%1, %%"FF_REG_a"),%%mm2\n\t"

PAVGBP(%%mm1, %%mm0, %%mm4, %%mm2, %%mm1, %%mm5)

"movq %%mm4, (%2) \n\t"

"movq %%mm5, (%2, %3) \n\t"

"add %%"FF_REG_a", %1 \n\t"

"add %%"FF_REG_a", %2 \n\t"

"movq (%1, %3), %%mm1 \n\t"

"movq (%1, %%"FF_REG_a"),%%mm0\n\t"

PAVGBP(%%mm1, %%mm2, %%mm4, %%mm0, %%mm1, %%mm5)

"movq %%mm4, (%2) \n\t"

"movq %%mm5, (%2, %3) \n\t"

"add %%"FF_REG_a", %1 \n\t"

"add %%"FF_REG_a", %2 \n\t"

"subl $4, %0 \n\t"

"jnz 1b \n\t"

:"+g"(h), "+S"(pixels), "+D"(block)

:"r"((x86_reg)line_size)

:FF_REG_a, "memory");</asm>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>av_unused</name> <specifier>static</specifier> <name>void</name></type> <name>DEF</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><name>pixels16_x2</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>block</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>pixels</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>line_size</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MOVQ_BFE</name><argument_list>(<argument><expr><name>mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

".p2align 3 \n\t"

"1: \n\t"

"movq (%1), %%mm0 \n\t"

"movq 1(%1), %%mm1 \n\t"

"movq (%2), %%mm3 \n\t"

PAVGB(%%mm0, %%mm1, %%mm2, %%mm6)

PAVGB_MMX(%%mm3, %%mm2, %%mm0, %%mm6)

"movq %%mm0, (%2) \n\t"

"movq 8(%1), %%mm0 \n\t"

"movq 9(%1), %%mm1 \n\t"

"movq 8(%2), %%mm3 \n\t"

PAVGB(%%mm0, %%mm1, %%mm2, %%mm6)

PAVGB_MMX(%%mm3, %%mm2, %%mm0, %%mm6)

"movq %%mm0, 8(%2) \n\t"

"add %3, %1 \n\t"

"add %3, %2 \n\t"

"subl $1, %0 \n\t"

"jnz 1b \n\t"

:"+g"(h), "+S"(pixels), "+D"(block)

:"r"((x86_reg)line_size)

:"memory");</asm>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>av_unused</name> <specifier>static</specifier> <name>void</name></type> <name>DEF</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><name>pixels8_y2</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>block</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>pixels</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>line_size</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MOVQ_BFE</name><argument_list>(<argument><expr><name>mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"lea (%3, %3), %%"FF_REG_a" \n\t"

"movq (%1), %%mm0 \n\t"

".p2align 3 \n\t"

"1: \n\t"

"movq (%1, %3), %%mm1 \n\t"

"movq (%1, %%"FF_REG_a"), %%mm2 \n\t"

PAVGBP(%%mm1, %%mm0, %%mm4, %%mm2, %%mm1, %%mm5)

"movq (%2), %%mm3 \n\t"

PAVGB_MMX(%%mm3, %%mm4, %%mm0, %%mm6)

"movq (%2, %3), %%mm3 \n\t"

PAVGB_MMX(%%mm3, %%mm5, %%mm1, %%mm6)

"movq %%mm0, (%2) \n\t"

"movq %%mm1, (%2, %3) \n\t"

"add %%"FF_REG_a", %1 \n\t"

"add %%"FF_REG_a", %2 \n\t"

"movq (%1, %3), %%mm1 \n\t"

"movq (%1, %%"FF_REG_a"), %%mm0 \n\t"

PAVGBP(%%mm1, %%mm2, %%mm4, %%mm0, %%mm1, %%mm5)

"movq (%2), %%mm3 \n\t"

PAVGB_MMX(%%mm3, %%mm4, %%mm2, %%mm6)

"movq (%2, %3), %%mm3 \n\t"

PAVGB_MMX(%%mm3, %%mm5, %%mm1, %%mm6)

"movq %%mm2, (%2) \n\t"

"movq %%mm1, (%2, %3) \n\t"

"add %%"FF_REG_a", %1 \n\t"

"add %%"FF_REG_a", %2 \n\t"

"subl $4, %0 \n\t"

"jnz 1b \n\t"

:"+g"(h), "+S"(pixels), "+D"(block)

:"r"((x86_reg)line_size)

:FF_REG_a, "memory");</asm>

</block_content>}</block></decl></decl_stmt>

</unit>
