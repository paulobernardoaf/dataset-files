<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\constants.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"constants.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0001000100010001ULL</literal></expr>, <expr><literal type="number">0x0001000100010001ULL</literal></expr>,

<expr><literal type="number">0x0001000100010001ULL</literal></expr>, <expr><literal type="number">0x0001000100010001ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_2</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0002000200020002ULL</literal></expr>, <expr><literal type="number">0x0002000200020002ULL</literal></expr>,

<expr><literal type="number">0x0002000200020002ULL</literal></expr>, <expr><literal type="number">0x0002000200020002ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_3</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0003000300030003ULL</literal></expr>, <expr><literal type="number">0x0003000300030003ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_4</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0004000400040004ULL</literal></expr>, <expr><literal type="number">0x0004000400040004ULL</literal></expr>,

<expr><literal type="number">0x0004000400040004ULL</literal></expr>, <expr><literal type="number">0x0004000400040004ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_5</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0005000500050005ULL</literal></expr>, <expr><literal type="number">0x0005000500050005ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_8</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0008000800080008ULL</literal></expr>, <expr><literal type="number">0x0008000800080008ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_9</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0009000900090009ULL</literal></expr>, <expr><literal type="number">0x0009000900090009ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_15</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x000F000F000F000FULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_16</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0010001000100010ULL</literal></expr>, <expr><literal type="number">0x0010001000100010ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_17</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0011001100110011ULL</literal></expr>, <expr><literal type="number">0x0011001100110011ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_18</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0012001200120012ULL</literal></expr>, <expr><literal type="number">0x0012001200120012ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_20</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0014001400140014ULL</literal></expr>, <expr><literal type="number">0x0014001400140014ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_32</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0020002000200020ULL</literal></expr>, <expr><literal type="number">0x0020002000200020ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_42</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x002A002A002A002AULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_53</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0035003500350035ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_64</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0040004000400040ULL</literal></expr>, <expr><literal type="number">0x0040004000400040ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_96</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0060006000600060ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ASM_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pw_128</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x0080008000800080ULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_255</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x00ff00ff00ff00ffULL</literal></expr>, <expr><literal type="number">0x00ff00ff00ff00ffULL</literal></expr>,

<expr><literal type="number">0x00ff00ff00ff00ffULL</literal></expr>, <expr><literal type="number">0x00ff00ff00ff00ffULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_256</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0100010001000100ULL</literal></expr>, <expr><literal type="number">0x0100010001000100ULL</literal></expr>,

<expr><literal type="number">0x0100010001000100ULL</literal></expr>, <expr><literal type="number">0x0100010001000100ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_512</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0200020002000200ULL</literal></expr>, <expr><literal type="number">0x0200020002000200ULL</literal></expr>,

<expr><literal type="number">0x0200020002000200ULL</literal></expr>, <expr><literal type="number">0x0200020002000200ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pw_1019</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x03FB03FB03FB03FBULL</literal></expr>, <expr><literal type="number">0x03FB03FB03FB03FBULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_1023</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x03ff03ff03ff03ffULL</literal></expr>, <expr><literal type="number">0x03ff03ff03ff03ffULL</literal></expr>,

<expr><literal type="number">0x03ff03ff03ff03ffULL</literal></expr>, <expr><literal type="number">0x03ff03ff03ff03ffULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_1024</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0400040004000400ULL</literal></expr>, <expr><literal type="number">0x0400040004000400ULL</literal></expr>,

<expr><literal type="number">0x0400040004000400ULL</literal></expr>, <expr><literal type="number">0x0400040004000400ULL</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_2048</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0800080008000800ULL</literal></expr>, <expr><literal type="number">0x0800080008000800ULL</literal></expr>,

<expr><literal type="number">0x0800080008000800ULL</literal></expr>, <expr><literal type="number">0x0800080008000800ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_4095</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0fff0fff0fff0fffULL</literal></expr>, <expr><literal type="number">0x0fff0fff0fff0fffULL</literal></expr>,

<expr><literal type="number">0x0fff0fff0fff0fffULL</literal></expr>, <expr><literal type="number">0x0fff0fff0fff0fffULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_4096</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x1000100010001000ULL</literal></expr>, <expr><literal type="number">0x1000100010001000ULL</literal></expr>,

<expr><literal type="number">0x1000100010001000ULL</literal></expr>, <expr><literal type="number">0x1000100010001000ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_8192</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x2000200020002000ULL</literal></expr>, <expr><literal type="number">0x2000200020002000ULL</literal></expr>,

<expr><literal type="number">0x2000200020002000ULL</literal></expr>, <expr><literal type="number">0x2000200020002000ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pw_m1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0xFFFFFFFFFFFFFFFFULL</literal></expr>, <expr><literal type="number">0xFFFFFFFFFFFFFFFFULL</literal></expr>,

<expr><literal type="number">0xFFFFFFFFFFFFFFFFULL</literal></expr>, <expr><literal type="number">0xFFFFFFFFFFFFFFFFULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pb_0</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0000000000000000ULL</literal></expr>, <expr><literal type="number">0x0000000000000000ULL</literal></expr>,

<expr><literal type="number">0x0000000000000000ULL</literal></expr>, <expr><literal type="number">0x0000000000000000ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pb_1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0101010101010101ULL</literal></expr>, <expr><literal type="number">0x0101010101010101ULL</literal></expr>,

<expr><literal type="number">0x0101010101010101ULL</literal></expr>, <expr><literal type="number">0x0101010101010101ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pb_2</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0202020202020202ULL</literal></expr>, <expr><literal type="number">0x0202020202020202ULL</literal></expr>,

<expr><literal type="number">0x0202020202020202ULL</literal></expr>, <expr><literal type="number">0x0202020202020202ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pb_3</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0303030303030303ULL</literal></expr>, <expr><literal type="number">0x0303030303030303ULL</literal></expr>,

<expr><literal type="number">0x0303030303030303ULL</literal></expr>, <expr><literal type="number">0x0303030303030303ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_pb_15</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0F0F0F0F0F0F0F0FULL</literal></expr>, <expr><literal type="number">0x0F0F0F0F0F0F0F0FULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pb_80</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x8080808080808080ULL</literal></expr>, <expr><literal type="number">0x8080808080808080ULL</literal></expr>,

<expr><literal type="number">0x8080808080808080ULL</literal></expr>, <expr><literal type="number">0x8080808080808080ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pb_FE</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0xFEFEFEFEFEFEFEFEULL</literal></expr>, <expr><literal type="number">0xFEFEFEFEFEFEFEFEULL</literal></expr>,

<expr><literal type="number">0xFEFEFEFEFEFEFEFEULL</literal></expr>, <expr><literal type="number">0xFEFEFEFEFEFEFEFEULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint64_t</name></expr></argument>, <argument><expr><name>ff_pb_FC</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xFCFCFCFCFCFCFCFCULL</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>xmm_reg</name></expr></argument>, <argument><expr><name>ff_ps_neg</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x8000000080000000ULL</literal></expr>, <expr><literal type="number">0x8000000080000000ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pd_1</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0000000100000001ULL</literal></expr>, <expr><literal type="number">0x0000000100000001ULL</literal></expr>,

<expr><literal type="number">0x0000000100000001ULL</literal></expr>, <expr><literal type="number">0x0000000100000001ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pd_16</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0000001000000010ULL</literal></expr>, <expr><literal type="number">0x0000001000000010ULL</literal></expr>,

<expr><literal type="number">0x0000001000000010ULL</literal></expr>, <expr><literal type="number">0x0000001000000010ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pd_32</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0000002000000020ULL</literal></expr>, <expr><literal type="number">0x0000002000000020ULL</literal></expr>,

<expr><literal type="number">0x0000002000000020ULL</literal></expr>, <expr><literal type="number">0x0000002000000020ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pd_8192</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{ <expr><literal type="number">0x0000200000002000ULL</literal></expr>, <expr><literal type="number">0x0000200000002000ULL</literal></expr>,

<expr><literal type="number">0x0000200000002000ULL</literal></expr>, <expr><literal type="number">0x0000200000002000ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>ymm_reg</name></expr></argument>, <argument><expr><name>ff_pd_65535</name></expr></argument>)</argument_list></call><operator>=</operator> <block>{ <expr><literal type="number">0x0000ffff0000ffffULL</literal></expr>, <expr><literal type="number">0x0000ffff0000ffffULL</literal></expr>,

<expr><literal type="number">0x0000ffff0000ffffULL</literal></expr>, <expr><literal type="number">0x0000ffff0000ffffULL</literal></expr> }</block></expr>;</expr_stmt>

</unit>
