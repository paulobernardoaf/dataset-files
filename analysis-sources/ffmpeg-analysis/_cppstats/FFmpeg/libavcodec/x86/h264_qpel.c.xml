<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\h264_qpel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h264qpel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/pixels.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fpel.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ff_put_pixels4_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_avg_pixels4_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_pixels8_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_avg_pixels8_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_pixels16_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_avg_pixels16_l2_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src1Stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_pixels8_l2_sse2</name></cpp:macro> <cpp:value>ff_put_pixels8_l2_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_avg_pixels8_l2_sse2</name></cpp:macro> <cpp:value>ff_avg_pixels8_l2_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_pixels16_l2_sse2</name></cpp:macro> <cpp:value>ff_put_pixels16_l2_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_avg_pixels16_l2_sse2</name></cpp:macro> <cpp:value>ff_avg_pixels16_l2_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_pixels16_mmxext</name></cpp:macro> <cpp:value>ff_put_pixels16_mmx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_pixels8_mmxext</name></cpp:macro> <cpp:value>ff_put_pixels8_mmx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_pixels4_mmxext</name></cpp:macro> <cpp:value>ff_put_pixels4_mmx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_QPEL</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>void ff_ ##OPNAME ##_h264_qpel4_h_lowpass_mmxext(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride);void ff_ ##OPNAME ##_h264_qpel8_h_lowpass_mmxext(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride);void ff_ ##OPNAME ##_h264_qpel8_h_lowpass_ssse3(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride);void ff_ ##OPNAME ##_h264_qpel4_h_lowpass_l2_mmxext(uint8_t *dst, const uint8_t *src, const uint8_t *src2, int dstStride, int src2Stride);void ff_ ##OPNAME ##_h264_qpel8_h_lowpass_l2_mmxext(uint8_t *dst, const uint8_t *src, const uint8_t *src2, int dstStride, int src2Stride);void ff_ ##OPNAME ##_h264_qpel8_h_lowpass_l2_ssse3(uint8_t *dst, const uint8_t *src, const uint8_t *src2, int dstStride, int src2Stride);void ff_ ##OPNAME ##_h264_qpel4_v_lowpass_mmxext(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride);void ff_ ##OPNAME ##_h264_qpel8or16_v_lowpass_op_mmxext(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, int h);void ff_ ##OPNAME ##_h264_qpel8or16_v_lowpass_sse2(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, int h);void ff_ ##OPNAME ##_h264_qpel4_hv_lowpass_v_mmxext(const uint8_t *src, int16_t *tmp, int srcStride);void ff_ ##OPNAME ##_h264_qpel4_hv_lowpass_h_mmxext(int16_t *tmp, uint8_t *dst, int dstStride);void ff_ ##OPNAME ##_h264_qpel8or16_hv1_lowpass_op_mmxext(const uint8_t *src, int16_t *tmp, int srcStride, int size);void ff_ ##OPNAME ##_h264_qpel8or16_hv1_lowpass_op_sse2(const uint8_t *src, int16_t *tmp, int srcStride, int size);void ff_ ##OPNAME ##_h264_qpel8or16_hv2_lowpass_op_mmxext(uint8_t *dst, int16_t *tmp, int dstStride, int unused, int h);void ff_ ##OPNAME ##_h264_qpel8or16_hv2_lowpass_ssse3(uint8_t *dst, int16_t *tmp, int dstStride, int tmpStride, int size);void ff_ ##OPNAME ##_pixels4_l2_shift5_mmxext(uint8_t *dst, const int16_t *src16, const uint8_t *src8, int dstStride, int src8Stride, int h);void ff_ ##OPNAME ##_pixels8_l2_shift5_mmxext(uint8_t *dst, const int16_t *src16, const uint8_t *src8, int dstStride, int src8Stride, int h);</cpp:value></cpp:define>

<macro><name>DEF_QPEL</name><argument_list>(<argument>avg</argument>)</argument_list></macro>

<macro><name>DEF_QPEL</name><argument_list>(<argument>put</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>ff_put_h264_qpel8or16_hv1_lowpass_mmxext</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tmpStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>srcStride</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>w</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_put_h264_qpel8or16_hv1_lowpass_op_mmxext</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_H264</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static av_always_inline void ff_ ##OPNAME ##h264_qpel4_hv_lowpass_ ##MMX(uint8_t *dst, int16_t *tmp, const uint8_t *src, int dstStride, int tmpStride, int srcStride){int w=3;src -= 2*srcStride+2;while(w--){ff_ ##OPNAME ##h264_qpel4_hv_lowpass_v_mmxext(src, tmp, srcStride);tmp += 4;src += 4;}tmp -= 3*4;ff_ ##OPNAME ##h264_qpel4_hv_lowpass_h_mmxext(tmp, dst, dstStride);}static av_always_inline void ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_ ##MMX(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride, int h){src -= 2*srcStride;ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_op_mmxext(dst, src, dstStride, srcStride, h);src += 4;dst += 4;ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_op_mmxext(dst, src, dstStride, srcStride, h);}static av_always_inline void ff_ ##OPNAME ##h264_qpel8or16_hv2_lowpass_ ##MMX(uint8_t *dst, int16_t *tmp, int dstStride, int tmpStride, int size){int w = size&gt;&gt;4;do{ff_ ##OPNAME ##h264_qpel8or16_hv2_lowpass_op_mmxext(dst, tmp, dstStride, 0, size);tmp += 8;dst += 8;}while(w--);}static av_always_inline void ff_ ##OPNAME ##h264_qpel8_v_lowpass_ ##MMX(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_ ##MMX(dst , src , dstStride, srcStride, 8);}static av_always_inline void ff_ ##OPNAME ##h264_qpel16_v_lowpass_ ##MMX(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_ ##MMX(dst , src , dstStride, srcStride, 16);ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_ ##MMX(dst+8, src+8, dstStride, srcStride, 16);}static av_always_inline void ff_ ##OPNAME ##h264_qpel16_h_lowpass_ ##MMX(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){ff_ ##OPNAME ##h264_qpel8_h_lowpass_ ##MMX(dst , src , dstStride, srcStride);ff_ ##OPNAME ##h264_qpel8_h_lowpass_ ##MMX(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;ff_ ##OPNAME ##h264_qpel8_h_lowpass_ ##MMX(dst , src , dstStride, srcStride);ff_ ##OPNAME ##h264_qpel8_h_lowpass_ ##MMX(dst+8, src+8, dstStride, srcStride);}static av_always_inline void ff_ ##OPNAME ##h264_qpel16_h_lowpass_l2_ ##MMX(uint8_t *dst, const uint8_t *src, const uint8_t *src2, int dstStride, int src2Stride){ff_ ##OPNAME ##h264_qpel8_h_lowpass_l2_ ##MMX(dst , src , src2 , dstStride, src2Stride);ff_ ##OPNAME ##h264_qpel8_h_lowpass_l2_ ##MMX(dst+8, src+8, src2+8, dstStride, src2Stride);src += 8*dstStride;dst += 8*dstStride;src2 += 8*src2Stride;ff_ ##OPNAME ##h264_qpel8_h_lowpass_l2_ ##MMX(dst , src , src2 , dstStride, src2Stride);ff_ ##OPNAME ##h264_qpel8_h_lowpass_l2_ ##MMX(dst+8, src+8, src2+8, dstStride, src2Stride);}static av_always_inline void ff_ ##OPNAME ##h264_qpel8or16_hv_lowpass_ ##MMX(uint8_t *dst, int16_t *tmp, const uint8_t *src, int dstStride, int tmpStride, int srcStride, int size){ff_put_h264_qpel8or16_hv1_lowpass_ ##MMX(tmp, src, tmpStride, srcStride, size);ff_ ##OPNAME ##h264_qpel8or16_hv2_lowpass_ ##MMX(dst, tmp, dstStride, tmpStride, size);}static av_always_inline void ff_ ##OPNAME ##h264_qpel8_hv_lowpass_ ##MMX(uint8_t *dst, int16_t *tmp, const uint8_t *src, int dstStride, int tmpStride, int srcStride){ff_ ##OPNAME ##h264_qpel8or16_hv_lowpass_ ##MMX(dst , tmp , src , dstStride, tmpStride, srcStride, 8);}static av_always_inline void ff_ ##OPNAME ##h264_qpel16_hv_lowpass_ ##MMX(uint8_t *dst, int16_t *tmp, const uint8_t *src, int dstStride, int tmpStride, int srcStride){ff_ ##OPNAME ##h264_qpel8or16_hv_lowpass_ ##MMX(dst , tmp , src , dstStride, tmpStride, srcStride, 16);}static av_always_inline void ff_ ##OPNAME ##pixels16_l2_shift5_ ##MMX(uint8_t *dst, const int16_t *src16, const uint8_t *src8, int dstStride, int src8Stride, int h){ff_ ##OPNAME ##pixels8_l2_shift5_ ##MMX(dst , src16 , src8 , dstStride, src8Stride, h);ff_ ##OPNAME ##pixels8_l2_shift5_ ##MMX(dst+8, src16+8, src8+8, dstStride, src8Stride, h);}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_H264_H16_XMM</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<function_decl><type><name>void</name></type> <name>ff_avg_h264_qpel16_h_lowpass_l2_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src2Stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_put_h264_qpel16_h_lowpass_l2_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src2Stride</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_H264_H16_XMM</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static av_always_inline void ff_ ##OPNAME ##h264_qpel16_h_lowpass_l2_ ##MMX(uint8_t *dst, const uint8_t *src, const uint8_t *src2, int dstStride, int src2Stride){ff_ ##OPNAME ##h264_qpel8_h_lowpass_l2_ ##MMX(dst , src , src2 , dstStride, src2Stride);ff_ ##OPNAME ##h264_qpel8_h_lowpass_l2_ ##MMX(dst+8, src+8, src2+8, dstStride, src2Stride);src += 8*dstStride;dst += 8*dstStride;src2 += 8*src2Stride;ff_ ##OPNAME ##h264_qpel8_h_lowpass_l2_ ##MMX(dst , src , src2 , dstStride, src2Stride);ff_ ##OPNAME ##h264_qpel8_h_lowpass_l2_ ##MMX(dst+8, src+8, src2+8, dstStride, src2Stride);}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_H264_H_XMM</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>QPEL_H264_H16_XMM(OPNAME, OP, MMX)static av_always_inline void ff_ ##OPNAME ##h264_qpel16_h_lowpass_ ##MMX(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){ff_ ##OPNAME ##h264_qpel8_h_lowpass_ ##MMX(dst , src , dstStride, srcStride);ff_ ##OPNAME ##h264_qpel8_h_lowpass_ ##MMX(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;ff_ ##OPNAME ##h264_qpel8_h_lowpass_ ##MMX(dst , src , dstStride, srcStride);ff_ ##OPNAME ##h264_qpel8_h_lowpass_ ##MMX(dst+8, src+8, dstStride, srcStride);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_H264_V_XMM</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static av_always_inline void ff_ ##OPNAME ##h264_qpel8_v_lowpass_ ##MMX(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_ ##MMX(dst , src , dstStride, srcStride, 8);}static av_always_inline void ff_ ##OPNAME ##h264_qpel16_v_lowpass_ ##MMX(uint8_t *dst, const uint8_t *src, int dstStride, int srcStride){ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_ ##MMX(dst , src , dstStride, srcStride, 16);ff_ ##OPNAME ##h264_qpel8or16_v_lowpass_ ##MMX(dst+8, src+8, dstStride, srcStride, 16);}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>put_h264_qpel8or16_hv1_lowpass_sse2</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tmpStride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>srcStride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><operator>(</operator><name>size</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><name>srcStride</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>w</name><operator>--</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ff_put_h264_qpel8or16_hv1_lowpass_op_sse2</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>srcStride</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_H264_HV_XMM</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static av_always_inline void ff_ ##OPNAME ##h264_qpel8or16_hv_lowpass_ ##MMX(uint8_t *dst, int16_t *tmp, const uint8_t *src, int dstStride, int tmpStride, int srcStride, int size){put_h264_qpel8or16_hv1_lowpass_sse2(tmp, src, tmpStride, srcStride, size);ff_ ##OPNAME ##h264_qpel8or16_hv2_lowpass_ ##MMX(dst, tmp, dstStride, tmpStride, size);}static av_always_inline void ff_ ##OPNAME ##h264_qpel8_hv_lowpass_ ##MMX(uint8_t *dst, int16_t *tmp, const uint8_t *src, int dstStride, int tmpStride, int srcStride){ff_ ##OPNAME ##h264_qpel8or16_hv_lowpass_ ##MMX(dst, tmp, src, dstStride, tmpStride, srcStride, 8);}static av_always_inline void ff_ ##OPNAME ##h264_qpel16_hv_lowpass_ ##MMX(uint8_t *dst, int16_t *tmp, const uint8_t *src, int dstStride, int tmpStride, int srcStride){ff_ ##OPNAME ##h264_qpel8or16_hv_lowpass_ ##MMX(dst, tmp, src, dstStride, tmpStride, srcStride, 16);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_h264_qpel8_h_lowpass_l2_sse2</name></cpp:macro> <cpp:value>ff_put_h264_qpel8_h_lowpass_l2_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_avg_h264_qpel8_h_lowpass_l2_sse2</name></cpp:macro> <cpp:value>ff_avg_h264_qpel8_h_lowpass_l2_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_h264_qpel16_h_lowpass_l2_sse2</name></cpp:macro> <cpp:value>ff_put_h264_qpel16_h_lowpass_l2_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_avg_h264_qpel16_h_lowpass_l2_sse2</name></cpp:macro> <cpp:value>ff_avg_h264_qpel16_h_lowpass_l2_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_h264_qpel8_v_lowpass_ssse3</name></cpp:macro> <cpp:value>ff_put_h264_qpel8_v_lowpass_sse2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_avg_h264_qpel8_v_lowpass_ssse3</name></cpp:macro> <cpp:value>ff_avg_h264_qpel8_v_lowpass_sse2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_h264_qpel16_v_lowpass_ssse3</name></cpp:macro> <cpp:value>ff_put_h264_qpel16_v_lowpass_sse2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_avg_h264_qpel16_v_lowpass_ssse3</name></cpp:macro> <cpp:value>ff_avg_h264_qpel16_v_lowpass_sse2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_put_h264_qpel8or16_hv2_lowpass_sse2</name></cpp:macro> <cpp:value>ff_put_h264_qpel8or16_hv2_lowpass_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_avg_h264_qpel8or16_hv2_lowpass_sse2</name></cpp:macro> <cpp:value>ff_avg_h264_qpel8or16_hv2_lowpass_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MC</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>, <parameter><type><name>ALIGN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>H264_MC_C(OPNAME, SIZE, MMX, ALIGN)H264_MC_V(OPNAME, SIZE, MMX, ALIGN)H264_MC_H(OPNAME, SIZE, MMX, ALIGN)H264_MC_HV(OPNAME, SIZE, MMX, ALIGN)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_h264_qpel16_mc00_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_put_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avg_h264_qpel16_mc00_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_avg_pixels16_sse2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_h264_qpel8_mc00_sse2</name></cpp:macro> <cpp:value>put_h264_qpel8_mc00_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg_h264_qpel8_mc00_sse2</name></cpp:macro> <cpp:value>avg_h264_qpel8_mc00_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MC_C</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>, <parameter><type><name>ALIGN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##h264_qpel ##SIZE ##_mc00_ ##MMX (uint8_t *dst, const uint8_t *src, ptrdiff_t stride){ff_ ##OPNAME ##pixels ##SIZE ##_ ##MMX(dst, src, stride, SIZE);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MC_H</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>, <parameter><type><name>ALIGN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##h264_qpel ##SIZE ##_mc10_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_l2_ ##MMX(dst, src, src, stride, stride);}static void OPNAME ##h264_qpel ##SIZE ##_mc20_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_ ##MMX(dst, src, stride, stride);}static void OPNAME ##h264_qpel ##SIZE ##_mc30_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_l2_ ##MMX(dst, src, src+1, stride, stride);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MC_V</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>, <parameter><type><name>ALIGN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##h264_qpel ##SIZE ##_mc01_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*SIZE]);ff_put_h264_qpel ##SIZE ##_v_lowpass_ ##MMX(temp, src, SIZE, stride);ff_ ##OPNAME ##pixels ##SIZE ##_l2_ ##MMX(dst, src, temp, stride, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc02_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){ff_ ##OPNAME ##h264_qpel ##SIZE ##_v_lowpass_ ##MMX(dst, src, stride, stride);}static void OPNAME ##h264_qpel ##SIZE ##_mc03_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*SIZE]);ff_put_h264_qpel ##SIZE ##_v_lowpass_ ##MMX(temp, src, SIZE, stride);ff_ ##OPNAME ##pixels ##SIZE ##_l2_ ##MMX(dst, src+stride, temp, stride, stride, SIZE);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MC_HV</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>, <parameter><type><name>ALIGN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##h264_qpel ##SIZE ##_mc11_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*SIZE]);ff_put_h264_qpel ##SIZE ##_v_lowpass_ ##MMX(temp, src, SIZE, stride);ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_l2_ ##MMX(dst, src, temp, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc31_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*SIZE]);ff_put_h264_qpel ##SIZE ##_v_lowpass_ ##MMX(temp, src+1, SIZE, stride);ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_l2_ ##MMX(dst, src, temp, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc13_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*SIZE]);ff_put_h264_qpel ##SIZE ##_v_lowpass_ ##MMX(temp, src, SIZE, stride);ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_l2_ ##MMX(dst, src+stride, temp, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc33_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*SIZE]);ff_put_h264_qpel ##SIZE ##_v_lowpass_ ##MMX(temp, src+1, SIZE, stride);ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_l2_ ##MMX(dst, src+stride, temp, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc22_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint16_t, temp, [SIZE*(SIZE&lt;8?12:24)]);ff_ ##OPNAME ##h264_qpel ##SIZE ##_hv_lowpass_ ##MMX(dst, temp, src, stride, SIZE, stride);}static void OPNAME ##h264_qpel ##SIZE ##_mc21_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*(SIZE&lt;8?12:24)*2 + SIZE*SIZE]);uint8_t * const halfHV= temp;int16_t * const halfV= (int16_t*)(temp + SIZE*SIZE);av_assert2(((int)temp &amp; 7) == 0);ff_put_h264_qpel ##SIZE ##_hv_lowpass_ ##MMX(halfHV, halfV, src, SIZE, SIZE, stride);ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_l2_ ##MMX(dst, src, halfHV, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc23_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*(SIZE&lt;8?12:24)*2 + SIZE*SIZE]);uint8_t * const halfHV= temp;int16_t * const halfV= (int16_t*)(temp + SIZE*SIZE);av_assert2(((int)temp &amp; 7) == 0);ff_put_h264_qpel ##SIZE ##_hv_lowpass_ ##MMX(halfHV, halfV, src, SIZE, SIZE, stride);ff_ ##OPNAME ##h264_qpel ##SIZE ##_h_lowpass_l2_ ##MMX(dst, src+stride, halfHV, stride, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc12_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*(SIZE&lt;8?12:24)*2 + SIZE*SIZE]);uint8_t * const halfHV= temp;int16_t * const halfV= (int16_t*)(temp + SIZE*SIZE);av_assert2(((int)temp &amp; 7) == 0);ff_put_h264_qpel ##SIZE ##_hv_lowpass_ ##MMX(halfHV, halfV, src, SIZE, SIZE, stride);ff_ ##OPNAME ##pixels ##SIZE ##_l2_shift5_mmxext(dst, halfV+2, halfHV, stride, SIZE, SIZE);}static void OPNAME ##h264_qpel ##SIZE ##_mc32_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){LOCAL_ALIGNED(ALIGN, uint8_t, temp, [SIZE*(SIZE&lt;8?12:24)*2 + SIZE*SIZE]);uint8_t * const halfHV= temp;int16_t * const halfV= (int16_t*)(temp + SIZE*SIZE);av_assert2(((int)temp &amp; 7) == 0);ff_put_h264_qpel ##SIZE ##_hv_lowpass_ ##MMX(halfHV, halfV, src, SIZE, SIZE, stride);ff_ ##OPNAME ##pixels ##SIZE ##_l2_shift5_mmxext(dst, halfV+3, halfHV, stride, SIZE, SIZE);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MC_4816</name><parameter_list>(<parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>H264_MC(put_, 4, MMX, 8)H264_MC(put_, 8, MMX, 8)H264_MC(put_, 16,MMX, 8)H264_MC(avg_, 4, MMX, 8)H264_MC(avg_, 8, MMX, 8)H264_MC(avg_, 16,MMX, 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_MC_816</name><parameter_list>(<parameter><type><name>QPEL</name></type></parameter>, <parameter><type><name>XMM</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>QPEL(put_, 8, XMM, 16)QPEL(put_, 16,XMM, 16)QPEL(avg_, 8, XMM, 16)QPEL(avg_, 16,XMM, 16)</cpp:value></cpp:define>

<macro><name>QPEL_H264</name><argument_list>(<argument>put_</argument>, <argument>PUT_OP</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>QPEL_H264</name><argument_list>(<argument>avg_</argument>, <argument>AVG_MMXEXT_OP</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>QPEL_H264_V_XMM</name><argument_list>(<argument>put_</argument>, <argument>PUT_OP</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>QPEL_H264_V_XMM</name><argument_list>(<argument>avg_</argument>,<argument>AVG_MMXEXT_OP</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>QPEL_H264_HV_XMM</name><argument_list>(<argument>put_</argument>, <argument>PUT_OP</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>QPEL_H264_HV_XMM</name><argument_list>(<argument>avg_</argument>,<argument>AVG_MMXEXT_OP</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>QPEL_H264_H_XMM</name><argument_list>(<argument>put_</argument>, <argument>PUT_OP</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>QPEL_H264_H_XMM</name><argument_list>(<argument>avg_</argument>,<argument>AVG_MMXEXT_OP</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>QPEL_H264_HV_XMM</name><argument_list>(<argument>put_</argument>, <argument>PUT_OP</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>QPEL_H264_HV_XMM</name><argument_list>(<argument>avg_</argument>,<argument>AVG_MMXEXT_OP</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>H264_MC_4816</name><argument_list>(<argument>mmxext</argument>)</argument_list></macro>

<macro><name>H264_MC_816</name><argument_list>(<argument>H264_MC_V</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>H264_MC_816</name><argument_list>(<argument>H264_MC_HV</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>H264_MC_816</name><argument_list>(<argument>H264_MC_H</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>H264_MC_816</name><argument_list>(<argument>H264_MC_HV</argument>, <argument>ssse3</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUMA_MC_OP</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>NUM</name></type></parameter>, <parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_ ##OP ##_h264_qpel ##NUM ##_ ##TYPE ##_ ##DEPTH ##_ ##OPT (uint8_t *dst, const uint8_t *src, ptrdiff_t stride);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUMA_MC_ALL</name><parameter_list>(<parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LUMA_MC_OP(put, 4, DEPTH, TYPE, OPT) LUMA_MC_OP(avg, 4, DEPTH, TYPE, OPT) LUMA_MC_OP(put, 8, DEPTH, TYPE, OPT) LUMA_MC_OP(avg, 8, DEPTH, TYPE, OPT) LUMA_MC_OP(put, 16, DEPTH, TYPE, OPT) LUMA_MC_OP(avg, 16, DEPTH, TYPE, OPT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUMA_MC_816</name><parameter_list>(<parameter><type><name>DEPTH</name></type></parameter>, <parameter><type><name>TYPE</name></type></parameter>, <parameter><type><name>OPT</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LUMA_MC_OP(put, 8, DEPTH, TYPE, OPT) LUMA_MC_OP(avg, 8, DEPTH, TYPE, OPT) LUMA_MC_OP(put, 16, DEPTH, TYPE, OPT) LUMA_MC_OP(avg, 16, DEPTH, TYPE, OPT)</cpp:value></cpp:define>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc00</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc10</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc20</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc30</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc01</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc11</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc21</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc31</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc02</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc12</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc22</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc32</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc03</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc13</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc23</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_ALL</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc33</argument>, <argument>mmxext</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc00</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc10</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc10</argument>, <argument>sse2_cache64</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc10</argument>, <argument>ssse3_cache64</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc20</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc20</argument>, <argument>sse2_cache64</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc20</argument>, <argument>ssse3_cache64</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc30</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc30</argument>, <argument>sse2_cache64</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc30</argument>, <argument>ssse3_cache64</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc01</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc11</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc21</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc31</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc02</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc12</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc22</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc32</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc03</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc13</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc23</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>LUMA_MC_816</name><argument_list>(<argument><literal type="number">10</literal></argument>, <argument>mc33</argument>, <argument>sse2</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL16_OPMC</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>, <parameter><type><name>MC</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>void ff_ ##OP ##_h264_qpel16_ ##MC ##_10_ ##MMX(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){ff_ ##OP ##_h264_qpel8_ ##MC ##_10_ ##MMX(dst , src , stride);ff_ ##OP ##_h264_qpel8_ ##MC ##_10_ ##MMX(dst+16, src+16, stride);src += 8*stride;dst += 8*stride;ff_ ##OP ##_h264_qpel8_ ##MC ##_10_ ##MMX(dst , src , stride);ff_ ##OP ##_h264_qpel8_ ##MC ##_10_ ##MMX(dst+16, src+16, stride);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL16_OP</name><parameter_list>(<parameter><type><name>MC</name></type></parameter>, <parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>QPEL16_OPMC(put, MC, MMX)QPEL16_OPMC(avg, MC, MMX)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL16</name><parameter_list>(<parameter><type><name>MMX</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>QPEL16_OP(mc00, MMX)QPEL16_OP(mc01, MMX)QPEL16_OP(mc02, MMX)QPEL16_OP(mc03, MMX)QPEL16_OP(mc10, MMX)QPEL16_OP(mc11, MMX)QPEL16_OP(mc12, MMX)QPEL16_OP(mc13, MMX)QPEL16_OP(mc20, MMX)QPEL16_OP(mc21, MMX)QPEL16_OP(mc22, MMX)QPEL16_OP(mc23, MMX)QPEL16_OP(mc30, MMX)QPEL16_OP(mc31, MMX)QPEL16_OP(mc32, MMX)QPEL16_OP(mc33, MMX)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if> 

<macro><name>QPEL16</name><argument_list>(<argument>mmxext</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_QPEL_FUNCS</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>, <parameter><type><name>CPU</name></type></parameter>, <parameter><type><name>PREFIX</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { c-&gt;PFX ##_pixels_tab[IDX][ 0] = PREFIX ##PFX ##SIZE ##_mc00_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 1] = PREFIX ##PFX ##SIZE ##_mc10_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 2] = PREFIX ##PFX ##SIZE ##_mc20_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 3] = PREFIX ##PFX ##SIZE ##_mc30_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 4] = PREFIX ##PFX ##SIZE ##_mc01_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 5] = PREFIX ##PFX ##SIZE ##_mc11_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 6] = PREFIX ##PFX ##SIZE ##_mc21_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 7] = PREFIX ##PFX ##SIZE ##_mc31_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 8] = PREFIX ##PFX ##SIZE ##_mc02_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][ 9] = PREFIX ##PFX ##SIZE ##_mc12_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][10] = PREFIX ##PFX ##SIZE ##_mc22_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][11] = PREFIX ##PFX ##SIZE ##_mc32_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][12] = PREFIX ##PFX ##SIZE ##_mc03_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][13] = PREFIX ##PFX ##SIZE ##_mc13_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][14] = PREFIX ##PFX ##SIZE ##_mc23_ ##CPU; c-&gt;PFX ##_pixels_tab[IDX][15] = PREFIX ##PFX ##SIZE ##_mc33_ ##CPU; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_QPEL_FUNCS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>CPU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { c-&gt;put_h264_qpel_pixels_tab[0][x + y * 4] = put_h264_qpel16_mc ##x ##y ##_ ##CPU; c-&gt;put_h264_qpel_pixels_tab[1][x + y * 4] = put_h264_qpel8_mc ##x ##y ##_ ##CPU; c-&gt;avg_h264_qpel_pixels_tab[0][x + y * 4] = avg_h264_qpel16_mc ##x ##y ##_ ##CPU; c-&gt;avg_h264_qpel_pixels_tab[1][x + y * 4] = avg_h264_qpel8_mc ##x ##y ##_ ##CPU; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_QPEL_FUNCS_10</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>CPU</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { c-&gt;put_h264_qpel_pixels_tab[0][x + y * 4] = ff_put_h264_qpel16_mc ##x ##y ##_10_ ##CPU; c-&gt;put_h264_qpel_pixels_tab[1][x + y * 4] = ff_put_h264_qpel8_mc ##x ##y ##_10_ ##CPU; c-&gt;avg_h264_qpel_pixels_tab[0][x + y * 4] = ff_avg_h264_qpel16_mc ##x ##y ##_10_ ##CPU; c-&gt;avg_h264_qpel_pixels_tab[1][x + y * 4] = ff_avg_h264_qpel8_mc ##x ##y ##_10_ ##CPU; } while (0)</cpp:value></cpp:define>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_h264qpel_init_x86</name><parameter_list>(<parameter><decl><type><name>H264QpelContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>high_bit_depth</name> <init>= <expr><name>bit_depth</name> <operator>&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">10_mmxext</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">10_mmxext</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">10_mmxext</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">10_mmxext</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10_mmxext</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10_mmxext</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">10_sse2</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>put_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">10_sse2</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">10_sse2</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SET_QPEL_FUNCS</name><argument_list>(<argument><expr><name>avg_h264_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">10_sse2</literal></expr></argument>, <argument><expr><name>ff_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sse2_cache64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sse2_cache64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sse2_cache64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2_FAST</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_bit_depth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ssse3_cache64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ssse3_cache64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ssse3_cache64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bit_depth</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H264_QPEL_FUNCS_10</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
