<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\vp9dsp_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp9dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/x86/vp9dsp_init.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, , <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, , <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, , <argument><expr><name>sse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, , <argument><expr><name>sse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, , <argument><expr><name>sse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, , <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, , <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_fpel_func</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>sse2</argument>, <argument>int16_t</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>ssse3</argument>, <argument>int8_t</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>sse2</argument>, <argument>int16_t</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>ssse3</argument>, <argument>int8_t</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>sse2</argument>, <argument>int16_t</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>ssse3</argument>, <argument>int8_t</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>avx2</argument>, <argument>int8_t</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>ff_filters_ssse3</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_filters_sse2</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<macro><name>filters_8tap_2d_fn2</name><argument_list>(<argument>put</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>mmxext</argument>, <argument>sse2</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn2</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>mmxext</argument>, <argument>sse2</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn2</name><argument_list>(<argument>put</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>ssse3</argument>, <argument>ssse3</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn2</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>ssse3</argument>, <argument>ssse3</argument>, <argument>ssse3</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>avx2</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>avx2</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>avx2</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>avx2</argument>, <argument>ssse3</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>filters_8tap_1d_fn3</name><argument_list>(<argument>put</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>, <argument>sse2</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn3</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">8</literal></argument>, <argument>mmxext</argument>, <argument>sse2</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn3</name><argument_list>(<argument>put</argument>, <argument><literal type="number">8</literal></argument>, <argument>ssse3</argument>, <argument>ssse3</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn3</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">8</literal></argument>, <argument>ssse3</argument>, <argument>ssse3</argument>, <argument>ssse3</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>put</argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>avx2</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>put</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>avx2</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>avx2</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument>avx2</argument>, <argument>ssse3</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>itxfm_func</name><parameter_list>(<parameter><type><name>typea</name></type></parameter>, <parameter><type><name>typeb</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_##typea##_##typeb##_##size##x##size##_add_##opt(uint8_t *dst, ptrdiff_t stride, int16_t *block, int eob)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>itxfm_funcs</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>itxfm_func(idct, idct, size, opt); itxfm_func(iadst, idct, size, opt); itxfm_func(idct, iadst, size, opt); itxfm_func(iadst, iadst, size, opt)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>iadst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>iadst</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>iadst</name></expr></argument>, <argument><expr><name>iadst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>iwht</name></expr></argument>, <argument><expr><name>iwht</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>itxfm_func</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>itxfm_funcs</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lpf_funcs</name><parameter_list>(<parameter><type><name>size1</name></type></parameter>, <parameter><type><name>size2</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_loop_filter_v_##size1##_##size2##_##opt(uint8_t *dst, ptrdiff_t stride, int E, int I, int H); void ff_vp9_loop_filter_h_##size1##_##size2##_##opt(uint8_t *dst, ptrdiff_t stride, int E, int I, int H)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">88</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">88</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lpf_funcs</name><argument_list>(<argument><expr><literal type="number">88</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>lpf_funcs</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ipred_func</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_ipred_##type##_##size##x##size##_##opt(uint8_t *dst, ptrdiff_t stride, const uint8_t *l, const uint8_t *a)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ipred_func</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ipred_dc_funcs</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ipred_func(size, dc, opt); ipred_func(size, dc_left, opt); ipred_func(size, dc_top, opt)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ipred_dc_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dc_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ipred_dir_tm_funcs</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ipred_func(size, tm, opt); ipred_func(size, dl, opt); ipred_func(size, dr, opt); ipred_func(size, hd, opt); ipred_func(size, hu, opt); ipred_func(size, vl, opt); ipred_func(size, vr, opt)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ipred_dir_tm_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_func</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>sse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_func</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>sse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dc_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dc_funcs</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ipred_dir_tm_h_funcs</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ipred_dir_tm_funcs(size, opt); ipred_func(size, h, opt)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ipred_dir_tm_h_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dir_tm_h_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dir_tm_h_funcs</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_func</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ipred_all_funcs</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ipred_dc_funcs(size, opt); ipred_dir_tm_h_funcs(size, opt)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ipred_all_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_all_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_all_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_all_funcs</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dir_tm_h_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dir_tm_h_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dir_tm_h_funcs</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_func</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_dc_funcs</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_func</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipred_func</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ipred_func</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ipred_dir_tm_h_funcs</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ipred_dir_tm_funcs</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ipred_dc_funcs</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp9dsp_init_x86</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitexact</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9dsp_init_10bpp_x86</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>bitexact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9dsp_init_12bpp_x86</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name>bitexact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cpu_flags</name> <operator>=</operator> <call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { dsp-&gt;loop_filter_16[0] = ff_vp9_loop_filter_h_16_16_##opt; dsp-&gt;loop_filter_16[1] = ff_vp9_loop_filter_v_16_16_##opt; dsp-&gt;loop_filter_mix2[0][0][0] = ff_vp9_loop_filter_h_44_16_##opt; dsp-&gt;loop_filter_mix2[0][0][1] = ff_vp9_loop_filter_v_44_16_##opt; dsp-&gt;loop_filter_mix2[0][1][0] = ff_vp9_loop_filter_h_48_16_##opt; dsp-&gt;loop_filter_mix2[0][1][1] = ff_vp9_loop_filter_v_48_16_##opt; dsp-&gt;loop_filter_mix2[1][0][0] = ff_vp9_loop_filter_h_84_16_##opt; dsp-&gt;loop_filter_mix2[1][0][1] = ff_vp9_loop_filter_v_84_16_##opt; dsp-&gt;loop_filter_mix2[1][1][0] = ff_vp9_loop_filter_h_88_16_##opt; dsp-&gt;loop_filter_mix2[1][1][1] = ff_vp9_loop_filter_v_88_16_##opt; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_ipred</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;intra_pred[TX_##sz##X##sz][e##_PRED] = ff_vp9_ipred_##t##_##sz##x##sz##_##opt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_vp9_ipred_hd_4x4_ssse3</name></cpp:macro> <cpp:value>ff_vp9_ipred_hd_4x4_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff_vp9_ipred_vl_4x4_ssse3</name></cpp:macro> <cpp:value>ff_vp9_ipred_vl_4x4_mmxext</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_dir_tm_ipred</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { init_ipred(sz, opt, dl, DIAG_DOWN_LEFT); init_ipred(sz, opt, dr, DIAG_DOWN_RIGHT); init_ipred(sz, opt, hd, HOR_DOWN); init_ipred(sz, opt, vl, VERT_LEFT); init_ipred(sz, opt, hu, HOR_UP); init_ipred(sz, opt, tm, TM_VP8); init_ipred(sz, opt, vr, VERT_RIGHT); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_dir_tm_h_ipred</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { init_dir_tm_ipred(sz, opt); init_ipred(sz, opt, h, HOR); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_dc_ipred</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { init_ipred(sz, opt, dc, DC); init_ipred(sz, opt, dc_left, LEFT_DC); init_ipred(sz, opt, dc_top, TOP_DC); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_all_ipred</name><parameter_list>(<parameter><type><name>sz</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { init_dc_ipred(sz, opt); init_dir_tm_h_ipred(sz, opt); } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, , <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, , <argument><expr><name>mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitexact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><literal type="number">4</literal></expr> ]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><literal type="number">4</literal></expr> ]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><literal type="number">4</literal></expr> ]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><literal type="number">4</literal></expr> ]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iwht_iwht_4x4_add_mmx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_ipred</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_vp9_loop_filter_h_4_8_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_vp9_loop_filter_v_4_8_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_vp9_loop_filter_h_8_8_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>loop_filter_8</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_vp9_loop_filter_v_8_8_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel2</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel2</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_4X4</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_4x4_add_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dc_ipred</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dc_ipred</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dir_tm_ipred</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, , <argument><expr><name>sse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, , <argument><expr><name>sse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, , <argument><expr><name>sse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_ipred</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>sse</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_subpel3_8to64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel3_8to64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_lpf</name><argument_list>(<argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_4X4</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_4x4_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_4X4</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_4x4_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_4X4</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_4x4_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_8x8_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_8x8_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_8x8_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_8x8_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_16x16_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_16x16_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_16x16_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_16x16_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_32x32_add_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dc_ipred</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dc_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dir_tm_h_ipred</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dir_tm_h_ipred</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dir_tm_h_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_ipred</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>HOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_4X4</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_4x4_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_4X4</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_4x4_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_4X4</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_4x4_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_4X4</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_4x4_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_8x8_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_8x8_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_8x8_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_8x8_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_16x16_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_16x16_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_16x16_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_16x16_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_32x32_add_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_lpf</name><argument_list>(<argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_all_ipred</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_all_ipred</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_all_ipred</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_all_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_8x8_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_8x8_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_8x8_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_8X8</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_8x8_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_16x16_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_16x16_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_16x16_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_16x16_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_32x32_add_avx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_lpf</name><argument_list>(<argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dir_tm_h_ipred</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dir_tm_h_ipred</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dir_tm_h_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX_FAST</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, , <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, , <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>VERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX2_FAST</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fpel_func</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>_8</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86_64</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_16x16_add_avx2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_iadst_16x16_add_avx2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_idct_16x16_add_avx2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_16X16</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_iadst_iadst_16x16_add_avx2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>ADST_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>ADST_DCT</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>DCT_ADST</name></expr>]</index></name> <operator>=</operator>

<name><name>dsp</name><operator>-&gt;</operator><name>itxfm_add</name><index>[<expr><name>TX_32X32</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name> <operator>=</operator> <name>ff_vp9_idct_idct_32x32_add_avx2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel3_32_64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel3_32_64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_dc_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>HOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_ipred</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>TM_VP8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_fpel</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>init_subpel3</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
