<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\vp9dsp_init_16bpp_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp9dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/x86/vp9dsp_init.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_filters_16bpp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_mc_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avx2</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument>sse2</argument>, <argument>int16_t</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>)</argument_list></macro>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>sse2</argument>, <argument>int16_t</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>)</argument_list></macro>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">64</literal></argument>, <argument>sse2</argument>, <argument>int16_t</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>avx2</argument>, <argument>int16_t</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>)</argument_list></macro>

<macro><name>mc_rep_funcs</name><argument_list>(<argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">64</literal></argument>, <argument>avx2</argument>, <argument>int16_t</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>filters_8tap_2d_fn2</name><argument_list>(<argument>put</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>, <argument><literal type="number">2</literal></argument>, <argument>sse2</argument>, <argument>sse2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn2</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>, <argument><literal type="number">2</literal></argument>, <argument>sse2</argument>, <argument>sse2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>BPC</argument>, <argument><literal type="number">2</literal></argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">64</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>BPC</argument>, <argument><literal type="number">2</literal></argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>BPC</argument>, <argument><literal type="number">2</literal></argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">32</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>BPC</argument>, <argument><literal type="number">2</literal></argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>put</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>BPC</argument>, <argument><literal type="number">2</literal></argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_2d_fn</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">16</literal></argument>, <argument><literal type="number">32</literal></argument>, <argument>BPC</argument>, <argument><literal type="number">2</literal></argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>filters_8tap_1d_fn3</name><argument_list>(<argument>put</argument>, <argument>BPC</argument>, <argument>sse2</argument>, <argument>sse2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn3</name><argument_list>(<argument>avg</argument>, <argument>BPC</argument>, <argument>sse2</argument>, <argument>sse2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>put</argument>, <argument><literal type="number">64</literal></argument>, <argument>BPC</argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">64</literal></argument>, <argument>BPC</argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>put</argument>, <argument><literal type="number">32</literal></argument>, <argument>BPC</argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">32</literal></argument>, <argument>BPC</argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>put</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<macro><name>filters_8tap_1d_fn2</name><argument_list>(<argument>avg</argument>, <argument><literal type="number">16</literal></argument>, <argument>BPC</argument>, <argument>avx2</argument>, <argument><literal type="number">16bpp</literal></argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_lpf_func</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_vp9_loop_filter_##dir##_##wd##_##bpp##_##opt(uint8_t *dst, ptrdiff_t stride, int E, int I, int H)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_lpf_funcs</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decl_lpf_func(dir, wd, bpp, sse2); decl_lpf_func(dir, wd, bpp, ssse3); decl_lpf_func(dir, wd, bpp, avx)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decl_lpf_funcs_wd</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>decl_lpf_funcs(dir, 4, BPC); decl_lpf_funcs(dir, 8, BPC); decl_lpf_funcs(dir, 16, BPC)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>decl_lpf_funcs_wd</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_lpf_funcs_wd</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lpf_16_wrapper</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void loop_filter_##dir##_16_##bpp##_##opt(uint8_t *dst, ptrdiff_t stride, int E, int I, int H) { ff_vp9_loop_filter_##dir##_16_##bpp##_##opt(dst, stride, E, I, H); ff_vp9_loop_filter_##dir##_16_##bpp##_##opt(dst + off, stride, E, I, H); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lpf_16_wrappers</name><parameter_list>(<parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lpf_16_wrapper(h, 8 * stride, bpp, opt) lpf_16_wrapper(v, 16, bpp, opt)</cpp:value></cpp:define>

<macro><name>lpf_16_wrappers</name><argument_list>(<argument>BPC</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>lpf_16_wrappers</name><argument_list>(<argument>BPC</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>lpf_16_wrappers</name><argument_list>(<argument>BPC</argument>, <argument>avx</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lpf_mix2_wrapper</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>wd1</name></type></parameter>, <parameter><type><name>wd2</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void loop_filter_##dir##_##wd1##wd2##_##bpp##_##opt(uint8_t *dst, ptrdiff_t stride, int E, int I, int H) { ff_vp9_loop_filter_##dir##_##wd1##_##bpp##_##opt(dst, stride, E &amp; 0xff, I &amp; 0xff, H &amp; 0xff); ff_vp9_loop_filter_##dir##_##wd2##_##bpp##_##opt(dst + off, stride, E &gt;&gt; 8, I &gt;&gt; 8, H &gt;&gt; 8); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lpf_mix2_wrappers</name><parameter_list>(<parameter><type><name>wd1</name></type></parameter>, <parameter><type><name>wd2</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lpf_mix2_wrapper(h, 8 * stride, wd1, wd2, bpp, opt) lpf_mix2_wrapper(v, 16, wd1, wd2, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lpf_mix2_wrappers_set</name><parameter_list>(<parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lpf_mix2_wrappers(4, 4, bpp, opt) lpf_mix2_wrappers(4, 8, bpp, opt) lpf_mix2_wrappers(8, 4, bpp, opt) lpf_mix2_wrappers(8, 8, bpp, opt)</cpp:value></cpp:define> 

<macro><name>lpf_mix2_wrappers_set</name><argument_list>(<argument>BPC</argument>, <argument>sse2</argument>)</argument_list></macro>

<macro><name>lpf_mix2_wrappers_set</name><argument_list>(<argument>BPC</argument>, <argument>ssse3</argument>)</argument_list></macro>

<macro><name>lpf_mix2_wrappers_set</name><argument_list>(<argument>BPC</argument>, <argument>avx</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>decl_ipred_fns</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_itxfm_func</name><argument_list>(<argument><expr><name>iwht</name></expr></argument>, <argument><expr><name>iwht</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BPC</name> <operator>==</operator> <literal type="number">10</literal></expr></cpp:if>

<expr_stmt><expr><call><name>decl_itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>decl_itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>decl_itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>iadst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_itxfm_func</name><argument_list>(<argument><expr><name>iadst</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_itxfm_func</name><argument_list>(<argument><expr><name>iadst</name></expr></argument>, <argument><expr><name>iadst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_itxfm_funcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decl_itxfm_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>INIT_FUNC</name><parameter_list>(<parameter><decl><type><name>VP9DSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitexact</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_8_func</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;loop_filter_8[idx1][idx2] = ff_vp9_loop_filter_##dir##_##wd##_##bpp##_##opt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_16_func</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;loop_filter_16[idx] = loop_filter_##dir##_16_##bpp##_##opt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_mix2_func</name><parameter_list>(<parameter><type><name>idx1</name></type></parameter>, <parameter><type><name>idx2</name></type></parameter>, <parameter><type><name>idx3</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>wd1</name></type></parameter>, <parameter><type><name>wd2</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;loop_filter_mix2[idx1][idx2][idx3] = loop_filter_##dir##_##wd1##wd2##_##bpp##_##opt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_lpf_funcs</name><parameter_list>(<parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_lpf_8_func(0, 0, h, 4, bpp, opt); init_lpf_8_func(0, 1, v, 4, bpp, opt); init_lpf_8_func(1, 0, h, 8, bpp, opt); init_lpf_8_func(1, 1, v, 8, bpp, opt); init_lpf_8_func(2, 0, h, 16, bpp, opt); init_lpf_8_func(2, 1, v, 16, bpp, opt); init_lpf_16_func(0, h, bpp, opt); init_lpf_16_func(1, v, bpp, opt); init_lpf_mix2_func(0, 0, 0, h, 4, 4, bpp, opt); init_lpf_mix2_func(0, 1, 0, h, 4, 8, bpp, opt); init_lpf_mix2_func(1, 0, 0, h, 8, 4, bpp, opt); init_lpf_mix2_func(1, 1, 0, h, 8, 8, bpp, opt); init_lpf_mix2_func(0, 0, 1, v, 4, 4, bpp, opt); init_lpf_mix2_func(0, 1, 1, v, 4, 8, bpp, opt); init_lpf_mix2_func(1, 0, 1, v, 8, 4, bpp, opt); init_lpf_mix2_func(1, 1, 1, v, 8, 8, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_itx_func</name><parameter_list>(<parameter><type><name>idxa</name></type></parameter>, <parameter><type><name>idxb</name></type></parameter>, <parameter><type><name>typea</name></type></parameter>, <parameter><type><name>typeb</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dsp-&gt;itxfm_add[idxa][idxb] = cat(ff_vp9_##typea##_##typeb##_##size##x##size##_add_, bpp, _##opt);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_itx_func_one</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>typea</name></type></parameter>, <parameter><type><name>typeb</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_itx_func(idx, DCT_DCT, typea, typeb, size, bpp, opt); init_itx_func(idx, ADST_DCT, typea, typeb, size, bpp, opt); init_itx_func(idx, DCT_ADST, typea, typeb, size, bpp, opt); init_itx_func(idx, ADST_ADST, typea, typeb, size, bpp, opt)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_itx_funcs</name><parameter_list>(<parameter><type><name>idx</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bpp</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>init_itx_func(idx, DCT_DCT, idct, idct, size, bpp, opt); init_itx_func(idx, ADST_DCT, idct, iadst, size, bpp, opt); init_itx_func(idx, DCT_ADST, iadst, idct, size, bpp, opt); init_itx_func(idx, ADST_ADST, iadst, iadst, size, bpp, opt);</cpp:value></cpp:define> 

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_ipred_func</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>TM_VP8</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitexact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_itx_func_one</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument> , <argument><expr><name>iwht</name></expr></argument>, <argument><expr><name>iwht</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BPC</name> <operator>==</operator> <literal type="number">10</literal></expr></cpp:if>

<expr_stmt><expr><call><name>init_itx_func</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><name>DCT_DCT</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>mmxext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_lpf_funcs</name><argument_list>(<argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_8_16_32_ipred_funcs</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>TM_VP8</name></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BPC</name> <operator>==</operator> <literal type="number">10</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitexact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_itx_func</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><name>ADST_DCT</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><name>iadst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_itx_func</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><name>DCT_ADST</name></expr></argument>, <argument><expr><name>iadst</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_itx_func</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><name>ADST_ADST</name></expr></argument>, <argument><expr><name>iadst</name></expr></argument>, <argument><expr><name>iadst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>init_itx_funcs</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>init_itx_funcs</name><argument_list>(<argument><expr><name>TX_8X8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_itx_funcs</name><argument_list>(<argument><expr><name>TX_16X16</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_itx_func_one</name><argument_list>(<argument><expr><name>TX_32X32</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_lpf_funcs</name><argument_list>(<argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BPC</name> <operator>==</operator> <literal type="number">10</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitexact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_itx_funcs</name><argument_list>(<argument><expr><name>TX_4X4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>ssse3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>init_lpf_funcs</name><argument_list>(<argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>avx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX2_FAST</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<expr_stmt><expr><call><name>init_subpel3_32_64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel3_32_64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>put</name></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_subpel2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>avg</name></expr></argument>, <argument><expr><name>BPC</name></expr></argument>, <argument><expr><name>avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>ff_vp9dsp_init_16bpp_x86</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
