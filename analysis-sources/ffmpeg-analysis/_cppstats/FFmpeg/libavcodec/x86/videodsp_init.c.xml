<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\videodsp_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/videodsp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<typedef>typedef <function_decl><type><name>void</name></type> <name>emu_edge_vfix_func</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>x86_reg</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>end_y</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>bh</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>emu_edge_vvar_func</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>x86_reg</name></type> <name>start_y</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>end_y</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>bh</name></decl></parameter>,

<parameter><decl><type><name>x86_reg</name></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix1_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix2_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix3_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix4_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix5_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix6_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix7_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix8_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix9_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix10_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix11_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix12_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix13_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix14_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix15_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix16_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix17_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix18_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix19_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix20_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix21_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix22_mmx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>emu_edge_vfix_func</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>vfixtbl_mmx</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>ff_emu_edge_vfix1_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix2_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix3_mmx</name></expr>,

<expr><operator>&amp;</operator><name>ff_emu_edge_vfix4_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix5_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix6_mmx</name></expr>,

<expr><operator>&amp;</operator><name>ff_emu_edge_vfix7_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix8_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix9_mmx</name></expr>,

<expr><operator>&amp;</operator><name>ff_emu_edge_vfix10_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix11_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix12_mmx</name></expr>,

<expr><operator>&amp;</operator><name>ff_emu_edge_vfix13_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix14_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix15_mmx</name></expr>,

<expr><operator>&amp;</operator><name>ff_emu_edge_vfix16_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix17_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix18_mmx</name></expr>,

<expr><operator>&amp;</operator><name>ff_emu_edge_vfix19_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix20_mmx</name></expr>, <expr><operator>&amp;</operator><name>ff_emu_edge_vfix21_mmx</name></expr>,

<expr><operator>&amp;</operator><name>ff_emu_edge_vfix22_mmx</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vvar_func</name></type> <name>ff_emu_edge_vvar_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix16_sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix17_sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix18_sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix19_sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix20_sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix21_sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vfix_func</name></type> <name>ff_emu_edge_vfix22_sse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>emu_edge_vfix_func</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>vfixtbl_sse</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>ff_emu_edge_vfix1_mmx</name></expr>, <expr><name>ff_emu_edge_vfix2_mmx</name></expr>, <expr><name>ff_emu_edge_vfix3_mmx</name></expr>,

<expr><name>ff_emu_edge_vfix4_mmx</name></expr>, <expr><name>ff_emu_edge_vfix5_mmx</name></expr>, <expr><name>ff_emu_edge_vfix6_mmx</name></expr>,

<expr><name>ff_emu_edge_vfix7_mmx</name></expr>, <expr><name>ff_emu_edge_vfix8_mmx</name></expr>, <expr><name>ff_emu_edge_vfix9_mmx</name></expr>,

<expr><name>ff_emu_edge_vfix10_mmx</name></expr>, <expr><name>ff_emu_edge_vfix11_mmx</name></expr>, <expr><name>ff_emu_edge_vfix12_mmx</name></expr>,

<expr><name>ff_emu_edge_vfix13_mmx</name></expr>, <expr><name>ff_emu_edge_vfix14_mmx</name></expr>, <expr><name>ff_emu_edge_vfix15_mmx</name></expr>,

<expr><name>ff_emu_edge_vfix16_sse</name></expr>, <expr><name>ff_emu_edge_vfix17_sse</name></expr>, <expr><name>ff_emu_edge_vfix18_sse</name></expr>,

<expr><name>ff_emu_edge_vfix19_sse</name></expr>, <expr><name>ff_emu_edge_vfix20_sse</name></expr>, <expr><name>ff_emu_edge_vfix21_sse</name></expr>,

<expr><name>ff_emu_edge_vfix22_sse</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_vvar_func</name></type> <name>ff_emu_edge_vvar_sse</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> <name>emu_edge_hfix_func</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>x86_reg</name></type> <name>start_x</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>bh</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>emu_edge_hvar_func</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>x86_reg</name></type> <name>start_x</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>n_words</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>bh</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix2_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix4_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix6_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix8_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix10_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix12_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix14_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix16_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix18_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix20_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix22_mmx</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>emu_edge_hfix_func</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>hfixtbl_mmx</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>ff_emu_edge_hfix2_mmx</name></expr>, <expr><name>ff_emu_edge_hfix4_mmx</name></expr>, <expr><name>ff_emu_edge_hfix6_mmx</name></expr>,

<expr><name>ff_emu_edge_hfix8_mmx</name></expr>, <expr><name>ff_emu_edge_hfix10_mmx</name></expr>, <expr><name>ff_emu_edge_hfix12_mmx</name></expr>,

<expr><name>ff_emu_edge_hfix14_mmx</name></expr>, <expr><name>ff_emu_edge_hfix16_mmx</name></expr>, <expr><name>ff_emu_edge_hfix18_mmx</name></expr>,

<expr><name>ff_emu_edge_hfix20_mmx</name></expr>, <expr><name>ff_emu_edge_hfix22_mmx</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hvar_func</name></type> <name>ff_emu_edge_hvar_mmx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix16_sse2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix18_sse2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix20_sse2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix22_sse2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>emu_edge_hfix_func</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>hfixtbl_sse2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>ff_emu_edge_hfix2_mmx</name></expr>, <expr><name>ff_emu_edge_hfix4_mmx</name></expr>, <expr><name>ff_emu_edge_hfix6_mmx</name></expr>,

<expr><name>ff_emu_edge_hfix8_mmx</name></expr>, <expr><name>ff_emu_edge_hfix10_mmx</name></expr>, <expr><name>ff_emu_edge_hfix12_mmx</name></expr>,

<expr><name>ff_emu_edge_hfix14_mmx</name></expr>, <expr><name>ff_emu_edge_hfix16_sse2</name></expr>, <expr><name>ff_emu_edge_hfix18_sse2</name></expr>,

<expr><name>ff_emu_edge_hfix20_sse2</name></expr>, <expr><name>ff_emu_edge_hfix22_sse2</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hvar_func</name></type> <name>ff_emu_edge_hvar_sse2</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix8_avx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix10_avx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix12_avx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix14_avx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix16_avx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix18_avx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix20_avx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hfix_func</name></type> <name>ff_emu_edge_hfix22_avx2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>emu_edge_hfix_func</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>hfixtbl_avx2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>ff_emu_edge_hfix2_mmx</name></expr>, <expr><name>ff_emu_edge_hfix4_mmx</name></expr>, <expr><name>ff_emu_edge_hfix6_mmx</name></expr>,

<expr><name>ff_emu_edge_hfix8_avx2</name></expr>, <expr><name>ff_emu_edge_hfix10_avx2</name></expr>, <expr><name>ff_emu_edge_hfix12_avx2</name></expr>,

<expr><name>ff_emu_edge_hfix14_avx2</name></expr>, <expr><name>ff_emu_edge_hfix16_avx2</name></expr>, <expr><name>ff_emu_edge_hfix18_avx2</name></expr>,

<expr><name>ff_emu_edge_hfix20_avx2</name></expr>, <expr><name>ff_emu_edge_hfix22_avx2</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>emu_edge_hvar_func</name></type> <name>ff_emu_edge_hvar_avx2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>emulated_edge_mc</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>dst_stride</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>x86_reg</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>block_h</name></decl></parameter>,

<parameter><decl><type><name>x86_reg</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>src_y</name></decl></parameter>,

<parameter><decl><type><name>x86_reg</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>emu_edge_vfix_func</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>vfix_tbl</name></decl></parameter>,

<parameter><decl><type><name>emu_edge_vvar_func</name> <modifier>*</modifier></type><name>v_extend_var</name></decl></parameter>,

<parameter><decl><type><name>emu_edge_hfix_func</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>hfix_tbl</name></decl></parameter>,

<parameter><decl><type><name>emu_edge_hvar_func</name> <modifier>*</modifier></type><name>h_extend_var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>x86_reg</name></type> <name>start_y</name></decl>, <decl><type ref="prev"/><name>start_x</name></decl>, <decl><type ref="prev"/><name>end_y</name></decl>, <decl><type ref="prev"/><name>end_x</name></decl>, <decl><type ref="prev"/><name>src_y_add</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name> <operator>||</operator> <operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>block_w</name> <operator>&lt;=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>dst_stride</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>&gt;=</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>src_y</name><operator>*</operator><name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y_add</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_y</name> <operator>&lt;=</operator> <operator>-</operator><name>block_h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>src_y</name><operator>*</operator><name>src_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y_add</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>block_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>block_h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>&gt;=</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_x</name> <operator>&lt;=</operator> <operator>-</operator><name>block_w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">1</literal> <operator>-</operator> <name>block_w</name> <operator>-</operator> <name>src_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>block_w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>src_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>src_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>block_h</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><name>src_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><name>src_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>start_x</name> <argument_list type="generic">&lt; <argument><expr><name>end_x</name> <operator>&amp;&amp;</operator> <name>block_w</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>start_y</name> <argument_list type="generic">&lt; <argument><expr><name>end_y</name> <operator>&amp;&amp;</operator> <name>block_h</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>src_y_add</name> <operator>+</operator> <name>start_y</name><operator>)</operator> <operator>*</operator> <name>src_stride</name> <operator>+</operator> <name>start_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>end_x</name> <operator>-</operator> <name>start_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vfix_tbl</name><index>[<expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>dst</name> <operator>+</operator> <name>start_x</name><operator>,</operator> <name>dst_stride</name><operator>,</operator> <name>src</name><operator>,</operator> <name>src_stride</name><operator>,</operator>

<name>start_y</name><operator>,</operator> <name>end_y</name><operator>,</operator> <name>block_h</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>v_extend_var</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>start_x</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>,

<argument><expr><name>start_y</name></expr></argument>, <argument><expr><name>end_y</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_x</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>start_x</name> <operator>&lt;=</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hfix_tbl</name><index>[<expr><operator>(</operator><name>start_x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>dst_stride</name><operator>,</operator> <name>start_x</name><operator>,</operator> <name>block_h</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>h_extend_var</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>,

<argument><expr><name>start_x</name></expr></argument>, <argument><expr><operator>(</operator><name>start_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>block_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>block_w</name> <operator>-</operator> <name>end_x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;=</operator> <literal type="number">22</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hfix_tbl</name><index>[<expr><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>dst</name> <operator>+</operator> <name>end_x</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>,</operator> <name>dst_stride</name><operator>,</operator>

<operator>-</operator><operator>!</operator><operator>(</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>,</operator> <name>block_h</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>h_extend_var</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>end_x</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>,

<argument><expr><operator>-</operator><operator>!</operator><operator>(</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>block_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_noinline</name> <name>void</name></type> <name>emulated_edge_mc_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>buf_stride</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emulated_edge_mc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>vfixtbl_mmx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_emu_edge_vvar_mmx</name></expr></argument>,

<argument><expr><name>hfixtbl_mmx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_emu_edge_hvar_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_noinline</name> <name>void</name></type> <name>emulated_edge_mc_sse</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>buf_stride</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emulated_edge_mc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>vfixtbl_sse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_emu_edge_vvar_sse</name></expr></argument>,

<argument><expr><name>hfixtbl_mmx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_emu_edge_hvar_mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_noinline</name> <name>void</name></type> <name>emulated_edge_mc_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>buf_stride</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emulated_edge_mc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>vfixtbl_sse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_emu_edge_vvar_sse</name></expr></argument>,

<argument><expr><name>hfixtbl_sse2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_emu_edge_hvar_sse2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_noinline</name> <name>void</name></type> <name>emulated_edge_mc_avx2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>buf_stride</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emulated_edge_mc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>buf_stride</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>block_h</name></expr></argument>,

<argument><expr><name>src_x</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>vfixtbl_sse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_emu_edge_vvar_sse</name></expr></argument>,

<argument><expr><name>hfixtbl_avx2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_emu_edge_hvar_avx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function_decl><type><name>void</name></type> <name>ff_prefetch_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_prefetch_3dnow</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_videodsp_init_x86</name><parameter_list>(<parameter><decl><type><name>VideoDSPContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bpc</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name> <operator>=</operator> <name>emulated_edge_mc_mmx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AMD3DNOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prefetch</name></name> <operator>=</operator> <name>ff_prefetch_3dnow</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prefetch</name></name> <operator>=</operator> <name>ff_prefetch_mmxext</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bpc</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name> <operator>=</operator> <name>emulated_edge_mc_sse</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bpc</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name> <operator>=</operator> <name>emulated_edge_mc_sse2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX2_EXTERNAL</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AVX2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>bpc</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>emulated_edge_mc</name></name> <operator>=</operator> <name>emulated_edge_mc_avx2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
