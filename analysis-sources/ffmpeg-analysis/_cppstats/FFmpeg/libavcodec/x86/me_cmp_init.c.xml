<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\me_cmp_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/me_cmp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegvideo.h"</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>ff_sum_abs_dctelem_mmx</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sum_abs_dctelem_mmxext</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sum_abs_dctelem_sse2</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sum_abs_dctelem_ssse3</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sse8_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sse16_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sse16_sse2</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hf_noise8_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hf_noise16_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad8_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad16_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad16_sse2</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad8_x2_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad16_x2_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad16_x2_sse2</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad8_y2_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad16_y2_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad16_y2_sse2</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad8_approx_xy2_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad16_approx_xy2_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_sad16_approx_xy2_sse2</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vsad_intra8_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vsad_intra16_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vsad_intra16_sse2</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vsad8_approx_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vsad16_approx_mmxext</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vsad16_approx_sse2</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hadamard_func</name><parameter_list>(<parameter><type><name>cpu</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int ff_hadamard8_diff_ ##cpu(MpegEncContext *s, uint8_t *src1, uint8_t *src2, ptrdiff_t stride, int h); int ff_hadamard8_diff16_ ##cpu(MpegEncContext *s, uint8_t *src1, uint8_t *src2, ptrdiff_t stride, int h);</cpp:value></cpp:define>

<macro><name>hadamard_func</name><argument_list>(<argument>mmx</argument>)</argument_list></macro>

<macro><name>hadamard_func</name><argument_list>(<argument>mmxext</argument>)</argument_list></macro>

<macro><name>hadamard_func</name><argument_list>(<argument>sse2</argument>)</argument_list></macro>

<macro><name>hadamard_func</name><argument_list>(<argument>ssse3</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsse16_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score1</name></decl>, <decl><type ref="prev"/><name>score2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>score1</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mecc</name><operator>.</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>c</name><operator>,</operator> <name>pix1</name><operator>,</operator> <name>pix2</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>score1</name> <operator>=</operator> <call><name>ff_sse16_mmx</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>score2</name> <operator>=</operator> <call><name>ff_hf_noise16_mmx</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ff_hf_noise8_mmx</name><argument_list>(<argument><expr><name>pix1</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call>

<operator>-</operator> <call><name>ff_hf_noise16_mmx</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ff_hf_noise8_mmx</name><argument_list>(<argument><expr><name>pix2</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>score1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>score2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>nsse_weight</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>score1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>score2</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nsse8_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>score1</name> <init>= <expr><call><name>ff_sse8_mmx</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score2</name> <init>= <expr><call><name>ff_hf_noise8_mmx</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>-</operator>

<call><name>ff_hf_noise8_mmx</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>score1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>score2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>nsse_weight</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>score1</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>score2</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vsad_intra16_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>pix</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>stride</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUM</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq (%0), %%mm2\n" "movq 8(%0), %%mm3\n" "add %2,%0\n" "movq %%mm2, " #out0 "\n" "movq %%mm3, " #out1 "\n" "psubusb " #in0 ", %%mm2\n" "psubusb " #in1 ", %%mm3\n" "psubusb " #out0 ", " #in0 "\n" "psubusb " #out1 ", " #in1 "\n" "por %%mm2, " #in0 "\n" "por %%mm3, " #in1 "\n" "movq " #in0 ", %%mm2\n" "movq " #in1 ", %%mm3\n" "punpcklbw %%mm7, " #in0 "\n" "punpcklbw %%mm7, " #in1 "\n" "punpckhbw %%mm7, %%mm2\n" "punpckhbw %%mm7, %%mm3\n" "paddw " #in1 ", " #in0 "\n" "paddw %%mm3, %%mm2\n" "paddw %%mm2, " #in0 "\n" "paddw " #in0 ", %%mm6\n"</cpp:value></cpp:define>

<asm>__asm__ <specifier>volatile</specifier> (

"movl %3, %%ecx\n"

"pxor %%mm6, %%mm6\n"

"pxor %%mm7, %%mm7\n"

"movq (%0), %%mm0\n"

"movq 8(%0), %%mm1\n"

"add %2, %0\n"

"jmp 2f\n"

"1:\n"

SUM(%%mm4, %%mm5, %%mm0, %%mm1)

"2:\n"

SUM(%%mm0, %%mm1, %%mm4, %%mm5)

"subl $2, %%ecx\n"

"jnz 1b\n"

"movq %%mm6, %%mm0\n"

"psrlq $32, %%mm6\n"

"paddw %%mm6, %%mm0\n"

"movq %%mm0, %%mm6\n"

"psrlq $16, %%mm0\n"

"paddw %%mm6, %%mm0\n"

"movd %%mm0, %1\n"

: "+r" (pix), "=r" (tmp)

: "r" (stride), "m" (h)

: "%ecx");</asm>

<return>return <expr><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SUM</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vsad16_mmx</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>pix1</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>pix2</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>stride</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUM</name><parameter_list>(<parameter><type><name>in0</name></type></parameter>, <parameter><type><name>in1</name></type></parameter>, <parameter><type><name>out0</name></type></parameter>, <parameter><type><name>out1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"movq (%0), %%mm2\n" "movq (%1), " #out0 "\n" "movq 8(%0), %%mm3\n" "movq 8(%1), " #out1 "\n" "add %3, %0\n" "add %3, %1\n" "psubb " #out0 ", %%mm2\n" "psubb " #out1 ", %%mm3\n" "pxor %%mm7, %%mm2\n" "pxor %%mm7, %%mm3\n" "movq %%mm2, " #out0 "\n" "movq %%mm3, " #out1 "\n" "psubusb " #in0 ", %%mm2\n" "psubusb " #in1 ", %%mm3\n" "psubusb " #out0 ", " #in0 "\n" "psubusb " #out1 ", " #in1 "\n" "por %%mm2, " #in0 "\n" "por %%mm3, " #in1 "\n" "movq " #in0 ", %%mm2\n" "movq " #in1 ", %%mm3\n" "punpcklbw %%mm7, " #in0 "\n" "punpcklbw %%mm7, " #in1 "\n" "punpckhbw %%mm7, %%mm2\n" "punpckhbw %%mm7, %%mm3\n" "paddw " #in1 ", " #in0 "\n" "paddw %%mm3, %%mm2\n" "paddw %%mm2, " #in0 "\n" "paddw " #in0 ", %%mm6\n"</cpp:value></cpp:define>

<asm>__asm__ <specifier>volatile</specifier> (

"movl %4, %%ecx\n"

"pxor %%mm6, %%mm6\n"

"pcmpeqw %%mm7, %%mm7\n"

"psllw $15, %%mm7\n"

"packsswb %%mm7, %%mm7\n"

"movq (%0), %%mm0\n"

"movq (%1), %%mm2\n"

"movq 8(%0), %%mm1\n"

"movq 8(%1), %%mm3\n"

"add %3, %0\n"

"add %3, %1\n"

"psubb %%mm2, %%mm0\n"

"psubb %%mm3, %%mm1\n"

"pxor %%mm7, %%mm0\n"

"pxor %%mm7, %%mm1\n"

"jmp 2f\n"

"1:\n"

SUM(%%mm4, %%mm5, %%mm0, %%mm1)

"2:\n"

SUM(%%mm0, %%mm1, %%mm4, %%mm5)

"subl $2, %%ecx\n"

"jnz 1b\n"

"movq %%mm6, %%mm0\n"

"psrlq $32, %%mm6\n"

"paddw %%mm6, %%mm0\n"

"movq %%mm0, %%mm6\n"

"psrlq $16, %%mm0\n"

"paddw %%mm6, %%mm0\n"

"movd %%mm0, %2\n"

: "+r" (pix1), "+r" (pix2), "=r" (tmp)

: "r" (stride), "m" (h)

: "%ecx");</asm>

<return>return <expr><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SUM</name></cpp:undef>

<expr_stmt><expr><call><name>DECLARE_ASM_CONST</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>round_tab</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <block>{

<expr><literal type="number">0x0000000000000000ULL</literal></expr>,

<expr><literal type="number">0x0001000100010001ULL</literal></expr>,

<expr><literal type="number">0x0002000200020002ULL</literal></expr>,

}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sad8_1_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>x86_reg</name></type> <name>len</name> <init>= <expr><operator>-</operator><name>stride</name> <operator>*</operator> <name>h</name></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

".p2align 4 \n\t"

"1: \n\t"

"movq (%1, %%"FF_REG_a"), %%mm0 \n\t"

"movq (%2, %%"FF_REG_a"), %%mm2 \n\t"

"movq (%2, %%"FF_REG_a"), %%mm4 \n\t"

"add %3, %%"FF_REG_a" \n\t"

"psubusb %%mm0, %%mm2 \n\t"

"psubusb %%mm4, %%mm0 \n\t"

"movq (%1, %%"FF_REG_a"), %%mm1 \n\t"

"movq (%2, %%"FF_REG_a"), %%mm3 \n\t"

"movq (%2, %%"FF_REG_a"), %%mm5 \n\t"

"psubusb %%mm1, %%mm3 \n\t"

"psubusb %%mm5, %%mm1 \n\t"

"por %%mm2, %%mm0 \n\t"

"por %%mm1, %%mm3 \n\t"

"movq %%mm0, %%mm1 \n\t"

"movq %%mm3, %%mm2 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t"

"punpckhbw %%mm7, %%mm1 \n\t"

"punpcklbw %%mm7, %%mm3 \n\t"

"punpckhbw %%mm7, %%mm2 \n\t"

"paddw %%mm1, %%mm0 \n\t"

"paddw %%mm3, %%mm2 \n\t"

"paddw %%mm2, %%mm0 \n\t"

"paddw %%mm0, %%mm6 \n\t"

"add %3, %%"FF_REG_a" \n\t"

" js 1b \n\t"

: "+a" (len)

: "r" (blk1 - len), "r" (blk2 - len), "r" (stride));</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sad8_2_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk1a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk1b</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>x86_reg</name></type> <name>len</name> <init>= <expr><operator>-</operator><name>stride</name> <operator>*</operator> <name>h</name></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

".p2align 4 \n\t"

"1: \n\t"

"movq (%1, %%"FF_REG_a"), %%mm0 \n\t"

"movq (%2, %%"FF_REG_a"), %%mm1 \n\t"

"movq (%1, %%"FF_REG_a"), %%mm2 \n\t"

"movq (%2, %%"FF_REG_a"), %%mm3 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t"

"punpcklbw %%mm7, %%mm1 \n\t"

"punpckhbw %%mm7, %%mm2 \n\t"

"punpckhbw %%mm7, %%mm3 \n\t"

"paddw %%mm0, %%mm1 \n\t"

"paddw %%mm2, %%mm3 \n\t"

"movq (%3, %%"FF_REG_a"), %%mm4 \n\t"

"movq (%3, %%"FF_REG_a"), %%mm2 \n\t"

"paddw %%mm5, %%mm1 \n\t"

"paddw %%mm5, %%mm3 \n\t"

"psrlw $1, %%mm1 \n\t"

"psrlw $1, %%mm3 \n\t"

"packuswb %%mm3, %%mm1 \n\t"

"psubusb %%mm1, %%mm4 \n\t"

"psubusb %%mm2, %%mm1 \n\t"

"por %%mm4, %%mm1 \n\t"

"movq %%mm1, %%mm0 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t"

"punpckhbw %%mm7, %%mm1 \n\t"

"paddw %%mm1, %%mm0 \n\t"

"paddw %%mm0, %%mm6 \n\t"

"add %4, %%"FF_REG_a" \n\t"

" js 1b \n\t"

: "+a" (len)

: "r" (blk1a - len), "r" (blk1b - len), "r" (blk2 - len),

"r" (stride));</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sad8_4_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>x86_reg</name></type> <name>len</name> <init>= <expr><operator>-</operator><name>stride</name> <operator>*</operator> <name>h</name></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"movq (%1, %%"FF_REG_a"), %%mm0\n\t"

"movq 1(%1, %%"FF_REG_a"), %%mm2\n\t"

"movq %%mm0, %%mm1 \n\t"

"movq %%mm2, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t"

"punpckhbw %%mm7, %%mm1 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t"

"punpckhbw %%mm7, %%mm3 \n\t"

"paddw %%mm2, %%mm0 \n\t"

"paddw %%mm3, %%mm1 \n\t"

".p2align 4 \n\t"

"1: \n\t"

"movq (%2, %%"FF_REG_a"), %%mm2\n\t"

"movq 1(%2, %%"FF_REG_a"), %%mm4\n\t"

"movq %%mm2, %%mm3 \n\t"

"movq %%mm4, %%mm5 \n\t"

"punpcklbw %%mm7, %%mm2 \n\t"

"punpckhbw %%mm7, %%mm3 \n\t"

"punpcklbw %%mm7, %%mm4 \n\t"

"punpckhbw %%mm7, %%mm5 \n\t"

"paddw %%mm4, %%mm2 \n\t"

"paddw %%mm5, %%mm3 \n\t"

"movq %5, %%mm5 \n\t"

"paddw %%mm2, %%mm0 \n\t"

"paddw %%mm3, %%mm1 \n\t"

"paddw %%mm5, %%mm0 \n\t"

"paddw %%mm5, %%mm1 \n\t"

"movq (%3, %%"FF_REG_a"), %%mm4 \n\t"

"movq (%3, %%"FF_REG_a"), %%mm5 \n\t"

"psrlw $2, %%mm0 \n\t"

"psrlw $2, %%mm1 \n\t"

"packuswb %%mm1, %%mm0 \n\t"

"psubusb %%mm0, %%mm4 \n\t"

"psubusb %%mm5, %%mm0 \n\t"

"por %%mm4, %%mm0 \n\t"

"movq %%mm0, %%mm4 \n\t"

"punpcklbw %%mm7, %%mm0 \n\t"

"punpckhbw %%mm7, %%mm4 \n\t"

"paddw %%mm0, %%mm6 \n\t"

"paddw %%mm4, %%mm6 \n\t"

"movq %%mm2, %%mm0 \n\t"

"movq %%mm3, %%mm1 \n\t"

"add %4, %%"FF_REG_a" \n\t"

" js 1b \n\t"

: "+a" (len)

: "r" (blk1 - len), "r" (blk1 - len + stride), "r" (blk2 - len),

"r" (stride), "m" (round_tab[2]));</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>sum_mmx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"movq %%mm6, %%mm0 \n\t"

"psrlq $32, %%mm6 \n\t"

"paddw %%mm0, %%mm6 \n\t"

"movq %%mm6, %%mm0 \n\t"

"psrlq $16, %%mm6 \n\t"

"paddw %%mm0, %%mm6 \n\t"

"movd %%mm6, %0 \n\t"

: "=r" (ret));</asm>

<return>return <expr><name>ret</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sad8_x2a_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sad8_2_mmx</name><argument_list>(<argument><expr><name>blk1</name></expr></argument>, <argument><expr><name>blk1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>blk2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sad8_y2a_mmx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>blk2</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sad8_2_mmx</name><argument_list>(<argument><expr><name>blk1</name></expr></argument>, <argument><expr><name>blk1</name> <operator>+</operator> <name>stride</name></expr></argument>, <argument><expr><name>blk2</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIX_SAD</name><parameter_list>(<parameter><type><name>suf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int sad8_ ##suf(MpegEncContext *v, uint8_t *blk2, uint8_t *blk1, ptrdiff_t stride, int h) { av_assert2(h == 8); __asm__ volatile ( "pxor %%mm7, %%mm7 \n\t" "pxor %%mm6, %%mm6 \n\t" :); sad8_1_ ##suf(blk1, blk2, stride, 8); return sum_ ##suf(); } static int sad8_x2_ ##suf(MpegEncContext *v, uint8_t *blk2, uint8_t *blk1, ptrdiff_t stride, int h) { av_assert2(h == 8); __asm__ volatile ( "pxor %%mm7, %%mm7 \n\t" "pxor %%mm6, %%mm6 \n\t" "movq %0, %%mm5 \n\t" :: "m" (round_tab[1])); sad8_x2a_ ##suf(blk1, blk2, stride, 8); return sum_ ##suf(); } static int sad8_y2_ ##suf(MpegEncContext *v, uint8_t *blk2, uint8_t *blk1, ptrdiff_t stride, int h) { av_assert2(h == 8); __asm__ volatile ( "pxor %%mm7, %%mm7 \n\t" "pxor %%mm6, %%mm6 \n\t" "movq %0, %%mm5 \n\t" :: "m" (round_tab[1])); sad8_y2a_ ##suf(blk1, blk2, stride, 8); return sum_ ##suf(); } static int sad8_xy2_ ##suf(MpegEncContext *v, uint8_t *blk2, uint8_t *blk1, ptrdiff_t stride, int h) { av_assert2(h == 8); __asm__ volatile ( "pxor %%mm7, %%mm7 \n\t" "pxor %%mm6, %%mm6 \n\t" ::); sad8_4_ ##suf(blk1, blk2, stride, 8); return sum_ ##suf(); } static int sad16_ ##suf(MpegEncContext *v, uint8_t *blk2, uint8_t *blk1, ptrdiff_t stride, int h) { __asm__ volatile ( "pxor %%mm7, %%mm7 \n\t" "pxor %%mm6, %%mm6 \n\t" :); sad8_1_ ##suf(blk1, blk2, stride, h); sad8_1_ ##suf(blk1 + 8, blk2 + 8, stride, h); return sum_ ##suf(); } static int sad16_x2_ ##suf(MpegEncContext *v, uint8_t *blk2, uint8_t *blk1, ptrdiff_t stride, int h) { __asm__ volatile ( "pxor %%mm7, %%mm7 \n\t" "pxor %%mm6, %%mm6 \n\t" "movq %0, %%mm5 \n\t" :: "m" (round_tab[1])); sad8_x2a_ ##suf(blk1, blk2, stride, h); sad8_x2a_ ##suf(blk1 + 8, blk2 + 8, stride, h); return sum_ ##suf(); } static int sad16_y2_ ##suf(MpegEncContext *v, uint8_t *blk2, uint8_t *blk1, ptrdiff_t stride, int h) { __asm__ volatile ( "pxor %%mm7, %%mm7 \n\t" "pxor %%mm6, %%mm6 \n\t" "movq %0, %%mm5 \n\t" :: "m" (round_tab[1])); sad8_y2a_ ##suf(blk1, blk2, stride, h); sad8_y2a_ ##suf(blk1 + 8, blk2 + 8, stride, h); return sum_ ##suf(); } static int sad16_xy2_ ##suf(MpegEncContext *v, uint8_t *blk2, uint8_t *blk1, ptrdiff_t stride, int h) { __asm__ volatile ( "pxor %%mm7, %%mm7 \n\t" "pxor %%mm6, %%mm6 \n\t" ::); sad8_4_ ##suf(blk1, blk2, stride, h); sad8_4_ ##suf(blk1 + 8, blk2 + 8, stride, h); return sum_ ##suf(); }</cpp:value></cpp:define> 

<macro><name>PIX_SAD</name><argument_list>(<argument>mmx</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_me_cmp_init_x86</name><parameter_list>(<parameter><decl><type><name>MECmpContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sad16_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sad16_x2_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>sad16_y2_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>sad16_xy2_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sad8_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sad8_x2_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>sad8_y2_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>sad8_xy2_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sad16_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sad8_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>vsad_intra16_mmx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vsad16_mmx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_hadamard8_diff16_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_hadamard8_diff_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sum_abs_dctelem</name></name> <operator>=</operator> <name>ff_sum_abs_dctelem_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_sse16_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_sse8_mmx</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nsse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nsse16_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nsse</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nsse8_mmx</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_hadamard8_diff16_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_hadamard8_diff_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sum_abs_dctelem</name></name> <operator>=</operator> <name>ff_sum_abs_dctelem_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad8_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_x2_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_y2_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad8_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad8_x2_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad8_y2_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>ff_vsad_intra16_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>ff_vsad_intra8_mmxext</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_approx_xy2_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad8_approx_xy2_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_vsad16_approx_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_vsad8_approx_mmxext</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sse</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_sse16_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sum_abs_dctelem</name></name> <operator>=</operator> <name>ff_sum_abs_dctelem_sse2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALIGNED_STACK</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_hadamard8_diff16_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_hadamard8_diff_sse2</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE2SLOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name>AV_CODEC_ID_SNOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_x2_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_y2_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>ff_vsad_intra16_sse2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ff_sad16_approx_xy2_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vsad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_vsad16_approx_sse2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sum_abs_dctelem</name></name> <operator>=</operator> <name>ff_sum_abs_dctelem_ssse3</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ALIGNED_STACK</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ff_hadamard8_diff16_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hadamard8_diff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ff_hadamard8_diff_ssse3</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
