<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\mlpdsp_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mlpdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mlp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMATRIX_CHANNEL_FUNC</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_mlp_rematrix_channel_##opt(int32_t *samples, const int32_t *coeffs, const uint8_t *bypassed_lsbs, const int8_t *noise_buffer, int index, unsigned int dest_ch, uint16_t blockpos, unsigned int maxchan, int matrix_noise_shift, int access_unit_size_pow2, int32_t mask);</cpp:value></cpp:define>

<macro><name>REMATRIX_CHANNEL_FUNC</name><argument_list>(<argument>sse4</argument>)</argument_list></macro>

<macro><name>REMATRIX_CHANNEL_FUNC</name><argument_list>(<argument>avx2_bmi2</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM_NONLOCAL_LABELS</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_6</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_5</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_firorder_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_iirorder_4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_iirorder_3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_iirorder_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_iirorder_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>ff_mlp_iirorder_0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>firtable</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>ff_mlp_firorder_0</name></expr>, <expr><operator>&amp;</operator><name>ff_mlp_firorder_1</name></expr>,

<expr><operator>&amp;</operator><name>ff_mlp_firorder_2</name></expr>, <expr><operator>&amp;</operator><name>ff_mlp_firorder_3</name></expr>,

<expr><operator>&amp;</operator><name>ff_mlp_firorder_4</name></expr>, <expr><operator>&amp;</operator><name>ff_mlp_firorder_5</name></expr>,

<expr><operator>&amp;</operator><name>ff_mlp_firorder_6</name></expr>, <expr><operator>&amp;</operator><name>ff_mlp_firorder_7</name></expr>,

<expr><operator>&amp;</operator><name>ff_mlp_firorder_8</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>iirtable</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>ff_mlp_iirorder_0</name></expr>, <expr><operator>&amp;</operator><name>ff_mlp_iirorder_1</name></expr>,

<expr><operator>&amp;</operator><name>ff_mlp_iirorder_2</name></expr>, <expr><operator>&amp;</operator><name>ff_mlp_iirorder_3</name></expr>,

<expr><operator>&amp;</operator><name>ff_mlp_iirorder_4</name></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLPMUL</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>offs</name></type></parameter>, <parameter><type><name>offc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LABEL_MANGLE(label)": \n\t" "movslq "offset"+"offs"(%0), %%rax\n\t" "movslq "offset"+"offc"(%1), %%rdx\n\t" "imul %%rdx, %%rax\n\t" "add %%rax, %%rsi\n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRMULREG</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>firc</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>LABEL_MANGLE(label)": \n\t" "movslq "#offset"(%0), %%rax\n\t" "imul %"#firc", %%rax\n\t" "add %%rax, %%rsi\n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR_ACCUM</name></cpp:macro> <cpp:value>"xor %%rsi, %%rsi\n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_ACCUM</name></cpp:macro> <cpp:value>"shr %%cl, %%rsi\n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCUM</name></cpp:macro> <cpp:value>"%%rdx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT</name></cpp:macro> <cpp:value>"%%rsi"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT32</name></cpp:macro> <cpp:value>"%%esi"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLPMUL</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>offs</name></type></parameter>, <parameter><type><name>offc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LABEL_MANGLE(label)": \n\t" "mov "offset"+"offs"(%0), %%eax\n\t" "imull "offset"+"offc"(%1) \n\t" "add %%eax , %%esi\n\t" "adc %%edx , %%ecx\n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRMULREG</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>, <parameter><type><name>firc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MLPMUL(label, #offset, "0", "0")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR_ACCUM</name></cpp:macro> <cpp:value>"xor %%esi, %%esi\n\t" "xor %%ecx, %%ecx\n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_ACCUM</name></cpp:macro> <cpp:value>"mov %%ecx, %%edx\n\t" "mov %%esi, %%eax\n\t" "movzbl %7 , %%ecx\n\t" "shrd %%cl, %%edx, %%eax\n\t"</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCUM</name></cpp:macro> <cpp:value>"%%edx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT</name></cpp:macro> <cpp:value>"%%eax"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESULT32</name></cpp:macro> <cpp:value>"%%eax"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINC</name></cpp:macro> <cpp:value>AV_STRINGIFY(4* MAX_CHANNELS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOFFS</name></cpp:macro> <cpp:value>AV_STRINGIFY(4*(MAX_FIR_ORDER + MAX_BLOCKSIZE))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOFFC</name></cpp:macro> <cpp:value>AV_STRINGIFY(4* MAX_FIR_ORDER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRMUL</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MLPMUL(label, #offset, "0", "0")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IIRMUL</name><parameter_list>(<parameter><type><name>label</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MLPMUL(label, #offset, IOFFS, IOFFC)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mlp_filter_channel_x86</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>firorder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iirorder</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>filter_shift</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>mask</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sample_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>firjump</name> <init>= <expr><name><name>firtable</name><index>[<expr><name>firorder</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>iirjump</name> <init>= <expr><name><name>iirtable</name><index>[<expr><name>iirorder</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <operator>-</operator><name>blocksize</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"1: \n\t"

CLEAR_ACCUM

"jmp *%5 \n\t"

FIRMUL (ff_mlp_firorder_8, 0x1c )

FIRMUL (ff_mlp_firorder_7, 0x18 )

FIRMUL (ff_mlp_firorder_6, 0x14 )

FIRMUL (ff_mlp_firorder_5, 0x10 )

FIRMUL (ff_mlp_firorder_4, 0x0c )

FIRMUL (ff_mlp_firorder_3, 0x08 )

FIRMUL (ff_mlp_firorder_2, 0x04 )

FIRMULREG(ff_mlp_firorder_1, 0x00, 8)

LABEL_MANGLE(ff_mlp_firorder_0)":\n\t"

"jmp *%6 \n\t"

IIRMUL (ff_mlp_iirorder_4, 0x0c )

IIRMUL (ff_mlp_iirorder_3, 0x08 )

IIRMUL (ff_mlp_iirorder_2, 0x04 )

IIRMUL (ff_mlp_iirorder_1, 0x00 )

LABEL_MANGLE(ff_mlp_iirorder_0)":\n\t"

SHIFT_ACCUM

"mov "RESULT" ,"ACCUM" \n\t"

"add (%2) ,"RESULT" \n\t"

"and %4 ,"RESULT" \n\t"

"sub $4 , %0 \n\t"

"mov "RESULT32", (%0) \n\t"

"mov "RESULT32", (%2) \n\t"

"add $"BINC" , %2 \n\t"

"sub "ACCUM" ,"RESULT" \n\t"

"mov "RESULT32","IOFFS"(%0) \n\t"

"incl %3 \n\t"

"js 1b \n\t"

: "+r"(state),

"+r"(coeff),

"+r"(sample_buffer),

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

"+r"(blocksize)

: "r"((x86_reg)mask), "r"(firjump),

"r"(iirjump) , "c"(filter_shift)

, "r"((int64_t)coeff[0])

: "rax", "rdx", "rsi"

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

"+m"(blocksize)

: "m"( mask), "m"(firjump),

"m"(iirjump) , "m"(filter_shift)

: "eax", "edx", "esi", "ecx"

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

);</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mlpdsp_init_x86</name><parameter_list>(<parameter><decl><type><name>MLPDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM_NONLOCAL_LABELS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>INLINE_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_filter_channel</name></name> <operator>=</operator> <name>mlp_filter_channel_x86</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <call><name>EXTERNAL_SSE4</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_rematrix_channel</name></name> <operator>=</operator> <name>ff_mlp_rematrix_channel_sse4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <call><name>EXTERNAL_AVX2_FAST</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_BMI2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mlp_rematrix_channel</name></name> <operator>=</operator> <name>ff_mlp_rematrix_channel_avx2_bmi2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
