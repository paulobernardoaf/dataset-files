<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\ac3dsp_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/ac3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/ac3dsp.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>ff_ac3_exponent_min_mmx</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_reuse_blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_coefs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_exponent_min_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_reuse_blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_coefs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_exponent_min_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_reuse_blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_coefs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ac3_max_msb_abs_int16_mmx</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ac3_max_msb_abs_int16_mmxext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ac3_max_msb_abs_int16_sse2</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ac3_max_msb_abs_int16_ssse3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_lshift_int16_mmx</name> <parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_lshift_int16_sse2</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_rshift_int32_mmx</name> <parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_rshift_int32_sse2</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_float_to_fixed24_3dnow</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_float_to_fixed24_sse</name> <parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_float_to_fixed24_sse2</name> <parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_ac3_compute_mantissa_size_sse2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name><name>mant_cnt</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_extract_exponents_sse2</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_coefs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_ac3_extract_exponents_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_coefs</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_apply_window_int16_round_mmxext</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_apply_window_int16_round_sse2</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_apply_window_int16_mmxext</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_apply_window_int16_sse2</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_apply_window_int16_ssse3</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_apply_window_int16_ssse3_atom</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_ac3dsp_init_x86</name><parameter_list>(<parameter><decl><type><name>AC3DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_exact</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMX</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_exponent_min</name></name> <operator>=</operator> <name>ff_ac3_exponent_min_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_max_msb_abs_int16</name></name> <operator>=</operator> <name>ff_ac3_max_msb_abs_int16_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_lshift_int16</name></name> <operator>=</operator> <name>ff_ac3_lshift_int16_mmx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_rshift_int32</name></name> <operator>=</operator> <name>ff_ac3_rshift_int32_mmx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_AMD3DNOW</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bit_exact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>float_to_fixed24</name></name> <operator>=</operator> <name>ff_float_to_fixed24_3dnow</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_MMXEXT</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_exponent_min</name></name> <operator>=</operator> <name>ff_ac3_exponent_min_mmxext</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_max_msb_abs_int16</name></name> <operator>=</operator> <name>ff_ac3_max_msb_abs_int16_mmxext</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_exact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_window_int16</name></name> <operator>=</operator> <name>ff_apply_window_int16_mmxext</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_window_int16</name></name> <operator>=</operator> <name>ff_apply_window_int16_round_mmxext</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>float_to_fixed24</name></name> <operator>=</operator> <name>ff_float_to_fixed24_sse</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_exponent_min</name></name> <operator>=</operator> <name>ff_ac3_exponent_min_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_max_msb_abs_int16</name></name> <operator>=</operator> <name>ff_ac3_max_msb_abs_int16_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>float_to_fixed24</name></name> <operator>=</operator> <name>ff_float_to_fixed24_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compute_mantissa_size</name></name> <operator>=</operator> <name>ff_ac3_compute_mantissa_size_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>extract_exponents</name></name> <operator>=</operator> <name>ff_ac3_extract_exponents_sse2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bit_exact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_window_int16</name></name> <operator>=</operator> <name>ff_apply_window_int16_sse2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSE2_FAST</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_lshift_int16</name></name> <operator>=</operator> <name>ff_ac3_lshift_int16_sse2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_rshift_int32</name></name> <operator>=</operator> <name>ff_ac3_rshift_int32_sse2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bit_exact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_window_int16</name></name> <operator>=</operator> <name>ff_apply_window_int16_round_sse2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>EXTERNAL_SSSE3</name><argument_list>(<argument><expr><name>cpu_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_max_msb_abs_int16</name></name> <operator>=</operator> <name>ff_ac3_max_msb_abs_int16_ssse3</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_ATOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_window_int16</name></name> <operator>=</operator> <name>ff_apply_window_int16_ssse3_atom</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>extract_exponents</name></name> <operator>=</operator> <name>ff_ac3_extract_exponents_ssse3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_window_int16</name></name> <operator>=</operator> <name>ff_apply_window_int16_ssse3</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWNMIX_FUNC_OPT</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>, <parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void ff_ac3_downmix_ ##ch ##_to_1_ ##opt(float **samples, float **matrix, int len); void ff_ac3_downmix_ ##ch ##_to_2_ ##opt(float **samples, float **matrix, int len);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWNMIX_FUNCS</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DOWNMIX_FUNC_OPT(3, opt) DOWNMIX_FUNC_OPT(4, opt) DOWNMIX_FUNC_OPT(5, opt) DOWNMIX_FUNC_OPT(6, opt)</cpp:value></cpp:define>

<macro><name>DOWNMIX_FUNCS</name><argument_list>(<argument>sse</argument>)</argument_list></macro>

<macro><name>DOWNMIX_FUNCS</name><argument_list>(<argument>avx</argument>)</argument_list></macro>

<macro><name>DOWNMIX_FUNCS</name><argument_list>(<argument>fma3</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>ff_ac3dsp_set_downmix_x86</name><parameter_list>(<parameter><decl><type><name>AC3DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_DOWNMIX</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>, <parameter><type><name>suf</name></type></parameter>, <parameter><type><name>SUF</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (ch == c-&gt;in_channels) { if (EXTERNAL_ ##SUF (cpu_flags)) { if (c-&gt;out_channels == 1) c-&gt;downmix = ff_ac3_downmix_ ##ch ##_to_1_ ##suf; else c-&gt;downmix = ff_ac3_downmix_ ##ch ##_to_2_ ##suf; } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_DOWNMIX_ALL</name><parameter_list>(<parameter><type><name>suf</name></type></parameter>, <parameter><type><name>SUF</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SET_DOWNMIX(3, suf, SUF) SET_DOWNMIX(4, suf, SUF) SET_DOWNMIX(5, suf, SUF) SET_DOWNMIX(6, suf, SUF)</cpp:value></cpp:define>

<macro><name>SET_DOWNMIX_ALL</name><argument_list>(<argument>sse</argument>, <argument>SSE</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cpu_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_AVXSLOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<macro><name>SET_DOWNMIX_ALL</name><argument_list>(<argument>avx</argument>, <argument>AVX</argument>)</argument_list></macro>

<macro><name>SET_DOWNMIX_ALL</name><argument_list>(<argument>fma3</argument>, <argument>FMA3</argument>)</argument_list></macro>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
