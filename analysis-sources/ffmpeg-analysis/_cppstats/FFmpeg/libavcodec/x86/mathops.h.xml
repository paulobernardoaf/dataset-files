<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\mathops.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULL</name></cpp:macro> <cpp:value>MULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>MULL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rt</name></decl>, <decl><type ref="prev"/><name>dummy</name></decl>;</decl_stmt>

<asm>__asm__ (

"imull %3 \n\t"

"shrdl %4, %%edx, %%eax \n\t"

:"=a"(rt), "=d"(dummy)

:"a"(a), "rm"(b), "ci"((uint8_t)shift)

);</asm>

<return>return <expr><name>rt</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULH</name></cpp:macro> <cpp:value>MULH</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>MULH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rt</name></decl>, <decl><type ref="prev"/><name>dummy</name></decl>;</decl_stmt>

<asm>__asm__ (

"imull %3"

:"=d"(rt), "=a"(dummy)

:"a"(a), "rm"(b)

);</asm>

<return>return <expr><name>rt</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL64</name></cpp:macro> <cpp:value>MUL64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int64_t</name></type> <name>MUL64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>rt</name></decl>;</decl_stmt>

<asm>__asm__ (

"imull %2"

:"=A"(rt)

:"a"(a), "rm"(b)

);</asm>

<return>return <expr><name>rt</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_I686</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid_pred</name></cpp:macro> <cpp:value>mid_pred</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>mid_pred</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>b</name></expr></init></decl>;</decl_stmt>

<asm>__asm__ (

"cmp %2, %1 \n\t"

"cmovg %1, %0 \n\t"

"cmovg %2, %1 \n\t"

"cmp %3, %1 \n\t"

"cmovl %3, %1 \n\t"

"cmp %1, %0 \n\t"

"cmovg %1, %0 \n\t"

:"+&amp;r"(i), "+&amp;r"(a)

:"r"(b), "r"(c)

);</asm>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY3_IF_LT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__asm__ volatile("cmpl %0, %3 \n\t""cmovl %3, %0 \n\t""cmovl %4, %1 \n\t""cmovl %5, %2 \n\t": "+&amp;r" (x), "+&amp;r" (a), "+r" (c): "r" (y), "r" (b), "r" (d));</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK_ABS</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>level</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ ("cdq \n\t" "xorl %1, %0 \n\t" "subl %1, %0 \n\t" : "+a"(level), "=&amp;d"(mask))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG_SSR32</name></cpp:macro> <cpp:value>NEG_SSR32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>NEG_SSR32</name><parameter_list>( <parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<asm>__asm__ ("sarl %1, %0\n\t"

: "+r" (a)

: "ic" ((uint8_t)(-s))

);</asm>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG_USR32</name></cpp:macro> <cpp:value>NEG_USR32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>NEG_USR32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<asm>__asm__ ("shrl %1, %0\n\t"

: "+r" (a)

: "ic" ((uint8_t)(-s))

);</asm>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
