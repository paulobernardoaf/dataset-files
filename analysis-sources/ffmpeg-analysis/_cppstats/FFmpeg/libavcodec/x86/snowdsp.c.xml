<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\x86\snowdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/x86/asm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/snow.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/snow_dwt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_snow_horizontal_compose97i_sse2</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name><init>= <expr><operator>(</operator><name>width</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w_l</name><init>= <expr><operator>(</operator><name>width</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w_r</name><init>= <expr><name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<block>{<block_content> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ref</name> <init>= <expr><name>b</name> <operator>+</operator> <name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name></type> <name>b_0</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"pcmpeqd %%xmm7, %%xmm7 \n\t"

"pcmpeqd %%xmm3, %%xmm3 \n\t"

"psllw $1, %%xmm3 \n\t"

"paddw %%xmm7, %%xmm3 \n\t"

"psllw $13, %%xmm3 \n\t"

::);</asm>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w_l</name><operator>-</operator><literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">16</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movdqu (%1), %%xmm1 \n\t"

"movdqu 16(%1), %%xmm5 \n\t"

"movdqu 2(%1), %%xmm2 \n\t"

"movdqu 18(%1), %%xmm6 \n\t"

"paddw %%xmm1, %%xmm2 \n\t"

"paddw %%xmm5, %%xmm6 \n\t"

"paddw %%xmm7, %%xmm2 \n\t"

"paddw %%xmm7, %%xmm6 \n\t"

"pmulhw %%xmm3, %%xmm2 \n\t"

"pmulhw %%xmm3, %%xmm6 \n\t"

"paddw (%0), %%xmm2 \n\t"

"paddw 16(%0), %%xmm6 \n\t"

"movdqa %%xmm2, (%0) \n\t"

"movdqa %%xmm6, 16(%0) \n\t"

:: "r"(&amp;b[i]), "r"(&amp;ref[i])

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snow_horizontal_compose_lift_lead_out</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>w_l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>W_DM</name></expr></argument>, <argument><expr><name>W_DO</name></expr></argument>, <argument><expr><name>W_DS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b_0</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>W_DM</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>W_DO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_DS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst</name> <init>= <expr><name>b</name><operator>+</operator><name>w2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x86_reg</name><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>w_r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w_r</name><operator>-</operator><literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">16</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movdqu (%1), %%xmm1 \n\t"

"movdqu 16(%1), %%xmm5 \n\t"

"movdqu 2(%1), %%xmm2 \n\t"

"movdqu 18(%1), %%xmm6 \n\t"

"paddw %%xmm1, %%xmm2 \n\t"

"paddw %%xmm5, %%xmm6 \n\t"

"movdqa (%0), %%xmm0 \n\t"

"movdqa 16(%0), %%xmm4 \n\t"

"psubw %%xmm2, %%xmm0 \n\t"

"psubw %%xmm6, %%xmm4 \n\t"

"movdqa %%xmm0, (%0) \n\t"

"movdqa %%xmm4, 16(%0) \n\t"

:: "r"(&amp;dst[i]), "r"(&amp;b[i])

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snow_horizontal_compose_lift_lead_out</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>w_r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>W_CM</name></expr></argument>, <argument><expr><name>W_CO</name></expr></argument>, <argument><expr><name>W_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ref</name> <init>= <expr><name>b</name><operator>+</operator><name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name></type> <name>b_0</name> <init>= <expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"psllw $15, %%xmm7 \n\t"

"pcmpeqw %%xmm6, %%xmm6 \n\t"

"psrlw $13, %%xmm6 \n\t"

"paddw %%xmm7, %%xmm6 \n\t"

::);</asm>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w_l</name><operator>-</operator><literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">16</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movdqu (%1), %%xmm0 \n\t"

"movdqu 16(%1), %%xmm4 \n\t"

"movdqu 2(%1), %%xmm1 \n\t"

"movdqu 18(%1), %%xmm5 \n\t" 

"paddw %%xmm6, %%xmm0 \n\t"

"paddw %%xmm6, %%xmm4 \n\t"

"paddw %%xmm7, %%xmm1 \n\t"

"paddw %%xmm7, %%xmm5 \n\t"

"pavgw %%xmm1, %%xmm0 \n\t"

"pavgw %%xmm5, %%xmm4 \n\t"

"psubw %%xmm7, %%xmm0 \n\t"

"psubw %%xmm7, %%xmm4 \n\t"

"psraw $1, %%xmm0 \n\t"

"psraw $1, %%xmm4 \n\t"

"movdqa (%0), %%xmm1 \n\t"

"movdqa 16(%0), %%xmm5 \n\t"

"paddw %%xmm1, %%xmm0 \n\t"

"paddw %%xmm5, %%xmm4 \n\t"

"psraw $2, %%xmm0 \n\t"

"psraw $2, %%xmm4 \n\t"

"paddw %%xmm1, %%xmm0 \n\t"

"paddw %%xmm5, %%xmm4 \n\t"

"movdqa %%xmm0, (%0) \n\t"

"movdqa %%xmm4, 16(%0) \n\t"

:: "r"(&amp;b[i]), "r"(&amp;ref[i])

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snow_horizontal_compose_liftS_lead_out</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>w_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b_0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>W_BO</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>b_0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_BS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>src</name> <init>= <expr><name>b</name><operator>+</operator><name>w2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x86_reg</name><operator>)</operator><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>w_r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>W_AM</name><operator>*</operator><operator>(</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><name>W_AS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w_r</name><operator>-</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movdqu 2(%1), %%xmm2 \n\t"

"movdqu 18(%1), %%xmm6 \n\t"

"paddw (%1), %%xmm2 \n\t"

"paddw 16(%1), %%xmm6 \n\t"

"movdqu (%0), %%xmm0 \n\t"

"movdqu 16(%0), %%xmm4 \n\t"

"paddw %%xmm2, %%xmm0 \n\t"

"paddw %%xmm6, %%xmm4 \n\t"

"psraw $1, %%xmm2 \n\t"

"psraw $1, %%xmm6 \n\t"

"paddw %%xmm0, %%xmm2 \n\t"

"paddw %%xmm4, %%xmm6 \n\t"

"movdqa %%xmm2, (%2) \n\t"

"movdqa %%xmm6, 16(%2) \n\t"

:: "r"(&amp;src[i]), "r"(&amp;b[i]), "r"(&amp;temp[i])

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snow_horizontal_compose_lift_lead_out</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>w_r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>W_AM</name></expr></argument>, <argument><expr><name>W_AO</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>W_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<expr_stmt><expr><call><name>snow_interleave_line_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x3E</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x3E</literal></expr>;</condition> <incr><expr><name>i</name><operator>-=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>-=</operator><literal type="number">62</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>-=</operator><literal type="number">64</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movdqa (%1), %%xmm0 \n\t"

"movdqa 16(%1), %%xmm2 \n\t"

"movdqa 32(%1), %%xmm4 \n\t"

"movdqa 48(%1), %%xmm6 \n\t"

"movdqa (%1), %%xmm1 \n\t"

"movdqa 16(%1), %%xmm3 \n\t"

"movdqa 32(%1), %%xmm5 \n\t"

"movdqa 48(%1), %%xmm7 \n\t"

"punpcklwd (%2), %%xmm0 \n\t"

"punpcklwd 16(%2), %%xmm2 \n\t"

"punpcklwd 32(%2), %%xmm4 \n\t"

"punpcklwd 48(%2), %%xmm6 \n\t"

"movdqa %%xmm0, (%0) \n\t"

"movdqa %%xmm2, 32(%0) \n\t"

"movdqa %%xmm4, 64(%0) \n\t"

"movdqa %%xmm6, 96(%0) \n\t"

"punpckhwd (%2), %%xmm1 \n\t"

"punpckhwd 16(%2), %%xmm3 \n\t"

"punpckhwd 32(%2), %%xmm5 \n\t"

"punpckhwd 48(%2), %%xmm7 \n\t"

"movdqa %%xmm1, 16(%0) \n\t"

"movdqa %%xmm3, 48(%0) \n\t"

"movdqa %%xmm5, 80(%0) \n\t"

"movdqa %%xmm7, 112(%0) \n\t"

:: "r"(&amp;(b)[i]), "r"(&amp;(b)[i&gt;&gt;1]), "r"(&amp;(temp)[i&gt;&gt;1])

: "memory"

);</asm>

</block_content>}</block></for>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_snow_horizontal_compose97i_mmx</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w2</name><init>= <expr><operator>(</operator><name>width</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w_l</name><init>= <expr><operator>(</operator><name>width</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w_r</name><init>= <expr><name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<block>{<block_content> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ref</name> <init>= <expr><name>b</name> <operator>+</operator> <name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>W_DM</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>W_DO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_DS</name><operator>)</operator></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"pcmpeqw %%mm7, %%mm7 \n\t"

"pcmpeqw %%mm3, %%mm3 \n\t"

"psllw $1, %%mm3 \n\t"

"paddw %%mm7, %%mm3 \n\t"

"psllw $13, %%mm3 \n\t"

::);</asm>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w_l</name><operator>-</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movq (%1), %%mm2 \n\t"

"movq 8(%1), %%mm6 \n\t"

"paddw 2(%1), %%mm2 \n\t"

"paddw 10(%1), %%mm6 \n\t"

"paddw %%mm7, %%mm2 \n\t"

"paddw %%mm7, %%mm6 \n\t"

"pmulhw %%mm3, %%mm2 \n\t"

"pmulhw %%mm3, %%mm6 \n\t"

"paddw (%0), %%mm2 \n\t"

"paddw 8(%0), %%mm6 \n\t"

"movq %%mm2, (%0) \n\t"

"movq %%mm6, 8(%0) \n\t"

:: "r"(&amp;b[i]), "r"(&amp;ref[i])

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snow_horizontal_compose_lift_lead_out</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>w_l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>W_DM</name></expr></argument>, <argument><expr><name>W_DO</name></expr></argument>, <argument><expr><name>W_DS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>dst</name> <init>= <expr><name>b</name><operator>+</operator><name>w2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w_r</name><operator>-</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movq (%1), %%mm2 \n\t"

"movq 8(%1), %%mm6 \n\t"

"paddw 2(%1), %%mm2 \n\t"

"paddw 10(%1), %%mm6 \n\t"

"movq (%0), %%mm0 \n\t"

"movq 8(%0), %%mm4 \n\t"

"psubw %%mm2, %%mm0 \n\t"

"psubw %%mm6, %%mm4 \n\t"

"movq %%mm0, (%0) \n\t"

"movq %%mm4, 8(%0) \n\t"

:: "r"(&amp;dst[i]), "r"(&amp;b[i])

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snow_horizontal_compose_lift_lead_out</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>w_r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>W_CM</name></expr></argument>, <argument><expr><name>W_CO</name></expr></argument>, <argument><expr><name>W_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ref</name> <init>= <expr><name>b</name><operator>+</operator><name>w2</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>W_BO</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>W_BS</name><operator>)</operator></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"psllw $15, %%mm7 \n\t"

"pcmpeqw %%mm6, %%mm6 \n\t"

"psrlw $13, %%mm6 \n\t"

"paddw %%mm7, %%mm6 \n\t"

::);</asm>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w_l</name><operator>-</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movq (%1), %%mm0 \n\t"

"movq 8(%1), %%mm4 \n\t"

"movq 2(%1), %%mm1 \n\t"

"movq 10(%1), %%mm5 \n\t"

"paddw %%mm6, %%mm0 \n\t"

"paddw %%mm6, %%mm4 \n\t"

"paddw %%mm7, %%mm1 \n\t"

"paddw %%mm7, %%mm5 \n\t"

"pavgw %%mm1, %%mm0 \n\t"

"pavgw %%mm5, %%mm4 \n\t"

"psubw %%mm7, %%mm0 \n\t"

"psubw %%mm7, %%mm4 \n\t"

"psraw $1, %%mm0 \n\t"

"psraw $1, %%mm4 \n\t"

"movq (%0), %%mm1 \n\t"

"movq 8(%0), %%mm5 \n\t"

"paddw %%mm1, %%mm0 \n\t"

"paddw %%mm5, %%mm4 \n\t"

"psraw $2, %%mm0 \n\t"

"psraw $2, %%mm4 \n\t"

"paddw %%mm1, %%mm0 \n\t"

"paddw %%mm5, %%mm4 \n\t"

"movq %%mm0, (%0) \n\t"

"movq %%mm4, 8(%0) \n\t"

:: "r"(&amp;b[i]), "r"(&amp;ref[i])

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snow_horizontal_compose_liftS_lead_out</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>w_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content> 

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>src</name> <init>= <expr><name>b</name><operator>+</operator><name>w2</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>w_r</name><operator>-</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movq 2(%1), %%mm2 \n\t"

"movq 10(%1), %%mm6 \n\t"

"paddw (%1), %%mm2 \n\t"

"paddw 8(%1), %%mm6 \n\t"

"movq (%0), %%mm0 \n\t"

"movq 8(%0), %%mm4 \n\t"

"paddw %%mm2, %%mm0 \n\t"

"paddw %%mm6, %%mm4 \n\t"

"psraw $1, %%mm2 \n\t"

"psraw $1, %%mm6 \n\t"

"paddw %%mm0, %%mm2 \n\t"

"paddw %%mm4, %%mm6 \n\t"

"movq %%mm2, (%2) \n\t"

"movq %%mm6, 8(%2) \n\t"

:: "r"(&amp;src[i]), "r"(&amp;b[i]), "r"(&amp;temp[i])

: "memory"

);</asm>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snow_horizontal_compose_lift_lead_out</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>w_r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>W_AM</name></expr></argument>, <argument><expr><name>W_AO</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>W_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<expr_stmt><expr><call><name>snow_interleave_line_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1E</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x1E</literal></expr>;</condition> <incr><expr><name>i</name><operator>-=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name><operator>-=</operator><literal type="number">30</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>-=</operator><literal type="number">32</literal></expr></incr>)</control><block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier>(

"movq (%1), %%mm0 \n\t"

"movq 8(%1), %%mm2 \n\t"

"movq 16(%1), %%mm4 \n\t"

"movq 24(%1), %%mm6 \n\t"

"movq (%1), %%mm1 \n\t"

"movq 8(%1), %%mm3 \n\t"

"movq 16(%1), %%mm5 \n\t"

"movq 24(%1), %%mm7 \n\t"

"punpcklwd (%2), %%mm0 \n\t"

"punpcklwd 8(%2), %%mm2 \n\t"

"punpcklwd 16(%2), %%mm4 \n\t"

"punpcklwd 24(%2), %%mm6 \n\t"

"movq %%mm0, (%0) \n\t"

"movq %%mm2, 16(%0) \n\t"

"movq %%mm4, 32(%0) \n\t"

"movq %%mm6, 48(%0) \n\t"

"punpckhwd (%2), %%mm1 \n\t"

"punpckhwd 8(%2), %%mm3 \n\t"

"punpckhwd 16(%2), %%mm5 \n\t"

"punpckhwd 24(%2), %%mm7 \n\t"

"movq %%mm1, 8(%0) \n\t"

"movq %%mm3, 24(%0) \n\t"

"movq %%mm5, 40(%0) \n\t"

"movq %%mm7, 56(%0) \n\t"

:: "r"(&amp;b[i]), "r"(&amp;b[i&gt;&gt;1]), "r"(&amp;temp[i&gt;&gt;1])

: "memory"

);</asm>

</block_content>}</block></for>

</block_content>}</block>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_sse2_load_add</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>""op" ("r",%%"FF_REG_d"), %%"t0" \n\t"""op" 16("r",%%"FF_REG_d"), %%"t1" \n\t"""op" 32("r",%%"FF_REG_d"), %%"t2" \n\t"""op" 48("r",%%"FF_REG_d"), %%"t3" \n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_sse2_load</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>snow_vertical_compose_sse2_load_add("movdqa",r,t0,t1,t2,t3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_sse2_add</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>snow_vertical_compose_sse2_load_add("paddw",r,t0,t1,t2,t3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_r2r_sub</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"psubw %%"s0", %%"t0" \n\t""psubw %%"s1", %%"t1" \n\t""psubw %%"s2", %%"t2" \n\t""psubw %%"s3", %%"t3" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_sse2_store</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movdqa %%"s0", ("w",%%"FF_REG_d") \n\t""movdqa %%"s1", 16("w",%%"FF_REG_d") \n\t""movdqa %%"s2", 32("w",%%"FF_REG_d") \n\t""movdqa %%"s3", 48("w",%%"FF_REG_d") \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_sra</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"psraw $"n", %%"t0" \n\t""psraw $"n", %%"t1" \n\t""psraw $"n", %%"t2" \n\t""psraw $"n", %%"t3" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_r2r_add</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"paddw %%"s0", %%"t0" \n\t""paddw %%"s1", %%"t1" \n\t""paddw %%"s2", %%"t2" \n\t""paddw %%"s3", %%"t3" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_r2r_pmulhw</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"pmulhw %%"s0", %%"t0" \n\t""pmulhw %%"s1", %%"t1" \n\t""pmulhw %%"s2", %%"t2" \n\t""pmulhw %%"s3", %%"t3" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_sse2_move</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movdqa %%"s0", %%"t0" \n\t""movdqa %%"s1", %%"t1" \n\t""movdqa %%"s2", %%"t2" \n\t""movdqa %%"s3", %%"t3" \n\t"
</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_snow_vertical_compose97i_sse2</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b3</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b4</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>x86_reg</name></type> <name>i</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_DM</name><operator>*</operator><operator>(</operator><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b5</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator><name>W_DO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_DS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_CM</name><operator>*</operator><operator>(</operator><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator><name>W_CO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_CS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_BM</name><operator>*</operator><operator>(</operator><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>*</operator><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>W_BO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_BS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_AM</name><operator>*</operator><operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator><name>W_AO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_AS</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i</name><operator>+=</operator><name>i</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier> (

"jmp 2f \n\t"

"1: \n\t"

snow_vertical_compose_sse2_load("%4","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_add("%6","xmm0","xmm2","xmm4","xmm6")

"pcmpeqw %%xmm0, %%xmm0 \n\t"

"pcmpeqw %%xmm2, %%xmm2 \n\t"

"paddw %%xmm2, %%xmm2 \n\t"

"paddw %%xmm0, %%xmm2 \n\t"

"psllw $13, %%xmm2 \n\t"

snow_vertical_compose_r2r_add("xmm0","xmm0","xmm0","xmm0","xmm1","xmm3","xmm5","xmm7")

snow_vertical_compose_r2r_pmulhw("xmm2","xmm2","xmm2","xmm2","xmm1","xmm3","xmm5","xmm7")

snow_vertical_compose_sse2_add("%5","xmm1","xmm3","xmm5","xmm7")

snow_vertical_compose_sse2_store("%5","xmm1","xmm3","xmm5","xmm7")

snow_vertical_compose_sse2_load("%4","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_add("%3","xmm1","xmm3","xmm5","xmm7")

snow_vertical_compose_r2r_sub("xmm1","xmm3","xmm5","xmm7","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_store("%4","xmm0","xmm2","xmm4","xmm6")

"pcmpeqw %%xmm7, %%xmm7 \n\t"

"pcmpeqw %%xmm5, %%xmm5 \n\t"

"psllw $15, %%xmm7 \n\t"

"psrlw $13, %%xmm5 \n\t"

"paddw %%xmm7, %%xmm5 \n\t"

snow_vertical_compose_r2r_add("xmm5","xmm5","xmm5","xmm5","xmm0","xmm2","xmm4","xmm6")

"movq (%2,%%"FF_REG_d"), %%xmm1 \n\t"

"movq 8(%2,%%"FF_REG_d"), %%xmm3 \n\t"

"paddw %%xmm7, %%xmm1 \n\t"

"paddw %%xmm7, %%xmm3 \n\t"

"pavgw %%xmm1, %%xmm0 \n\t"

"pavgw %%xmm3, %%xmm2 \n\t"

"movq 16(%2,%%"FF_REG_d"), %%xmm1 \n\t"

"movq 24(%2,%%"FF_REG_d"), %%xmm3 \n\t"

"paddw %%xmm7, %%xmm1 \n\t"

"paddw %%xmm7, %%xmm3 \n\t"

"pavgw %%xmm1, %%xmm4 \n\t"

"pavgw %%xmm3, %%xmm6 \n\t"

snow_vertical_compose_r2r_sub("xmm7","xmm7","xmm7","xmm7","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sra("1","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_add("%3","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sra("2","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_add("%3","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_store("%3","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_add("%1","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_move("xmm0","xmm2","xmm4","xmm6","xmm1","xmm3","xmm5","xmm7")

snow_vertical_compose_sra("1","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_r2r_add("xmm1","xmm3","xmm5","xmm7","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_add("%2","xmm0","xmm2","xmm4","xmm6")

snow_vertical_compose_sse2_store("%2","xmm0","xmm2","xmm4","xmm6")

"2: \n\t"

"sub $64, %%"FF_REG_d" \n\t"

"jge 1b \n\t"

:"+d"(i)

:"r"(b0),"r"(b1),"r"(b2),"r"(b3),"r"(b4),"r"(b5));</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_mmx_load_add</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>""op" ("r",%%"FF_REG_d"), %%"t0" \n\t"""op" 8("r",%%"FF_REG_d"), %%"t1" \n\t"""op" 16("r",%%"FF_REG_d"), %%"t2" \n\t"""op" 24("r",%%"FF_REG_d"), %%"t3" \n\t"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_mmx_load</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>snow_vertical_compose_mmx_load_add("movq",r,t0,t1,t2,t3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_mmx_add</name><parameter_list>(<parameter><type><name>r</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>snow_vertical_compose_mmx_load_add("paddw",r,t0,t1,t2,t3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_mmx_store</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq %%"s0", ("w",%%"FF_REG_d") \n\t""movq %%"s1", 8("w",%%"FF_REG_d") \n\t""movq %%"s2", 16("w",%%"FF_REG_d") \n\t""movq %%"s3", 24("w",%%"FF_REG_d") \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_vertical_compose_mmx_move</name><parameter_list>(<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>,<parameter><type><name>t0</name></type></parameter>,<parameter><type><name>t1</name></type></parameter>,<parameter><type><name>t2</name></type></parameter>,<parameter><type><name>t3</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"movq %%"s0", %%"t0" \n\t""movq %%"s1", %%"t1" \n\t""movq %%"s2", %%"t2" \n\t""movq %%"s3", %%"t3" \n\t"
</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_snow_vertical_compose97i_mmx</name><parameter_list>(<parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b2</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b3</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b4</name></decl></parameter>, <parameter><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type><name>b5</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>x86_reg</name></type> <name>i</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_DM</name><operator>*</operator><operator>(</operator><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b5</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator><name>W_DO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_DS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>W_CM</name><operator>*</operator><operator>(</operator><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator><name>W_CO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_CS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_BM</name><operator>*</operator><operator>(</operator><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator><literal type="number">4</literal><operator>*</operator><name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>W_BO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_BS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>W_AM</name><operator>*</operator><operator>(</operator><name><name>b0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator><name>W_AO</name><operator>)</operator><operator>&gt;&gt;</operator><name>W_AS</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i</name><operator>+=</operator><name>i</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"jmp 2f \n\t"

"1: \n\t"

snow_vertical_compose_mmx_load("%4","mm1","mm3","mm5","mm7")

snow_vertical_compose_mmx_add("%6","mm1","mm3","mm5","mm7")

"pcmpeqw %%mm0, %%mm0 \n\t"

"pcmpeqw %%mm2, %%mm2 \n\t"

"paddw %%mm2, %%mm2 \n\t"

"paddw %%mm0, %%mm2 \n\t"

"psllw $13, %%mm2 \n\t"

snow_vertical_compose_r2r_add("mm0","mm0","mm0","mm0","mm1","mm3","mm5","mm7")

snow_vertical_compose_r2r_pmulhw("mm2","mm2","mm2","mm2","mm1","mm3","mm5","mm7")

snow_vertical_compose_mmx_add("%5","mm1","mm3","mm5","mm7")

snow_vertical_compose_mmx_store("%5","mm1","mm3","mm5","mm7")

snow_vertical_compose_mmx_load("%4","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_add("%3","mm1","mm3","mm5","mm7")

snow_vertical_compose_r2r_sub("mm1","mm3","mm5","mm7","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_store("%4","mm0","mm2","mm4","mm6")

"pcmpeqw %%mm7, %%mm7 \n\t"

"pcmpeqw %%mm5, %%mm5 \n\t"

"psllw $15, %%mm7 \n\t"

"psrlw $13, %%mm5 \n\t"

"paddw %%mm7, %%mm5 \n\t"

snow_vertical_compose_r2r_add("mm5","mm5","mm5","mm5","mm0","mm2","mm4","mm6")

"movq (%2,%%"FF_REG_d"), %%mm1 \n\t"

"movq 8(%2,%%"FF_REG_d"), %%mm3 \n\t"

"paddw %%mm7, %%mm1 \n\t"

"paddw %%mm7, %%mm3 \n\t"

"pavgw %%mm1, %%mm0 \n\t"

"pavgw %%mm3, %%mm2 \n\t"

"movq 16(%2,%%"FF_REG_d"), %%mm1 \n\t"

"movq 24(%2,%%"FF_REG_d"), %%mm3 \n\t"

"paddw %%mm7, %%mm1 \n\t"

"paddw %%mm7, %%mm3 \n\t"

"pavgw %%mm1, %%mm4 \n\t"

"pavgw %%mm3, %%mm6 \n\t"

snow_vertical_compose_r2r_sub("mm7","mm7","mm7","mm7","mm0","mm2","mm4","mm6")

snow_vertical_compose_sra("1","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_add("%3","mm0","mm2","mm4","mm6")

snow_vertical_compose_sra("2","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_add("%3","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_store("%3","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_add("%1","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_move("mm0","mm2","mm4","mm6","mm1","mm3","mm5","mm7")

snow_vertical_compose_sra("1","mm0","mm2","mm4","mm6")

snow_vertical_compose_r2r_add("mm1","mm3","mm5","mm7","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_add("%2","mm0","mm2","mm4","mm6")

snow_vertical_compose_mmx_store("%2","mm0","mm2","mm4","mm6")

"2: \n\t"

"sub $32, %%"FF_REG_d" \n\t"

"jge 1b \n\t"

:"+d"(i)

:"r"(b0),"r"(b1),"r"(b2),"r"(b3),"r"(b4),"r"(b5));</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_header</name></cpp:macro> <cpp:value>IDWTELEM * * dst_array = sb-&gt;line + src_y;x86_reg tmp;__asm__ volatile("mov %7, %%"FF_REG_c" \n\t""mov %6, %2 \n\t""mov %4, %%"FF_REG_S" \n\t""pxor %%xmm7, %%xmm7 \n\t" /* 0 */"pcmpeqd %%xmm3, %%xmm3 \n\t""psllw $15, %%xmm3 \n\t""psrlw $12, %%xmm3 \n\t" /* FRAC_BITS &gt;&gt; 1 */"1: \n\t""mov %1, %%"FF_REG_D" \n\t""mov (%%"FF_REG_D"), %%"FF_REG_D" \n\t""add %3, %%"FF_REG_D" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_start_8</name><parameter_list>(<parameter><type><name>out_reg1</name></type></parameter>, <parameter><type><name>out_reg2</name></type></parameter>, <parameter><type><name>ptr_offset</name></type></parameter>, <parameter><type><name>s_offset</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"mov "FF_PTR_SIZE"*"ptr_offset"(%%"FF_REG_a"), %%"FF_REG_d"; \n\t""movq (%%"FF_REG_d"), %%"out_reg1" \n\t""movq (%%"FF_REG_d", %%"FF_REG_c"), %%"out_reg2" \n\t""punpcklbw %%xmm7, %%"out_reg1" \n\t""punpcklbw %%xmm7, %%"out_reg2" \n\t""movq "s_offset"(%%"FF_REG_S"), %%xmm0 \n\t""movq "s_offset"+16(%%"FF_REG_S"), %%xmm4 \n\t""punpcklbw %%xmm7, %%xmm0 \n\t""punpcklbw %%xmm7, %%xmm4 \n\t""pmullw %%xmm0, %%"out_reg1" \n\t""pmullw %%xmm4, %%"out_reg2" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_start_16</name><parameter_list>(<parameter><type><name>out_reg1</name></type></parameter>, <parameter><type><name>out_reg2</name></type></parameter>, <parameter><type><name>ptr_offset</name></type></parameter>, <parameter><type><name>s_offset</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"mov "FF_PTR_SIZE"*"ptr_offset"(%%"FF_REG_a"), %%"FF_REG_d"; \n\t""movq (%%"FF_REG_d"), %%"out_reg1" \n\t""movq 8(%%"FF_REG_d"), %%"out_reg2" \n\t""punpcklbw %%xmm7, %%"out_reg1" \n\t""punpcklbw %%xmm7, %%"out_reg2" \n\t""movq "s_offset"(%%"FF_REG_S"), %%xmm0 \n\t""movq "s_offset"+8(%%"FF_REG_S"), %%xmm4 \n\t""punpcklbw %%xmm7, %%xmm0 \n\t""punpcklbw %%xmm7, %%xmm4 \n\t""pmullw %%xmm0, %%"out_reg1" \n\t""pmullw %%xmm4, %%"out_reg2" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_accum_8</name><parameter_list>(<parameter><type><name>ptr_offset</name></type></parameter>, <parameter><type><name>s_offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>snow_inner_add_yblock_sse2_start_8("xmm2", "xmm6", ptr_offset, s_offset)"paddusw %%xmm2, %%xmm1 \n\t""paddusw %%xmm6, %%xmm5 \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_accum_16</name><parameter_list>(<parameter><type><name>ptr_offset</name></type></parameter>, <parameter><type><name>s_offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>snow_inner_add_yblock_sse2_start_16("xmm2", "xmm6", ptr_offset, s_offset)"paddusw %%xmm2, %%xmm1 \n\t""paddusw %%xmm6, %%xmm5 \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_end_common1</name></cpp:macro><cpp:value>"add $32, %%"FF_REG_S" \n\t""add %%"FF_REG_c", %0 \n\t""add %%"FF_REG_c", "FF_PTR_SIZE"*3(%%"FF_REG_a"); \n\t""add %%"FF_REG_c", "FF_PTR_SIZE"*2(%%"FF_REG_a"); \n\t""add %%"FF_REG_c", "FF_PTR_SIZE"*1(%%"FF_REG_a"); \n\t""add %%"FF_REG_c", (%%"FF_REG_a") \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_end_common2</name></cpp:macro><cpp:value>"jnz 1b \n\t":"+m"(dst8),"+m"(dst_array),"=&amp;r"(tmp):"rm"((x86_reg)(src_x&lt;&lt;1)),"m"(obmc),"a"(block),"m"(b_h),"m"(src_stride):XMM_CLOBBERS("%xmm0", "%xmm1", "%xmm2", "%xmm3", "%xmm4", "%xmm5", "%xmm6", "%xmm7", )"%"FF_REG_c"","%"FF_REG_S"","%"FF_REG_D"","%"FF_REG_d"");</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_end_8</name></cpp:macro><cpp:value>"sal $1, %%"FF_REG_c" \n\t""add"FF_OPSIZE" $"FF_PTR_SIZE"*2, %1 \n\t"snow_inner_add_yblock_sse2_end_common1"sar $1, %%"FF_REG_c" \n\t""sub $2, %2 \n\t"snow_inner_add_yblock_sse2_end_common2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_sse2_end_16</name></cpp:macro><cpp:value>"add"FF_OPSIZE" $"FF_PTR_SIZE"*1, %1 \n\t"snow_inner_add_yblock_sse2_end_common1"dec %2 \n\t"snow_inner_add_yblock_sse2_end_common2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>inner_add_yblock_bw_8_obmc_16_bh_even_sse2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>obmc_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>b_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst8</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>snow_inner_add_yblock_sse2_header</name></type>

<name>snow_inner_add_yblock_sse2_start_8</name><argument_list>(<argument><expr><literal type="string">"xmm1"</literal></expr></argument>, <argument><expr><literal type="string">"xmm5"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_sse2_accum_8</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_sse2_accum_8</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"128"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_sse2_accum_8</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"136"</literal></expr></argument>)</argument_list>

"mov %0, %%"<name>FF_REG_d</name>" \n\t"

"movdqa (%%"<name>FF_REG_D</name>"), %%xmm0 \n\t"

"movdqa %%xmm1, %%xmm2 \n\t"

"punpckhwd %%xmm7, %%xmm1 \n\t"

"punpcklwd %%xmm7, %%xmm2 \n\t"

"paddd %%xmm2, %%xmm0 \n\t"

"movdqa 16(%%"<name>FF_REG_D</name>"), %%xmm2\n\t"

"paddd %%xmm1, %%xmm2 \n\t"

"paddd %%xmm3, %%xmm0 \n\t"

"paddd %%xmm3, %%xmm2 \n\t"

"mov %1, %%"<name>FF_REG_D</name>" \n\t"

"mov "<name>FF_PTR_SIZE</name>"(%%"<name>FF_REG_D</name>"), %%"<name>FF_REG_D</name>"; \n\t"

"add %3, %%"<name>FF_REG_D</name>" \n\t"

"movdqa (%%"<name>FF_REG_D</name>"), %%xmm4 \n\t"

"movdqa %%xmm5, %%xmm6 \n\t"

"punpckhwd %%xmm7, %%xmm5 \n\t"

"punpcklwd %%xmm7, %%xmm6 \n\t"

"paddd %%xmm6, %%xmm4 \n\t"

"movdqa 16(%%"<name>FF_REG_D</name>"), %%xmm6\n\t"

"paddd %%xmm5, %%xmm6 \n\t"

"paddd %%xmm3, %%xmm4 \n\t"

"paddd %%xmm3, %%xmm6 \n\t"

"psrad $8, %%xmm0 \n\t" 

"psrad $8, %%xmm2 \n\t" 

"packssdw %%xmm2, %%xmm0 \n\t"

"packuswb %%xmm7, %%xmm0 \n\t"

"movq %%xmm0, (%%"<name>FF_REG_d</name>") \n\t"

"psrad $8, %%xmm4 \n\t" 

"psrad $8, %%xmm6 \n\t" 

"packssdw %%xmm6, %%xmm4 \n\t"

"packuswb %%xmm7, %%xmm4 \n\t"

"movq %%xmm4, (%%"<name>FF_REG_d</name>",%%"<name>FF_REG_c</name>"); \n\t"

<name>snow_inner_add_yblock_sse2_end_8</name></decl></decl_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>inner_add_yblock_bw_16_obmc_32_sse2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>obmc_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>b_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst8</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>snow_inner_add_yblock_sse2_header</name></type>

<name>snow_inner_add_yblock_sse2_start_16</name><argument_list>(<argument><expr><literal type="string">"xmm1"</literal></expr></argument>, <argument><expr><literal type="string">"xmm5"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_sse2_accum_16</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"16"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_sse2_accum_16</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"512"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_sse2_accum_16</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"528"</literal></expr></argument>)</argument_list>

"mov %0, %%"<name>FF_REG_d</name>" \n\t"

"psrlw $4, %%xmm1 \n\t"

"psrlw $4, %%xmm5 \n\t"

"paddw (%%"<name>FF_REG_D</name>"), %%xmm1 \n\t"

"paddw 16(%%"<name>FF_REG_D</name>"), %%xmm5 \n\t"

"paddw %%xmm3, %%xmm1 \n\t"

"paddw %%xmm3, %%xmm5 \n\t"

"psraw $4, %%xmm1 \n\t" 

"psraw $4, %%xmm5 \n\t" 

"packuswb %%xmm5, %%xmm1 \n\t"

"movdqu %%xmm1, (%%"<name>FF_REG_d</name>") \n\t"

<name>snow_inner_add_yblock_sse2_end_16</name></decl></decl_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_mmx_header</name></cpp:macro> <cpp:value>IDWTELEM * * dst_array = sb-&gt;line + src_y;x86_reg tmp;__asm__ volatile("mov %7, %%"FF_REG_c" \n\t""mov %6, %2 \n\t""mov %4, %%"FF_REG_S" \n\t""pxor %%mm7, %%mm7 \n\t" /* 0 */"pcmpeqd %%mm3, %%mm3 \n\t""psllw $15, %%mm3 \n\t""psrlw $12, %%mm3 \n\t" /* FRAC_BITS &gt;&gt; 1 */"1: \n\t""mov %1, %%"FF_REG_D" \n\t""mov (%%"FF_REG_D"), %%"FF_REG_D" \n\t""add %3, %%"FF_REG_D" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_mmx_start</name><parameter_list>(<parameter><type><name>out_reg1</name></type></parameter>, <parameter><type><name>out_reg2</name></type></parameter>, <parameter><type><name>ptr_offset</name></type></parameter>, <parameter><type><name>s_offset</name></type></parameter>, <parameter><type><name>d_offset</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"mov "FF_PTR_SIZE"*"ptr_offset"(%%"FF_REG_a"), %%"FF_REG_d"; \n\t""movd "d_offset"(%%"FF_REG_d"), %%"out_reg1" \n\t""movd "d_offset"+4(%%"FF_REG_d"), %%"out_reg2" \n\t""punpcklbw %%mm7, %%"out_reg1" \n\t""punpcklbw %%mm7, %%"out_reg2" \n\t""movd "s_offset"(%%"FF_REG_S"), %%mm0 \n\t""movd "s_offset"+4(%%"FF_REG_S"), %%mm4 \n\t""punpcklbw %%mm7, %%mm0 \n\t""punpcklbw %%mm7, %%mm4 \n\t""pmullw %%mm0, %%"out_reg1" \n\t""pmullw %%mm4, %%"out_reg2" \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_mmx_accum</name><parameter_list>(<parameter><type><name>ptr_offset</name></type></parameter>, <parameter><type><name>s_offset</name></type></parameter>, <parameter><type><name>d_offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>snow_inner_add_yblock_mmx_start("mm2", "mm6", ptr_offset, s_offset, d_offset)"paddusw %%mm2, %%mm1 \n\t""paddusw %%mm6, %%mm5 \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_mmx_mix</name><parameter_list>(<parameter><type><name>read_offset</name></type></parameter>, <parameter><type><name>write_offset</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"mov %0, %%"FF_REG_d" \n\t""psrlw $4, %%mm1 \n\t""psrlw $4, %%mm5 \n\t""paddw "read_offset"(%%"FF_REG_D"), %%mm1 \n\t""paddw "read_offset"+8(%%"FF_REG_D"), %%mm5 \n\t""paddw %%mm3, %%mm1 \n\t""paddw %%mm3, %%mm5 \n\t""psraw $4, %%mm1 \n\t""psraw $4, %%mm5 \n\t""packuswb %%mm5, %%mm1 \n\t""movq %%mm1, "write_offset"(%%"FF_REG_d") \n\t"
</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snow_inner_add_yblock_mmx_end</name><parameter_list>(<parameter><type><name>s_step</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>"add $"s_step", %%"FF_REG_S" \n\t""add %%"FF_REG_c", "FF_PTR_SIZE"*3(%%"FF_REG_a"); \n\t""add %%"FF_REG_c", "FF_PTR_SIZE"*2(%%"FF_REG_a"); \n\t""add %%"FF_REG_c", "FF_PTR_SIZE"*1(%%"FF_REG_a"); \n\t""add %%"FF_REG_c", (%%"FF_REG_a") \n\t""add"FF_OPSIZE " $"FF_PTR_SIZE"*1, %1 \n\t""add %%"FF_REG_c", %0 \n\t""dec %2 \n\t""jnz 1b \n\t":"+m"(dst8),"+m"(dst_array),"=&amp;r"(tmp):"rm"((x86_reg)(src_x&lt;&lt;1)),"m"(obmc),"a"(block),"m"(b_h),"m"(src_stride):"%"FF_REG_c"","%"FF_REG_S"","%"FF_REG_D"","%"FF_REG_d"");</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>inner_add_yblock_bw_8_obmc_16_mmx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>obmc_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>b_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst8</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>snow_inner_add_yblock_mmx_header</name></type>

<name>snow_inner_add_yblock_mmx_start</name><argument_list>(<argument><expr><literal type="string">"mm1"</literal></expr></argument>, <argument><expr><literal type="string">"mm5"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"128"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"136"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_mix</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_end</name><argument_list>(<argument><expr><literal type="string">"16"</literal></expr></argument>)</argument_list></decl></decl_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>inner_add_yblock_bw_16_obmc_32_mmx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>x86_reg</name></type> <name>obmc_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>b_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>x86_reg</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst8</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>snow_inner_add_yblock_mmx_header</name></type>

<name>snow_inner_add_yblock_mmx_start</name><argument_list>(<argument><expr><literal type="string">"mm1"</literal></expr></argument>, <argument><expr><literal type="string">"mm5"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"16"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"512"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"528"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_mix</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_start</name><argument_list>(<argument><expr><literal type="string">"mm1"</literal></expr></argument>, <argument><expr><literal type="string">"mm5"</literal></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>, <argument><expr><literal type="string">"24"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"520"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_accum</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"536"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_mix</name><argument_list>(<argument><expr><literal type="string">"16"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>)</argument_list>

<name>snow_inner_add_yblock_mmx_end</name><argument_list>(<argument><expr><literal type="string">"32"</literal></expr></argument>)</argument_list></decl></decl_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_snow_inner_add_yblock_sse2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>obmc_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst8</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b_w</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inner_add_yblock_bw_16_obmc_32_sse2</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>, <argument><expr><name>b_h</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,<argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>b_w</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>obmc_stride</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>b_h</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inner_add_yblock_bw_8_obmc_16_bh_even_sse2</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>, <argument><expr><name>b_h</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,<argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inner_add_yblock_bw_8_obmc_16_mmx</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>, <argument><expr><name>b_h</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,<argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_snow_inner_add_yblock</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>, <argument><expr><name>b_h</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,<argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_snow_inner_add_yblock_mmx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>obmc_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst8</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b_w</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inner_add_yblock_bw_16_obmc_32_mmx</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>, <argument><expr><name>b_h</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,<argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>b_w</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>obmc_stride</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inner_add_yblock_bw_8_obmc_16_mmx</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>, <argument><expr><name>b_h</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,<argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_snow_inner_add_yblock</name><argument_list>(<argument><expr><name>obmc</name></expr></argument>, <argument><expr><name>obmc_stride</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>, <argument><expr><name>b_h</name></expr></argument>, <argument><expr><name>src_x</name></expr></argument>,<argument><expr><name>src_y</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_dwt_init_x86</name><parameter_list>(<parameter><decl><type><name>SnowDWTContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>mm_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mm_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>mm_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_SSE2</name> <operator>&amp;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>horizontal_compose97i</name></name> <operator>=</operator> <name>ff_snow_horizontal_compose97i_sse2</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vertical_compose97i</name></name> <operator>=</operator> <name>ff_snow_vertical_compose97i_sse2</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>inner_add_yblock</name></name> <operator>=</operator> <name>ff_snow_inner_add_yblock_sse2</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mm_flags</name> <operator>&amp;</operator> <name>AV_CPU_FLAG_MMXEXT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>horizontal_compose97i</name></name> <operator>=</operator> <name>ff_snow_horizontal_compose97i_mmx</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_7REGS</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vertical_compose97i</name></name> <operator>=</operator> <name>ff_snow_vertical_compose97i_mmx</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_6REGS</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>inner_add_yblock</name></name> <operator>=</operator> <name>ff_snow_inner_add_yblock_mmx</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
