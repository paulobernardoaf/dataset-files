<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264_refs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pic_as_field</name><parameter_list>(<parameter><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>parity</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parity</name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <name>parity</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>poc</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><name>parity</name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ref_from_h264pic</name><parameter_list>(<parameter><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>reference</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>poc</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pic_id</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>pic_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>split_field_copy</name><parameter_list>(<parameter><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id_add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>parity</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ref_from_h264pic</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parity</name> <operator>!=</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pic_as_field</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>parity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pic_id</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dest</name><operator>-&gt;</operator><name>pic_id</name></name> <operator>+=</operator> <name>id_add</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>match</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_def_list</name><parameter_list>(<parameter><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>def</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def_len</name></decl></parameter>,

<parameter><decl><type><name>H264Picture</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_long</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>len</name> <operator>||</operator> <name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>reference</name> <operator>&amp;</operator> <name>sel</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>reference</name> <operator>&amp;</operator> <operator>(</operator><name>sel</name> <operator>^</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>def_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>pic_id</name> <operator>=</operator> <ternary><condition><expr><name>is_long</name></expr> ?</condition><then> <expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>frame_num</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>split_field_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>def</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>sel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>def_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>pic_id</name> <operator>=</operator> <ternary><condition><expr><name>is_long</name></expr> ?</condition><then> <expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name>frame_num</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>split_field_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>def</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>sel</name> <operator>^</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_sorted</name><parameter_list>(<parameter><decl><type><name>H264Picture</name> <modifier>*</modifier><modifier>*</modifier></type><name>sorted</name></decl></parameter>, <parameter><decl><type><name>H264Picture</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>best_poc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>best_poc</name> <operator>=</operator> <ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>INT_MIN</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>poc</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>poc</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>poc</name> <operator>&gt;</operator> <name>limit</name><operator>)</operator> <operator>^</operator> <name>dir</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>poc</name> <operator>&lt;</operator> <name>best_poc</name><operator>)</operator> <operator>^</operator> <name>dir</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_poc</name> <operator>=</operator> <name>poc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sorted</name><index>[<expr><name>out_i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>best_poc</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>INT_MIN</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name>out_i</name><operator>++</operator></expr>]</index></name><operator>-&gt;</operator><name>poc</name> <operator>-</operator> <name>dir</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>out_i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mismatches_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>f</name><operator>-&gt;</operator><name>format</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_initialise_ref_list</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name><name>sorted</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_poc</name></decl>, <decl><type ref="prev"/><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>lens</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_poc</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_poc</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>add_sorted</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr></argument>, <argument><expr><name>cur_poc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>^</operator> <name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>add_sorted</name><argument_list>(<argument><expr><name>sorted</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr></argument>, <argument><expr><name>cur_poc</name></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>^</operator> <name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>build_def_list</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>build_def_list</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>,

<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H264Ref</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name> <operator>-</operator> <name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lens</name><index>[<expr><name>list</name></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>lens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>lens</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>lens</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>buffer</name> <operator>==</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>buffer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>lens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>H264Ref</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>build_def_list</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>build_def_list</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>,

<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator> <name>long_ref</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>H264Ref</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"List0: %s fn:%d 0x%p\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name></expr> ?</condition><then> <expr><literal type="string">"LT"</literal></expr> </then><else>: <expr><literal type="string">"ST"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"??"</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pic_id</name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"List1: %s fn:%d 0x%p\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name></expr> ?</condition><then> <expr><literal type="string">"LT"</literal></expr> </then><else>: <expr><literal type="string">"ST"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"??"</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pic_id</name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mismatches_ref</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Discarding mismatching reference\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>default_ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_short_term</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_MMCO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"short term list:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu32</name><literal type="string">" fn:%d poc:%d %p\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_long_term</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_MMCO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"long term list:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu32</name><literal type="string">" fn:%d poc:%d %p\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pic_num_extract</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pic_num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>structure</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>structure</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pic_num</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>structure</name> <operator>^=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pic_num</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pic_num</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h264_fill_mbaff_ref_list</name><parameter_list>(<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Ref</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>frame</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>reference</name> <operator>=</operator> <name>PICT_TOP_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>poc</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>reference</name> <operator>=</operator> <name>PICT_BOTTOM_FIELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>field</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>poc</name> <operator>=</operator> <name><name>field</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_build_ref_list</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>pic_structure</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>print_short_term</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_long_term</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>h264_initialise_ref_list</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pred</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>curr_pic_num</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>nb_ref_modifications</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>modification_of_pic_nums_idc</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_modifications</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>op</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_modifications</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pic_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>modification_of_pic_nums_idc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>abs_diff_pic_num</name> <init>= <expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>abs_diff_pic_num</name> <operator>&gt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>max_pic_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"abs_diff_pic_num overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modification_of_pic_nums_idc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>-=</operator> <name>abs_diff_pic_num</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>+=</operator> <name>abs_diff_pic_num</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pred</name> <operator>&amp;=</operator> <name><name>sl</name><operator>-&gt;</operator><name>max_pic_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_num</name> <operator>=</operator> <call><name>pic_num_extract</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>==</operator> <name>frame_num</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>pic_structure</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pic_id</name></name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>long_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pic_id</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>long_idx</name> <operator>=</operator> <call><name>pic_num_extract</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>pic_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>long_idx</name> <operator>&gt;</operator> <literal type="number">31U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"long_term_pic_idx overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>long_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>ref</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>reference</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>pic_structure</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>pic_id</name></name> <operator>=</operator> <name>pic_id</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>mismatches_ref</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"reference picture missing during reorder\n"</literal></expr> </then><else>:

<expr><literal type="string">"mismatching reference\n"</literal></expr></else></ternary></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>index</name></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>&amp;&amp;</operator>

<name><name>ref</name><operator>-&gt;</operator><name>long_ref</name></name> <operator>==</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name> <operator>&amp;&amp;</operator>

<name><name>ref</name><operator>-&gt;</operator><name>pic_id</name></name> <operator>==</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pic_id</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>index</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ref_from_h264pic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pic_as_field</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>pic_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>parent</name>

<operator>||</operator> <operator>(</operator><operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>reference</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing reference picture, default is %d\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>default_ref</name><index>[<expr><name>list</name></expr>]</index></name><operator>.</operator><name>poc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>default_ref</name><index>[<expr><name>list</name></expr>]</index></name><operator>.</operator><name>parent</name>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>default_ref</name><index>[<expr><name>list</name></expr>]</index></name><operator>.</operator><name>reference</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>default_ref</name><index>[<expr><name>list</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>av_buffer_get_ref_count</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>h264_fill_mbaff_ref_list</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_decode_ref_pic_list_reordering</name><parameter_list>(<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>list</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>nb_ref_modifications</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>nb_ref_modifications</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>list</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>op</name> <init>= <expr><call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>list</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"reference count overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"illegal modification_of_pic_nums_idc %u\n"</literal></expr></argument>,

<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_modifications</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_modifications</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>op</name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>nb_ref_modifications</name><index>[<expr><name>list</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>unreference_pic</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refmask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;=</operator> <name>refmask</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name>pic</name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <name>DELAYED_PIC_REF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>find_short</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_MMCO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%d %d %p\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>==</operator> <name>frame_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><name>pic</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_short_at_index</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>H264Picture</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>remove_short</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_MMCO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"remove short %d count %d\n"</literal></expr></argument>, <argument><expr><name>frame_num</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>find_short</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>frame_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unreference_pic</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>ref_mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_short_at_index</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>H264Picture</name> <modifier>*</modifier></type><name>remove_long</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref_mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unreference_pic</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>ref_mask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>long_ref</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>long_ref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_h264_remove_all_refs</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>remove_long</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>last_pic_for_ec</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_unref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>last_pic_for_ec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264_ref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>last_pic_for_ec</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>unreference_pic</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>default_ref</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>default_ref</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>generate_sliding_window_mmcos</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMCO</name> <modifier>*</modifier></type><name>mmco</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_mmco</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>reference</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>=</operator> <name>MMCO_SHORT2UNUSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>short_pic_num</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_mmco</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>short_pic_num</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>=</operator> <name>MMCO_SHORT2UNUSED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>short_pic_num</name> <operator>=</operator> <name><name>mmco</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>short_pic_num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_mmco</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>nb_mmco</name></name> <operator>=</operator> <name>nb_mmco</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_execute_ref_pic_marking</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MMCO</name> <modifier>*</modifier></type><name>mmco</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mmco_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pps_ref_count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_ref_assigned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>av_uninit</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS is unset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>generate_sliding_window_mmcos</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mmco_count</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>nb_mmco</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_MMCO</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>mmco_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"no mmco here\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mmco_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>structure</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>av_uninit</name><argument_list>(<argument><expr><name>frame_num</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_MMCO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mmco:%d %d %d\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcode</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>short_pic_num</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>==</operator> <name>MMCO_SHORT2UNUSED</name> <operator>||</operator>

<name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>==</operator> <name>MMCO_SHORT2LONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_num</name> <operator>=</operator> <call><name>pic_num_extract</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>short_pic_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>find_short</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>frame_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>!=</operator> <name>MMCO_SHORT2LONG</name> <operator>||</operator>

<operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>]</index></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>]</index></name><operator>-&gt;</operator><name>frame_num</name> <operator>!=</operator> <name>frame_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr> ?</condition><then> <expr><name>AV_LOG_ERROR</name></expr> </then><else>: <expr><name>AV_LOG_DEBUG</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"mmco: unref short failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MMCO_SHORT2UNUSED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_MMCO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mmco: unref short %d count %d\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>short_pic_num</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_short</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>frame_num</name></expr></argument>, <argument><expr><name>structure</name> <operator>^</operator> <name>PICT_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MMCO_SHORT2LONG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>]</index></name> <operator>!=</operator> <name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_long</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_short_at_index</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[ <expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr> ]</index></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>]</index></name><operator>-&gt;</operator><name>long_ref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MMCO_LONG2UNUSED</name></expr>:</case>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>pic_num_extract</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_long</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>structure</name> <operator>^</operator> <name>PICT_FRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_MMCO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mmco: unref long failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>MMCO_LONG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mmco: cannot assign current picture to short and long at the same time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_short_at_index</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>long_ref</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"mmco: cannot assign current picture to 2 long term references\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_long</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>]</index></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_long</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>]</index></name><operator>-&gt;</operator><name>long_ref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>|=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_ref_assigned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MMCO_SET_MAX_LONG</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>remove_long</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>MMCO_RESET</name></expr>:</case>

<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_short</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>remove_long</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mmco_reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>mmco_reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAX_DELAYED_PIC_COUNT</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_ref_assigned</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>|=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>long_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal short term reference "</literal>

<literal type="string">"assignment for second field "</literal>

<literal type="string">"in complementary field pair "</literal>

<literal type="string">"(first field is long term)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>remove_short</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"illegal short term buffer state detected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>H264Picture</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>|=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"number of reference frames (%d+%d) exceeds max (%d; probably "</literal>

<literal type="string">"corrupt input), discarding one\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_long</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_short</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>invalid_gap</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>-</operator> <name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_short</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>print_short_term</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_long_term</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>PPS</name> <operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pps_ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>pps_ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps_ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>pps_ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>err</name> <operator>&gt;=</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name><operator>==</operator><literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name><operator>&lt;=</operator><literal type="number">2</literal>

<operator>||</operator> <name><name>pps_ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>pps_ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name>

<operator>||</operator> <name><name>pps_ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pps_ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>pps_ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;=</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>has_recovery_point</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>recovered</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>frame_recovered</name></name> <operator>|=</operator> <name>FRAME_RECOVERED_SEI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr> ?</condition><then> <expr><name>err</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_decode_ref_pic_marking</name><parameter_list>(<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MMCO</name> <modifier>*</modifier></type><name>mmco</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mmco</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_mmco</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>=</operator> <name>MMCO_LONG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>long_arg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_mmco</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MMCO_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MMCOOpcode</name></type> <name>opcode</name> <init>= <expr><call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MMCO_SHORT2UNUSED</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>MMCO_SHORT2LONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>short_pic_num</name> <operator>=</operator>

<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>curr_pic_num</name></name> <operator>-</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator>

<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>max_pic_num</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MMCO_SHORT2LONG</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>MMCO_LONG2UNUSED</name> <operator>||</operator>

<name>opcode</name> <operator>==</operator> <name>MMCO_LONG</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>MMCO_SET_MAX_LONG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>long_arg</name> <init>= <expr><call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>long_arg</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>||</operator>

<operator>(</operator><name>long_arg</name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>opcode</name> <operator>==</operator> <name>MMCO_SET_MAX_LONG</name> <operator>&amp;&amp;</operator>

<name>long_arg</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>opcode</name> <operator>==</operator> <name>MMCO_LONG2UNUSED</name> <operator>&amp;&amp;</operator> <call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"illegal long ref in memory management control "</literal>

<literal type="string">"operation %d\n"</literal></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>nb_mmco</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_arg</name> <operator>=</operator> <name>long_arg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>MMCO_LONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"illegal memory management control operation %d\n"</literal></expr></argument>,

<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>nb_mmco</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>MMCO_END</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>nb_mmco</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>nb_mmco</name></name> <operator>=</operator> <name>nb_mmco</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
