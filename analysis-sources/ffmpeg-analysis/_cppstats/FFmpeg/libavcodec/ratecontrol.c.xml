<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ratecontrol.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ratecontrol.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_write_pass1_stats</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>,

<argument><expr><literal type="string">"in:%d out:%d type:%d q:%d itex:%d ptex:%d mv:%d misc:%d "</literal>

<literal type="string">"fcode:%d bcode:%d mc-var:%"</literal><name>PRId64</name><literal type="string">" var:%"</literal><name>PRId64</name><literal type="string">" icount:%d skipcount:%d hbits:%d;\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>display_picture_number</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>coded_picture_number</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_tex_bits</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_tex_bits</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mv_bits</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>misc_bits</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mc_mb_var_sum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>.</operator><name>mb_var_sum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>skip_count</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_fps</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1.0</literal> <operator>/</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>qp2bits</name><parameter_list>(<parameter><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>qp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>qp</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"qp&lt;=0.0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>+</operator> <name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>qp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>bits2qp</name><parameter_list>(<parameter><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">0.9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bits&lt;0.9\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>+</operator> <name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>bits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_diff_limited_q</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pict_type</name> <init>= <expr><name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>last_p_q</name> <init>= <expr><name><name>rcc</name><operator>-&gt;</operator><name>last_qscale_for</name><index>[<expr><name>AV_PICTURE_TYPE_P</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>last_non_b_q</name> <init>= <expr><name><name>rcc</name><operator>-&gt;</operator><name>last_qscale_for</name><index>[<expr><name><name>rcc</name><operator>-&gt;</operator><name>last_non_b_pict_type</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pict_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>||</operator> <name><name>rcc</name><operator>-&gt;</operator><name>last_non_b_pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>last_p_q</name> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>i_quant_offset</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pict_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator>

<name><name>a</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>last_non_b_q</name> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>b_quant_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rcc</name><operator>-&gt;</operator><name>last_non_b_pict_type</name></name> <operator>==</operator> <name>pict_type</name> <operator>||</operator> <name>pict_type</name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>last_q</name> <init>= <expr><name><name>rcc</name><operator>-&gt;</operator><name>last_qscale_for</name><index>[<expr><name>pict_type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxdiff</name> <init>= <expr><name>FF_QP2LAMBDA</name> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>max_qdiff</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>last_q</name> <operator>+</operator> <name>maxdiff</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>last_q</name> <operator>+</operator> <name>maxdiff</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>last_q</name> <operator>-</operator> <name>maxdiff</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>last_q</name> <operator>-</operator> <name>maxdiff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>last_qscale_for</name><index>[<expr><name>pict_type</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>pict_type</name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>last_non_b_pict_type</name></name> <operator>=</operator> <name>pict_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_qminmax</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qmin_ret</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>qmax_ret</name></decl></parameter>, <parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pict_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qmin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lmin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qmax</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lmax</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>qmin</name> <operator>&lt;=</operator> <name>qmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>pict_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>

<expr_stmt><expr><name>qmin</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>qmin</name> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>qmax</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>qmax</name> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name>qmin</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>qmin</name> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>qmax</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>qmax</name> <operator>*</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>qmin</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>qmin</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FF_LAMBDA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qmax</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>qmax</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>FF_LAMBDA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qmax</name> <operator>&lt;</operator> <name>qmin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qmax</name> <operator>=</operator> <name>qmin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>qmin_ret</name> <operator>=</operator> <name>qmin</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>qmax_ret</name> <operator>=</operator> <name>qmax</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>modify_qscale</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>buffer_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>fps</name> <init>= <expr><call><name>get_fps</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>min_rate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>/</operator> <name>fps</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>max_rate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <name>fps</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pict_type</name> <init>= <expr><name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qmin</name></decl>, <decl><type ref="prev"/><name>qmax</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_qminmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qmax</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rc_qmod_freq</name></name> <operator>&amp;&amp;</operator>

<name>frame_num</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>rc_qmod_freq</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>pict_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>*=</operator> <name><name>s</name><operator>-&gt;</operator><name>rc_qmod_amp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>expected_size</name> <init>= <expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>q_limit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>min_rate</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>buffer_size</name> <operator>-</operator> <name>expected_size</name><operator>)</operator> <operator>/</operator> <name>buffer_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0.0001</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0.0001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>*=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>rc_buffer_aggressivity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_limit</name> <operator>=</operator> <call><name>bits2qp</name><argument_list>(<argument><expr><name>rce</name></expr></argument>,

<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>min_rate</name> <operator>-</operator> <name>buffer_size</name> <operator>+</operator> <name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name><operator>)</operator> <operator>*</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_min_vbv_overflow_use</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>q_limit</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_RC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"limiting QP %f -&gt; %f\n"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>q_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>q_limit</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_rate</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>expected_size</name> <operator>/</operator> <name>buffer_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0.0001</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0.0001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>/=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>rc_buffer_aggressivity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q_limit</name> <operator>=</operator> <call><name>bits2qp</name><argument_list>(<argument><expr><name>rce</name></expr></argument>,

<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>*</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_available_vbv_use</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>q_limit</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_RC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"limiting QP %f -&gt; %f\n"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>q_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>q_limit</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"q:%f max:%f min:%f size:%f index:%f agr:%f\n"</literal></expr></argument>,

<argument><expr><name>q</name></expr></argument>, <argument><expr><name>max_rate</name></expr></argument>, <argument><expr><name>min_rate</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rc_buffer_aggressivity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rc_qsquish</name></name> <operator>==</operator> <literal type="number">0.0</literal> <operator>||</operator> <name>qmin</name> <operator>==</operator> <name>qmax</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>qmin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>qmin</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>qmax</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>qmax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>min2</name> <init>= <expr><call><name>log</name><argument_list>(<argument><expr><name>qmin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>max2</name> <init>= <expr><call><name>log</name><argument_list>(<argument><expr><name>qmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>q</name> <operator>-</operator> <name>min2</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>max2</name> <operator>-</operator> <name>min2</name><operator>)</operator> <operator>-</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>*=</operator> <operator>-</operator><literal type="number">4.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <call><name>exp</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>q</name> <operator>*</operator> <operator>(</operator><name>max2</name> <operator>-</operator> <name>min2</name><operator>)</operator> <operator>+</operator> <name>min2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_qscale</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>rate_factor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pict_type</name> <init>= <expr><name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>mb_num</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>const_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>M_PI</name></expr>,

<expr><name>M_E</name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>*</operator> <name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>*</operator> <name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr>,

<expr><operator>(</operator><name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>+</operator> <name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>mv_bits</name></name> <operator>/</operator> <name>mb_num</name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>?</operator> <operator>(</operator><name><name>rce</name><operator>-&gt;</operator><name>f_code</name></name> <operator>+</operator> <name><name>rce</name><operator>-&gt;</operator><name>b_code</name></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5</literal> <operator>:</operator> <name><name>rce</name><operator>-&gt;</operator><name>f_code</name></name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>i_count</name></name> <operator>/</operator> <name>mb_num</name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name> <operator>/</operator> <name>mb_num</name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>mb_var_sum</name></name> <operator>/</operator> <name>mb_num</name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name></expr>,

<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>,

<expr><name><name>rcc</name><operator>-&gt;</operator><name>qscale_sum</name><index>[<expr><name>pict_type</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name>pict_type</name></expr>]</index></name></expr>,

<expr><name><name>a</name><operator>-&gt;</operator><name>qcompress</name></name></expr>,

<expr><name><name>rcc</name><operator>-&gt;</operator><name>i_cplx_sum</name><index>[<expr><name>AV_PICTURE_TYPE_I</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name>AV_PICTURE_TYPE_I</name></expr>]</index></name></expr>,

<expr><name><name>rcc</name><operator>-&gt;</operator><name>i_cplx_sum</name><index>[<expr><name>AV_PICTURE_TYPE_P</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name>AV_PICTURE_TYPE_P</name></expr>]</index></name></expr>,

<expr><name><name>rcc</name><operator>-&gt;</operator><name>p_cplx_sum</name><index>[<expr><name>AV_PICTURE_TYPE_P</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name>AV_PICTURE_TYPE_P</name></expr>]</index></name></expr>,

<expr><name><name>rcc</name><operator>-&gt;</operator><name>p_cplx_sum</name><index>[<expr><name>AV_PICTURE_TYPE_B</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name>AV_PICTURE_TYPE_B</name></expr>]</index></name></expr>,

<expr><operator>(</operator><name><name>rcc</name><operator>-&gt;</operator><name>i_cplx_sum</name><index>[<expr><name>pict_type</name></expr>]</index></name> <operator>+</operator> <name><name>rcc</name><operator>-&gt;</operator><name>p_cplx_sum</name><index>[<expr><name>pict_type</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name>pict_type</name></expr>]</index></name></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>av_expr_eval</name><argument_list>(<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>rc_eq_eval</name></name></expr></argument>, <argument><expr><name>const_values</name></expr></argument>, <argument><expr><name>rce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error evaluating rc_eq \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rc_eq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>pass1_rc_eq_output_sum</name></name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>*=</operator> <name>rate_factor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_override_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RcOverride</name> <modifier>*</modifier></type><name>rco</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_override</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start_frame</name> <operator>&gt;</operator> <name>frame_num</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end_frame</name> <operator>&lt;</operator> <name>frame_num</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>qscale</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>qp2bits</name><argument_list>(<argument><expr><name>rce</name></expr></argument>, <argument><expr><name><name>rco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>*=</operator> <name><name>rco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>quality_factor</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>bits2qp</name><argument_list>(<argument><expr><name>rce</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pict_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>-</operator><name>q</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pict_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>&lt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>-</operator><name>q</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_pass2</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>toobig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>fps</name> <init>= <expr><call><name>get_fps</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>complexity</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>const_bits</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>all_const_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>all_available_bits</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>/</operator> <name>fps</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rate_factor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>step</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter_size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>qblur</name></name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>expected_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>qscale</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>blurred_qscale</name></decl>, <decl><type ref="prev"/><name>qscale_sum</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name> <init>= <expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name> <operator>=</operator> <name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>i_cplx_sum</name><index>[<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>*</operator> <name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>p_cplx_sum</name><index>[<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>*</operator> <name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>mv_bits_sum</name><index>[<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>-&gt;</operator><name>mv_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>complexity</name><index>[<expr><name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>+</operator> <name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name><operator>)</operator> <operator>*</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_bits</name><index>[<expr><name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>-&gt;</operator><name>mv_bits</name></name> <operator>+</operator> <name><name>rce</name><operator>-&gt;</operator><name>misc_bits</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>all_const_bits</name> <operator>=</operator> <name><name>const_bits</name><index>[<expr><name>AV_PICTURE_TYPE_I</name></expr>]</index></name> <operator>+</operator>

<name><name>const_bits</name><index>[<expr><name>AV_PICTURE_TYPE_P</name></expr>]</index></name> <operator>+</operator>

<name><name>const_bits</name><index>[<expr><name>AV_PICTURE_TYPE_B</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>all_available_bits</name> <operator>&lt;</operator> <name>all_const_bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"requested bitrate is too low\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qscale</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blurred_qscale</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qscale</name> <operator>||</operator> <operator>!</operator><name>blurred_qscale</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>blurred_qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>toobig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>step</name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal></expr>;</init> <condition><expr><name>step</name> <operator>&gt;</operator> <literal type="number">0.0000001</literal></expr>;</condition> <incr><expr><name>step</name> <operator>*=</operator> <literal type="number">0.5</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>expected_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rate_factor</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name> <init>= <expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>qscale</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>rate_factor</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>last_qscale_for</name><index>[<expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name></expr>]</index></name> <operator>=</operator> <name><name>qscale</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>filter_size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>-</operator> <literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name> <init>= <expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>qscale</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_diff_limited_q</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rce</name></expr></argument>, <argument><expr><name><name>qscale</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name> <init>= <expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>qscale</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_diff_limited_q</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rce</name></expr></argument>, <argument><expr><name><name>qscale</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name> <init>= <expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pict_type</name> <init>= <expr><name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>q</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>filter_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>i</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>filter_size</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>index</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>coeff</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>qblur</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1.0</literal></expr> </then><else>: <expr><call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>d</name> <operator>*</operator> <name>d</name> <operator>/</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>qblur</name></name> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>qblur</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pict_type</name> <operator>!=</operator> <name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>new_pict_type</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <name><name>qscale</name><index>[<expr><name>index</name></expr>]</index></name> <operator>*</operator> <name>coeff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>coeff</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>blurred_qscale</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>q</name> <operator>/</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name> <init>= <expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>new_qscale</name></name> <operator>=</operator> <call><name>modify_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rce</name></expr></argument>, <argument><expr><name><name>blurred_qscale</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>qp2bits</name><argument_list>(<argument><expr><name>rce</name></expr></argument>, <argument><expr><name><name>rce</name><operator>-&gt;</operator><name>new_qscale</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>rce</name><operator>-&gt;</operator><name>mv_bits</name></name> <operator>+</operator> <name><name>rce</name><operator>-&gt;</operator><name>misc_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <call><name>ff_vbv_update</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>expected_bits</name></name> <operator>=</operator> <name>expected_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>expected_bits</name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"expected_bits: %f all_available_bits: %d rate_factor: %f\n"</literal></expr></argument>,

<argument><expr><name>expected_bits</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>all_available_bits</name></expr></argument>, <argument><expr><name>rate_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expected_bits</name> <operator>&gt;</operator> <name>all_available_bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rate_factor</name> <operator>-=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>toobig</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>blurred_qscale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qscale_sum</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[lavc rc] entry[%d].new_qscale = %.3f qp = %.3f\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>new_qscale</name></expr></argument>,

<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>new_qscale</name> <operator>/</operator> <name>FF_QP2LAMBDA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qscale_sum</name> <operator>+=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>new_qscale</name> <operator>/</operator> <name>FF_QP2LAMBDA</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>toobig</name> <operator>&lt;=</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"[lavc rc] requested bitrate: %"</literal><name>PRId64</name><literal type="string">" bps expected bitrate: %"</literal><name>PRId64</name><literal type="string">" bps\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>expected_bits</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>all_available_bits</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"[lavc rc] estimated target average qp: %.3f\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>qscale_sum</name> <operator>/</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toobig</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"[lavc rc] Using all of requested bitrate is not "</literal>

<literal type="string">"necessary for this video with these parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>toobig</name> <operator>==</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"[lavc rc] Error: bitrate too low for this video "</literal>

<literal type="string">"with these parameters.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>expected_bits</name> <operator>/</operator> <name>all_available_bits</name> <operator>-</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.01</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"[lavc rc] Error: 2pass curve failed to converge\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_rate_control_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>const_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"PI"</literal></expr>,

<expr><literal type="string">"E"</literal></expr>,

<expr><literal type="string">"iTex"</literal></expr>,

<expr><literal type="string">"pTex"</literal></expr>,

<expr><literal type="string">"tex"</literal></expr>,

<expr><literal type="string">"mv"</literal></expr>,

<expr><literal type="string">"fCode"</literal></expr>,

<expr><literal type="string">"iCount"</literal></expr>,

<expr><literal type="string">"mcVar"</literal></expr>,

<expr><literal type="string">"var"</literal></expr>,

<expr><literal type="string">"isI"</literal></expr>,

<expr><literal type="string">"isP"</literal></expr>,

<expr><literal type="string">"isB"</literal></expr>,

<expr><literal type="string">"avgQP"</literal></expr>,

<expr><literal type="string">"qComp"</literal></expr>,

<expr><literal type="string">"avgIITex"</literal></expr>,

<expr><literal type="string">"avgPITex"</literal></expr>,

<expr><literal type="string">"avgPPTex"</literal></expr>,

<expr><literal type="string">"avgBPTex"</literal></expr>,

<expr><literal type="string">"avgTex"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>func1</name><index>[]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{

<expr><operator>(</operator><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call><operator>)</operator> <name>bits2qp</name></expr>,

<expr><operator>(</operator><call><call><name>double</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call><operator>)</operator> <name>qp2bits</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>func1_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"bits2qp"</literal></expr>,

<expr><literal type="string">"qp2bits"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_available_vbv_use</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_available_vbv_use</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name><operator>/</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name><operator>*</operator><call><name>get_fps</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_available_vbv_use</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_expr_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>rc_eq_eval</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rc_eq</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rc_eq</name></name></expr> </then><else>: <expr><literal type="string">"tex^qComp"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>const_names</name></expr></argument>, <argument><expr><name>func1_names</name></expr></argument>, <argument><expr><name>func1</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error parsing rc_eq \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>rc_eq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>pred</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coeff</name> <operator>=</operator> <name>FF_QP2LAMBDA</name> <operator>*</operator> <literal type="number">7.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>pred</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>pred</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decay</name> <operator>=</operator> <literal type="number">0.4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>i_cplx_sum</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>rcc</name><operator>-&gt;</operator><name>p_cplx_sum</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>rcc</name><operator>-&gt;</operator><name>mv_bits_sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>rcc</name><operator>-&gt;</operator><name>qscale_sum</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>last_qscale_for</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>FF_QP2LAMBDA</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RateControlEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>entry</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RateControlEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name> <init>= <expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name><name>rce</name><operator>-&gt;</operator><name>new_qscale</name></name> <operator>=</operator> <name>FF_QP2LAMBDA</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>misc_bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>mb_var_sum</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>picture_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>next</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>next</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" in:%d "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>picture_number</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>picture_number</name> <operator>&lt;</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rce</name> <operator>=</operator> <operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>picture_number</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" in:%*d out:%*d type:%d q:%f itex:%d ptex:%d mv:%d misc:%d fcode:%d bcode:%d mc-var:%"</literal><name>SCNd64</name><literal type="string">" var:%"</literal><name>SCNd64</name><literal type="string">" icount:%d skipcount:%d hbits:%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>mv_bits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>misc_bits</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>f_code</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>b_code</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>mb_var_sum</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>skip_count</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rce</name><operator>-&gt;</operator><name>header_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"statistics are damaged at line %d, parser out=%d\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>init_pass2</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_rate_control_uninit</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>short_term_qsum</name></name> <operator>=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>short_term_qcount</name></name> <operator>=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>pass1_rc_eq_output_sum</name></name> <operator>=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>pass1_wanted_bits</name></name> <operator>=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qblur</name></name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"qblur too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rc_initial_cplx</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>bits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>rc_initial_cplx</name></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">10000.0</literal> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RateControlEntry</name></type> <name>rce</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>%</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>new_pict_type</name></name> <operator>=</operator> <name><name>rce</name><operator>.</operator><name>pict_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>mc_mb_var_sum</name></name> <operator>=</operator> <name>bits</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>/</operator> <literal type="number">100000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>mb_var_sum</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>qscale</name></name> <operator>=</operator> <name>FF_QP2LAMBDA</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>f_code</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>b_code</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>misc_bits</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>i_tex_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>p_tex_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>mv_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>i_tex_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>p_tex_bits</name></name> <operator>=</operator> <name>bits</name> <operator>*</operator> <literal type="number">0.9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>.</operator><name>mv_bits</name></name> <operator>=</operator> <name>bits</name> <operator>*</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>i_cplx_sum</name><index>[<expr><name><name>rce</name><operator>.</operator><name>pict_type</name></name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>.</operator><name>i_tex_bits</name></name> <operator>*</operator> <name><name>rce</name><operator>.</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>p_cplx_sum</name><index>[<expr><name><name>rce</name><operator>.</operator><name>pict_type</name></name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>.</operator><name>p_tex_bits</name></name> <operator>*</operator> <name><name>rce</name><operator>.</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>mv_bits_sum</name><index>[<expr><name><name>rce</name><operator>.</operator><name>pict_type</name></name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>.</operator><name>mv_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name><name>rce</name><operator>.</operator><name>pict_type</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rce</name></expr></argument>, <argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>pass1_wanted_bits</name></name> <operator>/</operator> <name><name>rcc</name><operator>-&gt;</operator><name>pass1_rc_eq_output_sum</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>pass1_wanted_bits</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <call><name>get_fps</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_rate_control_uninit</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_expr_free</name><argument_list>(<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>rc_eq_eval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vbv_update</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>fps</name> <init>= <expr><call><name>get_fps</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>buffer_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>min_rate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_min_rate</name></name> <operator>/</operator> <name>fps</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>max_rate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>/</operator> <name>fps</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d %f %d %f %f\n"</literal></expr></argument>,

<argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>, <argument><expr><name>min_rate</name></expr></argument>, <argument><expr><name>max_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>-=</operator> <name>frame_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"rc buffer underflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&gt;</operator> <name>max_rate</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"max bitrate possibly too small or try trellis with large lmax or increase qmax\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name>buffer_size</name> <operator>-</operator> <name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>+=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>min_rate</name></expr></argument>, <argument><expr><name>max_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>&gt;</operator> <name>buffer_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stuffing</name> <init>= <expr><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>-</operator> <name>buffer_size</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stuffing</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MPEG4</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stuffing</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>buffer_index</name></name> <operator>-=</operator> <literal type="number">8</literal> <operator>*</operator> <name>stuffing</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_RC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"stuffing %d bytes\n"</literal></expr></argument>, <argument><expr><name>stuffing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>stuffing</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>predict_size</name><parameter_list>(<parameter><decl><type><name>Predictor</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>coeff</name></name> <operator>*</operator> <name>var</name> <operator>/</operator> <operator>(</operator><name>q</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_predictor</name><parameter_list>(<parameter><decl><type><name>Predictor</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>var</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>new_coeff</name> <init>= <expr><name>size</name> <operator>*</operator> <name>q</name> <operator>/</operator> <operator>(</operator><name>var</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>var</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name> <operator>*=</operator> <name><name>p</name><operator>-&gt;</operator><name>decay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeff</name></name> <operator>*=</operator> <name><name>p</name><operator>-&gt;</operator><name>decay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeff</name></name> <operator>+=</operator> <name>new_coeff</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adaptive_quantization</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>lumi_masking</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lumi_masking</name></name> <operator>/</operator> <operator>(</operator><literal type="number">128.0</literal> <operator>*</operator> <literal type="number">128.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>dark_masking</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>dark_masking</name></name> <operator>/</operator> <operator>(</operator><literal type="number">128.0</literal> <operator>*</operator> <literal type="number">128.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>temp_cplx_masking</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>temporal_cplx_masking</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>spatial_cplx_masking</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>spatial_cplx_masking</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>p_masking</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>p_masking</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>border_masking</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>border_masking</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bits_sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cplx_sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>cplx_tab</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cplx_tab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>bits_tab</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bits_tab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qmin</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_lmin</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>qmax</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>mb_lmax</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pic</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_height</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>temp_cplx</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>spat_cplx</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_var</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lumi</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>mb_mean</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>cplx</name></decl>, <decl><type ref="prev"/><name>factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_x</name> <init>= <expr><name>mb_xy</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_y</name> <init>= <expr><name>mb_xy</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_distance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mb_factor</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>spat_cplx</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>spat_cplx</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>temp_cplx</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp_cplx</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>&amp;</operator> <name>CANDIDATE_MB_TYPE_INTRA</name><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>cplx</name> <operator>=</operator> <name>spat_cplx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>+</operator> <name>p_masking</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cplx</name> <operator>=</operator> <name>temp_cplx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>temp_cplx</name></expr></argument>, <argument><expr><operator>-</operator><name>temp_cplx_masking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>factor</name> <operator>*=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>spat_cplx</name></expr></argument>, <argument><expr><operator>-</operator><name>spatial_cplx_masking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lumi</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>factor</name> <operator>*=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>lumi</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>lumi</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <name>lumi_masking</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>factor</name> <operator>*=</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>lumi</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>lumi</name> <operator>-</operator> <literal type="number">128</literal><operator>)</operator> <operator>*</operator> <name>dark_masking</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_x</name> <operator>&lt;</operator> <name>mb_width</name> <operator>/</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb_distance</name> <operator>=</operator> <name>mb_width</name> <operator>/</operator> <literal type="number">5</literal> <operator>-</operator> <name>mb_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_factor</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>mb_distance</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>mb_width</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mb_x</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>mb_width</name> <operator>/</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb_distance</name> <operator>=</operator> <name>mb_x</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>mb_width</name> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_factor</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>mb_distance</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>mb_width</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&lt;</operator> <name>mb_height</name> <operator>/</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb_distance</name> <operator>=</operator> <name>mb_height</name> <operator>/</operator> <literal type="number">5</literal> <operator>-</operator> <name>mb_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_factor</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mb_factor</name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>mb_distance</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>mb_height</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mb_y</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>mb_height</name> <operator>/</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb_distance</name> <operator>=</operator> <name>mb_y</name> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>mb_height</name> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_factor</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>mb_factor</name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>mb_distance</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>mb_height</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>factor</name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>-</operator> <name>border_masking</name> <operator>*</operator> <name>mb_factor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>factor</name> <operator>&lt;</operator> <literal type="number">0.00001</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>factor</name> <operator>=</operator> <literal type="number">0.00001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>cplx</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cplx_sum</name> <operator>+=</operator> <name>cplx</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_sum</name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cplx_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cplx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_NAQ</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>factor</name> <init>= <expr><name>bits_sum</name> <operator>/</operator> <name>cplx_sum</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>newq</name> <init>= <expr><name>q</name> <operator>*</operator> <name><name>cplx_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>bits_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>newq</name> <operator>*=</operator> <name>factor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newq</name> <operator>&gt;</operator> <name>qmax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits_sum</name> <operator>-=</operator> <name><name>bits_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cplx_sum</name> <operator>-=</operator> <name><name>cplx_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>q</name> <operator>/</operator> <name>qmax</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>newq</name> <operator>&lt;</operator> <name>qmin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits_sum</name> <operator>-=</operator> <name><name>bits_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cplx_sum</name> <operator>-=</operator> <name><name>cplx_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>q</name> <operator>/</operator> <name>qmin</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits_sum</name> <operator>&lt;</operator> <literal type="number">0.001</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits_sum</name> <operator>=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cplx_sum</name> <operator>&lt;</operator> <literal type="number">0.001</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cplx_sum</name> <operator>=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mb_index2xy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>newq</name> <init>= <expr><name>q</name> <operator>*</operator> <name><name>cplx_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>bits_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intq</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mpv_flags</name></name> <operator>&amp;</operator> <name>FF_MPV_FLAG_NAQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newq</name> <operator>*=</operator> <name>bits_sum</name> <operator>/</operator> <name>cplx_sum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>intq</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>newq</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>intq</name> <operator>&gt;</operator> <name>qmax</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>intq</name> <operator>=</operator> <name>qmax</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>intq</name> <operator>&lt;</operator> <name>qmin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>intq</name> <operator>=</operator> <name>qmin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name> <operator>=</operator> <name>intq</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_get_2pass_fcode</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RateControlEntry</name> <modifier>*</modifier></type><name>rce</name> <init>= <expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name> <operator>=</operator> <name><name>rce</name><operator>-&gt;</operator><name>f_code</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_code</name></name> <operator>=</operator> <name><name>rce</name><operator>-&gt;</operator><name>b_code</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>float</name></type> <name>ff_rate_estimate_qscale</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dry_run</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qmin</name></decl>, <decl><type ref="prev"/><name>qmax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>br_compensation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>short_term_q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>picture_number</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>picture_number</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>wanted_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RateControlContext</name> <modifier>*</modifier></type><name>rcc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>rc_context</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RateControlEntry</name></type> <name>local_rce</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rate_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pict_type</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pic</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_qminmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qmax</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fps</name> <operator>=</operator> <call><name>get_fps</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_number</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>dry_run</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>last_var</name> <init>=

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>last_pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr> ?</condition><then> <expr><name><name>rcc</name><operator>-&gt;</operator><name>last_mb_var_sum</name></name></expr>

</then><else>: <expr><name><name>rcc</name><operator>-&gt;</operator><name>last_mc_mb_var_sum</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>stuffing_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_predictor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>pred</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>last_pict_type</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>rcc</name><operator>-&gt;</operator><name>last_qscale</name></name></expr></argument>,

<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>last_var</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>stuffing_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>picture_number</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_number</name> <operator>&gt;=</operator> <name><name>rcc</name><operator>-&gt;</operator><name>num_entries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Input is longer than 2-pass log file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rce</name> <operator>=</operator> <operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>entry</name><index>[<expr><name>picture_number</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wanted_bits</name> <operator>=</operator> <name><name>rce</name><operator>-&gt;</operator><name>expected_bits</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>Picture</name> <modifier>*</modifier></type><name>dts_pic</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rce</name> <operator>=</operator> <operator>&amp;</operator><name>local_rce</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dts_pic</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>dts_pic</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dts_pic</name> <operator>||</operator> <name><name>dts_pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wanted_bits</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>picture_number</name> <operator>/</operator> <name>fps</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wanted_bits</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>dts_pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <name>fps</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>-</operator> <name>wanted_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>br_compensation</name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>bit_rate_tolerance</name></name> <operator>-</operator> <name>diff</name><operator>)</operator> <operator>/</operator> <name><name>a</name><operator>-&gt;</operator><name>bit_rate_tolerance</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>br_compensation</name> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>br_compensation</name> <operator>=</operator> <literal type="number">0.001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>var</name> <operator>=</operator> <ternary><condition><expr><name>pict_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr> ?</condition><then> <expr><name><name>pic</name><operator>-&gt;</operator><name>mb_var_sum</name></name></expr> </then><else>: <expr><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>short_term_q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pict_type</name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pict_type</name> <operator>==</operator> <name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>rce</name><operator>-&gt;</operator><name>new_qscale</name></name> <operator>/</operator> <name>br_compensation</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%f %f %f last:%d var:%"</literal><name>PRId64</name><literal type="string">" type:%d//\n"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>rce</name><operator>-&gt;</operator><name>new_qscale</name></name></expr></argument>,

<argument><expr><name>br_compensation</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator>

<name><name>rce</name><operator>-&gt;</operator><name>new_pict_type</name></name> <operator>=</operator> <name>pict_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>mb_var_sum</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>mb_var_sum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name>FF_QP2LAMBDA</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>f_code</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>f_code</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>b_code</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b_code</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>misc_bits</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>predict_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rcc</name><operator>-&gt;</operator><name>pred</name><index>[<expr><name>pict_type</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pict_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>mv_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>=</operator> <name>bits</name> <operator>*</operator> <literal type="number">0.9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rce</name><operator>-&gt;</operator><name>mv_bits</name></name> <operator>=</operator> <name>bits</name> <operator>*</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>i_cplx_sum</name><index>[<expr><name>pict_type</name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>*</operator> <name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>p_cplx_sum</name><index>[<expr><name>pict_type</name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>-&gt;</operator><name>p_tex_bits</name></name> <operator>*</operator> <name><name>rce</name><operator>-&gt;</operator><name>qscale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>mv_bits_sum</name><index>[<expr><name>pict_type</name></expr>]</index></name> <operator>+=</operator> <name><name>rce</name><operator>-&gt;</operator><name>mv_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>frame_count</name><index>[<expr><name>pict_type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rate_factor</name> <operator>=</operator> <name><name>rcc</name><operator>-&gt;</operator><name>pass1_wanted_bits</name></name> <operator>/</operator>

<name><name>rcc</name><operator>-&gt;</operator><name>pass1_rc_eq_output_sum</name></name> <operator>*</operator> <name>br_compensation</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>get_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rce</name></expr></argument>, <argument><expr><name>rate_factor</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>q</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>get_diff_limited_q</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rce</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>q</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pict_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_only</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>short_term_qsum</name></name> <operator>*=</operator> <name><name>a</name><operator>-&gt;</operator><name>qblur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>short_term_qcount</name></name> <operator>*=</operator> <name><name>a</name><operator>-&gt;</operator><name>qblur</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>short_term_qsum</name></name> <operator>+=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>short_term_qcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>short_term_q</name> <operator>=</operator> <name><name>rcc</name><operator>-&gt;</operator><name>short_term_qsum</name></name> <operator>/</operator> <name><name>rcc</name><operator>-&gt;</operator><name>short_term_qcount</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>q</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>modify_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>rce</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>pass1_wanted_bits</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <name>fps</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>q</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_RC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"%c qp:%d&lt;%2.1f&lt;%d %d want:%d total:%d comp:%f st_q:%2.2f "</literal>

<literal type="string">"size:%d var:%"</literal><name>PRId64</name><literal type="string">"/%"</literal><name>PRId64</name><literal type="string">" br:%"</literal><name>PRId64</name><literal type="string">" fps:%d\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name>pict_type</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>qmin</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>qmax</name></expr></argument>, <argument><expr><name>picture_number</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>wanted_bits</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>total_bits</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>,

<argument><expr><name>br_compensation</name></expr></argument>, <argument><expr><name>short_term_q</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_var_sum</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <name>qmin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>qmin</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>qmax</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>qmax</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>adaptive_quant</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adaptive_quantization</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>q</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dry_run</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>last_qscale</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>last_mc_mb_var_sum</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>mc_mb_var_sum</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rcc</name><operator>-&gt;</operator><name>last_mb_var_sum</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>mb_var_sum</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></function>

</unit>
