<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264pred_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_vertical</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name><init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><name>src</name><operator>-</operator><name>stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_horizontal</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dc</name><init>= <expr><operator>(</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>-</operator><name>stride</name></expr>]</index></name>

<operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_left_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dc</name><init>= <expr><operator>(</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_top_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dc</name><init>= <expr><operator>(</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal><operator>-</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_128_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>BIT_DEPTH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_127_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>BIT_DEPTH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_129_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>BIT_DEPTH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_TOP_RIGHT_EDGEconst</name></cpp:macro> <cpp:value>unsigned av_unused t4 = topright[0];const unsigned av_unused t5 = topright[1];const unsigned av_unused t6 = topright[2];const unsigned av_unused t7 = topright[3];</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_DOWN_LEFT_EDGEconst</name></cpp:macro> <cpp:value>unsigned av_unused l4 = src[-1+4*stride];const unsigned av_unused l5 = src[-1+5*stride];const unsigned av_unused l6 = src[-1+6*stride];const unsigned av_unused l7 = src[-1+7*stride];</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LEFT_EDGEconst</name></cpp:macro> <cpp:value>unsigned av_unused l0 = src[-1+0*stride];const unsigned av_unused l1 = src[-1+1*stride];const unsigned av_unused l2 = src[-1+2*stride];const unsigned av_unused l3 = src[-1+3*stride];</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_TOP_EDGEconst</name></cpp:macro> <cpp:value>unsigned av_unused t0 = src[ 0-1*stride];const unsigned av_unused t1 = src[ 1-1*stride];const unsigned av_unused t2 = src[ 2-1*stride];const unsigned av_unused t3 = src[ 3-1*stride];</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_down_right</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lt</name><init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_LEFT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>lt</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_down_left</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>topright</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name><operator>*</operator><operator>)</operator><name>_topright</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>t0</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t5</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t6</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_vertical_right</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lt</name><init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_LEFT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=

<expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>lt</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>lt</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_vertical_left</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>topright</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name><operator>*</operator><operator>)</operator><name>_topright</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_TOP_RIGHT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <name>t4</name><operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <name>t5</name><operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_horizontal_up</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_LEFT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=<expr><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><name>l3</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_horizontal_down</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lt</name><init>= <expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LOAD_TOP_EDGE</name>

<name>LOAD_LEFT_EDGE</name></type>

<name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><init>=

<expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>lt</name> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>lt</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name><operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator>

<name><name>src</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_vertical</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>b</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>c</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>d</name> <init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_horizontal</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREDICT_16x16_DC</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>for(i=0; i&lt;16; i++){AV_WN4PA(src+ 0, v);AV_WN4PA(src+ 4, v);AV_WN4PA(src+ 8, v);AV_WN4PA(src+12, v);src += stride;}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>dcsplat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc</name><operator>+=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dcsplat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc</name><operator>+</operator><literal type="number">16</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PREDICT_16x16_DC</name><argument_list>(<argument><expr><name>dcsplat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_left_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>dcsplat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dcsplat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PREDICT_16x16_DC</name><argument_list>(<argument><expr><name>dcsplat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_top_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>dc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>dcsplat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc</name><operator>+=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dcsplat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PREDICT_16x16_DC</name><argument_list>(<argument><expr><name>dcsplat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRED16x16_X</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void FUNCC(pred16x16_##n##_dc)(uint8_t *_src, ptrdiff_t stride){int i;pixel *src = (pixel*)_src;stride &gt;&gt;= sizeof(pixel)-1;PREDICT_16x16_DC(PIXEL_SPLAT_X4(v));}</cpp:value></cpp:define>

<macro><name>PRED16x16_X</name><argument_list>(<argument><literal type="number">127</literal></argument>, <argument>(<literal type="number">1</literal>&lt;&lt;(BIT_DEPTH-<literal type="number">1</literal>))-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>PRED16x16_X</name><argument_list>(<argument><literal type="number">128</literal></argument>, <argument>(<literal type="number">1</literal>&lt;&lt;(BIT_DEPTH-<literal type="number">1</literal>))+<literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>PRED16x16_X</name><argument_list>(<argument><literal type="number">129</literal></argument>, <argument>(<literal type="number">1</literal>&lt;&lt;(BIT_DEPTH-<literal type="number">1</literal>))+<literal type="number">1</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_plane_compat</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>svq3</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>rv40</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INIT_CLIP</name>

<name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>src0</name> <init>= <expr><name>src</name> <operator>+</operator><literal type="number">7</literal><operator>-</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type> <name>src1</name> <init>= <expr><name>src</name> <operator>+</operator><literal type="number">8</literal><operator>*</operator><name>stride</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type> <name>src2</name> <init>= <expr><name>src1</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>H</name> <init>= <expr><name><name>src0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt> <expr_stmt><expr><name>src2</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>+=</operator> <name>k</name><operator>*</operator><operator>(</operator><name><name>src0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>src0</name><index>[<expr><operator>-</operator><name>k</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name>k</name><operator>*</operator><operator>(</operator><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>svq3</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name>H</name><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <operator>(</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name>V</name><operator>/</operator><literal type="number">4</literal><operator>)</operator> <operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>H</name></expr>;</expr_stmt> <expr_stmt><expr><name>H</name> <operator>=</operator> <name>V</name></expr>;</expr_stmt> <expr_stmt><expr><name>V</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>rv40</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator> <name>H</name> <operator>+</operator> <operator>(</operator><name>H</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <operator>(</operator> <name>V</name> <operator>+</operator> <operator>(</operator><name>V</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator> <literal type="number">5</literal><operator>*</operator><name>H</name><operator>+</operator><literal type="number">32</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <operator>(</operator> <literal type="number">5</literal><operator>*</operator><name>V</name><operator>+</operator><literal type="number">32</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">16</literal><operator>*</operator><operator>(</operator><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal><operator>*</operator><operator>(</operator><name>V</name><operator>+</operator><name>H</name><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>V</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>-</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">16</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">17</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator> <name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">18</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">19</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>H</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_plane</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred16x16_plane_compat</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8_vertical</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name><init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>b</name><init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_vertical</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name><init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>b</name><init>= <expr><call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>-</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8_horizontal</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_horizontal</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>a</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRED8x8_X</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void FUNCC(pred8x8_##n##_dc)(uint8_t *_src, ptrdiff_t stride){int i;const pixel4 a = PIXEL_SPLAT_X4(v);pixel *src = (pixel*)_src;stride &gt;&gt;= sizeof(pixel)-1;for(i=0; i&lt;8; i++){AV_WN4PA(((pixel4*)(src+i*stride))+0, a);AV_WN4PA(((pixel4*)(src+i*stride))+1, a);}}</cpp:value></cpp:define>

<macro><name>PRED8x8_X</name><argument_list>(<argument><literal type="number">127</literal></argument>, <argument>(<literal type="number">1</literal>&lt;&lt;(BIT_DEPTH-<literal type="number">1</literal>))-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>PRED8x8_X</name><argument_list>(<argument><literal type="number">128</literal></argument>, <argument>(<literal type="number">1</literal>&lt;&lt;(BIT_DEPTH-<literal type="number">1</literal>))+<literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>PRED8x8_X</name><argument_list>(<argument><literal type="number">129</literal></argument>, <argument>(<literal type="number">1</literal>&lt;&lt;(BIT_DEPTH-<literal type="number">1</literal>))+<literal type="number">1</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_128_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x8_128_dc</name>)<parameter_list>(<parameter><decl><type><name>_src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred8x8_128_dc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_src</name><operator>+</operator><literal type="number">8</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8_left_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc0</name></decl>, <decl><type ref="prev"/><name>dc2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>dc0splat</name></decl>, <decl><type ref="prev"/><name>dc2splat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dc0</name><operator>=</operator><name>dc2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc2</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dc0splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc2splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc0splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc0splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc2splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc2splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_left_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x8_left_dc</name>)<parameter_list>(<parameter><decl><type><name>_src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred8x8_left_dc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>_src</name><operator>+</operator><literal type="number">8</literal><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8_top_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc0</name></decl>, <decl><type ref="prev"/><name>dc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>dc0splat</name></decl>, <decl><type ref="prev"/><name>dc1splat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dc0</name><operator>=</operator><name>dc1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc1</name><operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dc0splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc1splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc0splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc1splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc0splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc1splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_top_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc0</name></decl>, <decl><type ref="prev"/><name>dc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>dc0splat</name></decl>, <decl><type ref="prev"/><name>dc1splat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dc0</name><operator>=</operator><name>dc1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc1</name><operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dc0splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc1splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc0splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc1splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc0</name></decl>, <decl><type ref="prev"/><name>dc1</name></decl>, <decl><type ref="prev"/><name>dc2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>dc0splat</name></decl>, <decl><type ref="prev"/><name>dc1splat</name></decl>, <decl><type ref="prev"/><name>dc2splat</name></decl>, <decl><type ref="prev"/><name>dc3splat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dc0</name><operator>=</operator><name>dc1</name><operator>=</operator><name>dc2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc1</name><operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc2</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dc0splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc1splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc2splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc3splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc1</name> <operator>+</operator> <name>dc2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc0splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc1splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc2splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc3splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc0</name></decl>, <decl><type ref="prev"/><name>dc1</name></decl>, <decl><type ref="prev"/><name>dc2</name></decl>, <decl><type ref="prev"/><name>dc3</name></decl>, <decl><type ref="prev"/><name>dc4</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>dc0splat</name></decl>, <decl><type ref="prev"/><name>dc1splat</name></decl>, <decl><type ref="prev"/><name>dc2splat</name></decl>, <decl><type ref="prev"/><name>dc3splat</name></decl>, <decl><type ref="prev"/><name>dc4splat</name></decl>, <decl><type ref="prev"/><name>dc5splat</name></decl>, <decl><type ref="prev"/><name>dc6splat</name></decl>, <decl><type ref="prev"/><name>dc7splat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dc0</name><operator>=</operator><name>dc1</name><operator>=</operator><name>dc2</name><operator>=</operator><name>dc3</name><operator>=</operator><name>dc4</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>dc0</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc1</name><operator>+=</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc2</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc3</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dc4</name><operator>+=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dc0splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc1splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc2splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc3splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc1</name> <operator>+</operator> <name>dc2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc4splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc5splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc1</name> <operator>+</operator> <name>dc3</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc6splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dc7splat</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>dc1</name> <operator>+</operator> <name>dc4</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc0splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc1splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc2splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc3splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc4splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc5splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">12</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>dc6splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>i</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dc7splat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred8x8_mad_cow_dc_l0t</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x8_top_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FUNCC</name></type>(<name>pred4x4_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred8x16_mad_cow_dc_l0t</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x16_top_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FUNCC</name></type>(<name>pred4x4_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred8x8_mad_cow_dc_0lt</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x8_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FUNCC</name></type>(<name>pred4x4_top_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred8x16_mad_cow_dc_0lt</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x16_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FUNCC</name></type>(<name>pred4x4_top_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred8x8_mad_cow_dc_l00</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x8_left_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_128_dc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_128_dc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred8x16_mad_cow_dc_l00</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x16_left_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_128_dc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_128_dc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred8x8_mad_cow_dc_0l0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x8_left_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FUNCC</name></type>(<name>pred4x4_128_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter> , <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_128_dc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred8x16_mad_cow_dc_0l0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>FUNCC</name></type>(<name>pred8x16_left_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>FUNCC</name></type>(<name>pred4x4_128_dc</name>)<parameter_list>(<parameter><decl><type><name>src</name></type></decl></parameter> , <parameter><decl><type><name>NULL</name></type></decl></parameter>, <parameter><decl><type><name>stride</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_128_dc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8_plane</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INIT_CLIP</name>

<name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>src0</name> <init>= <expr><name>src</name> <operator>+</operator><literal type="number">3</literal><operator>-</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type> <name>src1</name> <init>= <expr><name>src</name> <operator>+</operator><literal type="number">4</literal><operator>*</operator><name>stride</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type> <name>src2</name> <init>= <expr><name>src1</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>H</name> <init>= <expr><name><name>src0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt> <expr_stmt><expr><name>src2</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>+=</operator> <name>k</name><operator>*</operator><operator>(</operator><name><name>src0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>src0</name><index>[<expr><operator>-</operator><name>k</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name>k</name><operator>*</operator><operator>(</operator><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator> <literal type="number">17</literal><operator>*</operator><name>H</name><operator>+</operator><literal type="number">16</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <operator>(</operator> <literal type="number">17</literal><operator>*</operator><name>V</name><operator>+</operator><literal type="number">16</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">16</literal><operator>*</operator><operator>(</operator><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><operator>(</operator><name>V</name><operator>+</operator><name>H</name><operator>)</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">8</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>V</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator> <name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">6</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">7</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_plane</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INIT_CLIP</name>

<name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>src0</name> <init>= <expr><name>src</name> <operator>+</operator><literal type="number">3</literal><operator>-</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type> <name>src1</name> <init>= <expr><name>src</name> <operator>+</operator><literal type="number">8</literal><operator>*</operator><name>stride</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type> <name>src2</name> <init>= <expr><name>src1</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>H</name> <init>= <expr><name><name>src0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src0</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt> <expr_stmt><expr><name>src2</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>H</name> <operator>+=</operator> <name>k</name><operator>*</operator><operator>(</operator><name><name>src0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>src0</name><index>[<expr><operator>-</operator><name>k</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name>k</name><operator>*</operator><operator>(</operator><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>src1</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt> <expr_stmt><expr><name>src2</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>+=</operator> <name>k</name><operator>*</operator><operator>(</operator><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>H</name> <operator>=</operator> <operator>(</operator><literal type="number">17</literal><operator>*</operator><name>H</name><operator>+</operator><literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>V</name> <operator>=</operator> <operator>(</operator><literal type="number">5</literal><operator>*</operator><name>V</name><operator>+</operator><literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">16</literal><operator>*</operator><operator>(</operator><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">7</literal><operator>*</operator><name>V</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>H</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>V</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator> <name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">6</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">7</literal><operator>*</operator><name>H</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>src[(x)+(y)*stride]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PL</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const int l##y = (SRC(-1,y-1) + 2*SRC(-1,y) + SRC(-1,y+1) + 2) &gt;&gt; 2;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREDICT_8x8_LOAD_LEFT</name></cpp:macro> <cpp:value>const int l0 = ((has_topleft ? SRC(-1,-1) : SRC(-1,0)) + 2*SRC(-1,0) + SRC(-1,1) + 2) &gt;&gt; 2; PL(1) PL(2) PL(3) PL(4) PL(5) PL(6) const int l7 av_unused = (SRC(-1,6) + 3*SRC(-1,7) + 2) &gt;&gt; 2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>const int t##x = (SRC(x-1,-1) + 2*SRC(x,-1) + SRC(x+1,-1) + 2) &gt;&gt; 2;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREDICT_8x8_LOAD_TOP</name></cpp:macro> <cpp:value>const int t0 = ((has_topleft ? SRC(-1,-1) : SRC(0,-1)) + 2*SRC(0,-1) + SRC(1,-1) + 2) &gt;&gt; 2; PT(1) PT(2) PT(3) PT(4) PT(5) PT(6) const int t7 av_unused = ((has_topright ? SRC(8,-1) : SRC(7,-1)) + 2*SRC(7,-1) + SRC(6,-1) + 2) &gt;&gt; 2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t##x = (SRC(x-1,-1) + 2*SRC(x,-1) + SRC(x+1,-1) + 2) &gt;&gt; 2;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREDICT_8x8_LOAD_TOPRIGHT</name></cpp:macro> <cpp:value>int t8, t9, t10, t11, t12, t13, t14, t15; if(has_topright) { PTR(8) PTR(9) PTR(10) PTR(11) PTR(12) PTR(13) PTR(14) t15 = (SRC(14,-1) + 3*SRC(15,-1) + 2) &gt;&gt; 2; } else t8=t9=t10=t11=t12=t13=t14=t15= SRC(7,-1);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREDICT_8x8_LOAD_TOPLEFT</name></cpp:macro> <cpp:value>const int lt = (SRC(-1,0) + 2*SRC(-1,-1) + SRC(0,-1) + 2) &gt;&gt; 2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREDICT_8x8_DC</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int y; for( y = 0; y &lt; 8; y++ ) { AV_WN4PA(((pixel4*)src)+0, v); AV_WN4PA(((pixel4*)src)+1, v); src += stride; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_128_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PREDICT_8x8_DC</name><argument_list>(<argument><expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>BIT_DEPTH</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_left_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_LEFT</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>l0</name><operator>+</operator><name>l1</name><operator>+</operator><name>l2</name><operator>+</operator><name>l3</name><operator>+</operator><name>l4</name><operator>+</operator><name>l5</name><operator>+</operator><name>l6</name><operator>+</operator><name>l7</name><operator>+</operator><literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PREDICT_8x8_DC</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_top_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>t0</name><operator>+</operator><name>t1</name><operator>+</operator><name>t2</name><operator>+</operator><name>t3</name><operator>+</operator><name>t4</name><operator>+</operator><name>t5</name><operator>+</operator><name>t6</name><operator>+</operator><name>t7</name><operator>+</operator><literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PREDICT_8x8_DC</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel4</name></type> <name>dc</name> <init>= <expr><call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><operator>(</operator><name>l0</name><operator>+</operator><name>l1</name><operator>+</operator><name>l2</name><operator>+</operator><name>l3</name><operator>+</operator><name>l4</name><operator>+</operator><name>l5</name><operator>+</operator><name>l6</name><operator>+</operator><name>l7</name>

<operator>+</operator><name>t0</name><operator>+</operator><name>t1</name><operator>+</operator><name>t2</name><operator>+</operator><name>t3</name><operator>+</operator><name>t4</name><operator>+</operator><name>t5</name><operator>+</operator><name>t6</name><operator>+</operator><name>t7</name><operator>+</operator><literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PREDICT_8x8_DC</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_horizontal</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_LEFT</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = PIXEL_SPLAT_X4(l##y); AV_WN4PA(src+y*stride, a); AV_WN4PA(src+y*stride+4, a);</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ROW</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ROW</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ROW</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ROW</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ROW</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ROW</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ROW</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ROW</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROW</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_vertical</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>AV_RN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><name>src</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>y</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN4PA</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pixel4</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>y</name><operator>*</operator><name>stride</name><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_down_left</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOPRIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t7</name> <operator>+</operator> <name>t8</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t8</name> <operator>+</operator> <name>t9</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t8</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t9</name> <operator>+</operator> <name>t10</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t9</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t10</name> <operator>+</operator> <name>t11</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t10</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t11</name> <operator>+</operator> <name>t12</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t11</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t12</name> <operator>+</operator> <name>t13</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t12</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t13</name> <operator>+</operator> <name>t14</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t13</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t14</name> <operator>+</operator> <name>t15</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t14</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>t15</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_down_right</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOPLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l6</name> <operator>+</operator> <name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l5</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l4</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>lt</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_vertical_right</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOPLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l4</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l5</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>lt</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>lt</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_horizontal_down</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOPLEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l6</name> <operator>+</operator> <name>l7</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l6</name> <operator>+</operator> <name>l7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l5</name> <operator>+</operator> <name>l6</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l5</name> <operator>+</operator> <name>l6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l4</name> <operator>+</operator> <name>l5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l4</name> <operator>+</operator> <name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l3</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>lt</name> <operator>+</operator> <name>l0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>lt</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t0</name> <operator>+</operator> <name>lt</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_vertical_left</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOPRIGHT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <name>t1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <name>t2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <name>t4</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t4</name> <operator>+</operator> <name>t5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <name>t6</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <name>t7</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t6</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t7</name> <operator>+</operator> <name>t8</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t7</name> <operator>+</operator> <name>t8</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t7</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t8</name> <operator>+</operator> <name>t9</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t8</name> <operator>+</operator> <name>t9</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t8</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t9</name> <operator>+</operator> <name>t10</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t9</name> <operator>+</operator> <name>t10</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t9</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t10</name> <operator>+</operator> <name>t11</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t10</name> <operator>+</operator> <name>t11</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>t10</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>t11</name> <operator>+</operator> <name>t12</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_horizontal_up</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <name>l2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <name>l3</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l3</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l3</name> <operator>+</operator> <name>l4</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l3</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l4</name> <operator>+</operator> <name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l4</name> <operator>+</operator> <name>l5</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l4</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l5</name> <operator>+</operator> <name>l6</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l5</name> <operator>+</operator> <name>l6</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l5</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>l6</name> <operator>+</operator> <name>l7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l6</name> <operator>+</operator> <name>l7</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>=</operator> <operator>(</operator><name>l6</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>l7</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator>

<call><name>SRC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator>

<call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator>

<call><name>SRC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>=</operator><call><name>SRC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>=</operator> <name>l7</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_vertical_filter_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name></type> <name><name>pix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_TOP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>t7</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>pixel</name></type> <name>v</name> <init>= <expr><name><name>pix</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_horizontal_filter_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_topleft</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name></type> <name><name>pix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride</name> <init>= <expr><name>_stride</name><operator>&gt;&gt;</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>PREDICT_8x8_LOAD_LEFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>l0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>l1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>l2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>l3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>l4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>l5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>l6</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>l7</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>pixel</name></type> <name>v</name> <init>= <expr><name><name>pix</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name><operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREDICT_8x8_LOAD_LEFT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREDICT_8x8_LOAD_TOP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREDICT_8x8_LOAD_TOPLEFT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREDICT_8x8_LOAD_TOPRIGHT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PREDICT_8x8_DC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PTR</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PT</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRC</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_vertical_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_pix</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>pixel</name></type> <name>v</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred4x4_horizontal_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_pix</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>pixel</name></type> <name>v</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name><operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_vertical_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_pix</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>pixel</name></type> <name>v</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8l_horizontal_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_pix</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>pixel</name></type> <name>v</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+=</operator> <name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>=</operator> <name>v</name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name><operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name><operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_vertical_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_vertical_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred16x16_horizontal_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_horizontal_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8_vertical_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_vertical_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_vertical_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_vertical_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_vertical_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x8_horizontal_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_horizontal_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>pred8x16_horizontal_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_horizontal_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>pred4x4_horizontal_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

</unit>
