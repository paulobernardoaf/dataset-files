<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vp9recon.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"videodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>check_intra_mode</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_edge</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_edge</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst_inner</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride_inner</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TxfmMode</name></name></type> <name>tx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ss_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ss_v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesperpixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>have_top</name> <init>= <expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>have_left</name> <init>= <expr><name>col</name> <operator>&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>tile_col_start</name></name> <operator>||</operator> <name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>have_right</name> <init>= <expr><name>x</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mode_conv</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr> ]</index><index>[<expr><literal type="number">2</literal></expr> ]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VERT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>DC_127_PRED</name></expr>, <expr><name>VERT_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DC_127_PRED</name></expr>, <expr><name>VERT_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>HOR_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>DC_129_PRED</name></expr>, <expr><name>DC_129_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>HOR_PRED</name></expr>, <expr><name>HOR_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>DC_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>DC_128_PRED</name></expr>, <expr><name>TOP_DC_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>LEFT_DC_PRED</name></expr>, <expr><name>DC_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>DC_127_PRED</name></expr>, <expr><name>DIAG_DOWN_LEFT_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DC_127_PRED</name></expr>, <expr><name>DIAG_DOWN_LEFT_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>, <expr><name>DIAG_DOWN_RIGHT_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>, <expr><name>DIAG_DOWN_RIGHT_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>VERT_RIGHT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>VERT_RIGHT_PRED</name></expr>, <expr><name>VERT_RIGHT_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VERT_RIGHT_PRED</name></expr>, <expr><name>VERT_RIGHT_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>HOR_DOWN_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>HOR_DOWN_PRED</name></expr>, <expr><name>HOR_DOWN_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>HOR_DOWN_PRED</name></expr>, <expr><name>HOR_DOWN_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>VERT_LEFT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>DC_127_PRED</name></expr>, <expr><name>VERT_LEFT_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>DC_127_PRED</name></expr>, <expr><name>VERT_LEFT_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>HOR_UP_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>DC_129_PRED</name></expr>, <expr><name>DC_129_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>HOR_UP_PRED</name></expr>, <expr><name>HOR_UP_PRED</name></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>TM_VP8_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><name>DC_129_PRED</name></expr>, <expr><name>VERT_PRED</name></expr> }</block></expr>,

<expr><block>{ <expr><name>HOR_PRED</name></expr>, <expr><name>TM_VP8_PRED</name></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>needs_left</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>needs_top</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>needs_topleft</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>needs_topright</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>invert_left</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name><name>edges</name><index>[<expr><name>N_INTRA_PRED_MODES</name></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VERT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>HOR_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_left</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>DC_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>needs_left</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>needs_topright</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_left</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>needs_topleft</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>VERT_RIGHT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_left</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>needs_topleft</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>HOR_DOWN_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_left</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>needs_topleft</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>VERT_LEFT_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>needs_topright</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>HOR_UP_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_left</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>invert_left</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>TM_VP8_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_left</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>needs_topleft</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>LEFT_DC_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_left</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>TOP_DC_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><operator>.</operator><name>needs_top</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>,

<expr><index>[<expr><name>DC_128_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>DC_127_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><index>[<expr><name>DC_129_PRED</name></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>&lt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>mode_conv</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>have_left</name></expr>]</index><index>[<expr><name>have_top</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>edges</name><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>needs_top</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>topleft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_px_need</name> <init>= <expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name>tx</name></expr></init></decl>, <decl><type ref="prev"/><name>n_px_have</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>!</operator><name>ss_h</name><operator>)</operator> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_px_need_tr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tx</name> <operator>==</operator> <name>TX_4X4</name> <operator>&amp;&amp;</operator> <name><name>edges</name><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>needs_topright</name> <operator>&amp;&amp;</operator> <name>have_right</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n_px_need_tr</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>have_top</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>(</operator><name>row</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>y</name></expr> ?</condition><then>

<expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>col</name> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>&gt;&gt;</operator> <name>ss_h</name><operator>)</operator> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>bytesperpixel</name></expr> </then><else>:

<expr><ternary><condition><expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>dst_edge</name><index>[<expr><operator>-</operator><name>stride_edge</name></expr>]</index></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>dst_inner</name><index>[<expr><operator>-</operator><name>stride_inner</name></expr>]</index></name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>have_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>topleft</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><operator>(</operator><name>row</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>y</name></expr> ?</condition><then>

<expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>col</name> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>&gt;&gt;</operator> <name>ss_h</name><operator>)</operator> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>bytesperpixel</name></expr> </then><else>:

<expr><ternary><condition><expr><name>y</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>dst_edge</name><index>[<expr><operator>-</operator><name>stride_edge</name></expr>]</index></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>dst_inner</name><index>[<expr><operator>-</operator><name>stride_inner</name></expr>]</index></name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>have_top</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>edges</name><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>needs_topleft</name> <operator>||</operator> <operator>(</operator><name>have_left</name> <operator>&amp;&amp;</operator> <name>top</name> <operator>==</operator> <name>topleft</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>tx</name> <operator>!=</operator> <name>TX_4X4</name> <operator>||</operator> <operator>!</operator><name><name>edges</name><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>needs_topright</name> <operator>||</operator> <name>have_right</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>n_px_need</name> <operator>+</operator> <name>n_px_need_tr</name> <operator>&lt;=</operator> <name>n_px_have</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_top</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n_px_need</name> <operator>&lt;=</operator> <name>n_px_have</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>n_px_need</name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memset_bpp</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>i1</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>i2</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (bytesperpixel == 1) { memset(&amp;(c)[(i1)], (v)[(i2)], (num)); } else { int n, val = AV_RN16A(&amp;(v)[(i2) * 2]); for (n = 0; n &lt; (num); n++) { AV_WN16A(&amp;(c)[((i1) + n) * 2], val); } } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>n_px_have</name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset_bpp</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><name>n_px_have</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator></expr></argument>, <argument><expr><name>n_px_have</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n_px_need</name> <operator>-</operator> <name>n_px_have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memset_val</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (bytesperpixel == 1) { memset((c), (val), (num)); } else { int n; for (n = 0; n &lt; (num); n++) { AV_WN16A(&amp;(c)[n * 2], (val)); } } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>memset_val</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpp</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n_px_need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>edges</name><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>needs_topleft</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_left</name> <operator>&amp;&amp;</operator> <name>have_top</name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assign_bpp</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>i1</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>i2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (bytesperpixel == 1) { (c)[(i1)] = (v)[(i2)]; } else { AV_COPY16(&amp;(c)[(i1) * 2], &amp;(v)[(i2) * 2]); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>assign_bpp</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>topleft</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assign_val</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (bytesperpixel == 1) { (c)[(i)] = (v); } else { AV_WN16A(&amp;(c)[(i) * 2], (v)); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>assign_val</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpp</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>have_top</name></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx</name> <operator>==</operator> <name>TX_4X4</name> <operator>&amp;&amp;</operator> <name><name>edges</name><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>needs_topright</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_top</name> <operator>&amp;&amp;</operator> <name>have_right</name> <operator>&amp;&amp;</operator>

<name>n_px_need</name> <operator>+</operator> <name>n_px_need_tr</name> <operator>&lt;=</operator> <name>n_px_have</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>bytesperpixel</name></expr>]</index></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>bytesperpixel</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset_bpp</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>edges</name><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>needs_left</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_left</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n_px_need</name> <init>= <expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name>tx</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n_px_have</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>!</operator><name>ss_v</name><operator>)</operator> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><ternary><condition><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>dst_edge</name></expr> </then><else>: <expr><name>dst_inner</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><ternary><condition><expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>stride_edge</name></expr> </then><else>: <expr><name>stride_inner</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>edges</name><index>[<expr><name>mode</name></expr>]</index></name><operator>.</operator><name>invert_left</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n_px_need</name> <operator>&lt;=</operator> <name>n_px_have</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_px_need</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assign_bpp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_px_have</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assign_bpp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset_bpp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>n_px_have</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>n_px_have</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n_px_need</name> <operator>-</operator> <name>n_px_have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>n_px_need</name> <operator>&lt;=</operator> <name>n_px_have</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_px_need</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assign_bpp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>n_px_need</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_px_have</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assign_bpp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>n_px_need</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset_bpp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>n_px_need</name> <operator>-</operator> <name>n_px_have</name></expr></argument>, <argument><expr><name>n_px_need</name> <operator>-</operator> <name>n_px_have</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset_val</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">128</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpp</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>&lt;&lt;</operator> <name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>mode</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>intra_recon</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>y_off</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>uv_off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesperpixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row</name></name></expr></init></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>step1d</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>step</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_x</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name><operator>)</operator></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name><operator>)</operator></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lossless</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>uvtx</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lossless</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvstep1d</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_r</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>y_off</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>a_buf</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">96</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step1d</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>dst</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_r</name> <init>= <expr><name>dst_r</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end_x</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>step1d</name></expr><operator>,</operator> <expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>step1d</name> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator>

<expr><name>ptr_r</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>step1d</name> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator> <expr><name>n</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>&gt;</operator> <name>BS_8x8</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>==</operator> <name>TX_4X4</name></expr> ?</condition><then>

<expr><name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>x</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>a_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>TxfmType</name></name></type> <name>txtp</name> <init>= <expr><name><name>ff_vp9_intra_txfm_type</name><index>[<expr><name>mode</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eob</name> <init>= <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>skip</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>&gt;</operator> <name>TX_8X8</name></expr> ?</condition><then> <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>eob</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>td</name><operator>-&gt;</operator><name>eob</name><index>[<expr><name>n</name></expr>]</index></name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>check_intra_mode</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>ptr_r</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>y_stride</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>,

<argument><expr><name>col</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>intra_pred</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>]</index><index>[<expr><name>mode</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>td</name><operator>-&gt;</operator><name>y_stride</name></name><operator>,</operator> <name>l</name><operator>,</operator> <name>a</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eob</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>itxfm_add</name><index>[<expr><name>tx</name></expr>]</index><index>[<expr><name>txtp</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>td</name><operator>-&gt;</operator><name>y_stride</name></name><operator>,</operator>

<name><name>td</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>eob</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst_r</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>step1d</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>step1d</name> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>y_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>w4</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_x</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>p</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>p</name></expr>]</index></name> <operator>+</operator> <name>uv_off</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>uvstep1d</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>dst</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr_r</name> <init>= <expr><name>dst_r</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end_x</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>uvstep1d</name></expr><operator>,</operator> <expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>uvstep1d</name> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator>

<expr><name>ptr_r</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>uvstep1d</name> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator> <expr><name>n</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>uvmode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>a_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eob</name> <init>= <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>skip</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name> <operator>&gt;</operator> <name>TX_8X8</name></expr> ?</condition><then> <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>uveob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>td</name><operator>-&gt;</operator><name>uveob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>check_intra_mode</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>ptr_r</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>uv_stride</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr></argument>, <argument><expr><name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>intra_pred</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr>]</index><index>[<expr><name>mode</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>td</name><operator>-&gt;</operator><name>uv_stride</name></name><operator>,</operator> <name>l</name><operator>,</operator> <name>a</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>eob</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>itxfm_add</name><index>[<expr><name>uvtx</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>td</name><operator>-&gt;</operator><name>uv_stride</name></name><operator>,</operator>

<name><name>td</name><operator>-&gt;</operator><name>uvblock</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>eob</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst_r</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>uvstep1d</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>uvstep1d</name> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>uv_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp9_intra_recon_8bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>y_off</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uv_off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>intra_recon</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>, <argument><expr><name>uv_off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp9_intra_recon_16bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>y_off</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uv_off</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>intra_recon</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>y_off</name></expr></argument>, <argument><expr><name>uv_off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mc_luma_unscaled</name><argument_list>(<argument><expr><name>VP9TileData</name> <operator>*</operator><name>td</name></expr></argument>, <argument><expr><call><name>vp9_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>mc</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>dst_stride</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>ref</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>ref_stride</name></expr></argument>,

<argument><expr><name>ThreadFrame</name> <operator>*</operator><name>ref_frame</name></expr></argument>,

<argument><expr><name>ptrdiff_t</name> <name>y</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>x</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VP56mv</name> <operator>*</operator><name>mv</name></expr></argument>,

<argument><expr><name>int</name> <name>bw</name></expr></argument>, <argument><expr><name>int</name> <name>bh</name></expr></argument>, <argument><expr><name>int</name> <name>w</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>, <argument><expr><name>int</name> <name>bytesperpixel</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>my</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name></expr></init></decl>, <decl><type ref="prev"/><name>th</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>my</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>ref_stride</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>&amp;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>&amp;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>bh</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>ref_frame</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal> <operator>||</operator>

<name>x</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">4</literal></expr></argument> &gt;</argument_list></name> <name>w</name> <operator>-</operator> <name>bw</name> <operator>||</operator> <name>y</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">5</literal></expr></argument> &gt;</argument_list></name> <name>h</name> <operator>-</operator> <name>bh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,

<argument><expr><name>ref</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>ref_stride</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>,

<argument><expr><name>bw</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>bh</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>,

<argument><expr><name>x</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">160</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_stride</name> <operator>=</operator> <literal type="number">160</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mc</name><index>[<expr><operator>!</operator><operator>!</operator><name>mx</name></expr>]</index><index>[<expr><operator>!</operator><operator>!</operator><name>my</name></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>dst_stride</name><operator>,</operator> <name>ref</name><operator>,</operator> <name>ref_stride</name><operator>,</operator> <name>bh</name><operator>,</operator> <name>mx</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>,</operator> <name>my</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mc_chroma_unscaled</name><argument_list>(<argument><expr><name>VP9TileData</name> <operator>*</operator><name>td</name></expr></argument>, <argument><expr><call><name>vp9_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>mc</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><name>dst_u</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dst_v</name></expr></argument>,

<argument><expr><name>ptrdiff_t</name> <name>dst_stride</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>ref_u</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>src_stride_u</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>ref_v</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>src_stride_v</name></expr></argument>,

<argument><expr><name>ThreadFrame</name> <operator>*</operator><name>ref_frame</name></expr></argument>,

<argument><expr><name>ptrdiff_t</name> <name>y</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>x</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VP56mv</name> <operator>*</operator><name>mv</name></expr></argument>,

<argument><expr><name>int</name> <name>bw</name></expr></argument>, <argument><expr><name>int</name> <name>bh</name></expr></argument>, <argument><expr><name>int</name> <name>w</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>, <argument><expr><name>int</name> <name>bytesperpixel</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>my</name> <init>= <expr><name><name>mv</name><operator>-&gt;</operator><name>y</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>th</name></decl>;</decl_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>my</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_u</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>src_stride_u</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_v</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>src_stride_v</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>bh</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>ref_frame</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal> <operator>||</operator>

<name>x</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">4</literal></expr></argument> &gt;</argument_list></name> <name>w</name> <operator>-</operator> <name>bw</name> <operator>||</operator> <name>y</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">5</literal></expr></argument> &gt;</argument_list></name> <name>h</name> <operator>-</operator> <name>bh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,

<argument><expr><name>ref_u</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>src_stride_u</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><name>src_stride_u</name></expr></argument>,

<argument><expr><name>bw</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>bh</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>,

<argument><expr><name>x</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_u</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">160</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mc</name><index>[<expr><operator>!</operator><operator>!</operator><name>mx</name></expr>]</index><index>[<expr><operator>!</operator><operator>!</operator><name>my</name></expr>]</index></name><operator>(</operator><name>dst_u</name><operator>,</operator> <name>dst_stride</name><operator>,</operator> <name>ref_u</name><operator>,</operator> <literal type="number">160</literal><operator>,</operator> <name>bh</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,

<argument><expr><name>ref_v</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>src_stride_v</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><name>src_stride_v</name></expr></argument>,

<argument><expr><name>bw</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>bh</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">7</literal></expr></argument>,

<argument><expr><name>x</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_v</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>my</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">160</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name>mx</name> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mc</name><index>[<expr><operator>!</operator><operator>!</operator><name>mx</name></expr>]</index><index>[<expr><operator>!</operator><operator>!</operator><name>my</name></expr>]</index></name><operator>(</operator><name>dst_v</name><operator>,</operator> <name>dst_stride</name><operator>,</operator> <name>ref_v</name><operator>,</operator> <literal type="number">160</literal><operator>,</operator> <name>bh</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mc</name><index>[<expr><operator>!</operator><operator>!</operator><name>mx</name></expr>]</index><index>[<expr><operator>!</operator><operator>!</operator><name>my</name></expr>]</index></name><operator>(</operator><name>dst_u</name><operator>,</operator> <name>dst_stride</name><operator>,</operator> <name>ref_u</name><operator>,</operator> <name>src_stride_u</name><operator>,</operator> <name>bh</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mc</name><index>[<expr><operator>!</operator><operator>!</operator><name>mx</name></expr>]</index><index>[<expr><operator>!</operator><operator>!</operator><name>my</name></expr>]</index></name><operator>(</operator><name>dst_v</name><operator>,</operator> <name>dst_stride</name><operator>,</operator> <name>ref_v</name><operator>,</operator> <name>src_stride_v</name><operator>,</operator> <name>bh</name><operator>,</operator> <name>mx</name><operator>,</operator> <name>my</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mc_luma_dir</name><parameter_list>(<parameter><type><name>td</name></type></parameter>, <parameter><type><name>mc</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>dst_ls</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>src_ls</name></type></parameter>, <parameter><type><name>tref</name></type></parameter>, <parameter><type><name>row</name></type></parameter>, <parameter><type><name>col</name></type></parameter>, <parameter><type><name>mv</name></type></parameter>, <parameter><type><name>px</name></type></parameter>, <parameter><type><name>py</name></type></parameter>, <parameter><type><name>pw</name></type></parameter>, <parameter><type><name>ph</name></type></parameter>, <parameter><type><name>bw</name></type></parameter>, <parameter><type><name>bh</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mc_luma_unscaled(td, s-&gt;dsp.mc, dst, dst_ls, src, src_ls, tref, row, col, mv, bw, bh, w, h, bytesperpixel)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mc_chroma_dir</name><parameter_list>(<parameter><type><name>td</name></type></parameter>, <parameter><type><name>mc</name></type></parameter>, <parameter><type><name>dstu</name></type></parameter>, <parameter><type><name>dstv</name></type></parameter>, <parameter><type><name>dst_ls</name></type></parameter>, <parameter><type><name>srcu</name></type></parameter>, <parameter><type><name>srcu_ls</name></type></parameter>, <parameter><type><name>srcv</name></type></parameter>, <parameter><type><name>srcv_ls</name></type></parameter>, <parameter><type><name>tref</name></type></parameter>, <parameter><type><name>row</name></type></parameter>, <parameter><type><name>col</name></type></parameter>, <parameter><type><name>mv</name></type></parameter>, <parameter><type><name>px</name></type></parameter>, <parameter><type><name>py</name></type></parameter>, <parameter><type><name>pw</name></type></parameter>, <parameter><type><name>ph</name></type></parameter>, <parameter><type><name>bw</name></type></parameter>, <parameter><type><name>bh</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mc_chroma_unscaled(td, s-&gt;dsp.mc, dstu, dstv, dst_ls, srcu, srcu_ls, srcv, srcv_ls, tref, row, col, mv, bw, bh, w, h, bytesperpixel)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_8bpp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_PER_PIXEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9_mc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BYTES_PER_PIXEL</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_16bpp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_PER_PIXEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9_mc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mc_luma_dir</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mc_chroma_dir</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BYTES_PER_PIXEL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCALED</name></cpp:undef>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mc_luma_scaled</name><argument_list>(<argument><expr><name>VP9TileData</name> <operator>*</operator><name>td</name></expr></argument>, <argument><expr><name>vp9_scaled_mc_func</name> <name>smc</name></expr></argument>,

<argument><expr><call><name>vp9_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>mc</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>dst_stride</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>ref</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>ref_stride</name></expr></argument>,

<argument><expr><name>ThreadFrame</name> <operator>*</operator><name>ref_frame</name></expr></argument>,

<argument><expr><name>ptrdiff_t</name> <name>y</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>x</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VP56mv</name> <operator>*</operator><name>in_mv</name></expr></argument>,

<argument><expr><name>int</name> <name>px</name></expr></argument>, <argument><expr><name>int</name> <name>py</name></expr></argument>, <argument><expr><name>int</name> <name>pw</name></expr></argument>, <argument><expr><name>int</name> <name>ph</name></expr></argument>,

<argument><expr><name>int</name> <name>bw</name></expr></argument>, <argument><expr><name>int</name> <name>bh</name></expr></argument>, <argument><expr><name>int</name> <name>w</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>, <argument><expr><name>int</name> <name>bytesperpixel</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><name>scale</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>step</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>ref_frame</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name><name>ref_frame</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mc_luma_unscaled</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>ref_frame</name></expr></argument>,

<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>in_mv</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scale_mv</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int64_t)(n) * scale[dim]) &gt;&gt; 14)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refbw_m1</name></decl>, <decl><type ref="prev"/><name>refbh_m1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>th</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56mv</name></type> <name>mv</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>in_mv</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>pw</name> <operator>-</operator> <name>px</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>x</name> <operator>+</operator> <name>px</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>in_mv</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>ph</name> <operator>-</operator> <name>py</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>y</name> <operator>+</operator> <name>py</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name>y</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>my</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>ref_stride</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>refbw_m1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bw</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mx</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>refbh_m1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bh</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>step</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>my</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>refbh_m1</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>ref_frame</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>x</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name>w</name> <operator>-</operator> <name>refbw_m1</name> <operator>||</operator> <name>y</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;=</operator> <name>h</name> <operator>-</operator> <name>refbh_m1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,

<argument><expr><name>ref</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>ref_stride</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><literal type="number">288</literal></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>,

<argument><expr><name>refbw_m1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>refbh_m1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name>x</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">288</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_stride</name> <operator>=</operator> <literal type="number">288</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>smc</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>ref_stride</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mc_chroma_scaled</name><argument_list>(<argument><expr><name>VP9TileData</name> <operator>*</operator><name>td</name></expr></argument>, <argument><expr><name>vp9_scaled_mc_func</name> <name>smc</name></expr></argument>,

<argument><expr><call><name>vp9_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>mc</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><name>uint8_t</name> <operator>*</operator><name>dst_u</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dst_v</name></expr></argument>,

<argument><expr><name>ptrdiff_t</name> <name>dst_stride</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>ref_u</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>src_stride_u</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>ref_v</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>src_stride_v</name></expr></argument>,

<argument><expr><name>ThreadFrame</name> <operator>*</operator><name>ref_frame</name></expr></argument>,

<argument><expr><name>ptrdiff_t</name> <name>y</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>x</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>VP56mv</name> <operator>*</operator><name>in_mv</name></expr></argument>,

<argument><expr><name>int</name> <name>px</name></expr></argument>, <argument><expr><name>int</name> <name>py</name></expr></argument>, <argument><expr><name>int</name> <name>pw</name></expr></argument>, <argument><expr><name>int</name> <name>ph</name></expr></argument>,

<argument><expr><name>int</name> <name>bw</name></expr></argument>, <argument><expr><name>int</name> <name>bh</name></expr></argument>, <argument><expr><name>int</name> <name>w</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>, <argument><expr><name>int</name> <name>bytesperpixel</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><name>scale</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>step</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>ref_frame</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name><name>ref_frame</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mc_chroma_unscaled</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>, <argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>dst_v</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>ref_u</name></expr></argument>, <argument><expr><name>src_stride_u</name></expr></argument>,

<argument><expr><name>ref_v</name></expr></argument>, <argument><expr><name>src_stride_v</name></expr></argument>, <argument><expr><name>ref_frame</name></expr></argument>,

<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>in_mv</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refbw_m1</name></decl>, <decl><type ref="prev"/><name>refbh_m1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>th</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56mv</name></type> <name>mv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>in_mv</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>pw</name> <operator>-</operator> <name>px</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <name>x</name> <operator>+</operator> <name>px</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><call><name>scale_mv</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>scale_mv</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>in_mv</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>x</name> <operator>+</operator> <name>pw</name> <operator>-</operator> <name>px</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>x</name> <operator>+</operator> <name>px</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>x</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>in_mv</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>ph</name> <operator>-</operator> <name>py</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <name>y</name> <operator>+</operator> <name>py</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><call><name>scale_mv</name><argument_list>(<argument><expr><name>y</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>scale_mv</name><argument_list>(<argument><expr><name>y</name> <operator>*</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>in_mv</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>y</name> <operator>+</operator> <name>ph</name> <operator>-</operator> <name>py</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>y</name> <operator>+</operator> <name>py</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name><name>mv</name><operator>.</operator><name>y</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>scale_mv</name><argument_list>(<argument><expr><name>y</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>scale_mv</name></cpp:undef>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>my</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>mx</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_u</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>src_stride_u</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_v</name> <operator>+=</operator> <name>y</name> <operator>*</operator> <name>src_stride_v</name> <operator>+</operator> <name>x</name> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>refbw_m1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bw</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>mx</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>refbh_m1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bh</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>step</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>my</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>th</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>refbh_m1</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><name>ref_frame</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>th</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>x</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name>w</name> <operator>-</operator> <name>refbw_m1</name> <operator>||</operator> <name>y</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;=</operator> <name>h</name> <operator>-</operator> <name>refbh_m1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,

<argument><expr><name>ref_u</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>src_stride_u</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><literal type="number">288</literal></expr></argument>, <argument><expr><name>src_stride_u</name></expr></argument>,

<argument><expr><name>refbw_m1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>refbh_m1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name>x</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_u</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">288</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smc</name><argument_list>(<argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>ref_u</name></expr></argument>, <argument><expr><literal type="number">288</literal></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>,

<argument><expr><name>ref_v</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>src_stride_v</name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><literal type="number">288</literal></expr></argument>, <argument><expr><name>src_stride_v</name></expr></argument>,

<argument><expr><name>refbw_m1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>refbh_m1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><name>x</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_v</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">288</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smc</name><argument_list>(<argument><expr><name>dst_v</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>ref_v</name></expr></argument>, <argument><expr><literal type="number">288</literal></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>smc</name><argument_list>(<argument><expr><name>dst_u</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>ref_u</name></expr></argument>, <argument><expr><name>src_stride_u</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>smc</name><argument_list>(<argument><expr><name>dst_v</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name>ref_v</name></expr></argument>, <argument><expr><name>src_stride_v</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mc_luma_dir</name><parameter_list>(<parameter><type><name>td</name></type></parameter>, <parameter><type><name>mc</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>dst_ls</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>src_ls</name></type></parameter>, <parameter><type><name>tref</name></type></parameter>, <parameter><type><name>row</name></type></parameter>, <parameter><type><name>col</name></type></parameter>, <parameter><type><name>mv</name></type></parameter>, <parameter><type><name>px</name></type></parameter>, <parameter><type><name>py</name></type></parameter>, <parameter><type><name>pw</name></type></parameter>, <parameter><type><name>ph</name></type></parameter>, <parameter><type><name>bw</name></type></parameter>, <parameter><type><name>bh</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mc_luma_scaled(td, s-&gt;dsp.s##mc, s-&gt;dsp.mc, dst, dst_ls, src, src_ls, tref, row, col, mv, px, py, pw, ph, bw, bh, w, h, bytesperpixel, s-&gt;mvscale[b-&gt;ref[i]], s-&gt;mvstep[b-&gt;ref[i]])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mc_chroma_dir</name><parameter_list>(<parameter><type><name>td</name></type></parameter>, <parameter><type><name>mc</name></type></parameter>, <parameter><type><name>dstu</name></type></parameter>, <parameter><type><name>dstv</name></type></parameter>, <parameter><type><name>dst_ls</name></type></parameter>, <parameter><type><name>srcu</name></type></parameter>, <parameter><type><name>srcu_ls</name></type></parameter>, <parameter><type><name>srcv</name></type></parameter>, <parameter><type><name>srcv_ls</name></type></parameter>, <parameter><type><name>tref</name></type></parameter>, <parameter><type><name>row</name></type></parameter>, <parameter><type><name>col</name></type></parameter>, <parameter><type><name>mv</name></type></parameter>, <parameter><type><name>px</name></type></parameter>, <parameter><type><name>py</name></type></parameter>, <parameter><type><name>pw</name></type></parameter>, <parameter><type><name>ph</name></type></parameter>, <parameter><type><name>bw</name></type></parameter>, <parameter><type><name>bh</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mc_chroma_scaled(td, s-&gt;dsp.s##mc, s-&gt;dsp.mc, dstu, dstv, dst_ls, srcu, srcu_ls, srcv, srcv_ls, tref, row, col, mv, px, py, pw, ph, bw, bh, w, h, bytesperpixel, s-&gt;mvscale[b-&gt;ref[i]], s-&gt;mvstep[b-&gt;ref[i]])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_scaled_8bpp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_PER_PIXEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9_mc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BYTES_PER_PIXEL</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x##_scaled_16bpp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTES_PER_PIXEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9_mc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mc_luma_dir</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>mc_chroma_dir</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BYTES_PER_PIXEL</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCALED</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>inter_recon</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytesperpixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row</name></name></expr></init></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mvscale</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>comp</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mvscale</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bytesperpixel</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inter_pred_scaled_8bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>inter_pred_scaled_16bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bytesperpixel</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>inter_pred_8bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>inter_pred_16bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>step1d</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>step</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_x</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name><operator>)</operator></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name><operator>)</operator></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lossless</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>uvtx</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lossless</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvstep1d</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step1d</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end_x</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>step1d</name></expr><operator>,</operator>

<expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>step1d</name> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator> <expr><name>n</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eob</name> <init>= <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>&gt;</operator> <name>TX_8X8</name></expr> ?</condition><then> <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>eob</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>td</name><operator>-&gt;</operator><name>eob</name><index>[<expr><name>n</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eob</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>itxfm_add</name><index>[<expr><name>tx</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>td</name><operator>-&gt;</operator><name>y_stride</name></name><operator>,</operator>

<name><name>td</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>eob</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>y_stride</name></name> <operator>*</operator> <name>step1d</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>end_x</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>uvstep1d</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>end_x</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>uvstep1d</name></expr><operator>,</operator>

<expr><name>ptr</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>uvstep1d</name> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator> <expr><name>n</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>eob</name> <init>= <expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name> <operator>&gt;</operator> <name>TX_8X8</name></expr> ?</condition><then> <expr><call><name>AV_RN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>uveob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>td</name><operator>-&gt;</operator><name>uveob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eob</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>itxfm_add</name><index>[<expr><name>uvtx</name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name><operator>(</operator><name>ptr</name><operator>,</operator> <name><name>td</name><operator>-&gt;</operator><name>uv_stride</name></name><operator>,</operator>

<name><name>td</name><operator>-&gt;</operator><name>uvblock</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name>eob</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>uvstep1d</name> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>uv_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp9_inter_recon_8bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>inter_recon</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp9_inter_recon_16bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>inter_recon</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
