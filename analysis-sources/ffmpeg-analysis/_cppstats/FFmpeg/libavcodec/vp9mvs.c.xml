<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vp9mvs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>clamp_mv</name><parameter_list>(<parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VP56mv</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>min_mv</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>max_mv</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>min_mv</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>max_mv</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_ref_mvs</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>,

<parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>pmv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>mv_ref_blk_off</name><index>[<expr><name>N_BS_SIZES</name></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>BS_64x64</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_64x32</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_32x64</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_32x32</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_32x16</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_16x32</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_16x16</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_16x8</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_8x16</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_8x8</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_8x4</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_4x8</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,

<expr><index>[<expr><name>BS_4x4</name></expr>]</index> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row</name></name></expr></init></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name></expr></init></decl>, <decl><type ref="prev"/><name>row7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row7</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>mv_ref_blk_off</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_MV</name></cpp:macro> <cpp:value>0x80008000U</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mem</name> <init>= <expr><name>INVALID_MV</name></expr></init></decl>, <decl><type ref="prev"/><name>mem_sub8x8</name> <init>= <expr><name>INVALID_MV</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_DIRECT_MV</name><parameter_list>(<parameter><type><name>mv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { uint32_t m = AV_RN32A(&amp;mv); if (!idx) { AV_WN32A(pmv, m); return; } else if (mem == INVALID_MV) { mem = m; } else if (m != mem) { AV_WN32A(pmv, m); return; } } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>sb</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RETURN_DIRECT_MV</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sb</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RETURN_DIRECT_MV</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_DIRECT_MV</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RETURN_DIRECT_MV</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_MV</name><parameter_list>(<parameter><type><name>mv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (sb &gt; 0) { VP56mv tmp; uint32_t m; av_assert2(idx == 1); av_assert2(mem != INVALID_MV); if (mem_sub8x8 == INVALID_MV) { clamp_mv(&amp;tmp, &amp;mv, td); m = AV_RN32A(&amp;tmp); if (m != mem) { AV_WN32A(pmv, m); return; } mem_sub8x8 = AV_RN32A(&amp;mv); } else if (mem_sub8x8 != AV_RN32A(&amp;mv)) { clamp_mv(&amp;tmp, &amp;mv, td); m = AV_RN32A(&amp;tmp); if (m != mem) { AV_WN32A(pmv, m); } else { AV_WN32A(pmv, 0); } return; } } else { uint32_t m = AV_RN32A(&amp;mv); if (!idx) { clamp_mv(pmv, &amp;mv, td); return; } else if (mem == INVALID_MV) { mem = m; } else if (m != mem) { clamp_mv(pmv, &amp;mv, td); return; } } } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VP9mvrefPair</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><operator>(</operator><name>row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_MV</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>col</name> <operator>+</operator> <operator>(</operator><name>sb</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_MV</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>col</name> <operator>+</operator> <operator>(</operator><name>sb</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>tile_col_start</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VP9mvrefPair</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_MV</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_mv_ctx</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>row7</name> <operator>+</operator> <operator>(</operator><name>sb</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_MV</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_mv_ctx</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>row7</name> <operator>+</operator> <operator>(</operator><name>sb</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>col</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>row</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name><name>td</name><operator>-&gt;</operator><name>tile_col_start</name></name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>&amp;&amp;</operator>

<name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VP9mvrefPair</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><name>r</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_MV</name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_MV</name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>use_last_frame_mvs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VP9mvrefPair</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name><operator>.</operator><name>uses_2pass</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name><operator>.</operator><name>tf</name></expr></argument>, <argument><expr><name>row</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_MV</name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_MV</name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_SCALE_MV</name><parameter_list>(<parameter><type><name>mv</name></type></parameter>, <parameter><type><name>scale</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (scale) { VP56mv mv_temp = { -mv.x, -mv.y }; RETURN_MV(mv_temp); } else { RETURN_MV(mv); } } while (0)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>col</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>row</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name><name>td</name><operator>-&gt;</operator><name>tile_col_start</name></name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VP9mvrefPair</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><name>r</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ref</name> <operator>&amp;&amp;</operator> <name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_SCALE_MV</name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>ref</name> <operator>&amp;&amp;</operator> <name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RETURN_SCALE_MV</name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>use_last_frame_mvs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VP9mvrefPair</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><name>row</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ref</name> <operator>&amp;&amp;</operator> <name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RETURN_SCALE_MV</name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>ref</name> <operator>&amp;&amp;</operator> <name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>RETURN_SCALE_MV</name><argument_list>(<argument><expr><name><name>mv</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name><name>mv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name>pmv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clamp_mv</name><argument_list>(<argument><expr><name>pmv</name></expr></argument>, <argument><expr><name>pmv</name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INVALID_MV</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN_MV</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN_SCALE_MV</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>read_mv_component</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>sign</name> <init>= <expr><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_mv_class_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>classes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>sign</name><index>[<expr><name>sign</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>classes</name><index>[<expr><name>c</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>bits</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>|=</operator> <name>bit</name> <operator>&lt;&lt;</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>bits</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_mv_fp_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>|=</operator> <name>bit</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>fp</name><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>hp</name><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>|=</operator> <name>bit</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>hp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>class0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>class0</name><index>[<expr><name>n</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_mv_fp_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>class0_fp</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>class0_fp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>bit</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>class0_hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>class0_hp</name><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>|=</operator> <name>bit</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>class0_hp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp9_fill_mv</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>VP56mv</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>ZEROMV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO64</name><argument_list>(<argument><expr><name>mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>find_ref_mvs</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name> <operator>==</operator> <name>NEARMV</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>NEWMV</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>sb</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>NEWMV</name> <operator>||</operator> <name>sb</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>hp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>highprecisionmvs</name></name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">64</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>NEWMV</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>MVJoint</name></name></type> <name>j</name> <init>= <expr><call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_mv_joint_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_joint</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_joint</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>MV_JOINT_V</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>+=</operator> <call><name>read_mv_component</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>+=</operator> <call><name>read_mv_component</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>find_ref_mvs</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mode</name> <operator>==</operator> <name>NEARMV</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>NEWMV</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>sb</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>NEWMV</name> <operator>||</operator> <name>sb</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>hp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>highprecisionmvs</name></name> <operator>&amp;&amp;</operator>

<call><name>abs</name><argument_list>(<argument><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">64</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>NEWMV</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>MVJoint</name></name></type> <name>j</name> <init>= <expr><call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_mv_joint_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_joint</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_joint</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>MV_JOINT_V</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>y</name> <operator>+=</operator> <call><name>read_mv_component</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name> <operator>+=</operator> <call><name>read_mv_component</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
