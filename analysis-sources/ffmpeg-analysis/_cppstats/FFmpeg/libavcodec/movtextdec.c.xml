<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\movtextdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_FLAG_BOLD</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_FLAG_ITALIC</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYLE_FLAG_UNDERLINE</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOX_SIZE_INITIAL</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STYL_BOX</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLIT_BOX</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCLR_BOX</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TWRP_BOX</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOTTOM_LEFT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOTTOM_CENTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOTTOM_RIGHT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIDDLE_LEFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIDDLE_CENTER</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIDDLE_RIGHT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_LEFT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_CENTER</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_RIGHT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fontsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>back_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>italic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>underline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alignment</name></decl>;</decl_stmt>

}</block></struct></type> <name>MovTextDefault</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>fontID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>font</name></decl>;</decl_stmt>

}</block></struct></type> <name>FontRecord</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>style_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>style_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>style_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fontsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>style_fontID</name></decl>;</decl_stmt>

}</block></struct></type> <name>StyleBox</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>hlit_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>hlit_end</name></decl>;</decl_stmt>

}</block></struct></type> <name>HighlightBox</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hlit_color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>HilightcolorBox</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>wrap_flag</name></decl>;</decl_stmt>

}</block></struct></type> <name>TextWrapBox</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>StyleBox</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StyleBox</name> <modifier>*</modifier></type><name>s_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HighlightBox</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HilightcolorBox</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FontRecord</name> <modifier>*</modifier><modifier>*</modifier></type><name>ftab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FontRecord</name> <modifier>*</modifier></type><name>ftab_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TextWrapBox</name></type> <name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MovTextDefault</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>box_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>style_entries</name></decl>, <name>ftab_entries</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tracksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_var</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count_s</name></decl>, <name>count_f</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>readorder</name></decl>;</decl_stmt>

}</block></struct></type> <name>MovTextContext</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>base_size</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsmb</name></decl></parameter>, <parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>Box</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_text_cleanup</name><parameter_list>(<parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>STYL_BOX</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>count_s</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>count_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>style_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_text_cleanup_ftab</name><parameter_list>(<parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name><operator>-&gt;</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>ftab</name></name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>count_f</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ftab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_text_tx3g</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tx3g_ptr</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>box_size</name></decl>, <decl><type ref="prev"/><name>font_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>v_align</name></decl>, <decl><type ref="prev"/><name>h_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>style_fontID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>StyleBox</name></type> <name>s_default</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>count_f</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>box_size</name> <operator>=</operator> <name>BOX_SIZE_INITIAL</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <name>box_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h_align</name> <operator>=</operator> <operator>*</operator><name>tx3g_ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v_align</name> <operator>=</operator> <operator>*</operator><name>tx3g_ptr</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>h_align</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>TOP_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>MIDDLE_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>BOTTOM_LEFT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h_align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>TOP_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>MIDDLE_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>BOTTOM_CENTER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h_align</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>TOP_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>MIDDLE_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v_align</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name> <operator>=</operator> <name>BOTTOM_RIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>back_color</name></name> <operator>=</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name>tx3g_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>style_fontID</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>tx3g_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s_default</name><operator>.</operator><name>style_flag</name></name> <operator>=</operator> <operator>*</operator><name>tx3g_ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>bold</name></name> <operator>=</operator> <name><name>s_default</name><operator>.</operator><name>style_flag</name></name> <operator>&amp;</operator> <name>STYLE_FLAG_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>italic</name></name> <operator>=</operator> <name><name>s_default</name><operator>.</operator><name>style_flag</name></name> <operator>&amp;</operator> <name>STYLE_FLAG_ITALIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <name><name>s_default</name><operator>.</operator><name>style_flag</name></name> <operator>&amp;</operator> <name>STYLE_FLAG_UNDERLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>fontsize</name></name> <operator>=</operator> <operator>*</operator><name>tx3g_ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name>tx3g_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_entries</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>tx3g_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>ftab_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>box_size</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <name>box_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_text_cleanup_ftab</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_text_cleanup_ftab</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name><operator>-&gt;</operator><name>fontID</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>tx3g_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>font_length</name> <operator>=</operator> <operator>*</operator><name>tx3g_ptr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>box_size</name> <operator>=</operator> <name>box_size</name> <operator>+</operator> <name>font_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <name>box_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_text_cleanup_ftab</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name><operator>-&gt;</operator><name>font</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>font_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name><operator>-&gt;</operator><name>font</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_text_cleanup_ftab</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name><operator>-&gt;</operator><name>font</name></name></expr></argument>, <argument><expr><name>tx3g_ptr</name></expr></argument>, <argument><expr><name>font_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name><operator>-&gt;</operator><name>font</name><index>[<expr><name>font_length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>ftab</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>count_f</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>ftab</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_text_cleanup_ftab</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>ftab_temp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tx3g_ptr</name> <operator>=</operator> <name>tx3g_ptr</name> <operator>+</operator> <name>font_length</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>ftab_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>style_fontID</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fontID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>font</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>ftab</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>font</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_twrp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsmb</name></decl></parameter>, <parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>|=</operator> <name>TWRP_BOX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>wrap_flag</name></name> <operator>=</operator> <operator>*</operator><name>tsmb</name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_hlit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsmb</name></decl></parameter>, <parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>|=</operator> <name>HLIT_BOX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>hlit_start</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>hlit_end</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_hclr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsmb</name></decl></parameter>, <parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>|=</operator> <name>HCLR_BOX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hlit_color</name></name></expr></argument>, <argument><expr><name>tsmb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_styl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsmb</name></decl></parameter>, <parameter><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>style_entries</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>size_var</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>style_entries</name> <operator>*</operator> <literal type="number">12</literal> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>style_entries</name></name> <operator>=</operator> <name>style_entries</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>|=</operator> <name>STYL_BOX</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>style_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>s_temp</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>s_temp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>s_temp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>s_temp</name><operator>-&gt;</operator><name>style_start</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>s_temp</name><operator>-&gt;</operator><name>style_end</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>m</name><operator>-&gt;</operator><name>s_temp</name><operator>-&gt;</operator><name>style_end</name></name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>s_temp</name><operator>-&gt;</operator><name>style_start</name></name>

<operator>||</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>count_s</name></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>s_temp</name><operator>-&gt;</operator><name>style_start</name></name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>count_s</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>style_end</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>s_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>s_temp</name><operator>-&gt;</operator><name>style_fontID</name></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>s_temp</name><operator>-&gt;</operator><name>style_flag</name></name> <operator>=</operator> <call><name>AV_RB8</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>s_temp</name><operator>-&gt;</operator><name>fontsize</name></name> <operator>=</operator> <call><name>AV_RB8</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dynarray_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>count_s</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>s_temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tsmb</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Box</name></type> <name><name>box_types</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>decode_styl</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>decode_hlit</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>decode_hclr</name></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>decode_twrp</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>size_t</name></type> <name>box_count</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>box_types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_utf8_length_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>text</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>;</decl_stmt>

<macro><name>GET_UTF8</name><argument_list>(<argument>c</argument>, <argument>text &lt; text_end ? (uint8_t)*text++ : (err = <literal type="number">1</literal>, <literal type="number">0</literal>)</argument>, <argument>goto error;</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>text</name> <operator>-</operator> <name>start</name></expr>;</return>

<label><name>error</name>:</label>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>text_to_ass</name><parameter_list>(<parameter><decl><type><name>AVBPrint</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text_end</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>text</name> <operator>&lt;</operator> <name>text_end</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>TWRP_BOX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>wrap_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\q1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\q2}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>text</name> <operator>&lt;</operator> <name>text_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>STYL_BOX</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>style_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>style_flag</name> <operator>&amp;&amp;</operator> <name>text_pos</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>style_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\r}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>style_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>style_flag</name> <operator>&amp;&amp;</operator> <name>text_pos</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>style_start</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>style_flag</name> <operator>&amp;</operator> <name>STYLE_FLAG_BOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\b1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>style_flag</name> <operator>&amp;</operator> <name>STYLE_FLAG_ITALIC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\i1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>style_flag</name> <operator>&amp;</operator> <name>STYLE_FLAG_UNDERLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\u1}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\fs%d}"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>fontsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>ftab_entries</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>style_fontID</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>fontID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\fn%s}"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>ftab</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>HLIT_BOX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>text_pos</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>hlit_start</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>HCLR_BOX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\2c&amp;H%02x%02x%02x&amp;}"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hlit_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hlit_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>hlit_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\1c&amp;H000000&amp;}{\\2c&amp;HFFFFFF&amp;}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>text_pos</name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>h</name><operator>.</operator><name>hlit_end</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>&amp;</operator> <name>HCLR_BOX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\2c&amp;H000000&amp;}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\1c&amp;HFFFFFF&amp;}{\\2c&amp;H000000&amp;}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_utf8_length_at</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid UTF-8 byte in subtitle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><operator>*</operator><name>text</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\\N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_bprint_chars</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>text</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>text</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>text_pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_text_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mov_text_tx3g</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ff_ass_subtitle_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>font</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>fontsize</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>color</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>back_color</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>bold</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>italic</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>underline</name></name></expr></argument>, <argument><expr><name>ASS_DEFAULT_BORDERSTYLE</name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>ff_ass_subtitle_header_default</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_text_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>text_length</name></decl>, <decl><type ref="prev"/><name>tsmb_type</name></decl>, <decl><type ref="prev"/><name>ret_tsmb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tsmb_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tsmb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name> <operator>||</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><call><name>AV_RB16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVERROR_INVALIDDATA</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>text_length</name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>+</operator> <name>text_length</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>text_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>style_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>box_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>count_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>text_length</name> <operator>+</operator> <literal type="number">2</literal> <operator>!=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tsmb</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb_type</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tsmb_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tsmb_size</name> <operator>=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tsmb</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size_var</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>size_var</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tsmb_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"tsmb_size is 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tsmb_size</name> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>box_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tsmb_type</name> <operator>==</operator> <name><name>box_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>size_var</name></name> <operator>+</operator> <name><name>box_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>base_size</name> <operator>&gt;</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret_tsmb</name> <operator>=</operator> <name><name>box_types</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><name>tsmb</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret_tsmb</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>tracksize</name></name> <operator>+</operator> <name>tsmb_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>text_to_ass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_to_ass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ass_add_rect</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>readorder</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mov_text_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mov_text_cleanup_ftab</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mov_text_cleanup</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mov_text_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MovTextContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_RO_FLUSH_NOOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>readorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_movtext_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mov_text"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"3GPP Timed Text subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MOV_TEXT</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MovTextContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mov_text_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>mov_text_decode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>mov_text_decode_close</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>mov_text_flush</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
