<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\sbrdsp_template.c"><function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_sum64x5_c</name><parameter_list>(<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>f</name> <init>= <expr><name><name>z</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">192</literal></expr>]</index></name> <operator>+</operator> <name><name>z</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>z</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbr_qmf_deint_bfly_c</name><parameter_list>(<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>v</name><index>[ <expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0x10U</literal> <operator>+</operator> <name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>src1</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">127</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">0x10U</literal> <operator>+</operator> <name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>v</name><index>[ <expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>src1</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">127</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src1</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_apply_noise_0</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>AAC_FLOAT</name> <operator>*</operator><name>s_m</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>AAC_FLOAT</name> <operator>*</operator><name>q_filt</name></expr></argument>, <argument><expr><name>int</name> <name>noise</name></expr></argument>,

<argument><expr><name>int</name> <name>kx</name></expr></argument>, <argument><expr><name>int</name> <name>m_max</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sbr_hf_apply_noise</name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>s_m</name></expr></argument>, <argument><expr><name>q_filt</name></expr></argument>, <argument><expr><name>noise</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name><operator>)</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name><operator>)</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>m_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_apply_noise_1</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>AAC_FLOAT</name> <operator>*</operator><name>s_m</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>AAC_FLOAT</name> <operator>*</operator><name>q_filt</name></expr></argument>, <argument><expr><name>int</name> <name>noise</name></expr></argument>,

<argument><expr><name>int</name> <name>kx</name></expr></argument>, <argument><expr><name>int</name> <name>m_max</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>phi_sign</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>kx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sbr_hf_apply_noise</name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>s_m</name></expr></argument>, <argument><expr><name>q_filt</name></expr></argument>, <argument><expr><name>noise</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name><operator>)</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>phi_sign</name></expr></argument>, <argument><expr><name>m_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_apply_noise_2</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>AAC_FLOAT</name> <operator>*</operator><name>s_m</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>AAC_FLOAT</name> <operator>*</operator><name>q_filt</name></expr></argument>, <argument><expr><name>int</name> <name>noise</name></expr></argument>,

<argument><expr><name>int</name> <name>kx</name></expr></argument>, <argument><expr><name>int</name> <name>m_max</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>sbr_hf_apply_noise</name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>s_m</name></expr></argument>, <argument><expr><name>q_filt</name></expr></argument>, <argument><expr><name>noise</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name><operator>)</operator><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name><operator>)</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>m_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>sbr_hf_apply_noise_3</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>AAC_FLOAT</name> <operator>*</operator><name>s_m</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>AAC_FLOAT</name> <operator>*</operator><name>q_filt</name></expr></argument>, <argument><expr><name>int</name> <name>noise</name></expr></argument>,

<argument><expr><name>int</name> <name>kx</name></expr></argument>, <argument><expr><name>int</name> <name>m_max</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>phi_sign</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>kx</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sbr_hf_apply_noise</name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>s_m</name></expr></argument>, <argument><expr><name>q_filt</name></expr></argument>, <argument><expr><name>noise</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name><operator>)</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>-</operator><name>phi_sign</name></expr></argument>, <argument><expr><name>m_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><name>av_cold</name> <name>void</name> <name>AAC_RENAME</name></type>(<name>ff_sbrdsp_init</name>)<parameter_list>(<parameter><decl><type><name>SBRDSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sum64x5</name></name> <operator>=</operator> <name>sbr_sum64x5_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sum_square</name></name> <operator>=</operator> <name>sbr_sum_square_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>neg_odd_64</name></name> <operator>=</operator> <name>sbr_neg_odd_64_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmf_pre_shuffle</name></name> <operator>=</operator> <name>sbr_qmf_pre_shuffle_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmf_post_shuffle</name></name> <operator>=</operator> <name>sbr_qmf_post_shuffle_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmf_deint_neg</name></name> <operator>=</operator> <name>sbr_qmf_deint_neg_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qmf_deint_bfly</name></name> <operator>=</operator> <name>sbr_qmf_deint_bfly_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>autocorrelate</name></name> <operator>=</operator> <name>sbr_autocorrelate_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hf_gen</name></name> <operator>=</operator> <name>sbr_hf_gen_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hf_g_filt</name></name> <operator>=</operator> <name>sbr_hf_g_filt_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hf_apply_noise</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sbr_hf_apply_noise_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hf_apply_noise</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sbr_hf_apply_noise_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hf_apply_noise</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>sbr_hf_apply_noise_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hf_apply_noise</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>sbr_hf_apply_noise_3</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sbrdsp_init_arm</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sbrdsp_init_aarch64</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sbrdsp_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_sbrdsp_init_mips</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

</unit>
