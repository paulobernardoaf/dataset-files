<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\lossless_audiodsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lossless_audiodsp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scalarproduct_and_madd_int16_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>v3</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mul</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>*</operator><name>v1</name> <operator>*</operator> <operator>*</operator><name>v2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v1</name><operator>++</operator> <operator>+=</operator> <name>mul</name> <operator>*</operator> <operator>*</operator><name>v3</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>*</operator><name>v1</name> <operator>*</operator> <operator>*</operator><name>v2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v1</name><operator>++</operator> <operator>+=</operator> <name>mul</name> <operator>*</operator> <operator>*</operator><name>v3</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>order</name><operator>-=</operator><literal type="number">2</literal></expr>)</condition>;</do>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>scalarproduct_and_madd_int32_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>v3</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mul</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>*</operator><name>v1</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>v2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v1</name><operator>++</operator> <operator>+=</operator> <name>mul</name> <operator>*</operator> <operator>*</operator><name>v3</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>*</operator><name>v1</name> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>*</operator><name>v2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v1</name><operator>++</operator> <operator>+=</operator> <name>mul</name> <operator>*</operator> <operator>*</operator><name>v3</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>order</name><operator>-=</operator><literal type="number">2</literal></expr>)</condition>;</do>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_llauddsp_init</name><parameter_list>(<parameter><decl><type><name>LLAudDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scalarproduct_and_madd_int16</name></name> <operator>=</operator> <name>scalarproduct_and_madd_int16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scalarproduct_and_madd_int32</name></name> <operator>=</operator> <name>scalarproduct_and_madd_int32_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_llauddsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_llauddsp_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_llauddsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
