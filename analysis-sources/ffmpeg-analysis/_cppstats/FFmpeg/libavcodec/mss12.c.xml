<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mss12.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mss12.h"</cpp:file></cpp:include>

<enum>enum <name>SplitMode</name> <block>{

<decl><name>SPLIT_VERT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SPLIT_HOR</name></decl>,

<decl><name>SPLIT_NONE</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sec_order_sizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>ContextDirection</name> <block>{

<decl><name>TOP_LEFT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TOP</name></decl>,

<decl><name>TOP_RIGHT</name></decl>,

<decl><name>LEFT</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>model_calc_threshold</name><parameter_list>(<parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>thr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>thr</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>num_syms</name></name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>thr</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>thr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>m</name><operator>-&gt;</operator><name>cum_prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <name>thr</name></expr>;</expr_stmt>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>thr</name></expr></argument>, <argument><expr><literal type="number">0x3FFF</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>model_reset</name><parameter_list>(<parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>num_syms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cum_prob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>num_syms</name></name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>num_syms</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>idx2sym</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>model_init</name><parameter_list>(<parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_syms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thr_weight</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>num_syms</name></name> <operator>=</operator> <name>num_syms</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>thr_weight</name></name> <operator>=</operator> <name>thr_weight</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>threshold</name></name> <operator>=</operator> <name>num_syms</name> <operator>*</operator> <name>thr_weight</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>model_rescale_weights</name><parameter_list>(<parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cum_prob</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>thr_weight</name></name> <operator>==</operator> <name>THRESH_ADAPTIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>threshold</name></name> <operator>=</operator> <call><name>model_calc_threshold</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cum_prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cum_prob</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>num_syms</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cum_prob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cum_prob</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cum_prob</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mss12_model_update</name><parameter_list>(<parameter><decl><type><name>Model</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>val</name></expr>]</index></name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>val</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>val</name></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>val</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sym1</name></decl>, <decl><type ref="prev"/><name>sym2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sym1</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>idx2sym</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sym2</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>idx2sym</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>idx2sym</name><index>[<expr><name>val</name></expr>]</index></name> <operator>=</operator> <name>sym2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>idx2sym</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sym1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>weights</name><index>[<expr><name>val</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>val</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cum_prob</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>model_rescale_weights</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pixctx_reset</name><parameter_list>(<parameter><decl><type><name>PixContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>special_initial_cache</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cache_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>model_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cache_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>full_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>model_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sec_models</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>pixctx_init</name><parameter_list>(<parameter><decl><type><name>PixContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cache_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>full_model_syms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>special_initial_cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>=</operator> <name>cache_size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_syms</name></name> <operator>=</operator> <name>cache_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>special_initial_cache</name></name> <operator>=</operator> <name>special_initial_cache</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cache_model</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_syms</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>THRESH_LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>full_model</name></name></expr></argument>, <argument><expr><name>full_model_syms</name></expr></argument>, <argument><expr><name>THRESH_HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sec_order_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>model_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sec_models</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>THRESH_LOW</name></expr> </then><else>: <expr><name>THRESH_ADAPTIVE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>decode_pixel</name><parameter_list>(<parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>, <parameter><decl><type><name>PixContext</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ngb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ngb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>any_ngb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>pix</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>acoder</name><operator>-&gt;</operator><name>overread</name></name> <operator>&gt;</operator> <name>MAX_OVERREAD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_model_sym</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pctx</name><operator>-&gt;</operator><name>cache_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name><name>pctx</name><operator>-&gt;</operator><name>num_syms</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>any_ngb</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pctx</name><operator>-&gt;</operator><name>cache_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_ngb</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>pctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>ngb</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>num_ngb</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>pctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_model_sym</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pctx</name><operator>-&gt;</operator><name>full_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pctx</name><operator>-&gt;</operator><name>cache_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>pctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>pix</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>val</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pctx</name><operator>-&gt;</operator><name>cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pix</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_pixel_in_context</name><parameter_list>(<parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>, <parameter><decl><type><name>PixContext</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>has_right</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>neighbours</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ref_pix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>layer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>neighbours</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>neighbours</name><index>[<expr><name>TOP</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name> <operator>=</operator> <name><name>neighbours</name><index>[<expr><name>LEFT</name></expr>]</index></name> <operator>=</operator> <name><name>neighbours</name><index>[<expr><name>TOP</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>neighbours</name><index>[ <expr><name>LEFT</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_right</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>neighbours</name><index>[<expr><name>TOP_RIGHT</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>-</operator><name>stride</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>neighbours</name><index>[<expr><name>TOP_RIGHT</name></expr>]</index></name> <operator>=</operator> <name><name>neighbours</name><index>[<expr><name>TOP</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name>stride</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sub</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>neighbours</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref_pix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>nlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref_pix</name><index>[<expr><name>nlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>neighbours</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name>nlen</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>TOP</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>TOP_RIGHT</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>LEFT</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>TOP_RIGHT</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>LEFT</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>LEFT</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>TOP</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>TOP_RIGHT</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>LEFT</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP_LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>TOP_RIGHT</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>TOP</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>neighbours</name><index>[<expr><name>TOP</name></expr>]</index></name> <operator>==</operator> <name><name>neighbours</name><index>[<expr><name>LEFT</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_model_sym</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pctx</name><operator>-&gt;</operator><name>sec_models</name><index>[<expr><name>layer</name></expr>]</index><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pix</name> <operator>&lt;</operator> <name>nlen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ref_pix</name><index>[<expr><name>pix</name></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>decode_pixel</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>ref_pix</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_region</name><parameter_list>(<parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgb_pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>rgb_stride</name></decl></parameter>, <parameter><decl><type><name>PixContext</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>pal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgb_dst</name> <init>= <expr><name>rgb_pic</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>rgb_stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>decode_pixel</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>decode_pixel_in_context</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rgb_pic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>rgb_dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>pal</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb_dst</name> <operator>+=</operator> <name>rgb_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_rectangles</name><parameter_list>(<parameter><decl><type><name>MSS12Context</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>last_rgb_pic</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>y</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>y</name> <operator>+</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>last_rgb_pic</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>,

<argument><expr><name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal_pic</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name> <operator>+</operator> <name>x</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>last_pal_pic</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name> <operator>+</operator> <name>x</name></expr></argument>,

<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>motion_compensation</name><parameter_list>(<parameter><decl><type><name>MSS12Context</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>mvX</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>mvX</name></name> <operator>+</operator> <name>width</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name>y</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>mvY</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>mvY</name></name> <operator>+</operator> <name>height</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>

<operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>pal_pic</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgb_dst</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgb_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>mvX</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>mvY</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>last_rgb_pic</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>last_pal_pic</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb_src</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>last_rgb_pic</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_pic</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb_src</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>rgb_dst</name></expr></argument>, <argument><expr><name>rgb_src</name></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb_dst</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb_src</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_region_masked</name><parameter_list>(<parameter><decl><type><name>MSS12Context</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>mask_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>PixContext</name> <modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgb_dst</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>+=</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>mask_stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>&amp;&amp;</operator> <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x04</literal> <operator>||</operator>

<operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>&amp;&amp;</operator> <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_rectangles</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x04</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>motion_compensation</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>decode_pixel</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>decode_pixel_in_context</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>pctx</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>rgb_dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>+=</operator> <name>mask_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgb_dst</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>slicecontext_init</name><parameter_list>(<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full_model_syms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>model_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>intra_region</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>THRESH_ADAPTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>inter_region</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>THRESH_ADAPTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>split_mode</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>THRESH_HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>edge_mode</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>THRESH_HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>pivot</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>THRESH_LOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pixctx_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>intra_pix_ctx</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>full_model_syms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pixctx_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>inter_pix_ctx</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>version</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>full_model_syms</name></expr></argument>, <argument><expr><ternary><condition><expr><name>version</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mss12_slicecontext_reset</name><parameter_list>(<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>model_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>intra_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>inter_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>split_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>edge_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>model_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>pivot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pixctx_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>intra_pix_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pixctx_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>inter_pix_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_pivot</name><parameter_list>(<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>inv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>inv</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_model_sym</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>edge_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_model_sym</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>pivot</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>base</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_number</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>(</operator><name>base</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>val</name> <operator>&gt;=</operator> <name>base</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>inv</name></expr> ?</condition><then> <expr><name>base</name> <operator>-</operator> <name>val</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_region_intra</name><parameter_list>(<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSS12Context</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_model_sym</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>intra_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mode</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>pix</name></decl>, <decl><type ref="prev"/><name>rgb_pix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>rgb_stride</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>pal_pic</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgb_dst</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name>rgb_stride</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <call><name>decode_pixel</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>intra_pix_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pix</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>pix</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rgb_pix</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>pix</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr><operator>,</operator> <expr><name>rgb_dst</name> <operator>+=</operator> <name>rgb_stride</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pix</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name>rgb_dst</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>rgb_pix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>decode_region</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal_pic</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>rgb_stride</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>intra_pix_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_region_inter</name><parameter_list>(<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MSS12Context</name> <specifier>const</specifier> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>sc</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_model_sym</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>inter_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>decode_pixel</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>inter_pix_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>mode</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">0x04</literal> <operator>||</operator>

<operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>rgb_pic</name></name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">0x02</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_rectangles</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">0x04</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>motion_compensation</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>decode_region_intra</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decode_region</name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>mask_stride</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>inter_pix_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>decode_region_masked</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal_pic</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pal_stride</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mask_stride</name></name></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>intra_pix_ctx</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mss12_decode_rect</name><parameter_list>(<parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>ArithCoder</name> <modifier>*</modifier></type><name>acoder</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>pivot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>acoder</name><operator>-&gt;</operator><name>overread</name></name> <operator>&gt;</operator> <name>MAX_OVERREAD</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name><name>acoder</name><operator>-&gt;</operator><name>get_model_sym</name></name><argument_list>(<argument><expr><name>acoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sc</name><operator>-&gt;</operator><name>split_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SPLIT_VERT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pivot</name> <operator>=</operator> <call><name>decode_pivot</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_mss12_decode_rect</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_mss12_decode_rect</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>pivot</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name>pivot</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SPLIT_HOR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pivot</name> <operator>=</operator> <call><name>decode_pivot</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_mss12_decode_rect</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_mss12_decode_rect</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>pivot</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>pivot</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>SPLIT_NONE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>decode_region_intra</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>decode_region_inter</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>acoder</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_mss12_decode_init</name><parameter_list>(<parameter><decl><type><name>MSS12Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,

<parameter><decl><type><name>SliceContext</name><modifier>*</modifier></type> <name>sc1</name></decl></parameter>, <parameter><decl><type><name>SliceContext</name> <modifier>*</modifier></type><name>sc2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">52</literal> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient extradata size %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Insufficient extradata size: expected %"</literal><name>PRIu32</name><literal type="string">" got %d\n"</literal></expr></argument>,

<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>&gt;</operator> <literal type="number">4096</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame dimensions %dx%d too large"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame dimensions %dx%d too small"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Encoder version %"</literal><name>PRIu32</name><literal type="string">".%"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Header version doesn't match codec tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>free_colours</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>free_colours</name></name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Incorrect number of changeable palette entries: %d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>free_colours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%d free colour(s)\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>free_colours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Display dimensions %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Coded dimensions %dx%d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%g frames per second\n"</literal></expr></argument>,

<argument><expr><call><name>av_int2float</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Bitrate %"</literal><name>PRIu32</name><literal type="string">" bps\n"</literal></expr></argument>,

<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Max. lead time %g ms\n"</literal></expr></argument>,

<argument><expr><call><name>av_int2float</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">36</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Max. lag time %g ms\n"</literal></expr></argument>,

<argument><expr><call><name>av_int2float</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Max. seek time %g ms\n"</literal></expr></argument>,

<argument><expr><call><name>av_int2float</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">60</literal> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Insufficient extradata size %d for v2\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slice_split</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Slice split %d\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>slice_split</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>full_model_syms</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>full_model_syms</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>full_model_syms</name></name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Incorrect number of used colours %d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>full_model_syms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Used colours %d\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>full_model_syms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>slice_split</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>full_model_syms</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">52</literal> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name>version</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mask_stride</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mask_stride</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>mask</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate mask plane\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sc1</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>slicecontext_init</name><argument_list>(<argument><expr><name>sc1</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>full_model_syms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>slice_split</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sc2</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>slicecontext_init</name><argument_list>(<argument><expr><name>sc2</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>full_model_syms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>corrupted</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_mss12_decode_end</name><parameter_list>(<parameter><decl><type><name>MSS12Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
