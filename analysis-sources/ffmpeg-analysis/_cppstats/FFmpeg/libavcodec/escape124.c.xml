<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\escape124.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><union>union <name>MacroBlock</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>pixels</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pixels32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></union></type> <name>MacroBlock</name>;</typedef>

<typedef>typedef <type><union>union <name>SuperBlock</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>pixels</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pixels32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></union></type> <name>SuperBlock</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CodeBook</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MacroBlock</name><modifier>*</modifier></type> <name>blocks</name></decl>;</decl_stmt>

}</block></struct></type> <name>CodeBook</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Escape124Context</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num_superblocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodeBook</name></type> <name><name>codebooks</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>Escape124Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>escape124_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Escape124Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_RGB555</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_superblocks</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator>

<operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>escape124_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Escape124Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CodeBook</name></type> <name>unpack_codebook</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>depth</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodeBook</name></type> <name>cb</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">34</literal> <operator>||</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>size</name> <operator>*</operator> <literal type="number">34</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cb</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MacroBlock</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cb</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>blocks</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>size</name></expr> ?</condition><then> <expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MacroBlock</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cb</name><operator>.</operator><name>blocks</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cb</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mask_bits</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>color0</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>color1</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask_bits</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>color1</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pixels</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>color0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>cb</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>decode_skip_count</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>value</name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MacroBlock</name></type> <name>decode_macroblock</name><parameter_list>(<parameter><decl><type><name>Escape124Context</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name><modifier>*</modifier></type> <name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>codebook_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>superblock_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>block_index</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>transitions</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>codebook_index</name> <operator>=</operator> <name><name>transitions</name><index>[<expr><operator>*</operator><name>codebook_index</name></expr>]</index><index>[<expr><name>value</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><operator>*</operator><name>codebook_index</name></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block_index</name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>codebook_index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_index</name> <operator>+=</operator> <name>superblock_index</name> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_index</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><operator>*</operator><name>codebook_index</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>MacroBlock</name><operator>)</operator> <block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><operator>*</operator><name>codebook_index</name></expr>]</index></name><operator>.</operator><name><name>blocks</name><index>[<expr><name>block_index</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_mb_into_sb</name><parameter_list>(<parameter><decl><type><name>SuperBlock</name><modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>MacroBlock</name></type> <name>mb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>sb</name><operator>-&gt;</operator><name>pixels32</name></name> <operator>+</operator> <name>index</name> <operator>+</operator> <operator>(</operator><name>index</name> <operator>&amp;</operator> <operator>-</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>.</operator><name>pixels32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>mb</name><operator>.</operator><name>pixels32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_superblock</name><parameter_list>(<parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dest_stride</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>src_stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dest_stride</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>src_stride</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>dest_stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>mask_matrix</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>,

<expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x80</literal></expr>,

<expr><literal type="number">0x100</literal></expr>, <expr><literal type="number">0x200</literal></expr>, <expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x2000</literal></expr>,

<expr><literal type="number">0x400</literal></expr>, <expr><literal type="number">0x800</literal></expr>, <expr><literal type="number">0x4000</literal></expr>, <expr><literal type="number">0x8000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>escape124_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Escape124Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_flags</name></decl>, <decl><type ref="prev"/><name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>superblock_index</name></decl>, <decl><type ref="prev"/><name>cb_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><type ref="prev"/><name>superblock_col_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><type ref="prev"/><name>superblocks_per_row</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>skip</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type> <name>old_frame_data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_frame_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>old_stride</name></decl>, <decl><type ref="prev"/><name>new_stride</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">64</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>num_superblocks</name></name> <operator>*</operator> <literal type="number">23LL</literal> <operator>/</operator> <literal type="number">4320</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_flags</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>frame_flags</name> <operator>&amp;</operator> <literal type="number">0x114</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>frame_flags</name> <operator>&amp;</operator> <literal type="number">0x7800000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Skipping frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>frame_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>frame_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">17</literal> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cb_depth</name></decl>, <decl><type ref="prev"/><name>cb_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cb_size</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cb_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid codebook size 0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cb_depth</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>cb_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cb_depth</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cb_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>cb_depth</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cb_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_superblocks</name></name> <operator>&lt;&lt;</operator> <name>cb_depth</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>num_superblocks</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>&gt;&gt;</operator> <name>cb_depth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Depth or num_superblocks are too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>unpack_codebook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>cb_depth</name></expr></argument>, <argument><expr><name>cb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>codebooks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>blocks</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_frame_data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_stride</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>old_frame_data</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_stride</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>superblock_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>superblock_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_superblocks</name></name></expr>;</condition>

<incr><expr><name>superblock_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>MacroBlock</name></type> <name>mb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SuperBlock</name></type> <name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>multi_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>decode_skip_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>copy_superblock</name><argument_list>(<argument><expr><name>new_frame_data</name></expr></argument>, <argument><expr><name>new_stride</name></expr></argument>,

<argument><expr><name>old_frame_data</name></expr></argument>, <argument><expr><name>old_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>copy_superblock</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>pixels</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><name>old_frame_data</name></expr></argument>, <argument><expr><name>old_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <call><name>decode_macroblock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_index</name></expr></argument>, <argument><expr><name>superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>multi_mask</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>mask_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>insert_mb_into_sb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>inv_mask</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>inv_mask</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>multi_mask</name> <operator>^=</operator> <literal type="number">0xF</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>multi_mask</name> <operator>^=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>multi_mask</name> <operator>&amp;</operator> <name><name>mask_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <call><name>decode_macroblock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_index</name></expr></argument>,

<argument><expr><name>superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>insert_mb_into_sb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>frame_flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mb</name> <operator>=</operator> <call><name>decode_macroblock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb_index</name></expr></argument>, <argument><expr><name>superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>insert_mb_into_sb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>mb</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>copy_superblock</name><argument_list>(<argument><expr><name>new_frame_data</name></expr></argument>, <argument><expr><name>new_stride</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>pixels</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>superblock_col_index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>new_frame_data</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_frame_data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_frame_data</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>superblock_col_index</name> <operator>==</operator> <name>superblocks_per_row</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>new_frame_data</name> <operator>+=</operator> <name>new_stride</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>superblocks_per_row</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>old_frame_data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_frame_data</name> <operator>+=</operator> <name>old_stride</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <name>superblocks_per_row</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>superblock_col_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>skip</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Escape sizes: %i, %i, %i\n"</literal></expr></argument>,

<argument><expr><name>frame_size</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>frame_size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_escape124_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"escape124"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Escape 124"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ESCAPE124</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Escape124Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>escape124_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>escape124_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>escape124_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
