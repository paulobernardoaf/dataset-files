<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegaudiodsp_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dct32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudio.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n##_float</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>round_sample</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sum1</name><init>=<expr><operator>*</operator><name>sum</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>sum1</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACS</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rt+=(ra)*(rb)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULS</name><parameter_list>(<parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ra)*(rb))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULH3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)*(y)*(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLSS</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rt-=(ra)*(rb)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULLx</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y)*(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXHR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((float)(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)*(1.0f/(1&lt;&lt;(b))))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RENAME</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n##_fixed</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_SHIFT</name></cpp:macro> <cpp:value>(WFRAC_BITS + FRAC_BITS - 15)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>round_sample</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum1</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>sum</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>OUT_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sum</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>OUT_SHIFT</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>av_clip_int16</name><argument_list>(<argument><expr><name>sum1</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULS</name><parameter_list>(<parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MUL64(ra, rb)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MACS</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MAC64(rt, ra, rb)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLSS</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>, <parameter><type><name>ra</name></type></parameter>, <parameter><type><name>rb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MLS64(rt, ra, rb)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULH3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MULH((s)*(x), y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULLx</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MULL((int)(x),(y),s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int)(a))&gt;&gt;(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((a) * FRAC_ONE + 0.5))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXHR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((a) * (1LL&lt;&lt;32) + 0.5))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><name>MDCT_BUF_SIZE</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>MPA_INT</name></expr></argument>, <argument><expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mpa_synth_window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><literal type="number">512</literal><operator>+</operator><literal type="number">256</literal></expr>]</index></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUM8</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>sum</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ op(sum, (w)[0 * 64], (p)[0 * 64]); op(sum, (w)[1 * 64], (p)[1 * 64]); op(sum, (w)[2 * 64], (p)[2 * 64]); op(sum, (w)[3 * 64], (p)[3 * 64]); op(sum, (w)[4 * 64], (p)[4 * 64]); op(sum, (w)[5 * 64], (p)[5 * 64]); op(sum, (w)[6 * 64], (p)[6 * 64]); op(sum, (w)[7 * 64], (p)[7 * 64]); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUM8P2</name><parameter_list>(<parameter><type><name>sum1</name></type></parameter>, <parameter><type><name>op1</name></type></parameter>, <parameter><type><name>sum2</name></type></parameter>, <parameter><type><name>op2</name></type></parameter>, <parameter><type><name>w1</name></type></parameter>, <parameter><type><name>w2</name></type></parameter>, <parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ INTFLOAT tmp;tmp = p[0 * 64];op1(sum1, (w1)[0 * 64], tmp);op2(sum2, (w2)[0 * 64], tmp);tmp = p[1 * 64];op1(sum1, (w1)[1 * 64], tmp);op2(sum2, (w2)[1 * 64], tmp);tmp = p[2 * 64];op1(sum1, (w1)[2 * 64], tmp);op2(sum2, (w2)[2 * 64], tmp);tmp = p[3 * 64];op1(sum1, (w1)[3 * 64], tmp);op2(sum2, (w2)[3 * 64], tmp);tmp = p[4 * 64];op1(sum1, (w1)[4 * 64], tmp);op2(sum2, (w2)[4 * 64], tmp);tmp = p[5 * 64];op1(sum1, (w1)[5 * 64], tmp);op2(sum2, (w2)[5 * 64], tmp);tmp = p[6 * 64];op1(sum1, (w1)[6 * 64], tmp);op2(sum2, (w2)[6 * 64], tmp);tmp = p[7 * 64];op1(sum1, (w1)[7 * 64], tmp);op2(sum2, (w2)[7 * 64], tmp);}</cpp:value></cpp:define>

<function><type><name>void</name> <name>RENAME</name></type>(<name>ff_mpadsp_apply_window</name>)<parameter_list>(<parameter><decl><type><name>MPA_INT</name> <modifier>*</modifier></type><name>synth_buf</name></decl></parameter>, <parameter><decl><type><name>MPA_INT</name> <modifier>*</modifier></type><name>window</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dither_state</name></decl></parameter>, <parameter><decl><type><name>OUT_INT</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>incr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>register</specifier> <specifier>const</specifier> <name>MPA_INT</name> <modifier>*</modifier></type><name>w</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>w2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>OUT_INT</name> <modifier>*</modifier></type><name>samples2</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>sum2</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>synth_buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>synth_buf</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>synth_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples2</name> <operator>=</operator> <name>samples</name> <operator>+</operator> <literal type="number">31</literal> <operator>*</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>window</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w2</name> <operator>=</operator> <name>window</name> <operator>+</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>*</operator><name>dither_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>synth_buf</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUM8</name><argument_list>(<argument><expr><name>MACS</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>synth_buf</name> <operator>+</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUM8</name><argument_list>(<argument><expr><name>MLSS</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <call><name>round_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>synth_buf</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUM8P2</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>MACS</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>MLSS</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>synth_buf</name> <operator>+</operator> <literal type="number">48</literal> <operator>-</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUM8P2</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>MLSS</name></expr></argument>, <argument><expr><name>sum2</name></expr></argument>, <argument><expr><name>MLSS</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>w2</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <call><name>round_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>sum2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples2</name> <operator>=</operator> <call><name>round_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples2</name> <operator>-=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>w2</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>synth_buf</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SUM8</name><argument_list>(<argument><expr><name>MLSS</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>samples</name> <operator>=</operator> <call><name>round_sample</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dither_state</name><operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <name>RENAME</name></type>(<name>ff_mpa_synth_filter</name>)<parameter_list>(<parameter><decl><type><name>MPADSPContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MPA_INT</name> <modifier>*</modifier></type><name>synth_buf_ptr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>synth_buf_offset</name></decl></parameter>,

<parameter><decl><type><name>MPA_INT</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dither_state</name></decl></parameter>,

<parameter><decl><type><name>OUT_INT</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>incr</name></decl></parameter>,

<parameter><decl><type><name>MPA_INT</name> <modifier>*</modifier></type><name>sb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MPA_INT</name> <modifier>*</modifier></type><name>synth_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>*</operator><name>synth_buf_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>synth_buf</name> <operator>=</operator> <name>synth_buf_ptr</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<function_decl><type><name><name>s</name><operator>-&gt;</operator><name>RENAME</name></name></type>(<name>dct32</name>)<parameter_list>(<parameter><decl><type><name>synth_buf</name></type></decl></parameter>, <parameter><decl><type><name>sb_samples</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>s</name><operator>-&gt;</operator><name>RENAME</name></name></type>(<name>apply_window</name>)<parameter_list>(<parameter><decl><type><name>synth_buf</name></type></decl></parameter>, <parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>dither_state</name></type></decl></parameter>, <parameter><decl><type><name>samples</name></type></decl></parameter>, <parameter><decl><type><name>incr</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">511</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>synth_buf_offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name> <name>RENAME</name></type>(<name>ff_mpa_synth_init</name>)<parameter_list>(<parameter><decl><type><name>MPA_INT</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">257</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ff_mpa_enwindow</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>

<expr_stmt><expr><name>v</name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <name>FRAC_BITS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>window</name><index>[<expr><literal type="number">512</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>window</name><index>[<expr><literal type="number">512</literal><operator>+</operator><literal type="number">16</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>window</name><index>[<expr><literal type="number">64</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">32</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>window</name><index>[<expr><literal type="number">512</literal><operator>+</operator><literal type="number">128</literal><operator>+</operator><literal type="number">16</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>window</name><index>[<expr><literal type="number">64</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">48</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name> <name>RENAME</name></type>(<name>ff_init_mpadsp_tabs</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">36</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">36.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">18</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>*=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>IMDCT_SCALAR</name> <operator>/</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">19</literal><operator>)</operator> <operator>/</operator> <literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name><operator>/</operator><literal type="number">3</literal></expr>]</index> <operator>=</operator> <call><name>FIXHR</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>i</name> <operator>+</operator> <operator>(</operator><name>MDCT_BUF_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">18</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index> <operator>=</operator> <call><name>FIXHR</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MDCT_BUF_SIZE</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr> ]</index> <operator>=</operator> <call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr> ]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <operator>-</operator><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C1</name></cpp:macro> <cpp:value>FIXHR(0.98480775301220805936/2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C2</name></cpp:macro> <cpp:value>FIXHR(0.93969262078590838405/2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C3</name></cpp:macro> <cpp:value>FIXHR(0.86602540378443864676/2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C4</name></cpp:macro> <cpp:value>FIXHR(0.76604444311897803520/2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C5</name></cpp:macro> <cpp:value>FIXHR(0.64278760968653932632/2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C6</name></cpp:macro> <cpp:value>FIXHR(0.5/2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C7</name></cpp:macro> <cpp:value>FIXHR(0.34202014332566873304/2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C8</name></cpp:macro> <cpp:value>FIXHR(0.17364817766693034885/2)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>icos36</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.50190991877167369479</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.51763809020504152469</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.55168895948124587824</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.61038729438072803416</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.70710678118654752439</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.87172339781054900991</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">1.18310079157624925896</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">1.93185165257813657349</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">5.73685662283492756461</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>icos36h</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>FIXHR</name><argument_list>(<argument><expr><literal type="number">0.50190991877167369479</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXHR</name><argument_list>(<argument><expr><literal type="number">0.51763809020504152469</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>FIXHR</name><argument_list>(<argument><expr><literal type="number">0.55168895948124587824</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXHR</name><argument_list>(<argument><expr><literal type="number">0.61038729438072803416</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXHR</name><argument_list>(<argument><expr><literal type="number">0.70710678118654752439</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>FIXHR</name><argument_list>(<argument><expr><literal type="number">0.87172339781054900991</literal><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXHR</name><argument_list>(<argument><expr><literal type="number">1.18310079157624925896</literal><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>FIXHR</name><argument_list>(<argument><expr><literal type="number">1.93185165257813657349</literal><operator>/</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct36</name><parameter_list>(<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>SUINTFLOAT</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SUINTFLOAT</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SUINTFLOAT</name></type> <name><name>tmp</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">17</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">17</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in1</name> <operator>=</operator> <name>in</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>SHR</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>-</operator> <call><name>SHR</name><argument_list>(<argument><expr><name>t2</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument> , <argument><expr><name>C2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>C8</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></argument> , <argument><expr><operator>-</operator><name>C4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>-</operator> <name>t0</name> <operator>-</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>t0</name> <operator>+</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>t2</name> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">7</literal></expr>]</index></name> <operator>-</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name>C3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>C1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>C7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>C3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in1</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name>C5</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t3</name> <operator>+</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>t1</name> <operator>-</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>t3</name> <operator>-</operator> <name>t1</name> <operator>-</operator> <name>t0</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>t1</name> <operator>-</operator> <name>t0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t3</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t3</name> <operator>+</operator> <name>t2</name></expr></argument>, <argument><expr><name><name>icos36h</name><index>[ <expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>MULLx</name><argument_list>(<argument><expr><name>t3</name> <operator>-</operator> <name>t2</name></expr></argument>, <argument><expr><name><name>icos36</name> <index>[<expr><literal type="number">8</literal> <operator>-</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>s0</name> <operator>+</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>s0</name> <operator>-</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><literal type="number">9</literal> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>SBLIMIT</name></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>win</name><index>[ <expr><literal type="number">9</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><literal type="number">9</literal> <operator>+</operator> <name>j</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>SBLIMIT</name></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>win</name><index>[ <expr><literal type="number">8</literal> <operator>-</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>j</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator> <literal type="number">9</literal> <operator>+</operator> <name>j</name> <operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>MDCT_BUF_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator> <literal type="number">8</literal> <operator>-</operator> <name>j</name> <operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>MDCT_BUF_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>s2</name> <operator>+</operator> <name>s3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>s2</name> <operator>-</operator> <name>s3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><literal type="number">9</literal> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>SBLIMIT</name></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>win</name><index>[ <expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><literal type="number">9</literal> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>j</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[ <expr><name>j</name> <operator>*</operator> <name>SBLIMIT</name></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>win</name><index>[ <expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator> <name>j</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>j</name> <operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>MDCT_BUF_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator> <name>j</name> <operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>MDCT_BUF_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>icos36h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>s0</name> <operator>+</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>s0</name> <operator>-</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>SBLIMIT</name></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>win</name><index>[ <expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>SBLIMIT</name></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>win</name><index>[ <expr><literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><index>[<expr><literal type="number">4</literal><operator>*</operator><operator>(</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>MDCT_BUF_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>MULH3</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name><name>win</name><index>[<expr><name>MDCT_BUF_SIZE</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <name>RENAME</name></type>(<name>ff_imdct36_blocks</name>)<parameter_list>(<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>switch_point</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>win_idx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>switch_point</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>block_type</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>win</name> <init>= <expr><call><name>RENAME</name><argument_list>(<argument><expr><name>ff_mdct_win</name></expr></argument>)</argument_list></call><index>[<expr><name>win_idx</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>imdct36</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>j</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">72</literal><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
