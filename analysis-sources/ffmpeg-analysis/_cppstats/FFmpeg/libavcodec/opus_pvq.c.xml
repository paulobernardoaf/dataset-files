<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\opus_pvq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opustab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opus_pvq.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_PVQ_U</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ff_celt_pvq_u_row[FFMIN(n, k)][FFMAX(n, k)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CELT_PVQ_V</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CELT_PVQ_U(n, k) + CELT_PVQ_U(n, (k) + 1))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int16_t</name></type> <name>celt_cos</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><call><name>MUL16</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4096</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><literal type="number">32767</literal><operator>-</operator><name>x</name><operator>)</operator> <operator>+</operator> <call><name>ROUND_MUL16</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><literal type="number">7651</literal> <operator>+</operator> <call><name>ROUND_MUL16</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">8277</literal> <operator>+</operator> <call><name>ROUND_MUL16</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">626</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>celt_log2tan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>isin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>icos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lc</name></decl>, <decl><type ref="prev"/><name>ls</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lc</name> <operator>=</operator> <call><name>opus_ilog</name><argument_list>(<argument><expr><name>icos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ls</name> <operator>=</operator> <call><name>opus_ilog</name><argument_list>(<argument><expr><name>isin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>icos</name> <operator>&lt;&lt;=</operator> <literal type="number">15</literal> <operator>-</operator> <name>lc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>isin</name> <operator>&lt;&lt;=</operator> <literal type="number">15</literal> <operator>-</operator> <name>ls</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>ls</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>lc</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>+</operator>

<call><name>ROUND_MUL16</name><argument_list>(<argument><expr><name>isin</name></expr></argument>, <argument><expr><call><name>ROUND_MUL16</name><argument_list>(<argument><expr><name>isin</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2597</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7932</literal></expr></argument>)</argument_list></call> <operator>-</operator>

<call><name>ROUND_MUL16</name><argument_list>(<argument><expr><name>icos</name></expr></argument>, <argument><expr><call><name>ROUND_MUL16</name><argument_list>(<argument><expr><name>icos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2597</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7932</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>celt_bits2pulses</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>center</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cache</name><index>[<expr><name>center</name></expr>]</index></name> <operator>&gt;=</operator> <name>bits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>center</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>center</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>bits</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>low</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>cache</name><index>[<expr><name>low</name></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>&lt;=</operator> <name><name>cache</name><index>[<expr><name>high</name></expr>]</index></name> <operator>-</operator> <name>bits</name><operator>)</operator></expr> ?</condition><then> <expr><name>low</name></expr> </then><else>: <expr><name>high</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>celt_pulses2bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pulses</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>pulses</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>cache</name><index>[<expr><name>pulses</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>celt_normalize_residual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier> <name>av_restrict</name></type> <name>iy</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier> <name>av_restrict</name></type> <name>X</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>*</operator> <name><name>iy</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_exp_rotation_impl</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>Xptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Xptr</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <name>stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>Xptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name><name>Xptr</name><index>[<expr><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Xptr</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>*</operator> <name>x2</name> <operator>+</operator> <name>s</name> <operator>*</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>Xptr</name><operator>++</operator> <operator>=</operator> <name>c</name> <operator>*</operator> <name>x1</name> <operator>-</operator> <name>s</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Xptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>X</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>Xptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x2</name> <init>= <expr><name><name>Xptr</name><index>[<expr><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>Xptr</name><index>[<expr><name>stride</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>*</operator> <name>x2</name> <operator>+</operator> <name>s</name> <operator>*</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>Xptr</name><operator>--</operator> <operator>=</operator> <name>c</name> <operator>*</operator> <name>x1</name> <operator>-</operator> <name>s</name> <operator>*</operator> <name>x2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>celt_exp_rotation</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>K</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>CeltSpread</name></name></type> <name>spread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>encode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>stride2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>gain</name></decl>, <decl><type ref="prev"/><name>theta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal><operator>*</operator><name>K</name> <operator>&gt;=</operator> <name>len</name> <operator>||</operator> <name>spread</name> <operator>==</operator> <name>CELT_SPREAD_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>len</name> <operator>/</operator> <operator>(</operator><name>len</name> <operator>+</operator> <operator>(</operator><literal type="number">20</literal> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><name>spread</name><operator>)</operator> <operator>*</operator> <name>K</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>theta</name> <operator>=</operator> <name>M_PI</name> <operator>*</operator> <name>gain</name> <operator>*</operator> <name>gain</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>stride</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stride2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>stride2</name> <operator>*</operator> <name>stride2</name> <operator>+</operator> <name>stride2</name><operator>)</operator> <operator>*</operator> <name>stride</name> <operator>+</operator> <operator>(</operator><name>stride</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stride2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>/=</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>encode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>celt_exp_rotation_impl</name><argument_list>(<argument><expr><name>X</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>-</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stride2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_exp_rotation_impl</name><argument_list>(<argument><expr><name>X</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>stride2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stride2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_exp_rotation_impl</name><argument_list>(<argument><expr><name>X</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>stride2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>celt_exp_rotation_impl</name><argument_list>(<argument><expr><name>X</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>celt_extract_collapse_mask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>iy</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>B</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>N0</name> <init>= <expr><name>N</name> <operator>/</operator> <name>B</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>collapse_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>B</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>B</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N0</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>collapse_mask</name> <operator>|=</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>iy</name><index>[<expr><name>i</name><operator>*</operator><name>N0</name><operator>+</operator><name>j</name></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><name>collapse_mask</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>celt_stereo_merge</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>side</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>E</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mid2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>gain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>xp</name> <operator>+=</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>side</name> <operator>+=</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>xp</name> <operator>*=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mid2</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mid2</name> <operator>*</operator> <name>mid2</name> <operator>+</operator> <name>side</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>xp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mid2</name> <operator>*</operator> <name>mid2</name> <operator>+</operator> <name>side</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>xp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">6e-4f</literal> <operator>||</operator> <name><name>E</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">6e-4f</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>value</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mid</name> <operator>*</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_interleave_hadamard</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hadamard</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><name>N0</name><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>order</name> <init>= <expr><operator>&amp;</operator><name><name>ff_celt_hadamard_order</name><index>[<expr><ternary><condition><expr><name>hadamard</name></expr> ?</condition><then> <expr><name>stride</name> <operator>-</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">30</literal></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N0</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name><operator>*</operator><name>stride</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>N0</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>N</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_deinterleave_hadamard</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hadamard</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><name>N0</name><operator>*</operator><name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>order</name> <init>= <expr><operator>&amp;</operator><name><name>ff_celt_hadamard_order</name><index>[<expr><ternary><condition><expr><name>hadamard</name></expr> ?</condition><then> <expr><name>stride</name> <operator>-</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">30</literal></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N0</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>N0</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><name>j</name><operator>*</operator><name>stride</name><operator>+</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>N</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_haar1</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>N0</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stride</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N0</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>x0</name> <init>= <expr><name><name>X</name><index>[<expr><name>stride</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>x1</name> <init>= <expr><name><name>X</name><index>[<expr><name>stride</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>stride</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>+</operator> <name>x1</name><operator>)</operator> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>stride</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x0</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>celt_compute_qn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pulse_cap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stereo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qn</name></decl>, <decl><type ref="prev"/><name>qb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name> <operator>&amp;&amp;</operator> <name>N</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>N2</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>qb</name> <operator>=</operator> <call><name>FFMIN3</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>pulse_cap</name> <operator>-</operator> <operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <name>N2</name> <operator>*</operator> <name>offset</name><operator>)</operator> <operator>/</operator> <name>N2</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>qb</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name><name>ff_celt_qn_exp2</name><index>[<expr><name>qb</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">14</literal> <operator>-</operator> <operator>(</operator><name>qb</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>qn</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>celt_icwrsi</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>K</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_s</name> <init>= <expr><call><name>CELT_PVQ_U</name><argument_list>(<argument><expr><name>N</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>sum</name> <operator>+</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <call><name>CELT_PVQ_U</name><argument_list>(<argument><expr><name>N</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>*</operator><name>i_s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>celt_cwrsi</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>K</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>norm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k0</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>N</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>K</name> <operator>&gt;=</operator> <name>N</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>ff_celt_pvq_u_row</name><index>[<expr><name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>K</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>p</name> <operator>&amp;</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <name>K</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>N</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>K</name> <operator>=</operator> <name>N</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ff_celt_pvq_u_row</name><index>[<expr><operator>--</operator><name>K</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>i</name></expr>)</condition>;</do>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>K</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>row</name><index>[<expr><name>K</name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>K</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>k0</name> <operator>-</operator> <name>K</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>^</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>+=</operator> <name>val</name> <operator>*</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name><operator>++</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ff_celt_pvq_u_row</name><index>[<expr><name>K</name></expr> ]</index><index>[<expr><name>N</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>ff_celt_pvq_u_row</name><index>[<expr><name>K</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>q</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>q</name> <operator>&amp;</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <name>K</name></expr>;</expr_stmt>

<do>do<block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ff_celt_pvq_u_row</name><index>[<expr><operator>--</operator><name>K</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>i</name></expr>)</condition>;</do>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>k0</name> <operator>-</operator> <name>K</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>^</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>+=</operator> <name>val</name> <operator>*</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name><operator>++</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>N</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>K</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>p</name> <operator>&amp;</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <name>K</name></expr>;</expr_stmt>

<expr_stmt><expr><name>K</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>K</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>K</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>k0</name> <operator>-</operator> <name>K</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>^</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>+=</operator> <name>val</name> <operator>*</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name><operator>++</operator> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>K</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>^</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>+=</operator> <name>val</name> <operator>*</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><name>norm</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>celt_encode_pulses</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>K</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_opus_rc_enc_uint</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>celt_icwrsi</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CELT_PVQ_V</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>celt_decode_pulses</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>K</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>idx</name> <init>= <expr><call><name>ff_opus_rc_dec_uint</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>CELT_PVQ_V</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>celt_cwrsi</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>ppp_pvq_search_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>K</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y_norm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>res</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>, <decl><type ref="prev"/><name>xy_norm</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>K</name><operator>/</operator><operator>(</operator><name>res</name> <operator>+</operator> <name>FLT_EPSILON</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>res</name><operator>*</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y_norm</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xy_norm</name> <operator>+=</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>K</name> <operator>-=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>K</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>phase</name> <init>= <expr><call><name>FFSIGN</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max_num</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max_den</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>y_norm</name> <operator>+=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ca</name> <init>= <expr><literal type="number">1</literal> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>phase</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y_new</name> <init>= <expr><name>y_norm</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>phase</name><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>xy_new</name> <init>= <expr><name>xy_norm</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>phase</name><operator>*</operator><call><name>FFABS</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>xy_new</name> <operator>=</operator> <name>xy_new</name> <operator>*</operator> <name>xy_new</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ca</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>max_den</name><operator>*</operator><name>xy_new</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>y_new</name><operator>*</operator><name>max_num</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_den</name> <operator>=</operator> <name>y_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_num</name> <operator>=</operator> <name>xy_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>K</name> <operator>-=</operator> <name>phase</name></expr>;</expr_stmt>

<expr_stmt><expr><name>phase</name> <operator>*=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>max_idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xy_norm</name> <operator>+=</operator> <literal type="number">1</literal><operator>*</operator><name>phase</name><operator>*</operator><name><name>X</name><index>[<expr><name>max_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_norm</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>phase</name><operator>*</operator><name><name>y</name><index>[<expr><name>max_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y</name><index>[<expr><name>max_idx</name></expr>]</index></name> <operator>+=</operator> <name>phase</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>float</name><operator>)</operator><name>y_norm</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>celt_alg_quant</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>K</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>CeltSpread</name></name></type> <name>spread</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>,

<parameter><decl><type><name>CeltPVQ</name> <modifier>*</modifier></type><name>pvq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>pvq</name><operator>-&gt;</operator><name>qcoeff</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>celt_exp_rotation</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>spread</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>/=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><call><name><name>pvq</name><operator>-&gt;</operator><name>pvq_search</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_encode_pulses</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_normalize_residual</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_exp_rotation</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>spread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>celt_extract_collapse_mask</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>celt_alg_unquant</name><parameter_list>(<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>K</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>CeltSpread</name></name></type> <name>spread</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>,

<parameter><decl><type><name>CeltPVQ</name> <modifier>*</modifier></type><name>pvq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><name><name>pvq</name><operator>-&gt;</operator><name>qcoeff</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>gain</name> <operator>/=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><call><name>celt_decode_pulses</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_normalize_residual</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_exp_rotation</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>spread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>celt_extract_collapse_mask</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>celt_calc_theta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coupling</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>coupling</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>lrintf</name><argument_list>(<argument><expr><literal type="number">32768.0f</literal><operator>*</operator><call><name>atan2f</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>/</operator><name>M_PI</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_stereo_is_decouple</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>e_l</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>e_r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>energy_n</name> <init>= <expr><literal type="number">1.0f</literal><operator>/</operator><operator>(</operator><call><name>sqrtf</name><argument_list>(<argument><expr><name>e_l</name><operator>*</operator><name>e_l</name> <operator>+</operator> <name>e_r</name><operator>*</operator><name>e_r</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>FLT_EPSILON</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e_l</name> <operator>*=</operator> <name>energy_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e_r</name> <operator>*=</operator> <name>energy_n</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>e_l</name><operator>*</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>e_r</name><operator>*</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>celt_stereo_ms_decouple</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Xret</name> <init>= <expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>Xret</name><operator>)</operator><operator>*</operator><name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>quant_band_template</name><parameter_list>(<parameter><decl><type><name>CeltPVQ</name> <modifier>*</modifier></type><name>pvq</name></decl></parameter>, <parameter><decl><type><name>CeltFrame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>OpusRangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>band</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lowband</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lowband_out</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>lowband_scratch</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fill</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quant</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stereo</name> <init>= <expr><operator>!</operator><operator>!</operator><name>Y</name></expr></init></decl>, <decl><type ref="prev"/><name>split</name> <init>= <expr><name>stereo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>iside</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>N0</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N_B</name> <init>= <expr><name>N</name> <operator>/</operator> <name>blocks</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N_B0</name> <init>= <expr><name>N_B</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>B0</name> <init>= <expr><name>blocks</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>time_divide</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>recombine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>mid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>side</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>longblocks</name> <init>= <expr><operator>(</operator><name>B0</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>X</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>stereo</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quant</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_opus_rc_put_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>ff_opus_rc_get_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>-</operator> <literal type="number">2.0f</literal><operator>*</operator><name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>lowband_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lowband_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stereo</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tf_change</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>tf_change</name><index>[<expr><name>band</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tf_change</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>recombine</name> <operator>=</operator> <name>tf_change</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lowband</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>recombine</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>N_B</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tf_change</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>B0</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lowband_scratch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lowband</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>lowband</name> <operator>=</operator> <name>lowband_scratch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>recombine</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quant</name> <operator>||</operator> <name>lowband</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_haar1</name><argument_list>(<argument><expr><ternary><condition><expr><name>quant</name></expr> ?</condition><then> <expr><name>X</name></expr> </then><else>: <expr><name>lowband</name></expr></else></ternary></expr></argument>, <argument><expr><name>N</name> <operator>&gt;&gt;</operator> <name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <name><name>ff_celt_bit_interleave</name><index>[<expr><name>fill</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>]</index></name> <operator>|</operator> <name><name>ff_celt_bit_interleave</name><index>[<expr><name>fill</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>blocks</name> <operator>&gt;&gt;=</operator> <name>recombine</name></expr>;</expr_stmt>

<expr_stmt><expr><name>N_B</name> <operator>&lt;&lt;=</operator> <name>recombine</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>N_B</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tf_change</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quant</name> <operator>||</operator> <name>lowband</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_haar1</name><argument_list>(<argument><expr><ternary><condition><expr><name>quant</name></expr> ?</condition><then> <expr><name>X</name></expr> </then><else>: <expr><name>lowband</name></expr></else></ternary></expr></argument>, <argument><expr><name>N_B</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fill</name> <operator>|=</operator> <name>fill</name> <operator>&lt;&lt;</operator> <name>blocks</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blocks</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>N_B</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>time_divide</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tf_change</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>B0</name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>

<expr_stmt><expr><name>N_B0</name> <operator>=</operator> <name>N_B</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>B0</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>quant</name> <operator>||</operator> <name>lowband</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_deinterleave_hadamard</name><argument_list>(<argument><expr><name><name>pvq</name><operator>-&gt;</operator><name>hadamard_tmp</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>quant</name></expr> ?</condition><then> <expr><name>X</name></expr> </then><else>: <expr><name>lowband</name></expr></else></ternary></expr></argument>,

<argument><expr><name>N_B</name> <operator>&gt;&gt;</operator> <name>recombine</name></expr></argument>, <argument><expr><name>B0</name> <operator>&lt;&lt;</operator> <name>recombine</name></expr></argument>,

<argument><expr><name>longblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cache</name> <operator>=</operator> <name>ff_celt_cache_bits</name> <operator>+</operator>

<name><name>ff_celt_cache_index</name><index>[<expr><operator>(</operator><name>duration</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>CELT_MAX_BANDS</name> <operator>+</operator> <name>band</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stereo</name> <operator>&amp;&amp;</operator> <name>duration</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;</operator> <name><name>cache</name><index>[<expr><name><name>cache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>N</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>N</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <name>X</name> <operator>+</operator> <name>N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>split</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>duration</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blocks</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <operator>(</operator><name>fill</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>fill</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>blocks</name> <operator>=</operator> <operator>(</operator><name>blocks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>split</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>itheta</name> <init>= <expr><ternary><condition><expr><name>quant</name></expr> ?</condition><then> <expr><call><name>celt_calc_theta</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>stereo</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mbits</name></decl>, <decl><type ref="prev"/><name>sbits</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qalloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pulse_cap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_fill</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tell</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pulse_cap</name> <operator>=</operator> <name><name>ff_celt_log_freq_range</name><index>[<expr><name>band</name></expr>]</index></name> <operator>+</operator> <name>duration</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>pulse_cap</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>stereo</name> <operator>&amp;&amp;</operator> <name>N</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>CELT_QTHETA_OFFSET_TWOPHASE</name></expr> </then><else>:

<expr><name>CELT_QTHETA_OFFSET</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>qn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>stereo</name> <operator>&amp;&amp;</operator> <name>band</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>intensity_stereo</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:

<expr><call><name>celt_compute_qn</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>pulse_cap</name></expr></argument>, <argument><expr><name>stereo</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>tell</name> <operator>=</operator> <call><name>opus_rc_tell_frac</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qn</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quant</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>itheta</name> <operator>=</operator> <operator>(</operator><name>itheta</name><operator>*</operator><name>qn</name> <operator>+</operator> <literal type="number">8192</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>quant</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stereo</name> <operator>&amp;&amp;</operator> <name>N</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_opus_rc_enc_uint_step</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>itheta</name></expr></argument>, <argument><expr><name>qn</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>stereo</name> <operator>||</operator> <name>B0</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_opus_rc_enc_uint</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>itheta</name></expr></argument>, <argument><expr><name>qn</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_opus_rc_enc_uint_tri</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>itheta</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>itheta</name> <operator>=</operator> <name>itheta</name> <operator>*</operator> <literal type="number">16384</literal> <operator>/</operator> <name>qn</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>itheta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_stereo_is_decouple</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>lin_energy</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>lin_energy</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_stereo_ms_decouple</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stereo</name> <operator>&amp;&amp;</operator> <name>N</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>itheta</name> <operator>=</operator> <call><name>ff_opus_rc_dec_uint_step</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>qn</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>stereo</name> <operator>||</operator> <name>B0</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>itheta</name> <operator>=</operator> <call><name>ff_opus_rc_dec_uint</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>qn</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>itheta</name> <operator>=</operator> <call><name>ff_opus_rc_dec_uint_tri</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>qn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>itheta</name> <operator>=</operator> <name>itheta</name> <operator>*</operator> <literal type="number">16384</literal> <operator>/</operator> <name>qn</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>stereo</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quant</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inv</name> <operator>=</operator> <name>itheta</name> <operator>&gt;</operator> <literal type="number">8192</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inv</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>celt_stereo_is_decouple</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>lin_energy</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>lin_energy</name><index>[<expr><name>band</name></expr>]</index></name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_opus_rc_enc_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>inv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>inv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>inv</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>ff_opus_rc_dec_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>inv</name> <operator>=</operator> <ternary><condition><expr><name><name>f</name><operator>-&gt;</operator><name>apply_phase_inv</name></name></expr> ?</condition><then> <expr><name>inv</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>itheta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>qalloc</name> <operator>=</operator> <call><name>opus_rc_tell_frac</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>tell</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>-=</operator> <name>qalloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>orig_fill</name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>itheta</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imid</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>iside</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fill</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>fill</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>-</operator><literal type="number">16384</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>itheta</name> <operator>==</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>iside</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fill</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>blocks</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>blocks</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>imid</name> <operator>=</operator> <call><name>celt_cos</name><argument_list>(<argument><expr><name>itheta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iside</name> <operator>=</operator> <call><name>celt_cos</name><argument_list>(<argument><expr><literal type="number">16384</literal><operator>-</operator><name>itheta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>ROUND_MUL16</name><argument_list>(<argument><expr><operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><call><name>celt_log2tan</name><argument_list>(<argument><expr><name>iside</name></expr></argument>, <argument><expr><name>imid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>imid</name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>side</name> <operator>=</operator> <name>iside</name> <operator>/</operator> <literal type="number">32768.0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>stereo</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>x2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mbits</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sbits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>itheta</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>itheta</name> <operator>!=</operator> <literal type="number">16384</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>mbits</name> <operator>-=</operator> <name>sbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>itheta</name> <operator>&gt;</operator> <literal type="number">8192</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>-=</operator> <name>qalloc</name><operator>+</operator><name>sbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name>Y</name></expr> </then><else>: <expr><name>X</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>y2</name> <operator>=</operator> <ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name>X</name></expr> </then><else>: <expr><name>Y</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sbits</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quant</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>x2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>y2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>y2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_opus_rc_put_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>ff_opus_rc_get_raw</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mbits</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>lowband</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>,

<argument><expr><name>lowband_out</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name>orig_fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>sign</name> <operator>*</operator> <name><name>x2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sign</name> <operator>*</operator> <name><name>x2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>mid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>side</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>side</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name><name>Y</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name><name>Y</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>next_lowband2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>next_lowband_out1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rebalance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cmt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>B0</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>stereo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>itheta</name> <operator>&amp;</operator> <literal type="number">0x3fff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>itheta</name> <operator>&gt;</operator> <literal type="number">8192</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>-=</operator> <name>delta</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>duration</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>delta</name> <operator>+</operator> <operator>(</operator><name>N</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>duration</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mbits</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>-</operator> <name>delta</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sbits</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>mbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>-=</operator> <name>qalloc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lowband</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>stereo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_lowband2</name> <operator>=</operator> <name>lowband</name> <operator>+</operator> <name>N</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_lowband_out1</name> <operator>=</operator> <name>lowband_out</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>next_level</name> <operator>=</operator> <name>level</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>rebalance</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mbits</name> <operator>&gt;=</operator> <name>sbits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mbits</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>,

<argument><expr><name>lowband</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name>next_lowband_out1</name></expr></argument>, <argument><expr><name>next_level</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>stereo</name></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><operator>(</operator><name>gain</name> <operator>*</operator> <name>mid</name><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rebalance</name> <operator>=</operator> <name>mbits</name> <operator>-</operator> <operator>(</operator><name>rebalance</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rebalance</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>itheta</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sbits</name> <operator>+=</operator> <name>rebalance</name> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmt</name> <operator>=</operator> <call><name><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>sbits</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>,

<argument><expr><name>next_lowband2</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>next_level</name></expr></argument>,

<argument><expr><name>gain</name> <operator>*</operator> <name>side</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fill</name> <operator>&gt;&gt;</operator> <name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cm</name> <operator>|=</operator> <name>cmt</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>B0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>stereo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>sbits</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>,

<argument><expr><name>next_lowband2</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>next_level</name></expr></argument>,

<argument><expr><name>gain</name> <operator>*</operator> <name>side</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fill</name> <operator>&gt;&gt;</operator> <name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cm</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>B0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>stereo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rebalance</name> <operator>=</operator> <name>sbits</name> <operator>-</operator> <operator>(</operator><name>rebalance</name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rebalance</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>itheta</name> <operator>!=</operator> <literal type="number">16384</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mbits</name> <operator>+=</operator> <name>rebalance</name> <operator>-</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cm</name> <operator>|=</operator> <call><name><name>pvq</name><operator>-&gt;</operator><name>quant_band</name></name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>mbits</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>,

<argument><expr><name>lowband</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name>next_lowband_out1</name></expr></argument>, <argument><expr><name>next_level</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>stereo</name></expr> ?</condition><then> <expr><literal type="number">1.0f</literal></expr> </then><else>: <expr><operator>(</operator><name>gain</name> <operator>*</operator> <name>mid</name><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>q</name> <init>= <expr><call><name>celt_bits2pulses</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>curr_bits</name> <init>= <expr><call><name>celt_pulses2bits</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>-=</operator> <name>curr_bits</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>q</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>+=</operator> <name>curr_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_bits</name> <operator>=</operator> <call><name>celt_pulses2bits</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>--</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>remaining2</name></name> <operator>-=</operator> <name>curr_bits</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quant</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>celt_alg_quant</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>q</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><name>q</name></expr> </then><else>: <expr><operator>(</operator><literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>q</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>q</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>spread</name></name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>pvq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>celt_alg_unquant</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>q</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><name>q</name></expr> </then><else>: <expr><operator>(</operator><literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>q</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>q</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>spread</name></name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>pvq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cm_mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>blocks</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fill</name> <operator>&amp;=</operator> <name>cm_mask</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fill</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lowband</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>celt_rng</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <name>cm_mask</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lowband</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><call><name>celt_rng</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">256</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">256</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <name>fill</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>celt_renormalize_vector</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>N</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_stereo_merge</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inv</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>B0</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>celt_interleave_hadamard</name><argument_list>(<argument><expr><name><name>pvq</name><operator>-&gt;</operator><name>hadamard_tmp</name></name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>N_B</name> <operator>&gt;&gt;</operator> <name>recombine</name></expr></argument>,

<argument><expr><name>B0</name> <operator>&lt;&lt;</operator> <name>recombine</name></expr></argument>, <argument><expr><name>longblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>N_B</name> <operator>=</operator> <name>N_B0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blocks</name> <operator>=</operator> <name>B0</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>time_divide</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>blocks</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>N_B</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cm</name> <operator>|=</operator> <name>cm</name> <operator>&gt;&gt;</operator> <name>blocks</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_haar1</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>N_B</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>recombine</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <name><name>ff_celt_bit_deinterleave</name><index>[<expr><name>cm</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>celt_haar1</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>N0</name><operator>&gt;&gt;</operator><name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>blocks</name> <operator>&lt;&lt;=</operator> <name>recombine</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lowband_out</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>n</name> <init>= <expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>N0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N0</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lowband_out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>*</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cm</name></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <macro><name>QUANT_FN</name><argument_list>(<argument>pvq_decode_band</argument>)</argument_list></macro>

<block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_OPUS_DECODER</name></expr></cpp:if>

<return>return <expr><call><name>quant_band_template</name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>lowband</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>,

<argument><expr><name>lowband_out</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></expr></expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}

static <macro><name>QUANT_FN</name><argument_list>(<argument>pvq_encode_band</argument>)</argument_list></macro>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_OPUS_ENCODER</name></expr></cpp:if>

<return>return <expr><call><name>quant_band_template</name><argument_list>(<argument><expr><name>pvq</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>lowband</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>,

<argument><expr><name>lowband_out</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><name>lowband_scratch</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<function><type><name>int</name> <name>av_cold</name></type> <name>ff_celt_pvq_init</name><parameter_list>(<parameter><decl><type><name>CeltPVQ</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CeltPVQ</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CeltPVQ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pvq_search</name></name> <operator>=</operator> <name>ppp_pvq_search_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant_band</name></name> <operator>=</operator> <ternary><condition><expr><name>encode</name></expr> ?</condition><then> <expr><name>pvq_encode_band</name></expr> </then><else>: <expr><name>pvq_decode_band</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_OPUS_ENCODER</name> <operator>&amp;&amp;</operator> <name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_celt_pvq_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pvq</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <name>av_cold</name></type> <name>ff_celt_pvq_uninit</name><parameter_list>(<parameter><decl><type><name>CeltPVQ</name> <modifier>*</modifier><modifier>*</modifier></type><name>pvq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>pvq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
