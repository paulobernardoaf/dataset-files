<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\truespeech.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"truespeech_data.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TSContext</name> <block>{

<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>vector</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>offset1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>offset2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>pulseoff</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>pulsepos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>pulseval</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>filtbuf</name><index>[<expr><literal type="number">146</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>prevfilt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp3</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>cvector</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>filtval</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>newvec</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>filters</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>TSContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>truespeech_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Channel count %d"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>AV_CH_LAYOUT_MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truespeech_read_frame</name><parameter_list>(<parameter><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>dec</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>dec</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>input</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>ts_codebook</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>ts_codebook</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>ts_codebook</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>ts_codebook</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ts_codebook</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ts_codebook</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ts_codebook</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ts_codebook</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseval</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseval</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseval</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulsepos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseoff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulsepos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseoff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulsepos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseoff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>offset1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulsepos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseoff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truespeech_correlate_filter</name><parameter_list>(<parameter><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>dec</name><operator>-&gt;</operator><name>cvector</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ts_decay_994_1000</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>filtval</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truespeech_filters_merge</name><parameter_list>(<parameter><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>dec</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>prevfilt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>prevfilt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">21846</literal> <operator>+</operator> <name><name>dec</name><operator>-&gt;</operator><name>prevfilt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">10923</literal> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">10923</literal> <operator>+</operator> <name><name>dec</name><operator>-&gt;</operator><name>prevfilt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">21846</literal> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truespeech_apply_twopoint_filter</name><parameter_list>(<parameter><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">146</literal> <operator>+</operator> <literal type="number">60</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>offset2</name><index>[<expr><name>quart</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>newvec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dec</name><operator>-&gt;</operator><name>newvec</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">146</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>filtbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>/</operator> <literal type="number">25</literal><operator>)</operator> <operator>+</operator> <name><name>dec</name><operator>-&gt;</operator><name>offset1</name><index>[<expr><name>quart</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">145</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr0</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">145</literal> <operator>-</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">146</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <name>ts_order2_coeffs</name> <operator>+</operator> <operator>(</operator><name>t</name> <operator>%</operator> <literal type="number">25</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name><name>ptr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>ptr0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>filter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x2000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr0</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>newvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truespeech_place_pulses</name><parameter_list>(<parameter><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coef</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>pulseval</name><index>[<expr><name>quart</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pulseval</name><index>[<expr><name>quart</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">6</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ts_pulse_scales</name><index>[<expr><name><name>dec</name><operator>-&gt;</operator><name>pulseoff</name><index>[<expr><name>quart</name></expr>]</index></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>t</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>coef</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>pulsepos</name><index>[<expr><name>quart</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name>ts_pulse_values</name> <operator>+</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>ptr1</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>coef</name> <operator>&gt;=</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coef</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>coef</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>pulsepos</name><index>[<expr><name>quart</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name>ts_pulse_values</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">30</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>ptr1</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>coef</name> <operator>&gt;=</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coef</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truespeech_update_filters</name><parameter_list>(<parameter><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>dec</name><operator>-&gt;</operator><name>filtbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>filtbuf</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">86</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dec</name><operator>-&gt;</operator><name>filtbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>filtbuf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">86</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dec</name><operator>-&gt;</operator><name>newvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>newvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dec</name><operator>-&gt;</operator><name>newvec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truespeech_synth</name><parameter_list>(<parameter><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>dec</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quart</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>t</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>ptr0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr0</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>tmp1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>filters</name></name> <operator>+</operator> <name>quart</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ptr0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ptr1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>+</operator> <literal type="number">0x800U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0x7FFE</literal></expr></argument>, <argument><expr><literal type="number">0x7FFE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptr0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ptr0</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ptr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ts_decay_35_64</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ptr1</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ptr0</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>tmp2</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ptr0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>t</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptr0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ptr0</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ptr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>-</operator> <name>sum</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ts_decay_3_4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>ptr1</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ptr0</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>tmp3</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ptr0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>t</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptr0</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ptr0</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ptr0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>sum</name> <operator>+</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0x7FFE</literal></expr></argument>, <argument><expr><literal type="number">0x7FFE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>ptr0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>filtval</name></name> <operator>-</operator> <operator>(</operator><name><name>dec</name><operator>-&gt;</operator><name>filtval</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>sum</name> <operator>-</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>sum</name> <operator>+</operator> <literal type="number">0x800</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0x7FFE</literal></expr></argument>, <argument><expr><literal type="number">0x7FFE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>truespeech_save_prevvec</name><parameter_list>(<parameter><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prevfilt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cvector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>truespeech_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TSContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iterations</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>iterations</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iterations</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Too small input buffer (%d bytes), need at least 32 bytes\n"</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>iterations</name> <operator>*</operator> <literal type="number">240</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iterations</name> <operator>*</operator> <literal type="number">240</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>samples</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>iterations</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>truespeech_read_frame</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>truespeech_correlate_filter</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>truespeech_filters_merge</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>truespeech_apply_twopoint_filter</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>truespeech_place_pulses</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>truespeech_update_filters</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>truespeech_synth</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>truespeech_save_prevvec</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_truespeech_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"truespeech"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DSP Group TrueSpeech"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TRUESPEECH</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>truespeech_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>truespeech_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
