<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\hevc_ps.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_ps.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>default_scaling_list_intra</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">25</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">29</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">36</literal></expr>,

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">47</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">65</literal></expr>,

<expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">88</literal></expr>,

<expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">115</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>default_scaling_list_inter</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">33</literal></expr>,

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">41</literal></expr>,

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">54</literal></expr>,

<expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">71</literal></expr>,

<expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">91</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVRational</name></type> <name><name>vui_sar</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">33</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="number">99</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>hevc_sub_width_c</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>hevc_sub_height_c</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_pps</name><parameter_list>(<parameter><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>id</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pps</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>HEVCPPS</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>id</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_sps</name><parameter_list>(<parameter><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sps</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>HEVCSPS</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>id</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pps_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>HEVCPPS</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>sps_id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_pps</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>id</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sps</name></name> <operator>==</operator> <operator>(</operator><name>HEVCSPS</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>id</name></expr>]</index></name><operator>-&gt;</operator><name>data</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_vps</name><parameter_list>(<parameter><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>vps</name></name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>HEVCVPS</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name>id</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sps_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>HEVCSPS</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>vps_id</name> <operator>==</operator> <name>id</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_sps</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_decode_short_term_rps</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>ShortTermRPS</name> <modifier>*</modifier></type><name>rps</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_slice_header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>rps_predict</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta_poc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rps</name> <operator>!=</operator> <name><name>sps</name><operator>-&gt;</operator><name>st_rps</name></name> <operator>&amp;&amp;</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rps_predict</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rps_predict</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ShortTermRPS</name> <modifier>*</modifier></type><name>rps_ridx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta_rps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>abs_delta_rps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>use_delta_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>delta_rps_sign</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_slice_header</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>delta_idx</name> <init>= <expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_idx</name> <operator>&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid value of delta_idx in slice header RPS: %d &gt; %d.\n"</literal></expr></argument>,

<argument><expr><name>delta_idx</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rps_ridx</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>st_rps</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name> <operator>-</operator> <name>delta_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>rps_idx_num_delta_pocs</name></name> <operator>=</operator> <name><name>rps_ridx</name><operator>-&gt;</operator><name>num_delta_pocs</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rps_ridx</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>st_rps</name><index>[<expr><name>rps</name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>st_rps</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>delta_rps_sign</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>abs_delta_rps</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>abs_delta_rps</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>abs_delta_rps</name></expr></argument> &gt;</argument_list></name> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid value of abs_delta_rps: %d\n"</literal></expr></argument>,

<argument><expr><name>abs_delta_rps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta_rps</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>delta_rps_sign</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>abs_delta_rps</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>rps_ridx</name><operator>-&gt;</operator><name>num_delta_pocs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>used</name> <init>= <expr><name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>use_delta_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>used</name> <operator>||</operator> <name>use_delta_flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>rps_ridx</name><operator>-&gt;</operator><name>num_delta_pocs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta_poc</name> <operator>=</operator> <name>delta_rps</name> <operator>+</operator> <name><name>rps_ridx</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>delta_poc</name> <operator>=</operator> <name>delta_rps</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>delta_poc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_poc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>k0</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>k1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>rps</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid num_delta_pocs: %d\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>num_delta_pocs</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>=</operator> <name>k0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rps</name><operator>-&gt;</operator><name>num_delta_pocs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rps</name><operator>-&gt;</operator><name>num_delta_pocs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta_poc</name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_poc</name> <operator>&lt;</operator> <name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>delta_poc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>used</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta_poc</name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>delta_poc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>used</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prev</name></decl>, <decl><type ref="prev"/><name>nb_positive_pics</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_positive_pics</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>&gt;=</operator> <name>HEVC_MAX_REFS</name> <operator>||</operator>

<name>nb_positive_pics</name> <operator>&gt;=</operator> <name>HEVC_MAX_REFS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many refs in a short term RPS.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>num_delta_pocs</name></name> <operator>=</operator> <name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>+</operator> <name>nb_positive_pics</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rps</name><operator>-&gt;</operator><name>num_delta_pocs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta_poc</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>delta_poc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>delta_poc</name></expr></argument> &gt;</argument_list></name> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid value of delta_poc: %d\n"</literal></expr></argument>,

<argument><expr><name>delta_poc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>-=</operator> <name>delta_poc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_positive_pics</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta_poc</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>delta_poc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>delta_poc</name></expr></argument> &gt;</argument_list></name> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid value of delta_poc: %d\n"</literal></expr></argument>,

<argument><expr><name>delta_poc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>+=</operator> <name>delta_poc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rps</name><operator>-&gt;</operator><name>used</name><index>[<expr><name><name>rps</name><operator>-&gt;</operator><name>num_negative_pics</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_profile_tier_level</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>PTLCommon</name> <modifier>*</modifier></type><name>ptl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">43</literal> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_space</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>tier_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_MAIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Main profile bitstream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_MAIN_10</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Main 10 profile bitstream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_MAIN_STILL_PICTURE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Main Still Picture profile bitstream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_REXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Range Extension profile bitstream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Unknown HEVC profile: %d\n"</literal></expr></argument>, <argument><expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_compatibility_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ptl</name><operator>-&gt;</operator><name>profile_compatibility_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>progressive_source_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>interlaced_source_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>non_packed_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>frame_only_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_profile_idc</name><parameter_list>(<parameter><type><name>idc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ptl-&gt;profile_idc == idc || ptl-&gt;profile_compatibility_flag[idc]</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>max_12bit_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>max_10bit_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>max_8bit_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>max_422chroma_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>max_420chroma_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>max_monochrome_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>intra_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>one_picture_only_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>lower_bit_rate_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>max_14bit_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>one_picture_only_constraint_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>check_profile_idc</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>inbld_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>check_profile_idc</name></cpp:undef>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ptl</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>PTL</name> <modifier>*</modifier></type><name>ptl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_num_sub_layers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_profile_tier_level</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptl</name><operator>-&gt;</operator><name>general_ptl</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>max_num_sub_layers</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PTL information too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>general_ptl</name><operator>.</operator><name>level_idc</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_num_sub_layers</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>sub_layer_profile_present_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>sub_layer_level_present_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max_num_sub_layers</name> <operator>-</operator> <literal type="number">1</literal><operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>max_num_sub_layers</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_num_sub_layers</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ptl</name><operator>-&gt;</operator><name>sub_layer_profile_present_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<call><name>decode_profile_tier_level</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ptl</name><operator>-&gt;</operator><name>sub_layer_ptl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"PTL information for sublayer %i too short\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ptl</name><operator>-&gt;</operator><name>sub_layer_level_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Not enough data for sublayer %i level_idc\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptl</name><operator>-&gt;</operator><name>sub_layer_ptl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level_idc</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_sublayer_hrd</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_cpb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subpic_params_present</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_cpb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>subpic_params_present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_hrd</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>common_inf_present</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_sublayers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nal_params_present</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>vcl_params_present</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subpic_params_present</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>common_inf_present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nal_params_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vcl_params_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_params_present</name> <operator>||</operator> <name>vcl_params_present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>subpic_params_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subpic_params_present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>subpic_params_present</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_sublayers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>low_delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb_cpb</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fixed_rate</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fixed_rate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fixed_rate</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fixed_rate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>low_delay</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>low_delay</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_cpb</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nb_cpb</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nb_cpb</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"nb_cpb %d invalid\n"</literal></expr></argument>, <argument><expr><name>nb_cpb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_params_present</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_sublayer_hrd</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nb_cpb</name></expr></argument>, <argument><expr><name>subpic_params_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vcl_params_present</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_sublayer_hrd</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nb_cpb</name></expr></argument>, <argument><expr><name>subpic_params_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_decode_nal_vps</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vps_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>nal_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCVPS</name> <modifier>*</modifier></type><name>vps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>vps_buf</name> <init>= <expr><call><name>av_buffer_allocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vps_buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>vps</name> <operator>=</operator> <operator>(</operator><name>HEVCVPS</name><operator>*</operator><operator>)</operator><name><name>vps_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Decoding VPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_size</name> <operator>=</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>vps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Truncating likely oversized VPS "</literal>

<literal type="string">"(%"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" &gt; %"</literal><name>SIZE_SPECIFIER</name><literal type="string">")\n"</literal></expr></argument>,

<argument><expr><name>nal_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>vps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>nal_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>vps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vps_id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vps_reserved_three_2bits is not three\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_layers</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_temporal_id_nesting_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vps_reserved_ffff_16bits is not 0xffff\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers</name></name> <operator>&gt;</operator> <name>HEVC_MAX_SUB_LAYERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vps_max_sub_layers out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_ptl</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vps</name><operator>-&gt;</operator><name>ptl</name></name></expr></argument>, <argument><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_sub_layer_ordering_info_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_sub_layer_ordering_info_present_flag</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_latency_increase</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>HEVC_MAX_DPB_SIZE</name> <operator>||</operator> <operator>!</operator><name><name>vps</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"vps_max_dec_pic_buffering_minus1 out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_max_dec_pic_buffering</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"vps_max_num_reorder_pics out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_reorder_pics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_layer_id</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_layer_sets</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_layer_sets</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_num_layer_sets</name></name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>||</operator>

<operator>(</operator><name><name>vps</name><operator>-&gt;</operator><name>vps_num_layer_sets</name></name> <operator>-</operator> <literal type="number">1LL</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>vps</name><operator>-&gt;</operator><name>vps_max_layer_id</name></name> <operator>+</operator> <literal type="number">1LL</literal><operator>)</operator> <operator>&gt;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"too many layer_id_included_flags\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_num_layer_sets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_max_layer_id</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for> 

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_units_in_tick</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_time_scale</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_poc_proportional_to_timing_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_ticks_poc_diff_one</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_hrd_parameters</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_hrd_parameters</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>vps</name><operator>-&gt;</operator><name>vps_num_layer_sets</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"vps_num_hrd_parameters %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_num_hrd_parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vps</name><operator>-&gt;</operator><name>vps_num_hrd_parameters</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>common_inf_present</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>common_inf_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_hrd</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>common_inf_present</name></expr></argument>, <argument><expr><name><name>vps</name><operator>-&gt;</operator><name>vps_max_sub_layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Overread VPS by %d bits\n"</literal></expr></argument>, <argument><expr><operator>-</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name>vps_id</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name>vps_id</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name>vps_id</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name><name>vps_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>vps_buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>remove_vps</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>vps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name>vps_id</name></expr>]</index></name> <operator>=</operator> <name>vps_buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_vui</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>apply_defdispwin</name></decl></parameter>, <parameter><decl><type><name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VUI</name></type> <name>backup_vui</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vui</name> <init>= <expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>backup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sar_present</name></decl>, <decl><type ref="prev"/><name>alt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Decoding VUI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sar_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sar_present</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sar_idx</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sar_idx</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vui_sar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>sar</name></name> <operator>=</operator> <name><name>vui_sar</name><index>[<expr><name>sar_idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>sar_idx</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Unknown SAR index: %u.\n"</literal></expr></argument>, <argument><expr><name>sar_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>overscan_info_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>overscan_info_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>overscan_appropriate_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>video_format</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>video_full_range_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colour_description_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>video_full_range_flag</name></name> <operator>&amp;&amp;</operator> <name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVJ420P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>colour_description_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>transfer_characteristic</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>matrix_coeffs</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_color_primaries_name</name><argument_list>(<argument><expr><name><name>vui</name><operator>-&gt;</operator><name>colour_primaries</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>=</operator> <name>AVCOL_PRI_UNSPECIFIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>vui</name><operator>-&gt;</operator><name>transfer_characteristic</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>transfer_characteristic</name></name> <operator>=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_color_space_name</name><argument_list>(<argument><expr><name><name>vui</name><operator>-&gt;</operator><name>matrix_coeffs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>matrix_coeffs</name></name> <operator>=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>matrix_coeffs</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV444P10</name></expr>:</case>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP10</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV444P12</name></expr>:</case>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP12</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>chroma_loc_info_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>chroma_loc_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>chroma_sample_loc_type_top_field</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>chroma_sample_loc_type_bottom_field</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>neutra_chroma_indication_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>field_seq_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>frame_field_info_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backup_vui</name></expr></argument>, <argument><expr><name>vui</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup_vui</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">68</literal> <operator>&amp;&amp;</operator> <call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x100000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>default_display_window_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid default display window\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>default_display_window_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>default_display_window_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vert_mult</name> <init>= <expr><name><name>hevc_sub_height_c</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horiz_mult</name> <init>= <expr><name><name>hevc_sub_width_c</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>left_offset</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>horiz_mult</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>right_offset</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>horiz_mult</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>top_offset</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>vert_mult</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>bottom_offset</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>vert_mult</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>apply_defdispwin</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_IGNORE_CROP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"discarding vui default display window, "</literal>

<literal type="string">"original values are l:%u r:%u t:%u b:%u\n"</literal></expr></argument>,

<argument><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>left_offset</name></name></expr></argument>,

<argument><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>right_offset</name></name></expr></argument>,

<argument><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>top_offset</name></name></expr></argument>,

<argument><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>bottom_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>left_offset</name></name> <operator>=</operator>

<name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>right_offset</name></name> <operator>=</operator>

<name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>top_offset</name></name> <operator>=</operator>

<name><name>vui</name><operator>-&gt;</operator><name>def_disp_win</name><operator>.</operator><name>bottom_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>timing_info</name>:</label>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_timing_info_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>vui_timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">66</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>alt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Strange VUI timing information, retrying...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vui</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_vui</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup_vui</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>timing_info</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_num_units_in_tick</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_time_scale</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Retry got %"</literal><name>PRIu32</name><literal type="string">"/%"</literal><name>PRIu32</name><literal type="string">" fps\n"</literal></expr></argument>,

<argument><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_time_scale</name></name></expr></argument>, <argument><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_num_units_in_tick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_poc_proportional_to_timing_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>vui_poc_proportional_to_timing_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_num_ticks_poc_diff_one_minus1</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>vui_hrd_parameters_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>vui_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_hrd</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vui</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>alt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Strange VUI bitstream restriction information, retrying"</literal>

<literal type="string">" from timing information...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vui</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_vui</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup_vui</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>timing_info</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>tiles_fixed_structure_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>motion_vectors_over_pic_boundaries_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>restricted_ref_pic_lists_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>min_spatial_segmentation_idc</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>max_bytes_per_pic_denom</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>max_bits_per_min_cu_denom</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>log2_max_mv_length_horizontal</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>log2_max_mv_length_vertical</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>alt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Overread in VUI, retrying from timing information...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vui</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup_vui</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup_vui</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backup</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>timing_info</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_default_scaling_list_data</name><parameter_list>(<parameter><decl><type><name>ScalingList</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>matrixId</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>matrixId</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>matrixId</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>matrixId</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>matrixId</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>matrixId</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>matrixId</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_intra</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>default_scaling_list_inter</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scaling_list_data</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>ScalingList</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>scaling_list_pred_mode_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>scaling_list_dc_coef</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_id</name></decl>, <decl><type ref="prev"/><name>matrix_id</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>size_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>size_id</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>size_id</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>matrix_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>matrix_id</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>matrix_id</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>size_id</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>scaling_list_pred_mode_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scaling_list_pred_mode_flag</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>delta</name> <init>= <expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>*=</operator> <ternary><condition><expr><operator>(</operator><name>size_id</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matrix_id</name> <operator>&lt;</operator> <name>delta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid delta in scaling list data: %d.\n"</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><name>size_id</name></expr>]</index><index>[<expr><name>matrix_id</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><name>size_id</name></expr>]</index><index>[<expr><name>matrix_id</name> <operator>-</operator> <name>delta</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>size_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">64</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size_id</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><name>size_id</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>matrix_id</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><name>size_id</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>matrix_id</name> <operator>-</operator> <name>delta</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next_coef</name></decl>, <decl><type ref="prev"/><name>coef_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>scaling_list_delta_coef</name></decl>;</decl_stmt>

<expr_stmt><expr><name>next_coef</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>coef_num</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>size_id</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size_id</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>scaling_list_dc_coef</name><index>[<expr><name>size_id</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>matrix_id</name></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>next_coef</name> <operator>=</operator> <name><name>scaling_list_dc_coef</name><index>[<expr><name>size_id</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>matrix_id</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><name>size_id</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>matrix_id</name></expr>]</index></name> <operator>=</operator> <name>next_coef</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coef_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ff_hevc_diag_scan4x4_y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<name><name>ff_hevc_diag_scan4x4_x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>ff_hevc_diag_scan8x8_y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<name><name>ff_hevc_diag_scan8x8_x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>scaling_list_delta_coef</name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_coef</name> <operator>=</operator> <operator>(</operator><name>next_coef</name> <operator>+</operator> <literal type="number">256U</literal> <operator>+</operator> <name>scaling_list_delta_coef</name><operator>)</operator> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><name>size_id</name></expr>]</index><index>[<expr><name>matrix_id</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>next_coef</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>map_pixel_format</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY9</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P9</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P9</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P9</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY10</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P10</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P10</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY12</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P12</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P12</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P12</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The following bit-depths are currently specified: 8, 9, 10 and 12 bits, "</literal>

<literal type="string">"chroma_format_idc is %d, depth is %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pixel_shift</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_parse_sps</name><parameter_list>(<parameter><decl><type><name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>sps_id</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>apply_defdispwin</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>vps_list</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCWindow</name> <modifier>*</modifier></type><name>ow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_diff_max_min_transform_block_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_depth_chroma</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>vui_present</name></decl>, <decl><type ref="prev"/><name>sublayer_ordering_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vps_id</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vps_list</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vps_list</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>vps_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"VPS %d does not exist\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>vps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name> <operator>&gt;</operator> <name>HEVC_MAX_SUB_LAYERS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sps_max_sub_layers out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_id_nesting_flag</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_ptl</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>ptl</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sps_id</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sps_id</name> <operator>&gt;=</operator> <name>HEVC_MAX_SPS_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id out of range: %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>sps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&gt;</operator> <literal type="number">3U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"chroma_format_idc %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>vert_mult</name> <init>= <expr><name><name>hevc_sub_height_c</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horiz_mult</name> <init>= <expr><name><name>hevc_sub_width_c</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>left_offset</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>horiz_mult</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>right_offset</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>horiz_mult</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>top_offset</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>vert_mult</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>bottom_offset</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>vert_mult</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_IGNORE_CROP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"discarding sps conformance window, "</literal>

<literal type="string">"original values are l:%u r:%u t:%u b:%u\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>left_offset</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>right_offset</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>top_offset</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>bottom_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>left_offset</name></name> <operator>=</operator>

<name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>right_offset</name></name> <operator>=</operator>

<name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>top_offset</name></name> <operator>=</operator>

<name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name><operator>.</operator><name>bottom_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>output_window</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bit_depth_chroma</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&amp;&amp;</operator> <name>bit_depth_chroma</name> <operator>!=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Luma bit depth (%d) is different from chroma bit depth (%d), "</literal>

<literal type="string">"this is unsupported.\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>, <argument><expr><name>bit_depth_chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>=</operator> <name>bit_depth_chroma</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>map_pixel_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"log2_max_pic_order_cnt_lsb_minus4 out range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sublayer_ordering_info</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <ternary><condition><expr><name>sublayer_ordering_info</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_latency_increase</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>HEVC_MAX_DPB_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sps_max_dec_pic_buffering_minus1 out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>-</operator> <literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name> <operator>&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sps_max_num_reorder_pics out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name> <operator>&gt;</operator> <name>HEVC_MAX_DPB_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sublayer_ordering_info</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>start</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>num_reorder_pics</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_latency_increase</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name>start</name></expr>]</index></name><operator>.</operator><name>max_latency_increase</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>log2_diff_max_min_transform_block_size</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_trafo_size</name></name> <operator>=</operator> <name>log2_diff_max_min_transform_block_size</name> <operator>+</operator>

<name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid value %d for log2_min_cb_size"</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid value %d for log2_diff_max_min_coding_block_size"</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name> <operator>&gt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for log2_min_tb_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>log2_diff_max_min_transform_block_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>log2_diff_max_min_transform_block_size</name></expr></argument> &gt;</argument_list></name> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid value %d for log2_diff_max_min_transform_block_size"</literal></expr></argument>, <argument><expr><name>log2_diff_max_min_transform_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_default_scaling_list_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>scaling_list_data</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sao_enabled</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth_chroma</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_max_pcm_cb_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name> <operator>+</operator>

<call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth_chroma</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"PCM bit depth (%d, %d) is greater than normal bit depth (%d)\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth_chroma</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>loop_filter_disable_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name> <operator>&gt;</operator> <name>HEVC_MAX_SHORT_TERM_REF_PIC_SETS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many short term RPS: %d.\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_hevc_decode_short_term_rps</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>st_rps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>sps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name> <operator>&gt;</operator> <name>HEVC_MAX_LONG_TERM_REF_PICS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many long term ref pics: %d.\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>lt_ref_pic_poc_lsb_sps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>used_by_curr_pic_lt_sps_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_strong_intra_smoothing_enable_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>sar</name></name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>vui_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vui_present</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_vui</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>apply_defdispwin</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>sps_range_extension_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>sps_range_extension_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>transform_skip_rotation_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>transform_skip_context_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>implicit_rdpcm_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>explicit_rdpcm_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>extended_precision_processing_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>extended_precision_processing_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"extended_precision_processing_flag not yet implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>intra_smoothing_disabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>high_precision_offsets_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>high_precision_offsets_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"high_precision_offsets_enabled_flag not yet implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>cabac_bypass_alignment_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>cabac_bypass_alignment_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"cabac_bypass_alignment_enabled_flag not yet implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>apply_defdispwin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>output_window</name><operator>.</operator><name>left_offset</name></name> <operator>+=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>def_disp_win</name><operator>.</operator><name>left_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>output_window</name><operator>.</operator><name>right_offset</name></name> <operator>+=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>def_disp_win</name><operator>.</operator><name>right_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>output_window</name><operator>.</operator><name>top_offset</name></name> <operator>+=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>def_disp_win</name><operator>.</operator><name>top_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>output_window</name><operator>.</operator><name>bottom_offset</name></name> <operator>+=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>def_disp_win</name><operator>.</operator><name>bottom_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ow</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>output_window</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ow</name><operator>-&gt;</operator><name>left_offset</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name><name>ow</name><operator>-&gt;</operator><name>right_offset</name></name> <operator>||</operator>

<name><name>ow</name><operator>-&gt;</operator><name>top_offset</name></name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <name><name>ow</name><operator>-&gt;</operator><name>bottom_offset</name></name> <operator>||</operator>

<name><name>ow</name><operator>-&gt;</operator><name>left_offset</name></name> <operator>+</operator> <name><name>ow</name><operator>-&gt;</operator><name>right_offset</name></name> <operator>&gt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>ow</name><operator>-&gt;</operator><name>top_offset</name></name> <operator>+</operator> <name><name>ow</name><operator>-&gt;</operator><name>bottom_offset</name></name> <operator>&gt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid cropping offsets: %u/%u/%u/%u\n"</literal></expr></argument>,

<argument><expr><name><name>ow</name><operator>-&gt;</operator><name>left_offset</name></name></expr></argument>, <argument><expr><name><name>ow</name><operator>-&gt;</operator><name>right_offset</name></name></expr></argument>, <argument><expr><name><name>ow</name><operator>-&gt;</operator><name>top_offset</name></name></expr></argument>, <argument><expr><name><name>ow</name><operator>-&gt;</operator><name>bottom_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Displaying the whole video surface.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pic_conf_win</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>+</operator>

<name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name> <operator>&gt;</operator> <name>HEVC_MAX_LOG2_CTB_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"CTB size out of range: 2^%d\n"</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"log2_ctb_size %d differs from the bounds of any known profile\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"log2_ctb_size %d"</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>ctb_size</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>min_cb_width</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>min_cb_height</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>min_tb_width</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>min_tb_height</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>qp_bd_offset</name></name> <operator>=</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid coded frame dimensions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name> <operator>&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"max_transform_hierarchy_depth_inter out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name> <operator>&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"max_transform_hierarchy_depth_intra out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_trafo_size</name></name> <operator>&gt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"max transform block size out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_trafo_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Overread SPS by %d bits\n"</literal></expr></argument>, <argument><expr><operator>-</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_decode_nal_sps</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>apply_defdispwin</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>sps_buf</name> <init>= <expr><call><name>av_buffer_allocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sps_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>nal_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps_buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <operator>(</operator><name>HEVCSPS</name><operator>*</operator><operator>)</operator><name><name>sps_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Decoding SPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_size</name> <operator>=</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Truncating likely oversized SPS "</literal>

<literal type="string">"(%"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" &gt; %"</literal><name>SIZE_SPECIFIER</name><literal type="string">")\n"</literal></expr></argument>,

<argument><expr><name>nal_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>nal_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_hevc_parse_sps</name><argument_list>(<argument><expr><name>sps</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sps_id</name></expr></argument>,

<argument><expr><name>apply_defdispwin</name></expr></argument>,

<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>vps_list</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_BITSTREAM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Parsed SPS: id %d; coded wxh: %dx%d; "</literal>

<literal type="string">"cropped wxh: %dx%d; pix_fmt: %s.\n"</literal></expr></argument>,

<argument><expr><name>sps_id</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>output_window</name><operator>.</operator><name>left_offset</name></name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>output_window</name><operator>.</operator><name>right_offset</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>output_window</name><operator>.</operator><name>top_offset</name></name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>output_window</name><operator>.</operator><name>bottom_offset</name></name><operator>)</operator></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>sps_id</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>sps_id</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><name><name>sps_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sps_buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>remove_sps</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>sps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>sps_id</name></expr>]</index></name> <operator>=</operator> <name>sps_buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hevc_pps_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>(</operator><name>HEVCPPS</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>column_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>row_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>col_bd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>row_bd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>col_idxX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_ts_to_rs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>tile_pos_rs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>tile_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pps_range_extensions</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name></decl></parameter>, <parameter><decl><type><name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>log2_max_transform_skip_block_size</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cross_component_prediction_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>diff_cu_chroma_qp_offset_depth</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"chroma_qp_offset_list_len_minus1 shall be in the range [0, 5].\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"cb_qp_offset_list not tested yet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"cb_qp_offset_list not tested yet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_luma</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_chroma</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_luma</name></name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_chroma</name></name> <operator>&gt;</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>

)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>setup_pps</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name></decl></parameter>, <parameter><decl><type><name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>log2_diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_area_in_ctbs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ctb_addr_rs</name></decl>, <decl><type ref="prev"/><name>tile_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>col_bd</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>col_bd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>row_bd</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>row_bd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>col_idxX</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>col_idxX</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>col_bd</name></name> <operator>||</operator> <operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>row_bd</name></name> <operator>||</operator> <operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>col_idxX</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>column_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>column_width</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>column_width</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>row_height</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>row_height</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>column_width</name></name> <operator>||</operator> <operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>row_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name><operator>)</operator> <operator>/</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>-</operator>

<operator>(</operator><name>i</name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name><operator>)</operator> <operator>/</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name><operator>)</operator> <operator>/</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>-</operator>

<operator>(</operator><name>i</name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name><operator>)</operator> <operator>/</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>row_bd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>row_bd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_bd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>col_idxX</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pic_area_in_ctbs</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>pic_area_in_ctbs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_ts_to_rs</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>pic_area_in_ctbs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_ts_to_rs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>tile_id</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>pic_area_in_ctbs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>tile_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs_tab</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs_tab</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name></name> <operator>||</operator> <operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_ts_to_rs</name></name> <operator>||</operator>

<operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>tile_id</name></name> <operator>||</operator> <operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs_tab</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ctb_addr_rs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ctb_addr_rs</name> <operator>&lt;</operator> <name>pic_area_in_ctbs</name></expr>;</condition> <incr><expr><name>ctb_addr_rs</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tb_x</name> <init>= <expr><name>ctb_addr_rs</name> <operator>%</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tb_y</name> <init>= <expr><name>ctb_addr_rs</name> <operator>/</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tb_x</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tile_x</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tb_y</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_bd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tile_y</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>tile_y</name></expr>]</index></name> <operator>*</operator> <name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_y</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>*</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><name>tb_y</name> <operator>-</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_bd</name><index>[<expr><name>tile_y</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>tile_x</name></expr>]</index></name> <operator>+</operator>

<name>tb_x</name> <operator>-</operator> <name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><name>tile_x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name>ctb_addr_rs</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_ts_to_rs</name><index>[<expr><name>val</name></expr>]</index></name> <operator>=</operator> <name>ctb_addr_rs</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tile_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>tile_id</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_bd</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_bd</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>tile_id</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>tile_id</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>tile_pos_rs</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>tile_id</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>tile_pos_rs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>tile_pos_rs</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>tile_pos_rs</name><index>[<expr><name>j</name> <operator>*</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>pps</name><operator>-&gt;</operator><name>row_bd</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>+</operator> <name><name>pps</name><operator>-&gt;</operator><name>col_bd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>log2_diff</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs_tab</name><index>[<expr><literal type="number">1</literal><operator>*</operator><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>+</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs_tab</name><index>[<expr><name>y</name><operator>*</operator><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs_tab</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tb_x</name> <init>= <expr><name>x</name> <operator>&gt;&gt;</operator> <name>log2_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tb_y</name> <init>= <expr><name>y</name> <operator>&gt;&gt;</operator> <name>log2_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rs</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>*</operator> <name>tb_y</name> <operator>+</operator> <name>tb_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>pps</name><operator>-&gt;</operator><name>ctb_addr_rs_to_ts</name><index>[<expr><name>rs</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>log2_diff</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>log2_diff</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>m</name> <operator>&amp;</operator> <name>x</name></expr> ?</condition><then> <expr><name>m</name> <operator>*</operator> <name>m</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>m</name> <operator>&amp;</operator> <name>y</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>m</name> <operator>*</operator> <name>m</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>min_tb_addr_zs</name><index>[<expr><name>y</name> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_decode_nal_pps</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pps_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>nal_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>log2_parallel_merge_level_minus2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>pps_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pps</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pps_buf</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pps</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pps</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>hevc_pps_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pps_buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Decoding PPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nal_size</name> <operator>=</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer_end</name></name> <operator>-</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_size</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Truncating likely oversized PPS "</literal>

<literal type="string">"(%"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" &gt; %"</literal><name>SIZE_SPECIFIER</name><literal type="string">")\n"</literal></expr></argument>,

<argument><expr><name>nal_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>nal_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>disable_dbf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>beta_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>tc_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>log2_max_transform_skip_block_size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pps_id</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pps_id</name> <operator>&gt;=</operator> <name>HEVC_MAX_PPS_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PPS id out of range: %d\n"</literal></expr></argument>, <argument><expr><name>pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name> <operator>&gt;=</operator> <name>HEVC_MAX_SPS_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id out of range: %d\n"</literal></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS %u does not exist.\n"</literal></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <operator>(</operator><name>HEVCSPS</name> <operator>*</operator><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>sign_data_hiding_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cabac_init_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name> <operator>&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"diff_cu_qp_delta_depth %d is invalid\n"</literal></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">12</literal> <operator>||</operator> <name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pps_cb_qp_offset out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">12</literal> <operator>||</operator> <name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pps_cr_qp_offset out of range: %d\n"</literal></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pic_slice_level_chroma_qp_offsets_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_tile_columns_minus1</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_tile_rows_minus1</name> <init>= <expr><call><name>get_ue_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_tile_columns_minus1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name>num_tile_columns_minus1</name> <operator>&gt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"num_tile_columns_minus1 out of range: %d\n"</literal></expr></argument>,

<argument><expr><name>num_tile_columns_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>num_tile_columns_minus1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>num_tile_columns_minus1</name></expr> </then><else>: <expr><name>AVERROR_INVALIDDATA</name></expr></else></ternary></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_tile_rows_minus1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name>num_tile_rows_minus1</name> <operator>&gt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"num_tile_rows_minus1 out of range: %d\n"</literal></expr></argument>,

<argument><expr><name>num_tile_rows_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><name>num_tile_rows_minus1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>num_tile_rows_minus1</name></expr> </then><else>: <expr><name>AVERROR_INVALIDDATA</name></expr></else></ternary></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>=</operator> <name>num_tile_columns_minus1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>=</operator> <name>num_tile_rows_minus1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>column_width</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>column_width</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>row_height</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pps</name><operator>-&gt;</operator><name>row_height</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>column_width</name></name> <operator>||</operator> <operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>row_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&gt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tile widths.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_width</name></name> <operator>-</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&gt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tile heights.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ctb_height</name></name> <operator>-</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>seq_loop_filter_across_slices_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_override_enabled_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>disable_dbf</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pps</name><operator>-&gt;</operator><name>disable_dbf</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>beta_offset_div2</name> <init>= <expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tc_offset_div2</name> <init>= <expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>beta_offset_div2</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">6</literal> <operator>||</operator> <name>beta_offset_div2</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pps_beta_offset_div2 out of range: %d\n"</literal></expr></argument>,

<argument><expr><name>beta_offset_div2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc_offset_div2</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">6</literal> <operator>||</operator> <name>tc_offset_div2</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pps_tc_offset_div2 out of range: %d\n"</literal></expr></argument>,

<argument><expr><name>tc_offset_div2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>beta_offset</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>beta_offset_div2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>tc_offset</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>tc_offset_div2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_default_scaling_list_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>scaling_list_data</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>lists_modification_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>log2_parallel_merge_level_minus2</name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>log2_parallel_merge_level_minus2</name> <operator>&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_ctb_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"log2_parallel_merge_level_minus2 out of range: %d\n"</literal></expr></argument>,

<argument><expr><name>log2_parallel_merge_level_minus2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>log2_parallel_merge_level</name></name> <operator>=</operator> <name>log2_parallel_merge_level_minus2</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>slice_header_extension_present_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>pps</name><operator>-&gt;</operator><name>pps_range_extensions_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>ptl</name><operator>.</operator><name>general_ptl</name><operator>.</operator><name>profile_idc</name></name> <operator>==</operator> <name>FF_PROFILE_HEVC_REXT</name> <operator>&amp;&amp;</operator> <name><name>pps</name><operator>-&gt;</operator><name>pps_range_extensions_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>pps_range_extensions</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setup_pps</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>pps</name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Overread PPS by %d bits\n"</literal></expr></argument>, <argument><expr><operator>-</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remove_pps</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>pps_id</name></expr>]</index></name> <operator>=</operator> <name>pps_buf</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err</name>:</label>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_hevc_ps_uninit</name><parameter_list>(<parameter><decl><type><name>HEVCParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>vps_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>vps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>pps_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>vps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_hevc_compute_poc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pocTid0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>poc_lsb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nal_unit_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_poc_lsb</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_poc_lsb</name> <init>= <expr><name>pocTid0</name> <operator>%</operator> <name>max_poc_lsb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_poc_msb</name> <init>= <expr><name>pocTid0</name> <operator>-</operator> <name>prev_poc_lsb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poc_msb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>poc_lsb</name> <operator>&lt;</operator> <name>prev_poc_lsb</name> <operator>&amp;&amp;</operator> <name>prev_poc_lsb</name> <operator>-</operator> <name>poc_lsb</name> <operator>&gt;=</operator> <name>max_poc_lsb</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>poc_msb</name> <operator>=</operator> <name>prev_poc_msb</name> <operator>+</operator> <name>max_poc_lsb</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>poc_lsb</name> <operator>&gt;</operator> <name>prev_poc_lsb</name> <operator>&amp;&amp;</operator> <name>poc_lsb</name> <operator>-</operator> <name>prev_poc_lsb</name> <operator>&gt;</operator> <name>max_poc_lsb</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>poc_msb</name> <operator>=</operator> <name>prev_poc_msb</name> <operator>-</operator> <name>max_poc_lsb</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>poc_msb</name> <operator>=</operator> <name>prev_poc_msb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nal_unit_type</name> <operator>==</operator> <name>HEVC_NAL_BLA_W_LP</name> <operator>||</operator>

<name>nal_unit_type</name> <operator>==</operator> <name>HEVC_NAL_BLA_W_RADL</name> <operator>||</operator>

<name>nal_unit_type</name> <operator>==</operator> <name>HEVC_NAL_BLA_N_LP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>poc_msb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>poc_msb</name> <operator>+</operator> <name>poc_lsb</name></expr>;</return>

</block_content>}</block></function>

</unit>
