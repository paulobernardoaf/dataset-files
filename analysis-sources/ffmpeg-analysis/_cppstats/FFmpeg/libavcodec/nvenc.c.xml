<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\nvenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_cuda.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cuda_check.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_CU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FF_CUDA_CHECK_DL(avctx, dl_fn-&gt;cuda_dl, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENC_CAP</name></cpp:macro> <cpp:value>0x30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CBR</name><parameter_list>(<parameter><type><name>rc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rc == NV_ENC_PARAMS_RC_CBR || rc == NV_ENC_PARAMS_RC_CBR_LOWDELAY_HQ || rc == NV_ENC_PARAMS_RC_CBR_HQ)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>ff_nvenc_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_P010</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_P016</name></expr>, 

<expr><name>AV_PIX_FMT_YUV444P16</name></expr>, 

<expr><name>AV_PIX_FMT_0RGB32</name></expr>,

<expr><name>AV_PIX_FMT_0BGR32</name></expr>,

<expr><name>AV_PIX_FMT_CUDA</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<expr><name>AV_PIX_FMT_D3D11</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_10BIT</name><parameter_list>(<parameter><type><name>pix_fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(pix_fmt == AV_PIX_FMT_P010 || pix_fmt == AV_PIX_FMT_P016 || pix_fmt == AV_PIX_FMT_YUV444P16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_YUV444</name><parameter_list>(<parameter><type><name>pix_fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(pix_fmt == AV_PIX_FMT_YUV444P || pix_fmt == AV_PIX_FMT_YUV444P16)</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>nverr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>averr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

}</block> <decl><name><name>nvenc_errors</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>NV_ENC_SUCCESS</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"success"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_NO_ENCODE_DEVICE</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOENT</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"no encode device"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_UNSUPPORTED_DEVICE</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"unsupported device"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_INVALID_ENCODERDEVICE</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid encoder device"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_INVALID_DEVICE</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid device"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_DEVICE_NOT_EXIST</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"device does not exist"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_INVALID_PTR</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EFAULT</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid ptr"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_INVALID_EVENT</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid event"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_INVALID_PARAM</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid param"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_INVALID_CALL</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid call"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_OUT_OF_MEMORY</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"out of memory"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_ENCODER_NOT_INITIALIZED</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"encoder not initialized"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_UNSUPPORTED_PARAM</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"unsupported param"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_LOCK_BUSY</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"lock busy"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_NOT_ENOUGH_BUFFER</name></expr>, <expr><name>AVERROR_BUFFER_TOO_SMALL</name></expr>, <expr><literal type="string">"not enough buffer"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_INVALID_VERSION</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"invalid version"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_MAP_FAILED</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"map failed"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_NEED_MORE_INPUT</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"need more input"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_ENCODER_BUSY</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"encoder busy"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_EVENT_NOT_REGISTERD</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EBADF</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"event not registered"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_GENERIC</name></expr>, <expr><name>AVERROR_UNKNOWN</name></expr>, <expr><literal type="string">"generic error"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_INCOMPATIBLE_CLIENT_KEY</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"incompatible client key"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_UNIMPLEMENTED</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"unimplemented"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_RESOURCE_REGISTER_FAILED</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"resource register failed"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_RESOURCE_NOT_REGISTERED</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EBADF</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"resource not registered"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NV_ENC_ERR_RESOURCE_NOT_MAPPED</name></expr>, <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EBADF</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"resource not mapped"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_map_error</name><parameter_list>(<parameter><decl><type><name>NVENCSTATUS</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>nvenc_errors</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>nvenc_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nverr</name> <operator>==</operator> <name>err</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>desc</name> <operator>=</operator> <name><name>nvenc_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>nvenc_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>averr</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>desc</name> <operator>=</operator> <literal type="string">"unknown error"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_print_error</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>NVENCSTATUS</name></type> <name>err</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>details</name> <init>= <expr><literal type="string">"(no details)"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>nvenc_map_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVENC_HAVE_GETLASTERRORSTRING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name><operator>.</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_nvenc</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>details</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncGetLastErrorString</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s: %s (%d): %s\n"</literal></expr></argument>, <argument><expr><name>error_string</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>details</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nvenc_print_driver_requirement</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NVENCAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"(unknown)"</literal></expr></init></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>NVENCAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"436.15"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"435.21"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>NVENCAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"418.81"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"418.30"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>NVENCAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"397.93"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"396.24"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>NVENCAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"390.77"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"390.25"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"378.66"</literal></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minver</name> <init>= <expr><literal type="string">"378.13"</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"The minimum required Nvidia driver for nvenc is %s or newer\n"</literal></expr></argument>, <argument><expr><name>minver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_load_libraries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nvenc_max_ver</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cuda_load_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_load_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_dl</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nvenc_print_driver_requirement</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_dl</name><operator>-&gt;</operator><name>NvEncodeAPIGetMaxSupportedVersion</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>nvenc_max_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"Failed to query nvenc max version"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Loaded Nvenc version %d.%d\n"</literal></expr></argument>, <argument><expr><name>nvenc_max_ver</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>nvenc_max_ver</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>NVENCAPI_MAJOR_VERSION</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>NVENCAPI_MINOR_VERSION</name><operator>)</operator> <operator>&gt;</operator> <name>nvenc_max_ver</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support the required nvenc API version. "</literal>

<literal type="string">"Required: %d.%d Found: %d.%d\n"</literal></expr></argument>,

<argument><expr><name>NVENCAPI_MAJOR_VERSION</name></expr></argument>, <argument><expr><name>NVENCAPI_MINOR_VERSION</name></expr></argument>,

<argument><expr><name>nvenc_max_ver</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>nvenc_max_ver</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nvenc_print_driver_requirement</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENCODE_API_FUNCTION_LIST_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_dl</name><operator>-&gt;</operator><name>NvEncodeAPICreateInstance</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"Failed to create nvenc instance"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Nvenc initialized successfully\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_push_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuCtxPushCurrent</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_pop_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuCtxPopCurrent</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_open_session</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS</name></type> <name>params</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name><operator>.</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_OPEN_ENCODE_SESSION_EX_PARAMS_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>apiVersion</name></name> <operator>=</operator> <name>NVENCAPI_VERSION</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>deviceType</name></name> <operator>=</operator> <name>NV_ENC_DEVICE_TYPE_DIRECTX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>device</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cu_context</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>deviceType</name></name> <operator>=</operator> <name>NV_ENC_DEVICE_TYPE_CUDA</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncOpenEncodeSessionEx</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"OpenEncodeSessionEx failed"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_check_codec_support</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name><operator>.</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name> <modifier>*</modifier></type><name>guids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncGetEncodeGUIDCount</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name> <operator>||</operator> <operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>guids</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GUID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>guids</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncGetEncodeGUIDs</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name>guids</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>guids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>encodeGUID</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>guids</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>guids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_check_cap</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>NV_ENC_CAPS</name></type> <name>cap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name><operator>.</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CAPS_PARAM</name></type> <name>params</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_CAPS_PARAM_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>capsToQuery</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncGetEncodeCaps</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>encodeGUID</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_check_capabilities</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_codec_support</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Codec not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_YUV444_ENCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_YUV444</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"YUV444P not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_LOSSLESS_ENCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>preset</name></name> <operator>&gt;=</operator> <name>PRESET_LOSSLESS_DEFAULT</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Lossless encoding not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_WIDTH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Width %d exceeds %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_HEIGHT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Height %d exceeds %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_NUM_MAX_BFRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Max B-frames %d exceed %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_FIELD_ENCODING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Interlaced encoding is not supported. Supported level: %d\n"</literal></expr></argument>,

<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_10BIT_ENCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_10BIT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"10 bit encode not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_LOOKAHEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_lookahead</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RC lookahead not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_TEMPORAL_AQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>temporal_aq</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Temporal AQ not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_WEIGHTED_PREDICTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>weighted_pred</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name> <argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Weighted Prediction not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_CABAC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>coder</name></name> <operator>==</operator> <name>NV_ENC_H264_ENTROPY_CODING_MODE_CABAC</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"CABAC entropy coding not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVENC_HAVE_BFRAME_REF_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_BFRAME_REF_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>b_ref_mode</name></name> <operator>==</operator> <name>NV_ENC_BFRAME_REF_MODE_EACH</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Each B frame as reference is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>b_ref_mode</name></name> <operator>!=</operator> <name>NV_ENC_BFRAME_REF_MODE_DISABLED</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"B frames as references are not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>b_ref_mode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"B frames as references need SDK 8.1 at build time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVENC_HAVE_MULTIPLE_REF_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_MULTIPLE_REF_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name> <operator>!=</operator> <name>NV_ENC_NUM_REF_FRAMES_AUTOSELECT</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Multiple reference frames are not supported by the device\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Multiple reference frames need SDK 9.1 at build time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>support_dyn_bitrate</name></name> <operator>=</operator> <call><name>nvenc_check_cap</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NV_ENC_CAPS_SUPPORT_DYN_BITRATE_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_check_device</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUdevice</name></type> <name>cu_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name> <init>= <expr><name>AV_LOG_VERBOSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>==</operator> <name>LIST_DEVICES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>loglevel</name> <operator>=</operator> <name>AV_LOG_INFO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuDeviceGet</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>cu_device</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuDeviceGetName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cu_device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuDeviceComputeCapability</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>, <argument><expr><name>cu_device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"[ GPU #%d - &lt; %s &gt; has Compute SM %d.%d ]\n"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>major</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>minor</name><operator>)</operator> <operator>&lt;</operator> <name>NVENC_CAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"does not support NVENC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>!=</operator> <name>idx</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>!=</operator> <name>ANY_DEVICE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuCtxCreate</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cu_context_internal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cu_device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cu_context_internal</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_open_session</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail2</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_check_capabilities</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail3</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"supports NVENC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_device_count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>==</operator> <name>idx</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>==</operator> <name>ANY_DEVICE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<label><name>fail3</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_push_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncDestroyEncoder</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<label><name>fail2</name>:</label>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuCtxDestroy</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context_internal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context_internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_setup_device</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>encodeGUID</name></name> <operator>=</operator> <name>NV_ENC_CODEC_H264_GUID</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>encodeGUID</name></name> <operator>=</operator> <name>NV_ENC_CODEC_HEVC_GUID</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>hwdev_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCUDADeviceContext</name> <modifier>*</modifier></type><name>cuda_device_hwctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>d3d11_device_hwctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cuda_device_hwctx</name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d3d11_device_hwctx</name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hwdev_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwdev_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_CUDA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cuda_device_hwctx</name> <operator>=</operator> <name><name>hwdev_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt></block_content></block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name><name>hwdev_ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_HWDEVICE_TYPE_D3D11VA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d3d11_device_hwctx</name> <operator>=</operator> <name><name>hwdev_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt></block_content></block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cuda_device_hwctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context</name></name> <operator>=</operator> <name><name>cuda_device_hwctx</name><operator>-&gt;</operator><name>cuda_ctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_stream</name></name> <operator>=</operator> <name><name>cuda_device_hwctx</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if type="elseif">else if <condition>(<expr><name>d3d11_device_hwctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name> <operator>=</operator> <name><name>d3d11_device_hwctx</name><operator>-&gt;</operator><name>device</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3D11Device_AddRef</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_open_session</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nvenc_check_capabilities</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Provided device doesn't support required NVENC features\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb_devices</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuInit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuDeviceGetCount</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>nb_devices</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nb_devices</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"No CUDA capable devices found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"%d CUDA capable devices found\n"</literal></expr></argument>, <argument><expr><name>nb_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_device_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_devices</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>nvenc_check_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>!=</operator> <name>LIST_DEVICES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>==</operator> <name>LIST_DEVICES</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_device_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"No capable devices found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Requested GPU %d, but only %d GPUs are available!\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>nb_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>GUIDTuple</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>GUIDTuple</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRESET_ALIAS</name><parameter_list>(<parameter><type><name>alias</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[PRESET_ ##alias] = { NV_ENC_PRESET_ ##name ##_GUID, __VA_ARGS__ }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRESET</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PRESET_ALIAS(name, name, __VA_ARGS__)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nvenc_map_preset</name><parameter_list>(<parameter><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GUIDTuple</name></type> <name><name>presets</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>DEFAULT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>HP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>HQ</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>BD</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET_ALIAS</name><argument_list>(<argument><expr><name>SLOW</name></expr></argument>, <argument><expr><name>HQ</name></expr></argument>, <argument><expr><name>NVENC_TWO_PASSES</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET_ALIAS</name><argument_list>(<argument><expr><name>MEDIUM</name></expr></argument>, <argument><expr><name>HQ</name></expr></argument>, <argument><expr><name>NVENC_ONE_PASS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET_ALIAS</name><argument_list>(<argument><expr><name>FAST</name></expr></argument>, <argument><expr><name>HP</name></expr></argument>, <argument><expr><name>NVENC_ONE_PASS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>LOW_LATENCY_DEFAULT</name></expr></argument>, <argument><expr><name>NVENC_LOWLATENCY</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>LOW_LATENCY_HP</name></expr></argument>, <argument><expr><name>NVENC_LOWLATENCY</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>LOW_LATENCY_HQ</name></expr></argument>, <argument><expr><name>NVENC_LOWLATENCY</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>LOSSLESS_DEFAULT</name></expr></argument>, <argument><expr><name>NVENC_LOSSLESS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PRESET</name><argument_list>(<argument><expr><name>LOSSLESS_HP</name></expr></argument>, <argument><expr><name>NVENC_LOSSLESS</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUIDTuple</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>&amp;</operator><name><name>presets</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>preset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>presetGUID</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>guid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRESET</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRESET_ALIAS</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>set_constqp</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_RC_PARAMS</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rateControlMode</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_RC_CONSTQP</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>init_qp_p</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterP</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_qp_p</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>init_qp_i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_qp_b</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_qp_i</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_qp_b</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(

<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterP</name></name> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(

<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterP</name></name> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterP</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterP</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cqp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterP</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cqp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cqp</name></name> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cqp</name></name> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>set_vbr</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_RC_PARAMS</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_inter_p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>enableMinQP</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>enableMaxQP</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>minQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>minQP</name><operator>.</operator><name>qpInterP</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>minQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>maxQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>maxQP</name><operator>.</operator><name>qpInterP</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>maxQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qp_inter_p</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>enableMinQP</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>minQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>minQP</name><operator>.</operator><name>qpInterP</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>minQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>qp_inter_p</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>qp_inter_p</name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>enableInitialRCQP</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>init_qp_p</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterP</name></name> <operator>=</operator> <name>qp_inter_p</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterP</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_qp_p</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>init_qp_i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(

<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterP</name></name> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterP</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_qp_i</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>init_qp_b</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(

<argument><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterP</name></name> <operator>*</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterP</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>initialRCQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_qp_b</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>set_lossless</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_RC_PARAMS</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rateControlMode</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_RC_CONSTQP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterB</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpInterP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>constQP</name><operator>.</operator><name>qpIntra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nvenc_override_rate_control</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_RC_PARAMS</name> <modifier>*</modifier></type><name>rc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NV_ENC_PARAMS_RC_CONSTQP</name></expr>:</case>

<expr_stmt><expr><call><name>set_constqp</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>NV_ENC_PARAMS_RC_VBR_MINQP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"The variable bitrate rate-control requires "</literal>

<literal type="string">"the 'qmin' option set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vbr</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>NV_ENC_PARAMS_RC_VBR_HQ</name></expr>:</case>

<case>case <expr><name>NV_ENC_PARAMS_RC_VBR</name></expr>:</case>

<expr_stmt><expr><call><name>set_vbr</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_PARAMS_RC_CBR</name></expr>:</case>

<case>case <expr><name>NV_ENC_PARAMS_RC_CBR_HQ</name></expr>:</case>

<case>case <expr><name>NV_ENC_PARAMS_RC_CBR_LOWDELAY_HQ</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>rateControlMode</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_recalc_surfaces</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_surfaces</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameIntervalP</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_lookahead</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_surfaces</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>nb_surfaces</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_lookahead</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameIntervalP</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_surfaces</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Defined rc_lookahead requires more surfaces, "</literal>

<literal type="string">"increasing used surfaces %d -&gt; %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>, <argument><expr><name>nb_surfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>nb_surfaces</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameIntervalP</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>&lt;</operator> <name>nb_surfaces</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Defined b-frame requires more surfaces, "</literal>

<literal type="string">"increasing used surfaces %d -&gt; %d\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>, <argument><expr><name>nb_surfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>, <argument><expr><name>nb_surfaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <name>nb_surfaces</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>MAX_REGISTERED_FRAMES</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>async_depth</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>async_depth</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>nvenc_setup_rate_control</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Using global_quality with nvenc is deprecated. Use qp instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cqp</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cqp</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>maxBitRate</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>maxBitRate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NVENC_ONE_PASS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NVENC_TWO_PASSES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NVENC_LOWLATENCY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cbr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_RC_CBR_LOWDELAY_HQ</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_RC_CBR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cqp</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_RC_CONSTQP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>twopass</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_RC_VBR_HQ</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_RC_VBR_MINQP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>&amp;</operator> <name>RC_MODE_DEPRECATED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Specified rc mode is deprecated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"\tll_2pass_quality -&gt; cbr_ld_hq\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"\tll_2pass_size -&gt; cbr_hq\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"\tvbr_2pass -&gt; vbr_hq\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"\tvbr_minqp -&gt; (no replacement)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>&amp;=</operator> <operator>~</operator><name>RC_MODE_DEPRECATED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NVENC_LOSSLESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_lossless</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nvenc_override_rate_control</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>rateControlMode</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_RC_VBR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_vbr</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>vbvBufferSize</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>vbvBufferSize</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>aq</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>enableAQ</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>aqStrength</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>aq_strength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"AQ enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>temporal_aq</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>enableTemporalAQ</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Temporal AQ enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_lookahead</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lkd_bound</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>async_depth</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameIntervalP</name></name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lkd_bound</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Lookahead not enabled. Increase buffer delay (-delay).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>enableLookahead</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>lookaheadDepth</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_lookahead</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lkd_bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>disableIadapt</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>no_scenecut</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>disableBadapt</name></name> <operator>=</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>b_adapt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"Lookahead enabled: depth %d, scenecut %s, B-adapt %s.\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>lookaheadDepth</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>disableIadapt</name></name></expr> ?</condition><then> <expr><literal type="string">"disabled"</literal></expr> </then><else>: <expr><literal type="string">"enabled"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>disableBadapt</name></name></expr> ?</condition><then> <expr><literal type="string">"disabled"</literal></expr> </then><else>: <expr><literal type="string">"enabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>strict_gop</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>strictGOPTarget</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Strict GOP target enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nonref_p</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>enableNonRefP</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zerolatency</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>zeroReorderDelay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_quality</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>quality</name></name> <operator>*</operator> <literal type="number">256.0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>targetQuality</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>tmp_quality</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>targetQualityLSB</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>tmp_quality</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_setup_h264_config</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CONFIG</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CONFIG_H264</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>encodeCodecConfig</name><operator>.</operator><name>h264Config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CONFIG_H264_VUI_PARAMETERS</name> <modifier>*</modifier></type><name>vui</name> <init>= <expr><operator>&amp;</operator><name><name>h264</name><operator>-&gt;</operator><name>h264VUIParameters</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colourMatrix</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colourPrimaries</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>transferCharacteristics</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>videoFullRangeFlag</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name>

<operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ420P</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ422P</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ444P</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colourDescriptionPresentFlag</name></name> <operator>=</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>videoSignalTypePresentFlag</name></name> <operator>=</operator>

<operator>(</operator><name><name>vui</name><operator>-&gt;</operator><name>colourDescriptionPresentFlag</name></name>

<operator>||</operator> <name><name>vui</name><operator>-&gt;</operator><name>videoFormat</name></name> <operator>!=</operator> <literal type="number">5</literal>

<operator>||</operator> <name><name>vui</name><operator>-&gt;</operator><name>videoFullRangeFlag</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>sliceMode</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>sliceModeData</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>disableSPSPPS</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>repeatSPSPPS</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>outputAUD</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>dpb_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>maxNumRefFrames</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dpb_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>idrPeriod</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>gopLength</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_CBR</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>rateControlMode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>outputBufferingPeriodSEI</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>outputPictureTimingSEI</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>rateControlMode</name></name> <operator>==</operator> <name>NV_ENC_PARAMS_RC_CBR_LOWDELAY_HQ</name> <operator>||</operator>

<name><name>cc</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>rateControlMode</name></name> <operator>==</operator> <name>NV_ENC_PARAMS_RC_CBR_HQ</name> <operator>||</operator>

<name><name>cc</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>rateControlMode</name></name> <operator>==</operator> <name>NV_ENC_PARAMS_RC_VBR_HQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>adaptiveTransformMode</name></name> <operator>=</operator> <name>NV_ENC_H264_ADAPTIVE_TRANSFORM_ENABLE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>fmoMode</name></name> <operator>=</operator> <name>NV_ENC_H264_FMO_DISABLE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NVENC_LOSSLESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>qpPrimeYZeroTransformBypassFlag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NV_ENC_H264_PROFILE_BASELINE</name></expr>:</case>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_H264_PROFILE_BASELINE_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_H264_BASELINE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_H264_PROFILE_MAIN</name></expr>:</case>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_H264_PROFILE_MAIN_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_H264_MAIN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_H264_PROFILE_HIGH</name></expr>:</case>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_H264_PROFILE_HIGH_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_H264_HIGH</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_H264_PROFILE_HIGH_444P</name></expr>:</case>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_H264_PROFILE_HIGH_444_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_H264_PROFILE_HIGH_444_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>chromaFormatIDC</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>coder</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>entropyCodingMode</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>coder</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVENC_HAVE_BFRAME_REF_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>useBFramesAsRef</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_ref_mode</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVENC_HAVE_MULTIPLE_REF_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>numRefL0</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>numRefL1</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_setup_hevc_config</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CONFIG</name> <modifier>*</modifier></type><name>cc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CONFIG_HEVC</name> <modifier>*</modifier></type><name>hevc</name> <init>= <expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>encodeCodecConfig</name><operator>.</operator><name>hevcConfig</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CONFIG_HEVC_VUI_PARAMETERS</name> <modifier>*</modifier></type><name>vui</name> <init>= <expr><operator>&amp;</operator><name><name>hevc</name><operator>-&gt;</operator><name>hevcVUIParameters</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colourMatrix</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colourPrimaries</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>transferCharacteristics</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>videoFullRangeFlag</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name>

<operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ420P</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ422P</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUVJ444P</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>colourDescriptionPresentFlag</name></name> <operator>=</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vui</name><operator>-&gt;</operator><name>videoSignalTypePresentFlag</name></name> <operator>=</operator>

<operator>(</operator><name><name>vui</name><operator>-&gt;</operator><name>colourDescriptionPresentFlag</name></name>

<operator>||</operator> <name><name>vui</name><operator>-&gt;</operator><name>videoFormat</name></name> <operator>!=</operator> <literal type="number">5</literal>

<operator>||</operator> <name><name>vui</name><operator>-&gt;</operator><name>videoFullRangeFlag</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>sliceMode</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>sliceModeData</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>disableSPSPPS</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>repeatSPSPPS</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>outputAUD</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>dpb_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>maxNumRefFramesInDPB</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dpb_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>idrPeriod</name></name> <operator>=</operator> <name><name>cc</name><operator>-&gt;</operator><name>gopLength</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_CBR</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>rateControlMode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>outputBufferingPeriodSEI</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>outputPictureTimingSEI</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NV_ENC_HEVC_PROFILE_MAIN</name></expr>:</case>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_HEVC_PROFILE_MAIN_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_HEVC_MAIN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_HEVC_PROFILE_MAIN_10</name></expr>:</case>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_HEVC_PROFILE_MAIN10_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_HEVC_MAIN_10</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_HEVC_PROFILE_REXT</name></expr>:</case>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_HEVC_PROFILE_FREXT_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_HEVC_REXT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>IS_10BIT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_HEVC_PROFILE_MAIN10_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_HEVC_MAIN_10</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_YUV444</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cc</name><operator>-&gt;</operator><name>profileGUID</name></name> <operator>=</operator> <name>NV_ENC_HEVC_PROFILE_FREXT_GUID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_HEVC_REXT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>chromaFormatIDC</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_YUV444</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>pixelBitDepthMinus8</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_10BIT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>tier</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tier</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVENC_HAVE_HEVC_BFRAME_REF_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>useBFramesAsRef</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_ref_mode</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVENC_HAVE_MULTIPLE_REF_FRAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>numRefL0</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hevc</name><operator>-&gt;</operator><name>numRefL1</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_setup_codec_config</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<return>return <expr><call><name>nvenc_setup_h264_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<return>return <expr><call><name>nvenc_setup_hevc_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_dar</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dh</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sw</name></decl>, <decl><type ref="prev"/><name>sh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sw</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sw</name> <operator>*=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sh</name> <operator>*=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_setup_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_PRESET_CONFIG</name></type> <name>preset_config</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>nv_status</name> <init>= <expr><name>NV_ENC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCPBProperties</name> <modifier>*</modifier></type><name>cpb_props</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dw</name></decl>, <decl><type ref="prev"/><name>dh</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_CONFIG_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_INITIALIZE_PARAMS_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>encodeHeight</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>encodeWidth</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>encodeConfig</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nvenc_map_preset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preset_config</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_PRESET_CONFIG_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preset_config</name><operator>.</operator><name>presetCfg</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_CONFIG_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncGetEncodePresetConfig</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>encodeGUID</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>presetGUID</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>preset_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"Cannot get the preset configuration"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>preset_config</name><operator>.</operator><name>presetCfg</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_CONFIG_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_dar</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>darHeight</name></name> <operator>=</operator> <name>dh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>darWidth</name></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>frameRateNum</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>frameRateDen</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>enableEncodeAsync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>enablePTD</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>weighted_pred</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>enableWeightedPrediction</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>bluray_compat</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dpb_size</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>NV_ENC_LEVEL_HEVC_51</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tier</name></name> <operator>=</operator> <name>NV_ENC_TIER_HEVC_HIGH</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameIntervalP</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>gopLength</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameIntervalP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>gopLength</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nvenc_recalc_surfaces</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nvenc_setup_rate_control</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameFieldMode</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_FRAME_FIELD_MODE_FIELD</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameFieldMode</name></name> <operator>=</operator> <name>NV_ENC_PARAMS_FRAME_FIELD_MODE_FRAME</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_setup_codec_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_push_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncInitializeEncoder</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"InitializeEncoder failed"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NVENC_HAVE_CUSTREAM_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncSetIOCudaStreams</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cu_stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cu_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"SetIOCudaStreams failed"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>frameIntervalP</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cpb_props</name> <operator>=</operator> <call><name>ff_add_cpb_side_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cpb_props</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>max_bitrate</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>maxBitRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>avg_bitrate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpb_props</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>vbvBufferSize</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>NV_ENC_BUFFER_FORMAT</name></type> <name>nvenc_map_buffer_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>pix_fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<return>return <expr><name>NV_ENC_BUFFER_FORMAT_YV12_PL</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>

<return>return <expr><name>NV_ENC_BUFFER_FORMAT_NV12_PL</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_P010</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_P016</name></expr>:</case>

<return>return <expr><name>NV_ENC_BUFFER_FORMAT_YUV420_10BIT</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV444P</name></expr>:</case>

<return>return <expr><name>NV_ENC_BUFFER_FORMAT_YUV444_PL</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUV444P16</name></expr>:</case>

<return>return <expr><name>NV_ENC_BUFFER_FORMAT_YUV444_10BIT</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_0RGB32</name></expr>:</case>

<return>return <expr><name>NV_ENC_BUFFER_FORMAT_ARGB</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_0BGR32</name></expr>:</case>

<return>return <expr><name>NV_ENC_BUFFER_FORMAT_ABGR</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>NV_ENC_BUFFER_FORMAT_UNDEFINED</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_alloc_surface</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencSurface</name><modifier>*</modifier></type> <name>tmp_surface</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>nv_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CREATE_BITSTREAM_BUFFER</name></type> <name>allocOut</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>allocOut</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_CREATE_BITSTREAM_BUFFER_VER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>in_ref</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>in_ref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>NV_ENC_CREATE_INPUT_BUFFER</name></type> <name>allocSurf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>=</operator> <call><name>nvenc_map_buffer_format</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>==</operator> <name>NV_ENC_BUFFER_FORMAT_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid input pixel format: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>allocSurf</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_CREATE_INPUT_BUFFER_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>allocSurf</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>allocSurf</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>allocSurf</name><operator>.</operator><name>bufferFmt</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>format</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncCreateInputBuffer</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocSurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"CreateInputBuffer failed"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>input_surface</name> <operator>=</operator> <name><name>allocSurf</name><operator>.</operator><name>inputBuffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name><name>allocSurf</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <name><name>allocSurf</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncCreateBitstreamBuffer</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>allocOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"CreateBitstreamBuffer failed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_CUDA</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncDestroyInputBuffer</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>input_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>in_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>output_surface</name> <operator>=</operator> <name><name>allocOut</name><operator>.</operator><name>bitstreamBuffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name><name>allocOut</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unused_surface_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_surface</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_surface</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_setup_surfaces</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>res2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unused_surface_queue</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NvencSurface</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>unused_surface_queue</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_queue</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NvencSurface</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_queue</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_ready_queue</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NvencSurface</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_ready_queue</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_push_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>nvenc_alloc_surface</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<label><name>fail</name>:</label>

<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res2</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>nvenc_setup_extradata</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>nv_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>outSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tmpHeader</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_SEQUENCE_PARAM_PAYLOAD</name></type> <name>payload</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>payload</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_SEQUENCE_PARAM_PAYLOAD_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>payload</name><operator>.</operator><name>spsppsBuffer</name></name> <operator>=</operator> <name>tmpHeader</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>payload</name><operator>.</operator><name>inBufferSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmpHeader</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>payload</name><operator>.</operator><name>outSPSPPSPayloadSize</name></name> <operator>=</operator> <operator>&amp;</operator><name>outSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncGetSequenceParams</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"GetSequenceParams failed"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>outSize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>outSize</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>tmpHeader</name></expr></argument>, <argument><expr><name>outSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_nvenc_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>NV_ENC_PIC_PARAMS</name></type> <name>params</name> <init>= <expr><block>{ <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>NV_ENC_PIC_PARAMS_VER</name></expr>,

<expr><operator>.</operator><name>encodePicFlags</name> <operator>=</operator> <name>NV_ENC_PIC_FLAG_EOS</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_push_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncEncodePicture</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_ready_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>unused_surface_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_registered_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mapped</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncUnmapInputResource</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>in_map</name><operator>.</operator><name>mappedResource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncUnregisterResource</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_registered_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_CUDA</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncDestroyInputBuffer</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>input_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncDestroyBitstreamBuffer</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>output_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>surfaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncDestroyEncoder</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context_internal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK_CU</name><argument_list>(<argument><expr><call><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name><operator>-&gt;</operator><name>cuCtxDestroy</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context_internal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cu_context</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cu_context_internal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ID3D11Device_Release</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>nvenc_free_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_dl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cuda_free_functions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>cuda_dl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_device_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Nvenc unloaded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_nvenc_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"hw_frames_ctx must be set when using GPU frames as input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frames_ctx</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"hw_frames_ctx must match the GPU frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>data_pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_load_libraries</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_setup_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_setup_encoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_setup_surfaces</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>nvenc_setup_extradata</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>NvencSurface</name> <modifier>*</modifier></type><name>get_free_frame</name><parameter_list>(<parameter><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencSurface</name> <modifier>*</modifier></type><name>tmp_surf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unused_surface_queue</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unused_surface_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_surf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_surf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tmp_surf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_copy_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>NvencSurface</name> <modifier>*</modifier></type><name>nv_surface</name></decl></parameter>,

<parameter><decl><type><name>NV_ENC_LOCK_INPUT_BUFFER</name> <modifier>*</modifier></type><name>lock_buffer_params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name><name>lock_buffer_params</name><operator>-&gt;</operator><name>pitch</name></name></expr>,

<expr><name><name>lock_buffer_params</name><operator>-&gt;</operator><name>pitch</name></name></expr>,

<expr><name><name>lock_buffer_params</name><operator>-&gt;</operator><name>pitch</name></name></expr>,

<expr><name><name>lock_buffer_params</name><operator>-&gt;</operator><name>pitch</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst_linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dst_linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_image_fill_pointers</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>nv_surface</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,

<argument><expr><name><name>lock_buffer_params</name><operator>-&gt;</operator><name>bufferDataPtr</name></name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name><name>dst_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_find_free_reg_resource</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>nv_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>first_round</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_registered_frames</name></name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>first_round</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>first_round</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>first_round</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_registered_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mapped</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regptr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first_round</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncUnregisterResource</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"Failed unregistering unused input resource"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>regptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_registered_frames</name></name><operator>++</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many registered CUDA frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_register_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_REGISTER_RESOURCE</name></type> <name>reg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_registered_frames</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr_index</name> <operator>==</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>nvenc_find_free_reg_resource</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>idx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_REGISTER_RESOURCE_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>resourceToRegister</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>resourceType</name></name> <operator>=</operator> <name>NV_ENC_INPUT_RESOURCE_TYPE_CUDADEVICEPTR</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>resourceType</name></name> <operator>=</operator> <name>NV_ENC_INPUT_RESOURCE_TYPE_DIRECTX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>subResourceIndex</name></name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>reg</name><operator>.</operator><name>bufferFormat</name></name> <operator>=</operator> <call><name>nvenc_map_buffer_format</name><argument_list>(<argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>reg</name><operator>.</operator><name>bufferFormat</name></name> <operator>==</operator> <name>NV_ENC_BUFFER_FORMAT_UNDEFINED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid input pixel format: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncRegisterResource</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"Error registering an input resource"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>ptr_index</name> <operator>=</operator> <name><name>reg</name><operator>.</operator><name>subResourceIndex</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>regptr</name> <operator>=</operator> <name><name>reg</name><operator>.</operator><name>registeredResource</name></name></expr>;</expr_stmt>

<return>return <expr><name>idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_upload_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>NvencSurface</name> <modifier>*</modifier></type><name>nvenc_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>nv_status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>reg_idx</name> <init>= <expr><call><name>nvenc_register_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reg_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not register an input HW frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>reg_idx</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>nvenc_frame</name><operator>-&gt;</operator><name>in_ref</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>reg_idx</name></expr>]</index></name><operator>.</operator><name>mapped</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>reg_idx</name></expr>]</index></name><operator>.</operator><name><name>in_map</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_MAP_INPUT_RESOURCE_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>reg_idx</name></expr>]</index></name><operator>.</operator><name><name>in_map</name><operator>.</operator><name>registeredResource</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>reg_idx</name></expr>]</index></name><operator>.</operator><name>regptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncMapInputResource</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>reg_idx</name></expr>]</index></name><operator>.</operator><name>in_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>nvenc_frame</name><operator>-&gt;</operator><name>in_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"Error mapping an input resource"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>reg_idx</name></expr>]</index></name><operator>.</operator><name>mapped</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nvenc_frame</name><operator>-&gt;</operator><name>reg_idx</name></name> <operator>=</operator> <name>reg_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nvenc_frame</name><operator>-&gt;</operator><name>input_surface</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>reg_idx</name></expr>]</index></name><operator>.</operator><name><name>in_map</name><operator>.</operator><name>mappedResource</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nvenc_frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name>reg_idx</name></expr>]</index></name><operator>.</operator><name><name>in_map</name><operator>.</operator><name>mappedBufferFmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nvenc_frame</name><operator>-&gt;</operator><name>pitch</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>NV_ENC_LOCK_INPUT_BUFFER</name></type> <name>lockBufferParams</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lockBufferParams</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_LOCK_INPUT_BUFFER_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lockBufferParams</name><operator>.</operator><name>inputBuffer</name></name> <operator>=</operator> <name><name>nvenc_frame</name><operator>-&gt;</operator><name>input_surface</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncLockInputBuffer</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lockBufferParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"Failed locking nvenc input buffer"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>nvenc_frame</name><operator>-&gt;</operator><name>pitch</name></name> <operator>=</operator> <name><name>lockBufferParams</name><operator>.</operator><name>pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_copy_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nvenc_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lockBufferParams</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncUnlockInputBuffer</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>nvenc_frame</name><operator>-&gt;</operator><name>input_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"Failed unlocking input buffer!"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nvenc_codec_specific_pic_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>NV_ENC_PIC_PARAMS</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,

<parameter><decl><type><name>NV_ENC_SEI_PAYLOAD</name> <modifier>*</modifier></type><name>sei_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>codecPicParams</name><operator>.</operator><name>h264PicParams</name><operator>.</operator><name>sliceMode</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>encodeCodecConfig</name><operator>.</operator><name>h264Config</name><operator>.</operator><name>sliceMode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>codecPicParams</name><operator>.</operator><name>h264PicParams</name><operator>.</operator><name>sliceModeData</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>encodeCodecConfig</name><operator>.</operator><name>h264Config</name><operator>.</operator><name>sliceModeData</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sei_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>codecPicParams</name><operator>.</operator><name>h264PicParams</name><operator>.</operator><name>seiPayloadArray</name></name> <operator>=</operator> <name>sei_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>codecPicParams</name><operator>.</operator><name>h264PicParams</name><operator>.</operator><name>seiPayloadArrayCnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>codecPicParams</name><operator>.</operator><name>hevcPicParams</name><operator>.</operator><name>sliceMode</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>encodeCodecConfig</name><operator>.</operator><name>hevcConfig</name><operator>.</operator><name>sliceMode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>codecPicParams</name><operator>.</operator><name>hevcPicParams</name><operator>.</operator><name>sliceModeData</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>encodeCodecConfig</name><operator>.</operator><name>hevcConfig</name><operator>.</operator><name>sliceModeData</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sei_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>codecPicParams</name><operator>.</operator><name>hevcPicParams</name><operator>.</operator><name>seiPayloadArray</name></name> <operator>=</operator> <name>sei_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>codecPicParams</name><operator>.</operator><name>hevcPicParams</name><operator>.</operator><name>seiPayloadArrayCnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>timestamp_queue_enqueue</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>timestamp_queue_dequeue</name><parameter_list>(<parameter><decl><type><name>AVFifoBuffer</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>timestamp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvenc_set_timestamp</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>NV_ENC_LOCK_BITSTREAM</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>params</name><operator>-&gt;</operator><name>outputTimeStamp</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>first_packet_output</name></name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ts0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ts1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ts0</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ts1</name></expr></argument> &gt;</argument_list></name> <name>INT64_MAX</name> <operator>+</operator> <name>ts0</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>ts0</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ts1</name> <operator>&lt;</operator> <name>INT64_MIN</name> <operator>+</operator> <name>ts0</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>ts1</name> <operator>-</operator> <name>ts0</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>delta</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ts0</name></expr></argument> &gt;</argument_list></name> <name>INT64_MAX</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>delta</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ts0</name> <operator>&lt;</operator> <name>INT64_MIN</name> <operator>+</operator> <name>delta</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>ts0</name> <operator>-</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_packet_output</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <call><name>timestamp_queue_dequeue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>process_output_surface</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>NvencSurface</name> <modifier>*</modifier></type><name>tmpoutsurf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>slice_mode_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>slice_offsets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_LOCK_BITSTREAM</name></type> <name>lock_params</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>nv_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPictureType</name></name></type> <name>pict_type</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<expr_stmt><expr><name>slice_mode_data</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>encodeCodecConfig</name><operator>.</operator><name>h264Config</name><operator>.</operator><name>sliceModeData</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_H265</name></expr>:</case>

<expr_stmt><expr><name>slice_mode_data</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>encodeCodecConfig</name><operator>.</operator><name>hevcConfig</name><operator>.</operator><name>sliceModeData</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown codec name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>slice_offsets</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>slice_mode_data</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>slice_offsets</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_offsets</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lock_params</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_LOCK_BITSTREAM_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_params</name><operator>.</operator><name>doNotWait</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_params</name><operator>.</operator><name>outputBitstream</name></name> <operator>=</operator> <name><name>tmpoutsurf</name><operator>-&gt;</operator><name>output_surface</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lock_params</name><operator>.</operator><name>sliceOffsets</name></name> <operator>=</operator> <name>slice_offsets</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncLockBitstream</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"Failed locking bitstream buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr> ?</condition><then>

<expr><call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>lock_params</name><operator>.</operator><name>bitstreamSizeInBytes</name></name></expr></argument>, <argument><expr><name><name>lock_params</name><operator>.</operator><name>bitstreamSizeInBytes</name></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>lock_params</name><operator>.</operator><name>bitstreamSizeInBytes</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncUnlockBitstream</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>tmpoutsurf</name><operator>-&gt;</operator><name>output_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>lock_params</name><operator>.</operator><name>bitstreamBufferPtr</name></name></expr></argument>, <argument><expr><name><name>lock_params</name><operator>.</operator><name>bitstreamSizeInBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncUnlockBitstream</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>tmpoutsurf</name><operator>-&gt;</operator><name>output_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"Failed unlocking bitstream buffer, expect the gates of mordor to open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_CUDA</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_D3D11</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name><name>tmpoutsurf</name><operator>-&gt;</operator><name>reg_idx</name></name></expr>]</index></name><operator>.</operator><name>mapped</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name><name>tmpoutsurf</name><operator>-&gt;</operator><name>reg_idx</name></name></expr>]</index></name><operator>.</operator><name>mapped</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncUnmapInputResource</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name><name>tmpoutsurf</name><operator>-&gt;</operator><name>reg_idx</name></name></expr>]</index></name><operator>.</operator><name><name>in_map</name><operator>.</operator><name>mappedResource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"Failed unmapping input resource"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>registered_frames</name><index>[<expr><name><name>tmpoutsurf</name><operator>-&gt;</operator><name>reg_idx</name></name></expr>]</index></name><operator>.</operator><name>mapped</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>tmpoutsurf</name><operator>-&gt;</operator><name>in_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpoutsurf</name><operator>-&gt;</operator><name>input_surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>lock_params</name><operator>.</operator><name>pictureType</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>NV_ENC_PIC_TYPE_IDR</name></expr>:</case>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<case>case <expr><name>NV_ENC_PIC_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_PIC_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_PIC_TYPE_B</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NV_ENC_PIC_TYPE_BI</name></expr>:</case>

<expr_stmt><expr><name>pict_type</name> <operator>=</operator> <name>AV_PICTURE_TYPE_BI</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown picture type encountered, expect the output to be broken.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Please report this error and include as much information on how to reproduce it as possible.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>pict_type</name></name> <init>= <expr><name>pict_type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>ff_side_data_set_encoder_stats</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>lock_params</name><operator>.</operator><name>frameAvgQP</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>FF_QP2LAMBDA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pict_type</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_set_timestamp</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_params</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>slice_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>timestamp_queue_dequeue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error2</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>slice_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>output_ready</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_ready</name></decl>, <decl><type ref="prev"/><name>nb_pending</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flush</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_ready</name> <operator>=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_ready_queue</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NvencSurface</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_pending</name> <operator>=</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_queue</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NvencSurface</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>nb_ready</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>nb_ready</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>nb_ready</name> <operator>+</operator> <name>nb_pending</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>async_depth</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reconfig_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name><operator>.</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_RECONFIGURE_PARAMS</name></type> <name>params</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needs_reconfig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needs_encode_config</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reconfig_bitrate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>reconfig_dar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dw</name></decl>, <decl><type ref="prev"/><name>dh</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_RECONFIGURE_PARAMS_VER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>compute_dar</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dw</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>darWidth</name></name> <operator>||</operator> <name>dh</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>darHeight</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"aspect ratio change (DAR): %d:%d -&gt; %d:%d\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>darWidth</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>darHeight</name></name></expr></argument>, <argument><expr><name>dw</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>darHeight</name></name> <operator>=</operator> <name>dh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>darWidth</name></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>needs_reconfig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reconfig_dar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name></name> <operator>!=</operator> <name>NV_ENC_PARAMS_RC_CONSTQP</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>support_dyn_bitrate</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"avg bitrate change: %d -&gt; %d\n"</literal></expr></argument>,

<argument><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reconfig_bitrate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>maxBitRate</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"max bitrate change: %d -&gt; %d\n"</literal></expr></argument>,

<argument><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>maxBitRate</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>maxBitRate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reconfig_bitrate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>vbvBufferSize</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>,

<argument><expr><literal type="string">"vbv buffer size change: %d -&gt; %d\n"</literal></expr></argument>,

<argument><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>vbvBufferSize</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>vbvBufferSize</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reconfig_bitrate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reconfig_bitrate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>resetEncoder</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>forceIDR</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>needs_encode_config</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>needs_reconfig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>needs_encode_config</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>needs_reconfig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncReconfigureEncoder</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"failed to reconfigure nvenc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>reconfig_dar</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>darHeight</name></name> <operator>=</operator> <name>dh</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>init_encode_params</name><operator>.</operator><name>darWidth</name></name> <operator>=</operator> <name>dw</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reconfig_bitrate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>averageBitRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>maxBitRate</name></name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>maxBitRate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encode_config</name><operator>.</operator><name>rcParams</name><operator>.</operator><name>vbvBufferSize</name></name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>reInitEncodeParams</name><operator>.</operator><name>encodeConfig</name><operator>-&gt;</operator><name>rcParams</name><operator>.</operator><name>vbvBufferSize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_nvenc_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NVENCSTATUS</name></type> <name>nv_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencSurface</name> <modifier>*</modifier></type><name>tmp_out_surf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in_surf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_SEI_PAYLOAD</name> <modifier>*</modifier></type><name>sei_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sei_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name> <modifier>*</modifier></type><name>dl_fn</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name> <modifier>*</modifier></type><name>p_nvenc</name> <init>= <expr><operator>&amp;</operator><name><name>dl_fn</name><operator>-&gt;</operator><name>nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_PIC_PARAMS</name></type> <name>pic_params</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>NV_ENC_PIC_PARAMS_VER</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>cu_context</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder_flushing</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>draining</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder_flushing</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_packet_output</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_surf</name> <operator>=</operator> <call><name>get_free_frame</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_surf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_push_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>reconfig_encoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_upload_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>in_surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res2</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>inputBuffer</name></name> <operator>=</operator> <name><name>in_surf</name><operator>-&gt;</operator><name>input_surface</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>bufferFmt</name></name> <operator>=</operator> <name><name>in_surf</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>inputWidth</name></name> <operator>=</operator> <name><name>in_surf</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>inputHeight</name></name> <operator>=</operator> <name><name>in_surf</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>inputPitch</name></name> <operator>=</operator> <name><name>in_surf</name><operator>-&gt;</operator><name>pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>outputBitstream</name></name> <operator>=</operator> <name><name>in_surf</name><operator>-&gt;</operator><name>output_surface</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_INTERLACED_DCT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>pictureStruct</name></name> <operator>=</operator> <name>NV_ENC_PIC_STRUCT_FIELD_TOP_BOTTOM</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>pictureStruct</name></name> <operator>=</operator> <name>NV_ENC_PIC_STRUCT_FIELD_BOTTOM_TOP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>pictureStruct</name></name> <operator>=</operator> <name>NV_ENC_PIC_STRUCT_FRAME</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>forced_idr</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>encodePicFlags</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>forced_idr</name></name></expr> ?</condition><then> <expr><name>NV_ENC_PIC_FLAG_FORCEIDR</name></expr> </then><else>: <expr><name>NV_ENC_PIC_FLAG_FORCEINTRA</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>encodePicFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>inputTimeStamp</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>a53_cc</name></name> <operator>&amp;&amp;</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_A53_CC</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_alloc_a53_sei</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NV_ENC_SEI_PAYLOAD</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sei_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sei_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory for closed captions, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sei_data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>-&gt;</operator><name>payloadSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>sei_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>-&gt;</operator><name>payloadType</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>-&gt;</operator><name>payload</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>sei_data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>nvenc_codec_specific_pic_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_params</name></expr></argument>, <argument><expr><name>sei_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pic_params</name><operator>.</operator><name>encodePicFlags</name></name> <operator>=</operator> <name>NV_ENC_PIC_FLAG_EOS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder_flushing</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_push_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nv_status</name> <operator>=</operator> <call><name><name>p_nvenc</name><operator>-&gt;</operator><name>nvEncEncodePicture</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>sei_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>!=</operator> <name>NV_ENC_SUCCESS</name> <operator>&amp;&amp;</operator>

<name>nv_status</name> <operator>!=</operator> <name>NV_ENC_ERR_NEED_MORE_INPUT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>nvenc_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>nv_status</name></expr></argument>, <argument><expr><literal type="string">"EncodePicture failed!"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_surf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>in_surf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>timestamp_queue_enqueue</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>initial_pts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nv_status</name> <operator>==</operator> <name>NV_ENC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_queue</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_out_surf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_out_surf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_ready_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_out_surf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_out_surf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_nvenc_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencSurface</name> <modifier>*</modifier></type><name>tmp_out_surf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>cu_context</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>d3d11_device</name></name><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>nvencoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>output_ready</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder_flushing</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_surface_ready_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_out_surf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_out_surf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>nvenc_push_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>process_output_surface</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>tmp_out_surf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res2</name> <operator>=</operator> <call><name>nvenc_pop_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res2</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>unused_surface_queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_out_surf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_out_surf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder_flushing</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_nvenc_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NvencContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder_flushing</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_nvenc_send_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ff_nvenc_receive_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>res</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_nvenc_encode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_nvenc_send_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
