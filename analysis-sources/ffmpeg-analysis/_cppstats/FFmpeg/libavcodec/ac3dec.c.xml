<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ac3dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/downmix_info.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac_ac3_parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3_parser_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3dec_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kbdwin.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><literal type="number">128</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>b1_mantissas</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>b2_mantissas</name><index>[<expr><literal type="number">128</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>b3_mantissas</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>b4_mantissas</name><index>[<expr><literal type="number">128</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>b5_mantissas</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>quantization_tab</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>USE_FIXED</name><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>dynamic_range_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>ff_ac3_heavy_dynamic_range_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>gain_levels</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>LEVEL_PLUS_3DB</name></expr>,

<expr><name>LEVEL_PLUS_1POINT5DB</name></expr>,

<expr><name>LEVEL_ONE</name></expr>,

<expr><name>LEVEL_MINUS_1POINT5DB</name></expr>,

<expr><name>LEVEL_MINUS_3DB</name></expr>,

<expr><name>LEVEL_MINUS_4POINT5DB</name></expr>,

<expr><name>LEVEL_MINUS_6DB</name></expr>,

<expr><name>LEVEL_ZERO</name></expr>,

<expr><name>LEVEL_MINUS_9DB</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>gain_levels_lfe</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">3.162275</literal></expr>, <expr><literal type="number">2.818382</literal></expr>, <expr><literal type="number">2.511886</literal></expr>, <expr><literal type="number">2.238719</literal></expr>, <expr><literal type="number">1.995261</literal></expr>, <expr><literal type="number">1.778278</literal></expr>, <expr><literal type="number">1.584893</literal></expr>,

<expr><literal type="number">1.412536</literal></expr>, <expr><literal type="number">1.258924</literal></expr>, <expr><literal type="number">1.122018</literal></expr>, <expr><literal type="number">1.000000</literal></expr>, <expr><literal type="number">0.891251</literal></expr>, <expr><literal type="number">0.794328</literal></expr>, <expr><literal type="number">0.707946</literal></expr>,

<expr><literal type="number">0.630957</literal></expr>, <expr><literal type="number">0.562341</literal></expr>, <expr><literal type="number">0.501187</literal></expr>, <expr><literal type="number">0.446683</literal></expr>, <expr><literal type="number">0.398107</literal></expr>, <expr><literal type="number">0.354813</literal></expr>, <expr><literal type="number">0.316227</literal></expr>,

<expr><literal type="number">0.281838</literal></expr>, <expr><literal type="number">0.251188</literal></expr>, <expr><literal type="number">0.223872</literal></expr>, <expr><literal type="number">0.199526</literal></expr>, <expr><literal type="number">0.177828</literal></expr>, <expr><literal type="number">0.158489</literal></expr>, <expr><literal type="number">0.141253</literal></expr>,

<expr><literal type="number">0.125892</literal></expr>, <expr><literal type="number">0.112201</literal></expr>, <expr><literal type="number">0.100000</literal></expr>, <expr><literal type="number">0.089125</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ac3_default_coeffs</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>, }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>, }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>

<name>symmetric_dequant</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>levels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>code</name> <operator>-</operator> <operator>(</operator><name>levels</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>levels</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>ac3_tables_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">25</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">25</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b1_mantissas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name><name>ff_ac3_ungroup_3_in_5_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b1_mantissas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name><name>ff_ac3_ungroup_3_in_5_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b1_mantissas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name><name>ff_ac3_ungroup_3_in_5_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b2_mantissas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b2_mantissas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b2_mantissas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b4_mantissas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b4_mantissas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name>i</name> <operator>%</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b3_mantissas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>b5_mantissas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>symmetric_dequant</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>USE_FIXED</name><operator>)</operator></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dynamic_range_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ff_ac3_heavy_dynamic_range_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x10</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ac3_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ac3_tables_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct_256</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct_512</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AC3_RENAME</name><argument_list>(<argument><expr><name>ff_kbd_window_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">5.0</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>USE_FIXED</name><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_alloc_fixed_dsp</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fmt_convert_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fmt_conv</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ff_ac3dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dith_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>USE_FIXED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_MONO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>downmixed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AC3_MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>xcfptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dlyptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ac3_parse_header</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dialog_normalization</name><index>[<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name><operator>)</operator><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dialog_normalization</name><index>[<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name><operator>)</operator><operator>-</operator><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dialog_normalization</name><index>[<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name><operator>)</operator><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>target_level</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>level_gain</name><index>[<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name><operator>)</operator><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>target_level</name></name> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>dialog_normalization</name><index>[<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name><operator>)</operator><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><literal type="number">6.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compression_exists</name><index>[<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name><operator>)</operator><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>heavy_dynamic_range</name><index>[<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name><operator>)</operator><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>AC3_HEAVY_RANGE</name><argument_list>(<argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block> while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>;</do>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>preferred_downmix</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>center_mix_level_ltrt</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level_ltrt</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>center_mix_level</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_frame_header</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AC3HeaderInfo</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_ac3_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>sr_code</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>sr_code</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>bitstream_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_mode</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>bitstream_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>channel_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>lfe_on</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>sr_shift</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>sr_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>superframe_size</name></name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>preferred_downmix</name></name> <operator>=</operator> <name>AC3_DMIXMOD_NOTINDICATED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>center_mix_level</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>center_mix_level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>center_mix_level_ltrt</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>surround_mix_level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level_ltrt</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mix_level_exists</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>num_blocks</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>substreamid</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>substreamid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>dolby_surround_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name> <operator>=</operator> <name>AC3_DSUREXMOD_NOTINDICATED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name> <operator>=</operator> <name>AC3_DHEADPHONMOD_NOTINDICATED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_exp_groups</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_id</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>snr_offset_strategy</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_switch_syntax</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_flag_syntax</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_allocation_syntax</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain_syntax</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_leak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dba_syntax</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>skip_syntax</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_aht</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_aht</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ac3_parse_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>CONFIG_EAC3_DECODER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>ff_eac3_parse_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"E-AC-3 support not compiled in\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_downmix_coeffs</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cmix</name> <init>= <expr><name><name>gain_levels</name><index>[<expr><name><name>s</name><operator>-&gt;</operator> <name>center_mix_level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>smix</name> <init>= <expr><name><name>gain_levels</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>norm0</name></decl>, <decl><type ref="prev"/><name>norm1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>downmix_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>AC3_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>AC3_MAX_CHANNELS</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>AC3_MAX_CHANNELS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gain_levels</name><index>[<expr><name><name>ac3_default_coeffs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gain_levels</name><index>[<expr><name><name>ac3_default_coeffs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cmix</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_2F1R</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_3F1R</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name>smix</name> <operator>*</operator> <name>LEVEL_MINUS_3DB</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_2F2R</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_3F2R</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>nf</name></expr>]</index></name> <operator>=</operator> <name><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>nf</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>smix</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>norm0</name> <operator>=</operator> <name>norm1</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>norm0</name> <operator>+=</operator> <name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm1</name> <operator>+=</operator> <name><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>norm0</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>norm0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm1</name> <operator>=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <name>norm1</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>norm0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name>norm1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_MONO</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<name><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>LEVEL_MINUS_3DB</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FIXR12</name><argument_list>(<argument><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FIXR12</name><argument_list>(<argument><expr><name><name>downmix_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_exponents</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp_strategy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ngrps</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>absexp</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>dexps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>grp</name></decl>, <decl><type ref="prev"/><name>group_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dexp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>expacc</name></decl>, <decl><type ref="prev"/><name>prevexp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>group_size</name> <operator>=</operator> <name>exp_strategy</name> <operator>+</operator> <operator>(</operator><name>exp_strategy</name> <operator>==</operator> <name>EXP_D45</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>grp</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>grp</name> <operator>&lt;</operator> <name>ngrps</name></expr>;</condition> <incr><expr><name>grp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>expacc</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expacc</name> <operator>&gt;=</operator> <literal type="number">125</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"expacc %d is out-of-range\n"</literal></expr></argument>, <argument><expr><name>expacc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dexp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>expacc</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>expacc</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ungroup_3_in_7_bits_tab</name><index>[<expr><name>expacc</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>prevexp</name> <operator>=</operator> <name>absexp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ngrps</name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>prevexp</name> <operator>+=</operator> <name><name>dexp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prevexp</name> <operator>&gt;</operator> <literal type="number">24U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"exponent %d is out-of-range\n"</literal></expr></argument>, <argument><expr><name>prevexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>group_size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>dexps</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>prevexp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dexps</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>prevexp</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>dexps</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>prevexp</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>dexps</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>prevexp</name></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_transform_coeffs_cpl</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bin</name></decl>, <decl><type ref="prev"/><name>band</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>band_start</name> <init>= <expr><name>bin</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band_end</name> <init>= <expr><name>bin</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_band_sizes</name><index>[<expr><name>band</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpl_coord</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cpl_coords</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bin</name> <operator>=</operator> <name>band_start</name></expr>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name>band_end</name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>=</operator>

<call><name>MULH</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><name>CPL_CH</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><name>cpl_coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>phase_flags</name><index>[<expr><name>band</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>bin</name> <operator>=</operator> <name>band_start</name></expr>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name>band_end</name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>band_end</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>mant_groups</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>b1_mant</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>b2_mant</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b4_mant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b4</name></decl>;</decl_stmt>

}</block></struct></type> <name>mant_groups</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_decode_transform_coeffs_ch</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch_index</name></decl></parameter>, <parameter><decl><type><name>mant_groups</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start_freq</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_freq</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>baps</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bap</name><index>[<expr><name>ch_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>exps</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>dexps</name><index>[<expr><name>ch_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>coeffs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><name>ch_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dither</name> <init>= <expr><operator>(</operator><name>ch_index</name> <operator>==</operator> <name>CPL_CH</name><operator>)</operator> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>dither_flag</name><index>[<expr><name>ch_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>freq</name> <operator>=</operator> <name>start_freq</name></expr>;</init> <condition><expr><name>freq</name> <operator>&lt;</operator> <name>end_freq</name></expr>;</condition> <incr><expr><name>freq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bap</name> <init>= <expr><name><name>baps</name><index>[<expr><name>freq</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mantissa</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>bap</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>dither</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dith_state</name></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><literal type="number">181</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">5931008</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>b1</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b1</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>b1_mant</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>b1</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <name><name>b1_mantissas</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b1_mant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b1_mantissas</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b1_mant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b1_mantissas</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b1</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>b2</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b2</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>b2_mant</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>b2</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <name><name>b2_mantissas</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b2_mant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b2_mantissas</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b2_mant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b2_mantissas</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b2</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <name><name>b3_mantissas</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>b4</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>b4_mant</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <name><name>b4_mantissas</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b4_mant</name></name> <operator>=</operator> <name><name>b4_mantissas</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>b4</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <name><name>b5_mantissas</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<if_stmt><if>if <condition>(<expr><name>bap</name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bap %d is invalid in plain AC-3\n"</literal></expr></argument>, <argument><expr><name>bap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bap</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mantissa</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_sbits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><name><name>quantization_tab</name><index>[<expr><name>bap</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">24</literal> <operator>-</operator> <name><name>quantization_tab</name><index>[<expr><name>bap</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>freq</name></expr>]</index></name> <operator>=</operator> <name>mantissa</name> <operator>&gt;&gt;</operator> <name><name>exps</name><index>[<expr><name>freq</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_dithering</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>dither_flag</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>bap</name><index>[<expr><name>CPL_CH</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_transform_coeffs_ch</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>mant_groups</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_uses_aht</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ac3_decode_transform_coeffs_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bin</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_EAC3_DECODER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blk</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_eac3_decode_transform_coeffs_aht_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pre_mantissa</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index><index>[<expr><name>blk</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>dexps</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bin</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>decode_transform_coeffs</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_cplchan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mant_groups</name></type> <name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>.</operator><name>b1</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>b2</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>b4</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>decode_transform_coeffs_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_cplchan</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_transform_coeffs_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>CPL_CH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calc_transform_coeffs_cpl</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>got_cplchan</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<do>do<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>end</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block>

while <condition>(<expr><operator>++</operator><name>end</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>;</do>

</block_content>}</block></for>

<expr_stmt><expr><call><name>remove_dithering</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_rematrixing</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bnd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>, <decl><type ref="prev"/><name>bndend</name></decl>;</decl_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rematrixing_flags</name><index>[<expr><name>bnd</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bndend</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>ff_ac3_rematrix_band_tab</name><index>[<expr><name>bnd</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ff_ac3_rematrix_band_tab</name><index>[<expr><name>bnd</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bndend</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp0</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp0</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>do_imdct</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_switch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTSample</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tmp_output</name></name> <operator>+</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>imdct_256</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct_256</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_output</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window_scaled</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_output</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_output</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>imdct_256</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct_256</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>imdct_512</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct_512</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_output</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window_scaled</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_output</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_output</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>ch</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tmp_output</name></name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FFTSample</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_upmix_delay</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channel_data_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AC3_CHMODE_DUALMONO</name></expr>:</case>

<case>case <expr><name>AC3_CHMODE_STEREO</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AC3_CHMODE_2F2R</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>channel_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>AC3_CHMODE_2F1R</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>channel_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AC3_CHMODE_3F2R</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>channel_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>AC3_CHMODE_3F1R</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>channel_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>AC3_CHMODE_3F</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channel_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>channel_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_band_structure</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eac3</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ecpl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_subband</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_subband</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>default_band_struct</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num_bands</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>band_sizes</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>band_struct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band_struct_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>subbnd</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>, <decl><type ref="prev"/><name>n_subbands</name></decl>, <decl><type ref="prev"/><name>n_bands</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bnd_sz</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>n_subbands</name> <operator>=</operator> <name>end_subband</name> <operator>-</operator> <name>start_subband</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blk</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>band_struct</name></expr></argument>, <argument><expr><name>default_band_struct</name></expr></argument>, <argument><expr><name>band_struct_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>band_struct_size</name> <operator>&gt;=</operator> <name>start_subband</name> <operator>+</operator> <name>n_subbands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>band_struct</name> <operator>+=</operator> <name>start_subband</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eac3</name> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>subbnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subbnd</name> <operator>&lt;</operator> <name>n_subbands</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>subbnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>band_struct</name><index>[<expr><name>subbnd</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bands</name> <operator>||</operator> <name>band_sizes</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>n_bands</name> <operator>=</operator> <name>n_subbands</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd_sz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>ecpl</name></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>subbnd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>subbnd</name> <operator>&lt;</operator> <name>n_subbands</name></expr>;</condition> <incr><expr><name>subbnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>subbnd_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>ecpl</name> <operator>&amp;&amp;</operator> <name>subbnd</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band_struct</name><index>[<expr><name>subbnd</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n_bands</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bnd_sz</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>+=</operator> <name>subbnd_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>bnd_sz</name><index>[<expr><operator>++</operator><name>bnd</name></expr>]</index></name> <operator>=</operator> <name>subbnd_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_bands</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>num_bands</name> <operator>=</operator> <name>n_bands</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>band_sizes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>band_sizes</name></expr></argument>, <argument><expr><name>bnd_sz</name></expr></argument>, <argument><expr><name>n_bands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>spx_strategy</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fbw_channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_start_freq</name></decl>, <decl><type ref="prev"/><name>dst_end_freq</name></decl>, <decl><type ref="prev"/><name>src_start_freq</name></decl>,

<decl><type ref="prev"/><name>start_subband</name></decl>, <decl><type ref="prev"/><name>end_subband</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_MONO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_spx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_spx</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>dst_start_freq</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_subband</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_subband</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start_subband</name> <operator>+=</operator> <name>start_subband</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end_subband</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_dst_end_freq</name></name> <operator>=</operator> <name><name>end_freq_inv_tab</name><index>[<expr><name>end_subband</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>end_subband</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end_subband</name> <operator>+=</operator> <name>end_subband</name> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst_start_freq</name> <operator>=</operator> <name>dst_start_freq</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src_start_freq</name> <operator>=</operator> <name>start_subband</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_end_freq</name> <operator>=</operator> <name>end_subband</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_subband</name> <operator>&gt;=</operator> <name>end_subband</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid spectral extension "</literal>

<literal type="string">"range (%d &gt;= %d)\n"</literal></expr></argument>, <argument><expr><name>start_subband</name></expr></argument>, <argument><expr><name>end_subband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_start_freq</name> <operator>&gt;=</operator> <name>src_start_freq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid spectral extension "</literal>

<literal type="string">"copy start bin (%d &gt;= %d)\n"</literal></expr></argument>, <argument><expr><name>dst_start_freq</name></expr></argument>, <argument><expr><name>src_start_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_dst_start_freq</name></name> <operator>=</operator> <name>dst_start_freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name> <operator>=</operator> <name>src_start_freq</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>USE_FIXED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_dst_end_freq</name></name> <operator>=</operator> <name>dst_end_freq</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_band_structure</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>start_subband</name></expr></argument>, <argument><expr><name>end_subband</name></expr></argument>,

<argument><expr><name>ff_eac3_default_spx_band_struct</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>num_spx_bands</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spx_band_sizes</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spx_band_struct</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>spx_band_struct</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>spx_coordinates</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fbw_channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_spx</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_spx_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>spx_blend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bin</name></decl>, <decl><type ref="prev"/><name>master_spx_coord</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_spx_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>spx_blend</name> <operator>=</operator> <call><name>AC3_SPX_BLEND</name><argument_list>(<argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>master_spx_coord</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_spx_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bandsize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>spx_band_sizes</name><index>[<expr><name>bnd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spx_coord_exp</name></decl>, <decl><type ref="prev"/><name>spx_coord_mant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>nratio</name></decl>, <decl><type ref="prev"/><name>sblend</name></decl>, <decl><type ref="prev"/><name>nblend</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>int64_t</name></type> <name>accu</name> <init>= <expr><operator>(</operator><operator>(</operator><name>bin</name> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bandsize</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator><operator>)</operator>

<operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>spx_dst_end_freq</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nratio</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>accu</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nratio</name> <operator>-=</operator> <name>spx_blend</name> <operator>&lt;&lt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nratio</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nblend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sblend</name> <operator>=</operator> <literal type="number">0x800000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nratio</name> <operator>&gt;</operator> <literal type="number">0x7fffff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nblend</name> <operator>=</operator> <literal type="number">14529495</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>sblend</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nblend</name> <operator>=</operator> <call><name>fixed_sqrt</name><argument_list>(<argument><expr><name>nratio</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>nblend</name> <operator>*</operator> <literal type="number">1859775393</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nblend</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">29</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sblend</name> <operator>=</operator> <call><name>fixed_sqrt</name><argument_list>(<argument><expr><literal type="number">0x800000</literal> <operator>-</operator> <name>nratio</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>float</name></type> <name>spx_coord</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nratio</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bin</name> <operator>+</operator> <operator>(</operator><name>bandsize</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_dst_end_freq</name></name><operator>)</operator> <operator>-</operator> <name>spx_blend</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nratio</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>nratio</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nblend</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">3.0f</literal> <operator>*</operator> <name>nratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>sblend</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>nratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>bin</name> <operator>+=</operator> <name>bandsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spx_coord_exp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>spx_coord_mant</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spx_coord_exp</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>spx_coord_mant</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>spx_coord_mant</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>spx_coord_mant</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">25</literal> <operator>-</operator> <name>spx_coord_exp</name> <operator>-</operator> <name>master_spx_coord</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>nblend</name> <operator>*</operator> <name>spx_coord_mant</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_noise_blend</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">22</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>accu</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>sblend</name> <operator>*</operator> <name>spx_coord_mant</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_signal_blend</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>accu</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">22</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>spx_coord</name> <operator>=</operator> <name>spx_coord_mant</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_noise_blend</name> <index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <name>nblend</name> <operator>*</operator> <name>spx_coord</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_signal_blend</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <name>sblend</name> <operator>*</operator> <name>spx_coord</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_spx_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>coupling_strategy</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bit_alloc_stages</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fbw_channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_mode</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bit_alloc_stages</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>AC3_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpl_start_subband</name></decl>, <decl><type ref="prev"/><name>cpl_end_subband</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_mode</name> <operator>&lt;</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"coupling not allowed in mono or dual-mono\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Enhanced coupling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_mode</name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>phase_flags_in_use</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cpl_start_subband</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cpl_end_subband</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>spx_in_use</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name> <operator>-</operator> <literal type="number">37</literal><operator>)</operator> <operator>/</operator> <literal type="number">12</literal></expr> </then><else>:

<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpl_start_subband</name> <operator>&gt;=</operator> <name>cpl_end_subband</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid coupling range (%d &gt;= %d)\n"</literal></expr></argument>,

<argument><expr><name>cpl_start_subband</name></expr></argument>, <argument><expr><name>cpl_end_subband</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>=</operator> <name>cpl_start_subband</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">37</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>=</operator> <name>cpl_end_subband</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">37</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_band_structure</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cpl_start_subband</name></expr></argument>,

<argument><expr><name>cpl_end_subband</name></expr></argument>,

<argument><expr><name>ff_eac3_default_cpl_band_struct</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_band_sizes</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_band_struct</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_band_struct</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_leak</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>phase_flags_in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>coupling_coordinates</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fbw_channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpl_coords_exist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>first_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>master_cpl_coord</name></decl>, <decl><type ref="prev"/><name>cpl_coord_exp</name></decl>, <decl><type ref="prev"/><name>cpl_coord_mant</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cpl_coords_exist</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>master_cpl_coord</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cpl_coord_exp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cpl_coord_mant</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpl_coord_exp</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_coords</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <name>cpl_coord_mant</name> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_coords</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cpl_coord_mant</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_coords</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <operator>(</operator><name>cpl_coord_exp</name> <operator>+</operator> <name>master_cpl_coord</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>blk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"new coupling coordinates must "</literal>

<literal type="string">"be present in block 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name> <operator>&amp;&amp;</operator> <name>cpl_coords_exist</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>phase_flags</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>phase_flags_in_use</name></name></expr> ?</condition><then> <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_audio_block</name><parameter_list>(<parameter><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fbw_channels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_mode</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>, <decl><type ref="prev"/><name>seg</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>different_transforms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>downmix_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpl_in_use</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bit_alloc_stages</name><index>[<expr><name>AC3_MAX_CHANNELS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>different_transforms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>block_switch_syntax</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_switch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_switch</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_switch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>different_transforms</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dither_flag_syntax</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dither_flag</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>range_bits</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>range</name> <init>= <expr><call><name>AC3_RANGE</name><argument_list>(<argument><expr><name>range_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>range_bits</name> <operator>&lt;=</operator> <literal type="number">127</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>drc_scale</name></name> <operator>&lt;=</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AC3_DYNAMIC_RANGE</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blk</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dynamic_range</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>AC3_DYNAMIC_RANGE1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>blk</name> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_in_use</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>spx_in_use</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>spx_strategy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>spx_in_use</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spx_in_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_spx</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_spx_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>spx_in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>spx_coordinates</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cpl_strategy_exists</name><index>[<expr><name>blk</name></expr>]</index></name></expr> </then><else>: <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>coupling_strategy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>bit_alloc_stages</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"new coupling strategy must "</literal>

<literal type="string">"be present in block 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cpl_in_use</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_in_use</name><index>[<expr><name>blk</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpl_in_use</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>coupling_coordinates</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_mode</name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blk</name><operator>)</operator> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cpl_in_use</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">61</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>==</operator> <literal type="number">37</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>spx_in_use</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name> <operator>&lt;=</operator> <literal type="number">61</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rematrixing_flags</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>blk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning: "</literal>

<literal type="string">"new rematrixing strategy not present in block 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>-</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>group_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_spx</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_src_start_freq</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bandwidth_code</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bandwidth_code</name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bandwidth code = %d &gt; 60\n"</literal></expr></argument>, <argument><expr><name>bandwidth_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>bandwidth_code</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">73</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>group_size</name> <operator>=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_exp_groups</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>group_size</name><operator>-</operator><literal type="number">4</literal><operator>)</operator> <operator>/</operator> <name>group_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bit_alloc_stages</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>AC3_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cpl_in_use</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>num_exp_groups</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name><operator>)</operator> <operator>/</operator>

<operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name>EXP_REUSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dexps</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>!</operator><name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_exponents</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gbc</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>exp_strategy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_exp_groups</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dexps</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dexps</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name><operator>+</operator><operator>!</operator><operator>!</operator><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name>CPL_CH</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_allocation_syntax</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>slow_decay</name></name> <operator>=</operator> <name><name>ff_ac3_slow_decay_tab</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>sr_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>fast_decay</name></name> <operator>=</operator> <name><name>ff_ac3_fast_decay_tab</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>sr_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>slow_gain</name></name> <operator>=</operator> <name><name>ff_ac3_slow_gain_tab</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>db_per_bit</name></name> <operator>=</operator> <name><name>ff_ac3_db_per_bit_tab</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>floor</name></name> <operator>=</operator> <name><name>ff_ac3_floor_tab</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>blk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"new bit allocation info must "</literal>

<literal type="string">"be present in block 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>||</operator> <operator>!</operator><name>blk</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>snr_offset_strategy</name></name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>snr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csnr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>csnr</name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">15</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>i</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>snr_offset_strategy</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>snr</name> <operator>=</operator> <operator>(</operator><name>csnr</name> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>snr_offset</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name>snr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>snr_offset</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>snr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>ff_ac3_fast_gain_tab</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>&amp;&amp;</operator> <name>prev</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>fast_gain</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"new snr offsets must be present in block 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain_syntax</name></name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>ff_ac3_fast_gain_tab</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>&amp;&amp;</operator> <name>prev</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>fast_gain</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blk</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>ff_ac3_fast_gain_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_INDEPENDENT</name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cpl_in_use</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_leak</name></name> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fl</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sl</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>fl</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>cpl_fast_leak</name></name> <operator>||</operator>

<name>sl</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>cpl_slow_leak</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bit_alloc_stages</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bit_alloc_stages</name><index>[<expr><name>CPL_CH</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>cpl_fast_leak</name></name> <operator>=</operator> <name>fl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>cpl_slow_leak</name></name> <operator>=</operator> <name>sl</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>eac3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>blk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"new coupling leak info must "</literal>

<literal type="string">"be present in block 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_cpl_leak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dba_syntax</name></name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dba_mode</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dba_mode</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>==</operator> <name>DBA_RESERVED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"delta bit allocation strategy reserved\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>fbw_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dba_mode</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>==</operator> <name>DBA_NEW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dba_nsegs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>seg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>seg</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>dba_nsegs</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</condition> <incr><expr><name>seg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dba_offsets</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dba_lengths</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dba_values</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blk</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dba_mode</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>DBA_NONE</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <operator>!</operator><name>cpl_in_use</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_ac3_bit_alloc_calc_psd</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dexps</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>psd</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>band_psd</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_ac3_bit_alloc_calc_mask</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>band_psd</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fast_gain</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>ch</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_ch</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dba_mode</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dba_nsegs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dba_offsets</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dba_lengths</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dba_values</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mask</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error in bit allocation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bit_alloc_stages</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bap_tab</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>channel_uses_aht</name><index>[<expr><name>ch</name></expr>]</index></name></expr> ?</condition><then>

<expr><name>ff_eac3_hebap_tab</name></expr> </then><else>: <expr><name>ff_ac3_bap_tab</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>bit_alloc_calc_bap</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mask</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psd</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>snr_offset</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc_params</name><operator>.</operator><name>floor</name></name></expr></argument>,

<argument><expr><name>bap_tab</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bap</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>skip_syntax</name></name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>skipl</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>skipl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode_transform_coeffs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_rematrixing</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>audio_channel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>gain</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_DUALMONO</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>audio_channel</name> <operator>=</operator> <literal type="number">2</literal><operator>-</operator><name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>heavy_compression</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>compression_exists</name><index>[<expr><name>audio_channel</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>heavy_dynamic_range</name><index>[<expr><name>audio_channel</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>dynamic_range</name><index>[<expr><name>audio_channel</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><call><name>scale_coefs</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>target_level</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <name>gain</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>level_gain</name><index>[<expr><name>audio_channel</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gain</name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4194304.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fmt_conv</name><operator>.</operator><name>int32_to_float_fmul_scalar</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>transform_coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fixed_coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>gain</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>CONFIG_EAC3_DECODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>spx_in_use</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_eac3_apply_spectral_extension</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>downmix_output</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>&amp;</operator> <name>AC3_OUTPUT_LFEON</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>different_transforms</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>downmixed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>downmixed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ac3_upmix_delay</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_imdct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>downmix_output</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><call><name>ac3_downmix_c_fixed16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ff_ac3dsp_downmix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>downmix_output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><call><name>AC3_RENAME</name><argument_list>(<argument><expr><name>ff_ac3dsp_downmix</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>xcfptr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>downmix_output</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>downmixed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>downmixed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AC3_RENAME</name><argument_list>(<argument><expr><name>ff_ac3dsp_downmix</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>dlyptr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>do_imdct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ac3_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>, <decl><type ref="prev"/><name>full_buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>got_independent_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>channel_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>extended_channel_map</name><index>[<expr><name>EAC3_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SHORTFLOAT</name> <modifier>*</modifier></type><name><name>output</name><index>[<expr><name>AC3_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVMatrixEncoding</name></name></type> <name>matrix_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDownmixInfo</name> <modifier>*</modifier></type><name>downmix_info</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>superframe_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>full_buf_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x77</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x0B</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <operator>(</operator><literal type="number">0x77</literal> <operator>^</operator> <literal type="number">0x0B</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <operator>(</operator><literal type="number">0x77</literal> <operator>^</operator> <literal type="number">0x0B</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0x770B</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>AC3_FRAME_BUFFER_SIZE</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap16_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>AC3_FRAME_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>consistent_noise_generation</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_lfg_init_from_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dith_state</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>input_buffer</name></name></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>AC3_FRAME_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>input_buffer</name></name></expr>;</expr_stmt>

<label><name>dependent_frame</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>parse_frame_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AAC_AC3_PARSE_ERROR_SYNC</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"frame sync error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

<case>case <expr><name>AAC_AC3_PARSE_ERROR_BSID</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid bitstream id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AAC_AC3_PARSE_ERROR_SAMPLE_RATE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid frame size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>substreamid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"unsupported substream %d: skipping frame\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>substreamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AAC_AC3_PARSE_ERROR_CRC</name></expr>:</case>

<case>case <expr><name>AAC_AC3_PARSE_ERROR_CHANNEL_CFG</name></expr>:</case>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"incomplete frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_CRCCHECK</name><operator>|</operator><name>AV_EF_CAREFUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"frame CRC mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AAC_AC3_PARSE_ERROR_CRC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_DEPENDENT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_independent_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ignoring dependent frame without independent frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>full_buf_size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>|=</operator> <name>AC3_OUTPUT_LFEON</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_MONO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_MONO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>=</operator> <name>AC3_CHMODE_STEREO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loro_center_mix_level</name></name> <operator>=</operator> <name><name>gain_levels</name><index>[<expr><name><name>s</name><operator>-&gt;</operator> <name>center_mix_level</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loro_surround_mix_level</name></name> <operator>=</operator> <name><name>gain_levels</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ltrt_center_mix_level</name></name> <operator>=</operator> <name>LEVEL_MINUS_3DB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ltrt_surround_mix_level</name></name> <operator>=</operator> <name>LEVEL_MINUS_3DB</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>&amp;</operator> <name>AC3_OUTPUT_LFEON</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_downmix_coeffs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error setting downmix coeffs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to determine channel mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>avpriv_ac3_channel_layout_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AC3_OUTPUT_LFEON</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>&amp;</operator> <name>AC3_OUTPUT_LFEON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>|=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>audio_service_type</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bitstream_mode</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bitstream_mode</name></name> <operator>==</operator> <literal type="number">0x7</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>audio_service_type</name></name> <operator>=</operator> <name>AV_AUDIO_SERVICE_TYPE_KARAOKE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channel_map</name> <operator>=</operator> <name><name>ff_ac3_dec_channel_map</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AC3_OUTPUT_LFEON</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_DEPENDENT</name></expr> ?</condition><then> <expr><name>AC3_MAX_CHANNELS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>AC3_MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>ch</name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>ch</name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name><index>[<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><name>ch</name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name> <operator>&amp;&amp;</operator> <call><name>decode_audio_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error decoding the audio block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><name>ch</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>+</operator> <name>AC3_BLOCK_SIZE</name><operator>*</operator><name>blk</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>AC3_BLOCK_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SHORTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>outptr</name><index>[<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch</name> <operator>||</operator> <name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>outptr</name><index>[<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name>AC3_BLOCK_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output</name><index>[<expr><name>ch</name> <operator>+</operator> <name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>AC3_BLOCK_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SHORTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AC3HeaderInfo</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_ac3_parse_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_DEPENDENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>num_blocks</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <name><name>hdr</name><operator>.</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Ignoring non-compatible dependent frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_output_mode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prev_bit_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>got_independent_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>dependent_frame</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>skip</name>:</label>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>decode_error_flags</name></name> <operator>=</operator> <ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><name>FF_DECODE_ERROR_INVALID_BITSTREAM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>prev_bit_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>EAC3_MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>extended_channel_map</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>EAC3_FRAME_TYPE_DEPENDENT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ich_layout</name> <init>= <expr><name><name>avpriv_ac3_channel_layout_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>prev_output_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AC3_OUTPUT_LFEON</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_map_size</name> <init>= <expr><name><name>ff_ac3_channels_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AC3_OUTPUT_LFEON</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_on</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extend</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>prev_output_mode</name></name> <operator>&amp;</operator> <name>AC3_OUTPUT_LFEON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ich_layout</name> <operator>|=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channel_layout</name> <operator>=</operator> <name>ich_layout</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>EAC3_MAX_CHANNELS</name> <operator>-</operator> <name>ch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>channel_layout</name> <operator>|=</operator> <name><name>ff_eac3_custom_channel_map_locations</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EAC3_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many channels (%d) coded\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>channel_layout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>EAC3_MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_map</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>EAC3_MAX_CHANNELS</name> <operator>-</operator> <name>ch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff_eac3_custom_channel_map_locations</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>,

<argument><expr><name><name>ff_eac3_custom_channel_map_locations</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extend</name> <operator>&gt;=</operator> <name>channel_map_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>extended_channel_map</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name><name>channel_map</name><index>[<expr><name>extend</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name><name>ff_eac3_custom_channel_map_locations</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>av_get_channel_layout_channel_index</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>,

<argument><expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extend</name> <operator>&gt;=</operator> <name>channel_map_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>extended_channel_map</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name><name>channel_map</name><index>[<expr><name>extend</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <name>AC3_BLOCK_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>map</name> <init>= <expr><name><name>extended_channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>ch</name><operator>&gt;=</operator><name>AV_NUM_DATA_POINTERS</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>==</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>SHORTFLOAT</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>output_buffer</name><index>[<expr><name>map</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <name>AC3_BLOCK_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SHORTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <name>AC3_CHMODE_STEREO</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AC3_OUTPUT_LFEON</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dolby_surround_mode</name></name> <operator>==</operator> <name>AC3_DSURMOD_ON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_DOLBY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dolby_headphone_mode</name></name> <operator>==</operator> <name>AC3_DHEADPHONMOD_ON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_DOLBYHEADPHONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>&gt;=</operator> <name>AC3_CHMODE_2F2R</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>==</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>output_mode</name></name> <operator>&amp;</operator> <operator>~</operator><name>AC3_OUTPUT_LFEON</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dolby_surround_ex_mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AC3_DSUREXMOD_ON</name></expr>:</case> 

<expr_stmt><expr><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_DOLBYEX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AC3_DSUREXMOD_PLIIZ</name></expr>:</case>

<expr_stmt><expr><name>matrix_encoding</name> <operator>=</operator> <name>AV_MATRIX_ENCODING_DPLIIZ</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_side_data_update_matrix_encoding</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>matrix_encoding</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>downmix_info</name> <operator>=</operator> <call><name>av_downmix_info_update_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>preferred_downmix</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AC3_DMIXMOD_LTRT</name></expr>:</case>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>preferred_downmix_type</name></name> <operator>=</operator> <name>AV_DOWNMIX_TYPE_LTRT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AC3_DMIXMOD_LORO</name></expr>:</case>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>preferred_downmix_type</name></name> <operator>=</operator> <name>AV_DOWNMIX_TYPE_LORO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AC3_DMIXMOD_DPLII</name></expr>:</case>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>preferred_downmix_type</name></name> <operator>=</operator> <name>AV_DOWNMIX_TYPE_DPLII</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>preferred_downmix_type</name></name> <operator>=</operator> <name>AV_DOWNMIX_TYPE_UNKNOWN</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>center_mix_level</name></name> <operator>=</operator> <name><name>gain_levels</name><index>[<expr><name><name>s</name><operator>-&gt;</operator> <name>center_mix_level</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>center_mix_level_ltrt</name></name> <operator>=</operator> <name><name>gain_levels</name><index>[<expr><name><name>s</name><operator>-&gt;</operator> <name>center_mix_level_ltrt</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>surround_mix_level</name></name> <operator>=</operator> <name><name>gain_levels</name><index>[<expr><name><name>s</name><operator>-&gt;</operator> <name>surround_mix_level</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>surround_mix_level_ltrt</name></name> <operator>=</operator> <name><name>gain_levels</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>surround_mix_level_ltrt</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mix_level_exists</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>lfe_mix_level</name></name> <operator>=</operator> <name><name>gain_levels_lfe</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lfe_mix_level</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>downmix_info</name><operator>-&gt;</operator><name>lfe_mix_level</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>superframe_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>full_buf_size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>+</operator> <name>skip</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>full_buf_size</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>superframe_size</name></name> <operator>+</operator> <name>skip</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ac3_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AC3DecodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct_512</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct_256</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>downmix_coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AC3DecodeContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_DECODING_PARAM | AV_OPT_FLAG_AUDIO_PARAM)</cpp:value></cpp:define>

</unit>
