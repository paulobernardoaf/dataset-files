<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264pred.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERT_PRED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOR_PRED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_PRED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_DOWN_LEFT_PRED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_DOWN_RIGHT_PRED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERT_RIGHT_PRED</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOR_DOWN_PRED</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERT_LEFT_PRED</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOR_UP_PRED</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_DC_PRED</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_DC_PRED</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_128_PRED</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIAG_DOWN_LEFT_PRED_RV40_NODOWN</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOR_UP_PRED_RV40_NODOWN</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERT_LEFT_PRED_RV40_NODOWN</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM_VP8_PRED</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERT_VP8_PRED</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOR_VP8_PRED</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_127_PRED</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_129_PRED</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_PRED8x8</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOR_PRED8x8</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERT_PRED8x8</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANE_PRED8x8</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_DC_PRED8x8</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_DC_PRED8x8</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_128_PRED8x8</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALZHEIMER_DC_L0T_PRED8x8</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALZHEIMER_DC_0LT_PRED8x8</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALZHEIMER_DC_L00_PRED8x8</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALZHEIMER_DC_0L0_PRED8x8</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_127_PRED8x8</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_129_PRED8x8</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>H264PredContext</name> <block>{

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred4x4</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred8x8l</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>topleft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>topright</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred8x8</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred16x16</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred4x4_add</name><index>[<expr><literal type="number">2</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter> ,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> , <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred8x8l_add</name><index>[<expr><literal type="number">2</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter> ,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> , <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred8x8l_filter_add</name><index>[<expr><literal type="number">2</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter> ,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>topleft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>topright</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred8x8_add</name><index>[<expr><literal type="number">3</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter> ,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> , <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>(<modifier>*</modifier><name>pred16x16_add</name><index>[<expr><literal type="number">3</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter> ,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter> , <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>H264PredContext</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_h264_pred_init</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_h264_pred_init_aarch64</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_h264_pred_init_arm</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_h264_pred_init_x86</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_h264_pred_init_mips</name><parameter_list>(<parameter><decl><type><name>H264PredContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codec_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bit_depth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>chroma_format_idc</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
