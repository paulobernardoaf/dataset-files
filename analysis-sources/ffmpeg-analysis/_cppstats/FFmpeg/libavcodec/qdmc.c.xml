<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qdmc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>QDMCTone</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>phase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>amplitude</name></decl>;</decl_stmt>

}</block></struct></type> <name>QDMCTone</name>;</typedef>

<typedef>typedef <type><struct>struct <name>QDMCContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>frame_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subframe_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fft_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffer_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>checksum_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>noise</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">19</literal></expr>]</index><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QDMCTone</name></type> <name><name>tones</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>nb_tones</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>cur_tone</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>alt_sin</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>fft_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8192</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>noise2_buffer</name><index>[<expr><literal type="number">4096</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>noise_buffer</name><index>[<expr><literal type="number">4096</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>buffer</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">32768</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buffer_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rndval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>FFTComplex</name></expr></argument>, <argument><expr><name>cmplx</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">512</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>fft_ctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>QDMCContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>sin_table</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>vtable</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>code_prefix</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0xA</literal></expr>,

<expr><literal type="number">0xC</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x34</literal></expr>,

<expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xDC</literal></expr>,

<expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x13C</literal></expr>, <expr><literal type="number">0x17C</literal></expr>, <expr><literal type="number">0x1BC</literal></expr>, <expr><literal type="number">0x1FC</literal></expr>, <expr><literal type="number">0x27C</literal></expr>, <expr><literal type="number">0x2FC</literal></expr>, <expr><literal type="number">0x37C</literal></expr>,

<expr><literal type="number">0x3FC</literal></expr>, <expr><literal type="number">0x4FC</literal></expr>, <expr><literal type="number">0x5FC</literal></expr>, <expr><literal type="number">0x6FC</literal></expr>, <expr><literal type="number">0x7FC</literal></expr>, <expr><literal type="number">0x9FC</literal></expr>, <expr><literal type="number">0xBFC</literal></expr>, <expr><literal type="number">0xDFC</literal></expr>,

<expr><literal type="number">0xFFC</literal></expr>, <expr><literal type="number">0x13FC</literal></expr>, <expr><literal type="number">0x17FC</literal></expr>, <expr><literal type="number">0x1BFC</literal></expr>, <expr><literal type="number">0x1FFC</literal></expr>, <expr><literal type="number">0x27FC</literal></expr>, <expr><literal type="number">0x2FFC</literal></expr>, <expr><literal type="number">0x37FC</literal></expr>,

<expr><literal type="number">0x3FFC</literal></expr>, <expr><literal type="number">0x4FFC</literal></expr>, <expr><literal type="number">0x5FFC</literal></expr>, <expr><literal type="number">0x6FFC</literal></expr>, <expr><literal type="number">0x7FFC</literal></expr>, <expr><literal type="number">0x9FFC</literal></expr>, <expr><literal type="number">0xBFFC</literal></expr>, <expr><literal type="number">0xDFFC</literal></expr>,

<expr><literal type="number">0xFFFC</literal></expr>, <expr><literal type="number">0x13FFC</literal></expr>, <expr><literal type="number">0x17FFC</literal></expr>, <expr><literal type="number">0x1BFFC</literal></expr>, <expr><literal type="number">0x1FFFC</literal></expr>, <expr><literal type="number">0x27FFC</literal></expr>, <expr><literal type="number">0x2FFFC</literal></expr>, <expr><literal type="number">0x37FFC</literal></expr>,

<expr><literal type="number">0x3FFFC</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>amplitude_tab</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.18750000f</literal></expr>, <expr><literal type="number">1.68359380f</literal></expr>, <expr><literal type="number">2.37500000f</literal></expr>, <expr><literal type="number">3.36718750f</literal></expr>, <expr><literal type="number">4.75000000f</literal></expr>,

<expr><literal type="number">6.73437500f</literal></expr>, <expr><literal type="number">9.50000000f</literal></expr>, <expr><literal type="number">13.4687500f</literal></expr>, <expr><literal type="number">19.0000000f</literal></expr>, <expr><literal type="number">26.9375000f</literal></expr>,

<expr><literal type="number">38.0000000f</literal></expr>, <expr><literal type="number">53.8750000f</literal></expr>, <expr><literal type="number">76.0000000f</literal></expr>, <expr><literal type="number">107.750000f</literal></expr>, <expr><literal type="number">152.000000f</literal></expr>,

<expr><literal type="number">215.500000f</literal></expr>, <expr><literal type="number">304.000000f</literal></expr>, <expr><literal type="number">431.000000f</literal></expr>, <expr><literal type="number">608.000000f</literal></expr>, <expr><literal type="number">862.000000f</literal></expr>,

<expr><literal type="number">1216.00000f</literal></expr>, <expr><literal type="number">1724.00000f</literal></expr>, <expr><literal type="number">2432.00000f</literal></expr>, <expr><literal type="number">3448.00000f</literal></expr>, <expr><literal type="number">4864.00000f</literal></expr>,

<expr><literal type="number">6896.00000f</literal></expr>, <expr><literal type="number">9728.00000f</literal></expr>, <expr><literal type="number">13792.0000f</literal></expr>, <expr><literal type="number">19456.0000f</literal></expr>, <expr><literal type="number">27584.0000f</literal></expr>,

<expr><literal type="number">38912.0000f</literal></expr>, <expr><literal type="number">55168.0000f</literal></expr>, <expr><literal type="number">77824.0000f</literal></expr>, <expr><literal type="number">110336.000f</literal></expr>, <expr><literal type="number">155648.000f</literal></expr>,

<expr><literal type="number">220672.000f</literal></expr>, <expr><literal type="number">311296.000f</literal></expr>, <expr><literal type="number">441344.000f</literal></expr>, <expr><literal type="number">622592.000f</literal></expr>, <expr><literal type="number">882688.000f</literal></expr>,

<expr><literal type="number">1245184.00f</literal></expr>, <expr><literal type="number">1765376.00f</literal></expr>, <expr><literal type="number">2490368.00f</literal></expr>, <expr><literal type="number">3530752.00f</literal></expr>, <expr><literal type="number">4980736.00f</literal></expr>,

<expr><literal type="number">7061504.00f</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>qdmc_nodes</name><index>[<expr><literal type="number">112</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>,

<expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">256</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">104</literal></expr>,

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">208</literal></expr>,

<expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">256</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>noise_bands_size</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>noise_bands_selector</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>noise_value_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>noise_value_symbols</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>,

<expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>noise_value_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xC7A</literal></expr>, <expr><literal type="number">0x002</literal></expr>, <expr><literal type="number">0x0FA</literal></expr>, <expr><literal type="number">0x03A</literal></expr>, <expr><literal type="number">0x35A</literal></expr>, <expr><literal type="number">0x1C2</literal></expr>, <expr><literal type="number">0x07A</literal></expr>, <expr><literal type="number">0x1FA</literal></expr>,

<expr><literal type="number">0x17A</literal></expr>, <expr><literal type="number">0x000</literal></expr>, <expr><literal type="number">0x0DA</literal></expr>, <expr><literal type="number">0x142</literal></expr>, <expr><literal type="number">0x0C2</literal></expr>, <expr><literal type="number">0x042</literal></expr>, <expr><literal type="number">0x1DA</literal></expr>, <expr><literal type="number">0x001</literal></expr>,

<expr><literal type="number">0x05A</literal></expr>, <expr><literal type="number">0x15A</literal></expr>, <expr><literal type="number">0x27A</literal></expr>, <expr><literal type="number">0x47A</literal></expr>, <expr><literal type="number">0x003</literal></expr>, <expr><literal type="number">0x005</literal></expr>, <expr><literal type="number">0x006</literal></expr>, <expr><literal type="number">0x012</literal></expr>,

<expr><literal type="number">0x00A</literal></expr>, <expr><literal type="number">0x022</literal></expr>, <expr><literal type="number">0x01A</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>noise_segment_length_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>noise_segment_length_symbols</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>noise_segment_length_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x30B</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0xF</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xB</literal></expr>, <expr><literal type="number">0x10B</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>freq_diff_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">18</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>freq_diff_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x2AD46</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0xC</literal></expr>, <expr><literal type="number">0xA</literal></expr>, <expr><literal type="number">0x7</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xE</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0xF</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x2B</literal></expr>,

<expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xB</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x1E8</literal></expr>,

<expr><literal type="number">0x146</literal></expr>, <expr><literal type="number">0x346</literal></expr>, <expr><literal type="number">0x546</literal></expr>, <expr><literal type="number">0x746</literal></expr>, <expr><literal type="number">0x1D46</literal></expr>, <expr><literal type="number">0xF46</literal></expr>, <expr><literal type="number">0xD46</literal></expr>, <expr><literal type="number">0x6D46</literal></expr>, <expr><literal type="number">0xAD46</literal></expr>, <expr><literal type="number">0x2D46</literal></expr>,

<expr><literal type="number">0x1AD46</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>amplitude_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>amplitude_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x1EC6</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x142</literal></expr>, <expr><literal type="number">0x242</literal></expr>, <expr><literal type="number">0x246</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x146</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,

<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xE</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x4</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0xA</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x22</literal></expr>,

<expr><literal type="number">0x1C6</literal></expr>, <expr><literal type="number">0x2C6</literal></expr>, <expr><literal type="number">0x6C6</literal></expr>, <expr><literal type="number">0xEC6</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>amplitude_diff_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>amplitude_diff_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0xE</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x7E</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>phase_diff_bits</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>phase_diff_codes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0xD</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x5</literal></expr>, <expr><literal type="number">0x9</literal></expr>, <expr><literal type="number">0x3</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_VLC_STATIC_LE</name><parameter_list>(<parameter><type><name>vlc</name></type></parameter>, <parameter><type><name>nb_bits</name></type></parameter>, <parameter><type><name>nb_codes</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>bits_wrap</name></type></parameter>, <parameter><type><name>bits_size</name></type></parameter>, <parameter><type><name>codes</name></type></parameter>, <parameter><type><name>codes_wrap</name></type></parameter>, <parameter><type><name>codes_size</name></type></parameter>, <parameter><type><name>symbols</name></type></parameter>, <parameter><type><name>symbols_wrap</name></type></parameter>, <parameter><type><name>symbols_size</name></type></parameter>, <parameter><type><name>static_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { static VLC_TYPE table[static_size][2]; (vlc)-&gt;table = table; (vlc)-&gt;table_allocated = static_size; ff_init_vlc_sparse(vlc, nb_bits, nb_codes, bits, bits_wrap, bits_size, codes, codes_wrap, codes_size, symbols, symbols_wrap, symbols_size, INIT_VLC_LE | INIT_VLC_USE_NEW_STATIC); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>qdmc_init_static_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC_LE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>noise_value_bits</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>noise_value_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>noise_value_codes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>noise_value_symbols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC_LE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>noise_segment_length_bits</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>noise_segment_length_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>noise_segment_length_codes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>noise_segment_length_symbols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC_LE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>amplitude_bits</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>amplitude_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>amplitude_codes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC_LE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>freq_diff_bits</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>freq_diff_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>freq_diff_codes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">262144</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC_LE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>amplitude_diff_bits</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>amplitude_diff_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>amplitude_diff_codes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC_LE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>phase_diff_bits</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>phase_diff_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>phase_diff_codes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sin_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">2.0f</literal> <operator>*</operator> <name>i</name> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">0.001953125f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_noises</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n0</name></decl>, <decl><type ref="prev"/><name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>nptr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>noise_bands_size</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>band_index</name></name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>n0</name> <operator>=</operator> <name><name>qdmc_nodes</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>band_index</name></name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n1</name> <operator>=</operator> <name><name>qdmc_nodes</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>band_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n2</name> <operator>=</operator> <name><name>qdmc_nodes</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>band_index</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_buffer</name></name> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <name>j</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>+</operator> <name>n0</name> <operator>&lt;</operator> <name>n1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>nptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>n1</name> <operator>-</operator> <name>n0</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>n2</name> <operator>-</operator> <name>n1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_buffer</name></name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>n1</name> <operator>-</operator> <name>n0</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n1</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>nptr</name><operator>++</operator></expr><operator>,</operator> <expr><name>diff</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>diff</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>n2</name> <operator>-</operator> <name>n1</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qdmc_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>init_static_once</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>fft_size</name></decl>, <decl><type ref="prev"/><name>fft_order</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_static_once</name></expr></argument>, <argument><expr><name>qdmc_init_static_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>||</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"extradata missing or truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_peek_be64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"not enough extradata (%i)\n"</literal></expr></argument>,

<argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"extradata size too small, %i &lt; %i\n"</literal></expr></argument>,

<argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid extradata, expecting QDCA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_STEREO</name></expr> </then><else>:

<expr><name>AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fft_size</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fft_order</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>fft_size</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name> <operator>&gt;=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"data block size too large (%u)\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;=</operator> <literal type="number">32000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">28000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;=</operator> <literal type="number">16000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">20000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">16000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_index</name></name> <operator>=</operator> <name><name>noise_bands_selector</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>llrint</name><argument_list>(<argument><expr><call><name>floor</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">3.0</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>x</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fft_order</name> <operator>&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>fft_order</name> <operator>&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown FFT order %d"</literal></expr></argument>, <argument><expr><name>fft_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fft_size</name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>fft_order</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"FFT size %d not power of 2.\n"</literal></expr></argument>, <argument><expr><name>fft_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name>fft_order</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>g</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>g</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>g</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alt_sin</name><index>[<expr><literal type="number">5</literal><operator>-</operator><name>g</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sin_table</name><index>[<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>g</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>make_noises</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>qdmc_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qdmc_get_vlc</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>code_prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>code_prefix</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_label</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>label</name> <init>= <expr><call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>sum</name> <init>= <expr><literal type="number">226</literal></expr></init></decl>, <decl><type ref="prev"/><name>checksum</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>label</name> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'Q'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name> <operator>-</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>sum</name> <operator>!=</operator> <name>checksum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_noise_data</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>band</name></decl>, <decl><type ref="prev"/><name>lastval</name></decl>, <decl><type ref="prev"/><name>newval</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name><name>noise_bands_size</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>band_index</name></name></expr>]</index></name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>qdmc_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>lastval</name> <operator>=</operator> <name>v</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>lastval</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>qdmc_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>qdmc_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <name>lastval</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>newval</name> <operator>=</operator> <name>lastval</name> <operator>-</operator> <name>v</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>idx</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name>j</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>lastval</name> <operator>+</operator> <name>k</name> <operator>*</operator> <operator>(</operator><name>newval</name> <operator>-</operator> <name>lastval</name><operator>)</operator> <operator>/</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>lastval</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_tone</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stereo_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amplitude</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nb_tones</name><index>[<expr><name>group</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><name>group</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Too many tones already in buffer, ignoring tone!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>freq</name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>mode</name> <operator>=</operator> <name>stereo_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>amplitude</name> <operator>=</operator> <name>amplitude</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>phase</name> <operator>=</operator> <name>phase</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_tones</name><index>[<expr><name>group</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_wave_data</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>amp</name></decl>, <decl><type ref="prev"/><name>phase</name></decl>, <decl><type ref="prev"/><name>stereo_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>group</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>, <decl><type ref="prev"/><name>group_size</name></decl>, <decl><type ref="prev"/><name>group_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>amp2</name></decl>, <decl><type ref="prev"/><name>phase2</name></decl>, <decl><type ref="prev"/><name>pos2</name></decl>, <decl><type ref="prev"/><name>off</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>group_size</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>-</operator> <name>group</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>group_bits</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <name>group</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name>freq</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>qdmc_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>freq</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>freq</name> <operator>&gt;=</operator> <name>group_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>freq</name> <operator>+=</operator> <literal type="number">2</literal> <operator>-</operator> <name>group_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos2</name> <operator>+=</operator> <name>group_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>group_bits</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>pos2</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stereo_mode</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>amp</name> <operator>=</operator> <call><name>qdmc_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>amp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>phase</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo_mode</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>amp2</name> <operator>=</operator> <call><name>qdmc_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>amp2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>amp2</name> <operator>=</operator> <name>amp</name> <operator>-</operator> <name>amp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>phase2</name> <operator>=</operator> <call><name>qdmc_get_vlc</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vtable</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>phase2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>phase2</name> <operator>=</operator> <name>phase</name> <operator>-</operator> <name>phase2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>phase2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>phase2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>freq</name> <operator>&gt;&gt;</operator> <name>group_bits</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_tone</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name>stereo_mode</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>amp</name></expr></argument>, <argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo_mode</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_tone</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><operator>~</operator><name>stereo_mode</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>amp2</name></expr></argument>, <argument><expr><name>phase2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lin_calc</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amplitude</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>subframe_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>noise_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>amplitude</name></expr>;</expr_stmt>

<expr_stmt><expr><name>subframe_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subframe_size</name> <operator>&gt;=</operator> <name>node2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>subframe_size</name> <operator>=</operator> <name>node2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>subframe_size</name> <operator>-</operator> <name>node1</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFC</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>node1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>noise_ptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>noise_buffer</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <name>index</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>j</name><operator>+=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name>noise_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise2_buffer</name><index>[<expr><name>j</name></expr> ]</index></name> <operator>+=</operator> <name>scale</name> <operator>*</operator> <name><name>noise_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise2_buffer</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>scale</name> <operator>*</operator> <name><name>noise_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise2_buffer</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>scale</name> <operator>*</operator> <name><name>noise_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise2_buffer</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>scale</name> <operator>*</operator> <name><name>noise_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>length</name> <operator>+</operator> <name>node1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>noise_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise_buffer</name></name> <operator>+</operator> <name>length</name> <operator>+</operator> <operator>(</operator><name>index</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>length</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_size</name> <operator>-</operator> <name>node1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>noise_ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>noise2_buffer</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name>scale</name> <operator>*</operator> <name><name>noise_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_noise</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_subframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>aindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>amplitude</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>im</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>*</operator> <name>current_subframe</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>re</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>*</operator> <name>current_subframe</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>noise2_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>noise_bands_size</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>band_index</name></name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>qdmc_nodes</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">21</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>band_index</name></name></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aindex</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>noise</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>current_subframe</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>amplitude</name> <operator>=</operator> <ternary><condition><expr><name>aindex</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>amplitude_tab</name><index>[<expr><name>aindex</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0.0f</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lin_calc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>amplitude</name></expr></argument>, <argument><expr><name><name>qdmc_nodes</name><index>[<expr><literal type="number">21</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>band_index</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>qdmc_nodes</name><index>[<expr><literal type="number">21</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>band_index</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>rnd_re</name></decl>, <decl><type ref="prev"/><name>rnd_im</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rndval</name></name> <operator>=</operator> <literal type="number">214013U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rndval</name></name> <operator>+</operator> <literal type="number">2531011</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rnd_im</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rndval</name></name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal><operator>)</operator> <operator>-</operator> <literal type="number">16384.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.000030517578f</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>noise2_buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rndval</name></name> <operator>=</operator> <literal type="number">214013U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rndval</name></name> <operator>+</operator> <literal type="number">2531011</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rnd_re</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rndval</name></name> <operator>&amp;</operator> <literal type="number">0x7FFF</literal><operator>)</operator> <operator>-</operator> <literal type="number">16384.0f</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.000030517578f</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>noise2_buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>im</name><index>[<expr><name>j</name></expr> ]</index></name> <operator>+=</operator> <name>rnd_im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>re</name><index>[<expr><name>j</name></expr> ]</index></name> <operator>+=</operator> <name>rnd_re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>im</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>rnd_im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>re</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>rnd_re</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_wave</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freqs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stereo_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>group_bits</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>pindex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>im</name></decl>, <decl><type ref="prev"/><name>re</name></decl>, <decl><type ref="prev"/><name>amplitude</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>imptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stereo_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>group_bits</name> <operator>=</operator> <literal type="number">4</literal> <operator>-</operator> <name>group</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>freqs</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>group</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>amplitude</name> <operator>=</operator> <name><name>amplitude_tab</name><index>[<expr><name>amp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>imptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[ <expr><name>stereo_mode</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>*</operator> <name>offset</name> <operator>+</operator> <name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>stereo_mode</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>*</operator> <name>offset</name> <operator>+</operator> <name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pindex</name> <operator>=</operator> <operator>(</operator><name>phase</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>freqs</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <name>group</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>group_bits</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pindex</name> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>freqs</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>group_bits</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>amplitude</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>alt_sin</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>im</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name><name>sin_table</name><index>[ <expr><name>pindex</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>re</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name><name>sin_table</name><index>[<expr><operator>(</operator><name>pindex</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>imptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>reptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name>imptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reptr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>imptr</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><name>stereo_mode</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>imptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>stereo_mode</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>reptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>stereo_mode</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_wave0</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freqs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stereo_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>phase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>im</name></decl>, <decl><type ref="prev"/><name>re</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>stereo_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>amplitude_tab</name><index>[<expr><name>amp</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>im</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name><name>sin_table</name><index>[ <expr><operator>(</operator><name>phase</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>re</name> <operator>=</operator> <name>level</name> <operator>*</operator> <name><name>sin_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>phase</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1FF</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name>freqs</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>*</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[ <expr><name>stereo_mode</name></expr>]</index><index>[<expr><name>pos</name></expr> ]</index></name> <operator>+=</operator> <name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>stereo_mode</name></expr>]</index><index>[<expr><name>pos</name></expr> ]</index></name> <operator>+=</operator> <name>re</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[ <expr><name>stereo_mode</name></expr>]</index><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>im</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>stereo_mode</name></expr>]</index><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name>re</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_waves</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current_subframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_tone</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_tones</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QDMCTone</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><name>g</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_subframe</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_wave</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>amplitude</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_tone</name><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cur_tone</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_tones</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>QDMCTone</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>current_subframe</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_wave0</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>amplitude</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>phase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_tone</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_label</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_offset</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_noise_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_wave_data</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_noise</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>add_waves</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmplx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><name>ch</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmplx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><name>ch</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmplx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>re</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cmplx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>im</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmplx</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fft_ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cmplx</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_ptr</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>cmplx</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>re</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_ptr</name><index>[<expr><name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT16_MIN</name></expr></argument>, <argument><expr><name>INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_offset</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>subframe_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>&gt;=</operator> <literal type="number">32768</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>qdmc_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fft_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fft_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qdmc_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QDMCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_tones</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_tones</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_tone</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_tone</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>checksum_size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>qdmc_flush</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_qdmc_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"qdmc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"QDesign Music Codec 1"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_QDMC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QDMCContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>qdmc_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>qdmc_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>qdmc_decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>qdmc_flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
