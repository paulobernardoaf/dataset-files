<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\bsf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>

<struct>struct <name>AVBSFInternal</name> <block>{

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>buffer_pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eof</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>void</name></type> <name>av_bsf_free</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pctx</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>*</operator><name>pctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>close</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>priv_class</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_parameters_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>par_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>pctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>bsf_child_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bsf_to_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>AVBSFContext</name> <operator>*</operator><operator>)</operator><name>bsf</name><operator>)</operator><operator>-&gt;</operator><name><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>bsf_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"AVBSFContext"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>bsf_to_name</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

<expr><operator>.</operator><name>child_next</name> <operator>=</operator> <name>bsf_child_next</name></expr>,

<expr><operator>.</operator><name>child_class_next</name> <operator>=</operator> <name>ff_bsf_child_class_next</name></expr>,

<expr><operator>.</operator><name>category</name> <operator>=</operator> <name>AV_CLASS_CATEGORY_BITSTREAM_FILTER</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_bsf_get_class</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name>bsf_class</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBSFInternal</name> <modifier>*</modifier></type><name>bsfi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>av_class</name></name> <operator>=</operator> <operator>&amp;</operator><name>bsf_class</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name></name> <operator>=</operator> <call><name>avcodec_parameters_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_out</name></name> <operator>=</operator> <call><name>avcodec_parameters_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>par_out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bsfi</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>bsfi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsfi</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name></name> <operator>=</operator> <name>bsfi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name></name> <operator>=</operator> <call><name>av_packet_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>priv_class</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>priv_class</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pctx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_bsf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>codec_ids</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AV_CODEC_ID_NONE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec '%s' (%d) is not supported by the "</literal>

<literal type="string">"bitstream filter '%s'. Supported codecs are: "</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>desc</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_CODEC_ID_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>avcodec_descriptor_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s (%d) "</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>desc</name></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>codec_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_out</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>time_base_out</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>time_base_in</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_bsf_flush</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFInternal</name> <modifier>*</modifier></type><name>bsfi</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bsfi</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>flush</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>flush</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_send_packet</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFInternal</name> <modifier>*</modifier></type><name>bsfi</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bsfi</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsfi</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A non-NULL packet sent after an EOF.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator>

<name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_make_refcounted</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_bsf_get_packet</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier><modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFInternal</name> <modifier>*</modifier></type><name>bsfi</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>tmp_pkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsfi</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp_pkt</name> <operator>=</operator> <call><name>av_packet_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_pkt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pkt</name> <operator>=</operator> <name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name></name> <operator>=</operator> <name>tmp_pkt</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_bsf_get_packet_ref</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFInternal</name> <modifier>*</modifier></type><name>bsfi</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>internal</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsfi</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name><operator>-&gt;</operator><name>side_data_elems</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>bsfi</name><operator>-&gt;</operator><name>buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>BSFListContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_bsfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>flushed_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>item_name</name></decl>;</decl_stmt>

}</block></struct></type> <name>BSFListContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bsf_list_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BSFListContext</name> <modifier>*</modifier></type><name>lst</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecParameters</name> <modifier>*</modifier></type><name>cod_par</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tb</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>time_base_in</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lst</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>par_in</name></expr></argument>, <argument><expr><name>cod_par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>time_base_in</name> <operator>=</operator> <name>tb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_init</name><argument_list>(<argument><expr><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cod_par</name> <operator>=</operator> <name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>par_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tb</name> <operator>=</operator> <name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>time_base_out</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>bsf</name><operator>-&gt;</operator><name>time_base_out</name></name> <operator>=</operator> <name>tb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avcodec_parameters_copy</name><argument_list>(<argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_out</name></name></expr></argument>, <argument><expr><name>cod_par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bsf_list_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BSFListContext</name> <modifier>*</modifier></type><name>lst</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lst</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>lst</name><operator>-&gt;</operator><name>idx</name></name> <operator>&gt;</operator> <name><name>lst</name><operator>-&gt;</operator><name>flushed_idx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_receive_packet</name><argument_list>(<argument><expr><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>lst</name><operator>-&gt;</operator><name>idx</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lst</name><operator>-&gt;</operator><name>idx</name></name><operator>--</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lst</name><operator>-&gt;</operator><name>flushed_idx</name></name> <operator>=</operator> <name><name>lst</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lst</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>lst</name><operator>-&gt;</operator><name>flushed_idx</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lst</name><operator>-&gt;</operator><name>idx</name></name> <operator>&lt;</operator> <name><name>lst</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_EOF</name> <operator>&amp;&amp;</operator> <name><name>lst</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name><name>lst</name><operator>-&gt;</operator><name>flushed_idx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_send_packet</name><argument_list>(<argument><expr><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name><name>lst</name><operator>-&gt;</operator><name>idx</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>lst</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bsf_list_flush</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BSFListContext</name> <modifier>*</modifier></type><name>lst</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lst</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bsf_flush</name><argument_list>(<argument><expr><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>lst</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name><name>lst</name><operator>-&gt;</operator><name>flushed_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bsf_list_close</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BSFListContext</name> <modifier>*</modifier></type><name>lst</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lst</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bsf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lst</name><operator>-&gt;</operator><name>item_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bsf_list_item_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>null_filter_name</name> <init>= <expr><literal type="string">"null"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf_ctx</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSFListContext</name> <modifier>*</modifier></type><name>lst</name> <init>= <expr><name><name>bsf_ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lst</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>null_filter_name</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lst</name><operator>-&gt;</operator><name>item_name</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"bsf_list("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lst</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">",%s"</literal></expr> </then><else>: <expr><literal type="string">"%s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>filter</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lst</name><operator>-&gt;</operator><name>item_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>lst</name><operator>-&gt;</operator><name>item_name</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>bsf_list_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"bsf_list"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>bsf_list_item_name</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_list_bsf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"bsf_list"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BSFListContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>bsf_list_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>bsf_list_init</name></expr>,

<expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>bsf_list_filter</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>bsf_list_flush</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>bsf_list_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>AVBSFList</name> <block>{

<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_bsfs</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>AVBSFList</name> <modifier>*</modifier></type><name>av_bsf_list_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVBSFList</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_bsf_list_free</name><parameter_list>(<parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier><modifier>*</modifier></type><name>lst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>lst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bsf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>bsfs</name></name><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>bsfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_list_append</name><parameter_list>(<parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier></type><name>lst</name></decl></parameter>, <parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_dynarray_add_nofree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lst</name><operator>-&gt;</operator><name>bsfs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lst</name><operator>-&gt;</operator><name>nb_bsfs</name></name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_list_append2</name><parameter_list>(<parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier></type><name>lst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bsf_name</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>av_bsf_get_by_name</name><argument_list>(<argument><expr><name>bsf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BSF_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_alloc</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_set_dict2</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_list_append</name><argument_list>(<argument><expr><name>lst</name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bsf_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_list_finalize</name><parameter_list>(<parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier><modifier>*</modifier></type><name>lst</name></decl></parameter>, <parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BSFListContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bsf</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>bsfs</name></name><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>bsfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_list_bsf</name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>bsf</name><operator>)</operator><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bsfs</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>bsfs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_bsfs</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>lst</name><operator>)</operator><operator>-&gt;</operator><name>nb_bsfs</name></name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bsf_parse_single</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>AVBSFList</name> <modifier>*</modifier></type><name>bsf_lst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bsf_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bsf_options_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>bsf_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bsf_name</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsf_options_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsf_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bsf_options_str</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_parse_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf_options</name></expr></argument>, <argument><expr><name>bsf_options_str</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_list_append2</name><argument_list>(<argument><expr><name>bsf_lst</name></expr></argument>, <argument><expr><name>bsf_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsf_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsf_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_list_parse_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsf_lst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBSFList</name> <modifier>*</modifier></type><name>lst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bsf_str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dup</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>av_bsf_get_null_filter</name><argument_list>(<argument><expr><name>bsf_lst</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lst</name> <operator>=</operator> <call><name>av_bsf_list_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dup</name> <operator>=</operator> <name>buf</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bsf_str</name> <operator>=</operator> <call><name>av_strtok</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bsf_str</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bsf_parse_single</name><argument_list>(<argument><expr><name>bsf_str</name></expr></argument>, <argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bsf_list_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lst</name></expr></argument>, <argument><expr><name>bsf_lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bsf_list_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_bsf_get_null_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_bsf_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ff_list_bsf</name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
