<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\g729postfilter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g729.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_pitch_delay.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g729postfilter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_math.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_filters.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"acelp_vectors.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"celp_filters.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAC_BITS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_g729_interp_filt_short</name><index>[<expr><operator>(</operator><name>ANALYZED_FRAC_DELAYS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>SHORT_INT_FILT_LEN</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">31650</literal></expr>, <expr><literal type="number">28469</literal></expr>, <expr><literal type="number">23705</literal></expr>, <expr><literal type="number">18050</literal></expr>, <expr><literal type="number">12266</literal></expr>, <expr><literal type="number">7041</literal></expr>, <expr><literal type="number">2873</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1597</literal></expr>, <expr><operator>-</operator><literal type="number">2147</literal></expr>, <expr><operator>-</operator><literal type="number">1992</literal></expr>, <expr><operator>-</operator><literal type="number">1492</literal></expr>, <expr><operator>-</operator><literal type="number">933</literal></expr>, <expr><operator>-</operator><literal type="number">484</literal></expr>, <expr><operator>-</operator><literal type="number">188</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>ff_g729_interp_filt_long</name><index>[<expr><operator>(</operator><name>ANALYZED_FRAC_DELAYS</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>LONG_INT_FILT_LEN</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">31915</literal></expr>, <expr><literal type="number">29436</literal></expr>, <expr><literal type="number">25569</literal></expr>, <expr><literal type="number">20676</literal></expr>, <expr><literal type="number">15206</literal></expr>, <expr><literal type="number">9639</literal></expr>, <expr><literal type="number">4439</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3390</literal></expr>, <expr><operator>-</operator><literal type="number">5579</literal></expr>, <expr><operator>-</operator><literal type="number">6549</literal></expr>, <expr><operator>-</operator><literal type="number">6414</literal></expr>, <expr><operator>-</operator><literal type="number">5392</literal></expr>, <expr><operator>-</operator><literal type="number">3773</literal></expr>, <expr><operator>-</operator><literal type="number">1874</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1595</literal></expr>, <expr><literal type="number">2727</literal></expr>, <expr><literal type="number">3303</literal></expr>, <expr><literal type="number">3319</literal></expr>, <expr><literal type="number">2850</literal></expr>, <expr><literal type="number">2030</literal></expr>, <expr><literal type="number">1023</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">887</literal></expr>, <expr><operator>-</operator><literal type="number">1527</literal></expr>, <expr><operator>-</operator><literal type="number">1860</literal></expr>, <expr><operator>-</operator><literal type="number">1876</literal></expr>, <expr><operator>-</operator><literal type="number">1614</literal></expr>, <expr><operator>-</operator><literal type="number">1150</literal></expr>, <expr><operator>-</operator><literal type="number">579</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">501</literal></expr>, <expr><literal type="number">859</literal></expr>, <expr><literal type="number">1041</literal></expr>, <expr><literal type="number">1044</literal></expr>, <expr><literal type="number">892</literal></expr>, <expr><literal type="number">631</literal></expr>, <expr><literal type="number">315</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">266</literal></expr>, <expr><operator>-</operator><literal type="number">453</literal></expr>, <expr><operator>-</operator><literal type="number">543</literal></expr>, <expr><operator>-</operator><literal type="number">538</literal></expr>, <expr><operator>-</operator><literal type="number">455</literal></expr>, <expr><operator>-</operator><literal type="number">317</literal></expr>, <expr><operator>-</operator><literal type="number">156</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">72</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">59</literal></expr>, <expr><operator>-</operator><literal type="number">101</literal></expr>, <expr><operator>-</operator><literal type="number">122</literal></expr>, <expr><operator>-</operator><literal type="number">123</literal></expr>, <expr><operator>-</operator><literal type="number">106</literal></expr>, <expr><operator>-</operator><literal type="number">77</literal></expr>, <expr><operator>-</operator><literal type="number">40</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>formant_pp_factor_num_pow</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><init>= <expr><block>{

<expr><literal type="number">18022</literal></expr>, <expr><literal type="number">9912</literal></expr>, <expr><literal type="number">5451</literal></expr>, <expr><literal type="number">2998</literal></expr>, <expr><literal type="number">1649</literal></expr>, <expr><literal type="number">907</literal></expr>, <expr><literal type="number">499</literal></expr>, <expr><literal type="number">274</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">83</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>formant_pp_factor_den_pow</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">22938</literal></expr>, <expr><literal type="number">16057</literal></expr>, <expr><literal type="number">11240</literal></expr>, <expr><literal type="number">7868</literal></expr>, <expr><literal type="number">5508</literal></expr>, <expr><literal type="number">3856</literal></expr>, <expr><literal type="number">2699</literal></expr>, <expr><literal type="number">1889</literal></expr>, <expr><literal type="number">1322</literal></expr>, <expr><literal type="number">925</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>residual_filter</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>filter_coeffs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>in</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>subframe_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>filter_coeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>in</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>long_term_filter</name><parameter_list>(<parameter><decl><type><name>AudioDSPContext</name> <modifier>*</modifier></type><name>adsp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_delay_int</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>*</modifier></type> <name>residual</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>residual_filt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>L_temp0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>L_temp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>L64_temp0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>L64_temp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>corr_int_num</name></decl>, <decl><type ref="prev"/><name>corr_int_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ener</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>sh_ener</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>gain_num</name></decl>,<decl><type ref="prev"/><name>gain_den</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>sh_gain_num</name></decl>, <decl><type ref="prev"/><name>sh_gain_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gain_num_square</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>gain_long_num</name></decl>,<decl><type ref="prev"/><name>gain_long_den</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>sh_gain_long_num</name></decl>, <decl><type ref="prev"/><name>sh_gain_long_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>best_delay_int</name></decl>, <decl><type ref="prev"/><name>best_delay_frac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>delayed_signal_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lt_filt_factor_a</name></decl>, <decl><type ref="prev"/><name>lt_filt_factor_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type> <name>selected_signal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type> <name>selected_signal_const</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>sig_scaled</name><index>[<expr><name>SUBFRAME_SIZE</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>delayed_signal</name><index>[<expr><name>ANALYZED_FRAC_DELAYS</name></expr>]</index><index>[<expr><name>SUBFRAME_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>corr_den</name><index>[<expr><name>ANALYZED_FRAC_DELAYS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>subframe_size</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmp</name> <operator>|=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>residual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">11</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_size</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sig_scaled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>residual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_size</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sig_scaled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>residual</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<expr_stmt><expr><name>gain_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ener</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>sig_scaled</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr></argument>,

<argument><expr><name>sig_scaled</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr></argument>,

<argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ener</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sh_ener</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>ener</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sh_ener</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>sh_ener</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ener</name> <operator>&gt;&gt;=</operator> <name>sh_ener</name></expr>;</expr_stmt>

<expr_stmt><expr><name>corr_int_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>best_delay_int</name> <operator>=</operator> <name>pitch_delay_int</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pitch_delay_int</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>pitch_delay_int</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>sig_scaled</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr></argument>,

<argument><expr><name>sig_scaled</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name> <operator>-</operator> <name>i</name></expr></argument>,

<argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&gt;</operator> <name>corr_int_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>corr_int_num</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_delay_int</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>corr_int_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>corr_int_den</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>sig_scaled</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name> <operator>-</operator> <name>best_delay_int</name></expr></argument>,

<argument><expr><name>sig_scaled</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name> <operator>-</operator> <name>best_delay_int</name></expr></argument>,

<argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ANALYZED_FRAC_DELAYS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_acelp_interpolate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>delayed_signal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sig_scaled</name><index>[<expr><name>RES_PREV_DATA_SIZE</name> <operator>-</operator> <name>best_delay_int</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ff_g729_interp_filt_short</name></expr></argument>,

<argument><expr><name>ANALYZED_FRAC_DELAYS</name><operator>+</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>SHORT_INT_FILT_LEN</name></expr></argument>,

<argument><expr><name>subframe_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>corr_int_den</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ANALYZED_FRAC_DELAYS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>delayed_signal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>delayed_signal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>subframe_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>corr_den</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>+</operator> <name><name>delayed_signal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr> ]</index></name> <operator>*</operator> <name><name>delayed_signal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>corr_den</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sum</name> <operator>+</operator> <name><name>delayed_signal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>subframe_size</name></expr>]</index></name> <operator>*</operator> <name><name>delayed_signal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>subframe_size</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFMAX3</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>corr_den</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>corr_den</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sh_gain_den</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sh_gain_den</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sh_gain_num</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>sh_gain_den</name></expr></argument>, <argument><expr><name>sh_ener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delayed_signal_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>best_delay_frac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_den</name> <operator>=</operator> <name>corr_int_den</name> <operator>&gt;&gt;</operator> <name>sh_gain_den</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_num</name> <operator>=</operator> <name>corr_int_num</name> <operator>&gt;&gt;</operator> <name>sh_gain_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_num_square</name> <operator>=</operator> <name>gain_num</name> <operator>*</operator> <name>gain_num</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ANALYZED_FRAC_DELAYS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>gain_num_short</name></decl>, <decl><type ref="prev"/><name>gain_den_short</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gain_num_short_square</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>delayed_signal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>sig_scaled</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr></argument>,

<argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_num_short</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>sum</name> <operator>&gt;&gt;</operator> <name>sh_gain_num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_num_short_square</name> <operator>=</operator> <name>gain_num_short</name> <operator>*</operator> <name>gain_num_short</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_den_short</name> <operator>=</operator> <name><name>corr_den</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>sh_gain_den</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>MULL</name><argument_list>(<argument><expr><name>gain_num_short_square</name></expr></argument>, <argument><expr><name>gain_den</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <call><name>MULL</name><argument_list>(<argument><expr><name>gain_num_square</name></expr></argument>, <argument><expr><name>gain_den_short</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <name>tmp2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gain_num</name> <operator>=</operator> <name>gain_num_short</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_den</name> <operator>=</operator> <name>gain_den_short</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_num_square</name> <operator>=</operator> <name>gain_num_short_square</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delayed_signal_offset</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_delay_frac</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>L64_temp0</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>gain_num_square</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>sh_gain_num</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>L64_temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>gain_den</name> <operator>*</operator> <name>ener</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>sh_gain_den</name> <operator>+</operator> <name>sh_ener</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>L64_temp0</name> <operator>&lt;</operator> <name>L64_temp1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gain_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt> 

</block_content>}</block></if></if_stmt> 

</block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gain_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>residual_filt</name></expr></argument>, <argument><expr><name>residual</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr></argument>, <argument><expr><name>subframe_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>best_delay_frac</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_acelp_interpolate</name><argument_list>(<argument><expr><name>residual_filt</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sig_scaled</name><index>[<expr><name>RES_PREV_DATA_SIZE</name> <operator>-</operator> <name>best_delay_int</name> <operator>+</operator> <name>delayed_signal_offset</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ff_g729_interp_filt_long</name></expr></argument>,

<argument><expr><name>ANALYZED_FRAC_DELAYS</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>-</operator> <name>best_delay_frac</name></expr></argument>,

<argument><expr><name>LONG_INT_FILT_LEN</name></expr></argument>,

<argument><expr><name>subframe_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>residual_filt</name></expr></argument>,

<argument><expr><name>sig_scaled</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr></argument>,

<argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gain_long_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sh_gain_long_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>&gt;&gt;=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_long_num</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sh_gain_long_num</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>residual_filt</name></expr></argument>, <argument><expr><name>residual_filt</name></expr></argument>, <argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>&gt;&gt;=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_long_den</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sh_gain_long_den</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>L_temp0</name> <operator>=</operator> <name>gain_num</name> <operator>*</operator> <name>gain_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>L_temp0</name> <operator>=</operator> <call><name>MULL</name><argument_list>(<argument><expr><name>L_temp0</name></expr></argument>, <argument><expr><name>gain_long_den</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>L_temp1</name> <operator>=</operator> <name>gain_long_num</name> <operator>*</operator> <name>gain_long_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>L_temp1</name> <operator>=</operator> <call><name>MULL</name><argument_list>(<argument><expr><name>L_temp1</name></expr></argument>, <argument><expr><name>gain_den</name></expr></argument>, <argument><expr><name>FRAC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sh_gain_long_num</name> <operator>-</operator> <name>sh_gain_num</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>sh_gain_long_den</name> <operator>-</operator> <name>sh_gain_den</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>L_temp0</name> <operator>&gt;&gt;=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>L_temp1</name> <operator>&gt;&gt;=</operator> <operator>-</operator><name>tmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>L_temp1</name> <operator>&gt;</operator> <name>L_temp0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>selected_signal</name> <operator>=</operator> <name>residual_filt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_num</name> <operator>=</operator> <name>gain_long_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_den</name> <operator>=</operator> <name>gain_long_den</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sh_gain_num</name> <operator>=</operator> <name>sh_gain_long_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sh_gain_den</name> <operator>=</operator> <name>sh_gain_long_den</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>selected_signal</name> <operator>=</operator> <operator>&amp;</operator><name><name>delayed_signal</name><index>[<expr><name>best_delay_frac</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>delayed_signal_offset</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>selected_signal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>selected_signal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <operator>-</operator><name>shift</name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<expr_stmt><expr><name>selected_signal_const</name> <operator>=</operator> <name>selected_signal</name></expr>;</expr_stmt>

</block_content>}</block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>selected_signal_const</name> <operator>=</operator> <name>residual</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name> <operator>-</operator> <operator>(</operator><name>best_delay_int</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>delayed_signal_offset</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>G729_BITEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>sh_gain_num</name> <operator>-</operator> <name>sh_gain_den</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>gain_den</name> <operator>&gt;&gt;=</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>gain_num</name> <operator>&gt;&gt;=</operator> <operator>-</operator><name>tmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gain_num</name> <operator>&gt;</operator> <name>gain_den</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lt_filt_factor_a</name> <operator>=</operator> <name>MIN_LT_FILT_FACTOR_A</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>gain_num</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_den</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lt_filt_factor_a</name> <operator>=</operator> <operator>(</operator><name>gain_den</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>gain_den</name> <operator>+</operator> <name>gain_num</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>L64_temp0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>gain_num</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh_gain_num</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>L64_temp1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>gain_den</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>sh_gain_den</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lt_filt_factor_a</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>L64_temp1</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>L64_temp1</name> <operator>+</operator> <name>L64_temp0</name><operator>)</operator></expr></argument>, <argument><expr><name>MIN_LT_FILT_FACTOR_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>lt_filt_factor_b</name> <operator>=</operator> <literal type="number">32767</literal> <operator>-</operator> <name>lt_filt_factor_a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_acelp_weighted_vector_sum</name><argument_list>(<argument><expr><name>residual_filt</name></expr></argument>, <argument><expr><name>residual</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr></argument>,

<argument><expr><name>selected_signal_const</name></expr></argument>,

<argument><expr><name>lt_filt_factor_a</name></expr></argument>, <argument><expr><name>lt_filt_factor_b</name></expr></argument>,

<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>get_tilt_comp</name><parameter_list>(<parameter><decl><type><name>AudioDSPContext</name> <modifier>*</modifier></type><name>adsp</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>lp_gn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lp_gd</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>speech</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rh1</name></decl>,<decl><type ref="prev"/><name>rh0</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gain_term</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lp_gn</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filter</name><argument_list>(<argument><expr><name>lp_gn</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>lp_gd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lp_gn</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rh0</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>lp_gn</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>lp_gn</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rh1</name> <operator>=</operator> <call><name><name>adsp</name><operator>-&gt;</operator><name>scalarproduct_int16</name></name><argument_list>(<argument><expr><name>lp_gn</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>lp_gn</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>rh0</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rh0</name> <operator>&gt;&gt;=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rh1</name> <operator>&gt;&gt;=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>rh1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>rh0</name> <operator>||</operator> <operator>!</operator><name>rh0</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gain_term</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>gain_term</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>lp_gn</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>gain_term</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>gain_term</name> <operator>&gt;</operator> <literal type="number">0x400</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">0x2000000</literal> <operator>/</operator> <name>gain_term</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subframe_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>speech</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>speech</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>temp</name> <operator>+</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><operator>(</operator><name>rh1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>rh0</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>apply_tilt_comp</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>res_pst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>refl_coeff</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>ht_prev_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gt</name></decl>, <decl><type ref="prev"/><name>ga</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fact</name></decl>, <decl><type ref="prev"/><name>sh_fact</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>refl_coeff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gt</name> <operator>=</operator> <operator>(</operator><name>refl_coeff</name> <operator>*</operator> <name>G729_TILT_FACTOR_PLUS</name> <operator>+</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fact</name> <operator>=</operator> <literal type="number">0x2000</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>sh_fact</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>gt</name> <operator>=</operator> <operator>(</operator><name>refl_coeff</name> <operator>*</operator> <name>G729_TILT_FACTOR_MINUS</name> <operator>+</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fact</name> <operator>=</operator> <literal type="number">0x400</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>sh_fact</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ga</name> <operator>=</operator> <operator>(</operator><name>fact</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><literal type="number">32768</literal> <operator>-</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>gt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gt</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>res_pst</name><index>[<expr><name>subframe_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>subframe_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>gt</name> <operator>*</operator> <name><name>res_pst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0x4000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>res_pst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>tmp2</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>tmp2</name> <operator>*</operator> <name>ga</name> <operator>+</operator> <name>fact</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh_fact</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>gt</name> <operator>*</operator> <name>ht_prev_data</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0x4000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name><name>res_pst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>tmp2</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <operator>(</operator><name>tmp2</name> <operator>*</operator> <name>ga</name> <operator>+</operator> <name>fact</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>sh_fact</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt>

<return>return <expr><name>tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_g729_postfilter</name><parameter_list>(<parameter><decl><type><name>AudioDSPContext</name> <modifier>*</modifier></type><name>adsp</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>ht_prev_data</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>voicing</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>lp_filter_coeffs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pitch_delay_int</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>residual</name></decl></parameter>, <parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>res_filter_data</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>pos_filter_data</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>speech</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>residual_filt_buf</name><index>[<expr><name>SUBFRAME_SIZE</name><operator>+</operator><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lp_gn</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>lp_gd</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tilt_comp_coeff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lp_gn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">33</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lp_gn</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lp_filter_coeffs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>formant_pp_factor_num_pow</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lp_gd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>lp_filter_coeffs</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>formant_pp_factor_den_pow</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>speech</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>res_filter_data</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>residual_filter</name><argument_list>(<argument><expr><name>residual</name> <operator>+</operator> <name>RES_PREV_DATA_SIZE</name></expr></argument>, <argument><expr><name>lp_gn</name> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name>speech</name></expr></argument>, <argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res_filter_data</name></expr></argument>, <argument><expr><name>speech</name> <operator>+</operator> <name>subframe_size</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>long_term_filter</name><argument_list>(<argument><expr><name>adsp</name></expr></argument>, <argument><expr><name>pitch_delay_int</name></expr></argument>,

<argument><expr><name>residual</name></expr></argument>, <argument><expr><name>residual_filt_buf</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>,

<argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>voicing</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>*</operator><name>voicing</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>residual</name></expr></argument>, <argument><expr><name>residual</name> <operator>+</operator> <name>subframe_size</name></expr></argument>, <argument><expr><name>RES_PREV_DATA_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tilt_comp_coeff</name> <operator>=</operator> <call><name>get_tilt_comp</name><argument_list>(<argument><expr><name>adsp</name></expr></argument>, <argument><expr><name>lp_gn</name></expr></argument>, <argument><expr><name>lp_gd</name></expr></argument>, <argument><expr><name>residual_filt_buf</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>subframe_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_celp_lp_synthesis_filter</name><argument_list>(<argument><expr><name>pos_filter_data</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>lp_gd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>residual_filt_buf</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>,

<argument><expr><name>subframe_size</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x800</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos_filter_data</name></expr></argument>, <argument><expr><name>pos_filter_data</name> <operator>+</operator> <name>subframe_size</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ht_prev_data</name> <operator>=</operator> <call><name>apply_tilt_comp</name><argument_list>(<argument><expr><name>speech</name></expr></argument>, <argument><expr><name>pos_filter_data</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>tilt_comp_coeff</name></expr></argument>,

<argument><expr><name>subframe_size</name></expr></argument>, <argument><expr><operator>*</operator><name>ht_prev_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>ff_g729_adaptive_gain_control</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gain_before</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gain_after</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>speech</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>subframe_size</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>gain_prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>gain</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exp_before</name></decl>, <decl><type ref="prev"/><name>exp_after</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gain_after</name> <operator>&amp;&amp;</operator> <name>gain_before</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gain_before</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exp_before</name> <operator>=</operator> <literal type="number">14</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>gain_before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_before</name> <operator>=</operator> <call><name>bidir_sal</name><argument_list>(<argument><expr><name>gain_before</name></expr></argument>, <argument><expr><name>exp_before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exp_after</name> <operator>=</operator> <literal type="number">14</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>gain_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_after</name> <operator>=</operator> <call><name>bidir_sal</name><argument_list>(<argument><expr><name>gain_after</name></expr></argument>, <argument><expr><name>exp_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gain_before</name> <operator>&lt;</operator> <name>gain_after</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><name>gain_before</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <name>gain_after</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>bidir_sal</name><argument_list>(<argument><expr><name>gain</name></expr></argument>, <argument><expr><name>exp_after</name> <operator>-</operator> <name>exp_before</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>gain_before</name> <operator>-</operator> <name>gain_after</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>/</operator> <name>gain_after</name> <operator>+</operator> <literal type="number">0x4000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <call><name>bidir_sal</name><argument_list>(<argument><expr><name>gain</name></expr></argument>, <argument><expr><name>exp_after</name> <operator>-</operator> <name>exp_before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <operator>(</operator><name>gain</name> <operator>*</operator> <name>G729_AGC_FAC1</name> <operator>+</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>subframe_size</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>gain_prev</name> <operator>=</operator> <operator>(</operator><name>G729_AGC_FACTOR</name> <operator>*</operator> <name>gain_prev</name> <operator>+</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_prev</name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>gain</name> <operator>+</operator> <name>gain_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>speech</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><operator>(</operator><name><name>speech</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>gain_prev</name> <operator>+</operator> <literal type="number">0x2000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>gain_prev</name></expr>;</return>

</block_content>}</block></function>

</unit>
