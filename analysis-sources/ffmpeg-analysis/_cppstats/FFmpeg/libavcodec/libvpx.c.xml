<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libvpx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vpx_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libvpx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vpx_encoder.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vpx/vp8cx.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>vp9_pix_fmts_def</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>vp9_pix_fmts_highcol</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>vp9_pix_fmts_highbd</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_YUVA420P</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P10</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P12</name></expr>,

<expr><name>AV_PIX_FMT_YUV422P12</name></expr>,

<expr><name>AV_PIX_FMT_YUV440P12</name></expr>,

<expr><name>AV_PIX_FMT_YUV444P12</name></expr>,

<expr><name>AV_PIX_FMT_GBRP</name></expr>,

<expr><name>AV_PIX_FMT_GBRP10</name></expr>,

<expr><name>AV_PIX_FMT_GBRP12</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_vp9_init_static</name><parameter_list>(<parameter><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>vp9_pix_fmts_def</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_LIBVPX_VP9_ENCODER</name></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>vpx_codec_caps_t</name></type> <name>codec_caps</name> <init>= <expr><call><name>vpx_codec_get_caps</name><argument_list>(<argument><expr><call><name>vpx_codec_vp9_cx</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec_caps</name> <operator>&amp;</operator> <name>VPX_CODEC_CAP_HIGHBITDEPTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>vp9_pix_fmts_highbd</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name> <operator>=</operator> <name>vp9_pix_fmts_highcol</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
