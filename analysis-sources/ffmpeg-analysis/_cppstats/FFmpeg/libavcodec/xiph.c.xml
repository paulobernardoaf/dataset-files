<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\xiph.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xiph.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>avpriv_split_xiph_headers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>extradata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>extradata_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>first_header_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>header_start</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>header_len</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extradata_size</name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>first_header_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>overall_len</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>extradata</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header_start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extradata</name> <operator>+=</operator> <name><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overall_len</name> <operator>&gt;</operator> <name>extradata_size</name> <operator>-</operator> <name><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>overall_len</name> <operator>+=</operator> <name><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>extradata_size</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>extradata_size</name> <operator>&lt;</operator> <name>INT_MAX</name> <operator>-</operator> <literal type="number">0x1ff</literal> <operator>&amp;&amp;</operator> <name><name>extradata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>overall_len</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>extradata</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>extradata</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>overall_len</name> <operator>&lt;</operator> <name>extradata_size</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>extradata</name><operator>==</operator><literal type="number">0xff</literal></expr>;</condition> <incr><expr><name>extradata</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>overall_len</name> <operator>+=</operator> <literal type="number">0xff</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>*</operator><name>extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overall_len</name> <operator>+=</operator> <operator>*</operator><name>extradata</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overall_len</name> <operator>&gt;</operator> <name>extradata_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>header_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>extradata_size</name> <operator>-</operator> <name>overall_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>extradata</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>header_start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>header_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header_start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>header_start</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>header_len</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
