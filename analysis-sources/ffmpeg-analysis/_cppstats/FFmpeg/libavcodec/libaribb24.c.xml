<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libaribb24.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/ass.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb24/aribb24.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb24/parser.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb24/decoder.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>Libaribb24Context</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arib_instance_t</name> <modifier>*</modifier></type><name>lib_instance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arib_parser_t</name> <modifier>*</modifier></type><name>parser</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>arib_decoder_t</name> <modifier>*</modifier></type><name>decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aribb24_base_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>aribb24_skip_ruby</name></decl>;</decl_stmt>

}</block></struct></type> <name>Libaribb24Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>get_profile_font_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>profile</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_ARIB_PROFILE_A</name></expr>:</case>

<return>return <expr><literal type="number">36</literal></expr>;</return>

<case>case <expr><name>FF_PROFILE_ARIB_PROFILE_C</name></expr>:</case>

<return>return <expr><literal type="number">18</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libaribb24_log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>(</operator><name>AVCodecContext</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libaribb24_generate_ass_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>plane_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>plane_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>font_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_ARIB_PROFILE_A</name></expr>:</case>

<expr_stmt><expr><name>plane_width</name> <operator>=</operator> <literal type="number">960</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>plane_height</name> <operator>=</operator> <literal type="number">540</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>font_size</name> <operator>=</operator> <call><name>get_profile_font_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_ARIB_PROFILE_C</name></expr>:</case>

<expr_stmt><expr><name>plane_width</name> <operator>=</operator> <literal type="number">320</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>plane_height</name> <operator>=</operator> <literal type="number">180</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>font_size</name> <operator>=</operator> <call><name>get_profile_font_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown or unsupported profile set!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name> <operator>=</operator> <call><name>av_asprintf</name><argument_list>(

<argument><expr><literal type="string">"[Script Info]\r\n"</literal>

<literal type="string">"; Script generated by FFmpeg/Lavc%s\r\n"</literal>

<literal type="string">"ScriptType: v4.00+\r\n"</literal>

<literal type="string">"PlayResX: %d\r\n"</literal>

<literal type="string">"PlayResY: %d\r\n"</literal>

<literal type="string">"\r\n"</literal>

<literal type="string">"[V4+ Styles]\r\n"</literal>

<literal type="string">"Format: Name, "</literal>

<literal type="string">"Fontname, Fontsize, "</literal>

<literal type="string">"PrimaryColour, SecondaryColour, OutlineColour, BackColour, "</literal>

<literal type="string">"Bold, Italic, Underline, StrikeOut, "</literal>

<literal type="string">"ScaleX, ScaleY, "</literal>

<literal type="string">"Spacing, Angle, "</literal>

<literal type="string">"BorderStyle, Outline, Shadow, "</literal>

<literal type="string">"Alignment, MarginL, MarginR, MarginV, "</literal>

<literal type="string">"Encoding\r\n"</literal>

<literal type="string">"Style: "</literal>

<literal type="string">"Default,"</literal> 

<literal type="string">"%s,%d,"</literal> 

<literal type="string">"&amp;H%x,&amp;H%x,&amp;H%x,&amp;H%x,"</literal> 

<literal type="string">"%d,%d,%d,0,"</literal> 

<literal type="string">"100,100,"</literal> 

<literal type="string">"0,0,"</literal> 

<literal type="string">"%d,1,0,"</literal> 

<literal type="string">"%d,10,10,10,"</literal> 

<literal type="string">"0\r\n"</literal> 

<literal type="string">"\r\n"</literal>

<literal type="string">"[Events]\r\n"</literal>

<literal type="string">"Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\r\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>AV_STRINGIFY</name><argument_list>(<argument><expr><name>LIBAVCODEC_VERSION</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>plane_width</name></expr></argument>, <argument><expr><name>plane_height</name></expr></argument>,

<argument><expr><name>ASS_DEFAULT_FONT</name></expr></argument>, <argument><expr><name>font_size</name></expr></argument>, <argument><expr><name>ASS_DEFAULT_COLOR</name></expr></argument>,

<argument><expr><name>ASS_DEFAULT_COLOR</name></expr></argument>, <argument><expr><name>ASS_DEFAULT_BACK_COLOR</name></expr></argument>, <argument><expr><name>ASS_DEFAULT_BACK_COLOR</name></expr></argument>,

<argument><expr><operator>-</operator><name>ASS_DEFAULT_BOLD</name></expr></argument>, <argument><expr><operator>-</operator><name>ASS_DEFAULT_ITALIC</name></expr></argument>, <argument><expr><operator>-</operator><name>ASS_DEFAULT_UNDERLINE</name></expr></argument>,

<argument><expr><name>ASS_DEFAULT_BORDERSTYLE</name></expr></argument>, <argument><expr><name>ASS_DEFAULT_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header_size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libaribb24_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Libaribb24Context</name> <modifier>*</modifier></type><name>b24</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type>(<modifier>*</modifier> <name>arib_dec_init</name>)<parameter_list>(<parameter><decl><type><name>arib_decoder_t</name><modifier>*</modifier></type> <name>decoder</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>ret_code</name> <init>= <expr><name>AVERROR_EXTERNAL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name> <operator>=</operator> <call><name>arib_instance_new</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize libaribb24!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>init_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b24</name><operator>-&gt;</operator><name>aribb24_base_path</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Setting the libaribb24 base path to '%s'\n"</literal></expr></argument>,

<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>aribb24_base_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arib_set_base_path</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name></expr></argument>, <argument><expr><name><name>b24</name><operator>-&gt;</operator><name>aribb24_base_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>arib_register_messages_callback</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name></expr></argument>, <argument><expr><name>libaribb24_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>b24</name><operator>-&gt;</operator><name>parser</name></name> <operator>=</operator> <call><name>arib_get_parser</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize libaribb24 PES parser!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>init_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name> <operator>=</operator> <call><name>arib_get_decoder</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize libaribb24 decoder!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>init_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_PROFILE_ARIB_PROFILE_A</name></expr>:</case>

<expr_stmt><expr><name>arib_dec_init</name> <operator>=</operator> <name>arib_initialize_decoder_a_profile</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_PROFILE_ARIB_PROFILE_C</name></expr>:</case>

<expr_stmt><expr><name>arib_dec_init</name> <operator>=</operator> <name>arib_initialize_decoder_c_profile</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown or unsupported profile set!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_code</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>init_fail</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>arib_dec_init</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>libaribb24_generate_ass_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret_code</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>init_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>init_fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arib_finalize_decoder</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arib_instance_destroy</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret_code</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libaribb24_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Libaribb24Context</name> <modifier>*</modifier></type><name>b24</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arib_finalize_decoder</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arib_instance_destroy</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>lib_instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_TO_BGR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((c) &amp; 0xff) &lt;&lt; 16 | ((c) &amp; 0xff00) | (((c) &gt;&gt; 16) &amp; 0xff))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libaribb24_handle_regions</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Libaribb24Context</name> <modifier>*</modifier></type><name>b24</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>arib_buf_region_t</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>arib_decoder_get_regions</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>profile_font_size</name> <init>= <expr><call><name>get_profile_font_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buf</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>region</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>region_length</name> <init>= <expr><name><name>region</name><operator>-&gt;</operator><name>p_end</name></name> <operator>-</operator> <name><name>region</name><operator>-&gt;</operator><name>p_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ruby_region</name> <init>=

<expr><name><name>region</name><operator>-&gt;</operator><name>i_fontheight</name></name> <operator>==</operator> <operator>(</operator><name>profile_font_size</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>foreground_bgr_color</name> <init>= <expr><call><name>RGB_TO_BGR</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_foreground_color</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>background_bgr_color</name> <init>= <expr><call><name>RGB_TO_BGR</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_background_color</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>region_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid negative region length!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>region_length</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>ruby_region</name> <operator>&amp;&amp;</operator> <name><name>b24</name><operator>-&gt;</operator><name>aribb24_skip_ruby</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<goto>goto <name>next_region</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>foreground_bgr_color</name> <operator>!=</operator> <name>ASS_DEFAULT_COLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\1c&amp;H%06x&amp;}"</literal></expr></argument>, <argument><expr><name>foreground_bgr_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>i_foreground_alpha</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\1a&amp;H%02x&amp;}"</literal></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_foreground_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>background_bgr_color</name> <operator>!=</operator> <name>ASS_DEFAULT_BACK_COLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\3c&amp;H%06x&amp;}"</literal></expr></argument>, <argument><expr><name>background_bgr_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\3a&amp;H%02x&amp;}"</literal></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_background_alpha</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>region</name><operator>-&gt;</operator><name>i_fontwidth</name></name> <operator>!=</operator> <name>profile_font_size</name> <operator>||</operator>

<name><name>region</name><operator>-&gt;</operator><name>i_fontheight</name></name> <operator>!=</operator> <name>profile_font_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\fscx%"</literal><name>PRId64</name><literal type="string">"\\fscy%"</literal><name>PRId64</name><literal type="string">"}"</literal></expr></argument>,

<argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_fontwidth</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>,

<argument><expr><name>profile_font_size</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_rescale</name><argument_list>(<argument><expr><name><name>region</name><operator>-&gt;</operator><name>i_fontheight</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>,

<argument><expr><name>profile_font_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>region</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>, <argument><expr><name>region_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"{\\r}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>next_region</name>:</label>

<expr_stmt><expr><name>region</name> <operator>=</operator> <name><name>region</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Styled ASS line: %s\n"</literal></expr></argument>,

<argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ass_add_rect</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>b24</name><operator>-&gt;</operator><name>read_order</name></name><operator>++</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>libaribb24_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Libaribb24Context</name> <modifier>*</modifier></type><name>b24</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>parsed_data_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>decoded_subtitle_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>parsed_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decoded_subtitle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>subtitle_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>arib_parse_pes</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parsed_data</name> <operator>=</operator> <call><name>arib_parser_get_data</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>parsed_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parsed_data</name> <operator>||</operator> <operator>!</operator><name>parsed_data_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No decode'able data was received from "</literal>

<literal type="string">"packet (dts: %"</literal><name>PRId64</name><literal type="string">", pts: %"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>decoded_subtitle_size</name> <operator>=</operator> <name>parsed_data_size</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>decoded_subtitle</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>decoded_subtitle_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Failed to allocate buffer for decoded subtitle!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>decoded_subtitle_size</name> <operator>=</operator> <call><name>arib_decode_buffer</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>,

<argument><expr><name>parsed_data</name></expr></argument>,

<argument><expr><name>parsed_data_size</name></expr></argument>,

<argument><expr><name>decoded_subtitle</name></expr></argument>,

<argument><expr><name>decoded_subtitle_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subtitle_duration</name> <operator>=</operator> <call><name>arib_decoder_get_time</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name></name></expr></argument>, <argument><expr><name>AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name> <operator>=</operator> <ternary><condition><expr><name>subtitle_duration</name></expr> ?</condition><then>

<macro><name>av_rescale_q</name><argument_list>(<argument>subtitle_duration</argument>,

<argument>AV_TIME_BASE_Q</argument>,

<argument>(AVRational){<literal type="number">1</literal></argument>, <argument><literal type="number">1000</literal>}</argument>)</argument_list></macro> </then><else>:

<expr><name>UINT32_MAX</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"Result: '%s' (size: %zu, pkt_pts: %"</literal><name>PRId64</name><literal type="string">", sub_pts: %"</literal><name>PRId64</name><literal type="string">" "</literal>

<literal type="string">"duration: %"</literal><name>PRIu32</name><literal type="string">", pkt_timebase: %d/%d, time_base: %d/%d')\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>decoded_subtitle</name></expr> ?</condition><then> <expr><name>decoded_subtitle</name></expr> </then><else>: <expr><literal type="string">"&lt;no subtitle&gt;"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>decoded_subtitle_size</name></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,

<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>end_display_time</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pkt_timebase</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>decoded_subtitle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>libaribb24_handle_regions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_sub_ptr</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>decoded_subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arib_finalize_decoder</name><argument_list>(<argument><expr><name><name>b24</name><operator>-&gt;</operator><name>decoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>libaribb24_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Libaribb24Context</name> <modifier>*</modifier></type><name>b24</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_RO_FLUSH_NOOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b24</name><operator>-&gt;</operator><name>read_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(Libaribb24Context, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_SUBTITLE_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"aribb24-base-path"</literal></expr>, <expr><literal type="string">"set the base path for the libaribb24 library"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aribb24_base_path</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SD</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aribb24-skip-ruby-text"</literal></expr>, <expr><literal type="string">"skip ruby text blocks during decoding"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>aribb24_skip_ruby</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SD</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>aribb24_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"libaribb24 decoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libaribb24_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libaribb24"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libaribb24 ARIB STD-B24 caption decoder"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ARIB_CAPTION</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Libaribb24Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>libaribb24_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>libaribb24_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>libaribb24_decode</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>libaribb24_flush</name></expr>,

<expr><operator>.</operator><name>priv_class</name><operator>=</operator> <operator>&amp;</operator><name>aribb24_class</name></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libaribb24"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
