<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\rv10.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_resilience.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg_er.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4video.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideodata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rv10.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV_GET_MAJOR_VER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; 28)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV_GET_MINOR_VER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 20) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RV_GET_MICRO_VER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 12) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_VLC_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>RVDecContext</name> <block>{

<decl_stmt><decl><type><name>MpegEncContext</name></type> <name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_width</name></decl>, <name>orig_height</name>;</decl_stmt>

}</block></struct></type> <name>RVDecContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>rv_lum_code</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x3e7f</literal></expr>, <expr><literal type="number">0x0f00</literal></expr>, <expr><literal type="number">0x0f01</literal></expr>, <expr><literal type="number">0x0f02</literal></expr>, <expr><literal type="number">0x0f03</literal></expr>, <expr><literal type="number">0x0f04</literal></expr>, <expr><literal type="number">0x0f05</literal></expr>, <expr><literal type="number">0x0f06</literal></expr>,

<expr><literal type="number">0x0f07</literal></expr>, <expr><literal type="number">0x0f08</literal></expr>, <expr><literal type="number">0x0f09</literal></expr>, <expr><literal type="number">0x0f0a</literal></expr>, <expr><literal type="number">0x0f0b</literal></expr>, <expr><literal type="number">0x0f0c</literal></expr>, <expr><literal type="number">0x0f0d</literal></expr>, <expr><literal type="number">0x0f0e</literal></expr>,

<expr><literal type="number">0x0f0f</literal></expr>, <expr><literal type="number">0x0f10</literal></expr>, <expr><literal type="number">0x0f11</literal></expr>, <expr><literal type="number">0x0f12</literal></expr>, <expr><literal type="number">0x0f13</literal></expr>, <expr><literal type="number">0x0f14</literal></expr>, <expr><literal type="number">0x0f15</literal></expr>, <expr><literal type="number">0x0f16</literal></expr>,

<expr><literal type="number">0x0f17</literal></expr>, <expr><literal type="number">0x0f18</literal></expr>, <expr><literal type="number">0x0f19</literal></expr>, <expr><literal type="number">0x0f1a</literal></expr>, <expr><literal type="number">0x0f1b</literal></expr>, <expr><literal type="number">0x0f1c</literal></expr>, <expr><literal type="number">0x0f1d</literal></expr>, <expr><literal type="number">0x0f1e</literal></expr>,

<expr><literal type="number">0x0f1f</literal></expr>, <expr><literal type="number">0x0f20</literal></expr>, <expr><literal type="number">0x0f21</literal></expr>, <expr><literal type="number">0x0f22</literal></expr>, <expr><literal type="number">0x0f23</literal></expr>, <expr><literal type="number">0x0f24</literal></expr>, <expr><literal type="number">0x0f25</literal></expr>, <expr><literal type="number">0x0f26</literal></expr>,

<expr><literal type="number">0x0f27</literal></expr>, <expr><literal type="number">0x0f28</literal></expr>, <expr><literal type="number">0x0f29</literal></expr>, <expr><literal type="number">0x0f2a</literal></expr>, <expr><literal type="number">0x0f2b</literal></expr>, <expr><literal type="number">0x0f2c</literal></expr>, <expr><literal type="number">0x0f2d</literal></expr>, <expr><literal type="number">0x0f2e</literal></expr>,

<expr><literal type="number">0x0f2f</literal></expr>, <expr><literal type="number">0x0f30</literal></expr>, <expr><literal type="number">0x0f31</literal></expr>, <expr><literal type="number">0x0f32</literal></expr>, <expr><literal type="number">0x0f33</literal></expr>, <expr><literal type="number">0x0f34</literal></expr>, <expr><literal type="number">0x0f35</literal></expr>, <expr><literal type="number">0x0f36</literal></expr>,

<expr><literal type="number">0x0f37</literal></expr>, <expr><literal type="number">0x0f38</literal></expr>, <expr><literal type="number">0x0f39</literal></expr>, <expr><literal type="number">0x0f3a</literal></expr>, <expr><literal type="number">0x0f3b</literal></expr>, <expr><literal type="number">0x0f3c</literal></expr>, <expr><literal type="number">0x0f3d</literal></expr>, <expr><literal type="number">0x0f3e</literal></expr>,

<expr><literal type="number">0x0f3f</literal></expr>, <expr><literal type="number">0x0380</literal></expr>, <expr><literal type="number">0x0381</literal></expr>, <expr><literal type="number">0x0382</literal></expr>, <expr><literal type="number">0x0383</literal></expr>, <expr><literal type="number">0x0384</literal></expr>, <expr><literal type="number">0x0385</literal></expr>, <expr><literal type="number">0x0386</literal></expr>,

<expr><literal type="number">0x0387</literal></expr>, <expr><literal type="number">0x0388</literal></expr>, <expr><literal type="number">0x0389</literal></expr>, <expr><literal type="number">0x038a</literal></expr>, <expr><literal type="number">0x038b</literal></expr>, <expr><literal type="number">0x038c</literal></expr>, <expr><literal type="number">0x038d</literal></expr>, <expr><literal type="number">0x038e</literal></expr>,

<expr><literal type="number">0x038f</literal></expr>, <expr><literal type="number">0x0390</literal></expr>, <expr><literal type="number">0x0391</literal></expr>, <expr><literal type="number">0x0392</literal></expr>, <expr><literal type="number">0x0393</literal></expr>, <expr><literal type="number">0x0394</literal></expr>, <expr><literal type="number">0x0395</literal></expr>, <expr><literal type="number">0x0396</literal></expr>,

<expr><literal type="number">0x0397</literal></expr>, <expr><literal type="number">0x0398</literal></expr>, <expr><literal type="number">0x0399</literal></expr>, <expr><literal type="number">0x039a</literal></expr>, <expr><literal type="number">0x039b</literal></expr>, <expr><literal type="number">0x039c</literal></expr>, <expr><literal type="number">0x039d</literal></expr>, <expr><literal type="number">0x039e</literal></expr>,

<expr><literal type="number">0x039f</literal></expr>, <expr><literal type="number">0x00c0</literal></expr>, <expr><literal type="number">0x00c1</literal></expr>, <expr><literal type="number">0x00c2</literal></expr>, <expr><literal type="number">0x00c3</literal></expr>, <expr><literal type="number">0x00c4</literal></expr>, <expr><literal type="number">0x00c5</literal></expr>, <expr><literal type="number">0x00c6</literal></expr>,

<expr><literal type="number">0x00c7</literal></expr>, <expr><literal type="number">0x00c8</literal></expr>, <expr><literal type="number">0x00c9</literal></expr>, <expr><literal type="number">0x00ca</literal></expr>, <expr><literal type="number">0x00cb</literal></expr>, <expr><literal type="number">0x00cc</literal></expr>, <expr><literal type="number">0x00cd</literal></expr>, <expr><literal type="number">0x00ce</literal></expr>,

<expr><literal type="number">0x00cf</literal></expr>, <expr><literal type="number">0x0050</literal></expr>, <expr><literal type="number">0x0051</literal></expr>, <expr><literal type="number">0x0052</literal></expr>, <expr><literal type="number">0x0053</literal></expr>, <expr><literal type="number">0x0054</literal></expr>, <expr><literal type="number">0x0055</literal></expr>, <expr><literal type="number">0x0056</literal></expr>,

<expr><literal type="number">0x0057</literal></expr>, <expr><literal type="number">0x0020</literal></expr>, <expr><literal type="number">0x0021</literal></expr>, <expr><literal type="number">0x0022</literal></expr>, <expr><literal type="number">0x0023</literal></expr>, <expr><literal type="number">0x000c</literal></expr>, <expr><literal type="number">0x000d</literal></expr>, <expr><literal type="number">0x0004</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0005</literal></expr>, <expr><literal type="number">0x000e</literal></expr>, <expr><literal type="number">0x000f</literal></expr>, <expr><literal type="number">0x0024</literal></expr>, <expr><literal type="number">0x0025</literal></expr>, <expr><literal type="number">0x0026</literal></expr>, <expr><literal type="number">0x0027</literal></expr>,

<expr><literal type="number">0x0058</literal></expr>, <expr><literal type="number">0x0059</literal></expr>, <expr><literal type="number">0x005a</literal></expr>, <expr><literal type="number">0x005b</literal></expr>, <expr><literal type="number">0x005c</literal></expr>, <expr><literal type="number">0x005d</literal></expr>, <expr><literal type="number">0x005e</literal></expr>, <expr><literal type="number">0x005f</literal></expr>,

<expr><literal type="number">0x00d0</literal></expr>, <expr><literal type="number">0x00d1</literal></expr>, <expr><literal type="number">0x00d2</literal></expr>, <expr><literal type="number">0x00d3</literal></expr>, <expr><literal type="number">0x00d4</literal></expr>, <expr><literal type="number">0x00d5</literal></expr>, <expr><literal type="number">0x00d6</literal></expr>, <expr><literal type="number">0x00d7</literal></expr>,

<expr><literal type="number">0x00d8</literal></expr>, <expr><literal type="number">0x00d9</literal></expr>, <expr><literal type="number">0x00da</literal></expr>, <expr><literal type="number">0x00db</literal></expr>, <expr><literal type="number">0x00dc</literal></expr>, <expr><literal type="number">0x00dd</literal></expr>, <expr><literal type="number">0x00de</literal></expr>, <expr><literal type="number">0x00df</literal></expr>,

<expr><literal type="number">0x03a0</literal></expr>, <expr><literal type="number">0x03a1</literal></expr>, <expr><literal type="number">0x03a2</literal></expr>, <expr><literal type="number">0x03a3</literal></expr>, <expr><literal type="number">0x03a4</literal></expr>, <expr><literal type="number">0x03a5</literal></expr>, <expr><literal type="number">0x03a6</literal></expr>, <expr><literal type="number">0x03a7</literal></expr>,

<expr><literal type="number">0x03a8</literal></expr>, <expr><literal type="number">0x03a9</literal></expr>, <expr><literal type="number">0x03aa</literal></expr>, <expr><literal type="number">0x03ab</literal></expr>, <expr><literal type="number">0x03ac</literal></expr>, <expr><literal type="number">0x03ad</literal></expr>, <expr><literal type="number">0x03ae</literal></expr>, <expr><literal type="number">0x03af</literal></expr>,

<expr><literal type="number">0x03b0</literal></expr>, <expr><literal type="number">0x03b1</literal></expr>, <expr><literal type="number">0x03b2</literal></expr>, <expr><literal type="number">0x03b3</literal></expr>, <expr><literal type="number">0x03b4</literal></expr>, <expr><literal type="number">0x03b5</literal></expr>, <expr><literal type="number">0x03b6</literal></expr>, <expr><literal type="number">0x03b7</literal></expr>,

<expr><literal type="number">0x03b8</literal></expr>, <expr><literal type="number">0x03b9</literal></expr>, <expr><literal type="number">0x03ba</literal></expr>, <expr><literal type="number">0x03bb</literal></expr>, <expr><literal type="number">0x03bc</literal></expr>, <expr><literal type="number">0x03bd</literal></expr>, <expr><literal type="number">0x03be</literal></expr>, <expr><literal type="number">0x03bf</literal></expr>,

<expr><literal type="number">0x0f40</literal></expr>, <expr><literal type="number">0x0f41</literal></expr>, <expr><literal type="number">0x0f42</literal></expr>, <expr><literal type="number">0x0f43</literal></expr>, <expr><literal type="number">0x0f44</literal></expr>, <expr><literal type="number">0x0f45</literal></expr>, <expr><literal type="number">0x0f46</literal></expr>, <expr><literal type="number">0x0f47</literal></expr>,

<expr><literal type="number">0x0f48</literal></expr>, <expr><literal type="number">0x0f49</literal></expr>, <expr><literal type="number">0x0f4a</literal></expr>, <expr><literal type="number">0x0f4b</literal></expr>, <expr><literal type="number">0x0f4c</literal></expr>, <expr><literal type="number">0x0f4d</literal></expr>, <expr><literal type="number">0x0f4e</literal></expr>, <expr><literal type="number">0x0f4f</literal></expr>,

<expr><literal type="number">0x0f50</literal></expr>, <expr><literal type="number">0x0f51</literal></expr>, <expr><literal type="number">0x0f52</literal></expr>, <expr><literal type="number">0x0f53</literal></expr>, <expr><literal type="number">0x0f54</literal></expr>, <expr><literal type="number">0x0f55</literal></expr>, <expr><literal type="number">0x0f56</literal></expr>, <expr><literal type="number">0x0f57</literal></expr>,

<expr><literal type="number">0x0f58</literal></expr>, <expr><literal type="number">0x0f59</literal></expr>, <expr><literal type="number">0x0f5a</literal></expr>, <expr><literal type="number">0x0f5b</literal></expr>, <expr><literal type="number">0x0f5c</literal></expr>, <expr><literal type="number">0x0f5d</literal></expr>, <expr><literal type="number">0x0f5e</literal></expr>, <expr><literal type="number">0x0f5f</literal></expr>,

<expr><literal type="number">0x0f60</literal></expr>, <expr><literal type="number">0x0f61</literal></expr>, <expr><literal type="number">0x0f62</literal></expr>, <expr><literal type="number">0x0f63</literal></expr>, <expr><literal type="number">0x0f64</literal></expr>, <expr><literal type="number">0x0f65</literal></expr>, <expr><literal type="number">0x0f66</literal></expr>, <expr><literal type="number">0x0f67</literal></expr>,

<expr><literal type="number">0x0f68</literal></expr>, <expr><literal type="number">0x0f69</literal></expr>, <expr><literal type="number">0x0f6a</literal></expr>, <expr><literal type="number">0x0f6b</literal></expr>, <expr><literal type="number">0x0f6c</literal></expr>, <expr><literal type="number">0x0f6d</literal></expr>, <expr><literal type="number">0x0f6e</literal></expr>, <expr><literal type="number">0x0f6f</literal></expr>,

<expr><literal type="number">0x0f70</literal></expr>, <expr><literal type="number">0x0f71</literal></expr>, <expr><literal type="number">0x0f72</literal></expr>, <expr><literal type="number">0x0f73</literal></expr>, <expr><literal type="number">0x0f74</literal></expr>, <expr><literal type="number">0x0f75</literal></expr>, <expr><literal type="number">0x0f76</literal></expr>, <expr><literal type="number">0x0f77</literal></expr>,

<expr><literal type="number">0x0f78</literal></expr>, <expr><literal type="number">0x0f79</literal></expr>, <expr><literal type="number">0x0f7a</literal></expr>, <expr><literal type="number">0x0f7b</literal></expr>, <expr><literal type="number">0x0f7c</literal></expr>, <expr><literal type="number">0x0f7d</literal></expr>, <expr><literal type="number">0x0f7e</literal></expr>, <expr><literal type="number">0x0f7f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rv_lum_bits</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>rv_chrom_code</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xfe7f</literal></expr>, <expr><literal type="number">0x3f00</literal></expr>, <expr><literal type="number">0x3f01</literal></expr>, <expr><literal type="number">0x3f02</literal></expr>, <expr><literal type="number">0x3f03</literal></expr>, <expr><literal type="number">0x3f04</literal></expr>, <expr><literal type="number">0x3f05</literal></expr>, <expr><literal type="number">0x3f06</literal></expr>,

<expr><literal type="number">0x3f07</literal></expr>, <expr><literal type="number">0x3f08</literal></expr>, <expr><literal type="number">0x3f09</literal></expr>, <expr><literal type="number">0x3f0a</literal></expr>, <expr><literal type="number">0x3f0b</literal></expr>, <expr><literal type="number">0x3f0c</literal></expr>, <expr><literal type="number">0x3f0d</literal></expr>, <expr><literal type="number">0x3f0e</literal></expr>,

<expr><literal type="number">0x3f0f</literal></expr>, <expr><literal type="number">0x3f10</literal></expr>, <expr><literal type="number">0x3f11</literal></expr>, <expr><literal type="number">0x3f12</literal></expr>, <expr><literal type="number">0x3f13</literal></expr>, <expr><literal type="number">0x3f14</literal></expr>, <expr><literal type="number">0x3f15</literal></expr>, <expr><literal type="number">0x3f16</literal></expr>,

<expr><literal type="number">0x3f17</literal></expr>, <expr><literal type="number">0x3f18</literal></expr>, <expr><literal type="number">0x3f19</literal></expr>, <expr><literal type="number">0x3f1a</literal></expr>, <expr><literal type="number">0x3f1b</literal></expr>, <expr><literal type="number">0x3f1c</literal></expr>, <expr><literal type="number">0x3f1d</literal></expr>, <expr><literal type="number">0x3f1e</literal></expr>,

<expr><literal type="number">0x3f1f</literal></expr>, <expr><literal type="number">0x3f20</literal></expr>, <expr><literal type="number">0x3f21</literal></expr>, <expr><literal type="number">0x3f22</literal></expr>, <expr><literal type="number">0x3f23</literal></expr>, <expr><literal type="number">0x3f24</literal></expr>, <expr><literal type="number">0x3f25</literal></expr>, <expr><literal type="number">0x3f26</literal></expr>,

<expr><literal type="number">0x3f27</literal></expr>, <expr><literal type="number">0x3f28</literal></expr>, <expr><literal type="number">0x3f29</literal></expr>, <expr><literal type="number">0x3f2a</literal></expr>, <expr><literal type="number">0x3f2b</literal></expr>, <expr><literal type="number">0x3f2c</literal></expr>, <expr><literal type="number">0x3f2d</literal></expr>, <expr><literal type="number">0x3f2e</literal></expr>,

<expr><literal type="number">0x3f2f</literal></expr>, <expr><literal type="number">0x3f30</literal></expr>, <expr><literal type="number">0x3f31</literal></expr>, <expr><literal type="number">0x3f32</literal></expr>, <expr><literal type="number">0x3f33</literal></expr>, <expr><literal type="number">0x3f34</literal></expr>, <expr><literal type="number">0x3f35</literal></expr>, <expr><literal type="number">0x3f36</literal></expr>,

<expr><literal type="number">0x3f37</literal></expr>, <expr><literal type="number">0x3f38</literal></expr>, <expr><literal type="number">0x3f39</literal></expr>, <expr><literal type="number">0x3f3a</literal></expr>, <expr><literal type="number">0x3f3b</literal></expr>, <expr><literal type="number">0x3f3c</literal></expr>, <expr><literal type="number">0x3f3d</literal></expr>, <expr><literal type="number">0x3f3e</literal></expr>,

<expr><literal type="number">0x3f3f</literal></expr>, <expr><literal type="number">0x0f80</literal></expr>, <expr><literal type="number">0x0f81</literal></expr>, <expr><literal type="number">0x0f82</literal></expr>, <expr><literal type="number">0x0f83</literal></expr>, <expr><literal type="number">0x0f84</literal></expr>, <expr><literal type="number">0x0f85</literal></expr>, <expr><literal type="number">0x0f86</literal></expr>,

<expr><literal type="number">0x0f87</literal></expr>, <expr><literal type="number">0x0f88</literal></expr>, <expr><literal type="number">0x0f89</literal></expr>, <expr><literal type="number">0x0f8a</literal></expr>, <expr><literal type="number">0x0f8b</literal></expr>, <expr><literal type="number">0x0f8c</literal></expr>, <expr><literal type="number">0x0f8d</literal></expr>, <expr><literal type="number">0x0f8e</literal></expr>,

<expr><literal type="number">0x0f8f</literal></expr>, <expr><literal type="number">0x0f90</literal></expr>, <expr><literal type="number">0x0f91</literal></expr>, <expr><literal type="number">0x0f92</literal></expr>, <expr><literal type="number">0x0f93</literal></expr>, <expr><literal type="number">0x0f94</literal></expr>, <expr><literal type="number">0x0f95</literal></expr>, <expr><literal type="number">0x0f96</literal></expr>,

<expr><literal type="number">0x0f97</literal></expr>, <expr><literal type="number">0x0f98</literal></expr>, <expr><literal type="number">0x0f99</literal></expr>, <expr><literal type="number">0x0f9a</literal></expr>, <expr><literal type="number">0x0f9b</literal></expr>, <expr><literal type="number">0x0f9c</literal></expr>, <expr><literal type="number">0x0f9d</literal></expr>, <expr><literal type="number">0x0f9e</literal></expr>,

<expr><literal type="number">0x0f9f</literal></expr>, <expr><literal type="number">0x03c0</literal></expr>, <expr><literal type="number">0x03c1</literal></expr>, <expr><literal type="number">0x03c2</literal></expr>, <expr><literal type="number">0x03c3</literal></expr>, <expr><literal type="number">0x03c4</literal></expr>, <expr><literal type="number">0x03c5</literal></expr>, <expr><literal type="number">0x03c6</literal></expr>,

<expr><literal type="number">0x03c7</literal></expr>, <expr><literal type="number">0x03c8</literal></expr>, <expr><literal type="number">0x03c9</literal></expr>, <expr><literal type="number">0x03ca</literal></expr>, <expr><literal type="number">0x03cb</literal></expr>, <expr><literal type="number">0x03cc</literal></expr>, <expr><literal type="number">0x03cd</literal></expr>, <expr><literal type="number">0x03ce</literal></expr>,

<expr><literal type="number">0x03cf</literal></expr>, <expr><literal type="number">0x00e0</literal></expr>, <expr><literal type="number">0x00e1</literal></expr>, <expr><literal type="number">0x00e2</literal></expr>, <expr><literal type="number">0x00e3</literal></expr>, <expr><literal type="number">0x00e4</literal></expr>, <expr><literal type="number">0x00e5</literal></expr>, <expr><literal type="number">0x00e6</literal></expr>,

<expr><literal type="number">0x00e7</literal></expr>, <expr><literal type="number">0x0030</literal></expr>, <expr><literal type="number">0x0031</literal></expr>, <expr><literal type="number">0x0032</literal></expr>, <expr><literal type="number">0x0033</literal></expr>, <expr><literal type="number">0x0008</literal></expr>, <expr><literal type="number">0x0009</literal></expr>, <expr><literal type="number">0x0002</literal></expr>,

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x0003</literal></expr>, <expr><literal type="number">0x000a</literal></expr>, <expr><literal type="number">0x000b</literal></expr>, <expr><literal type="number">0x0034</literal></expr>, <expr><literal type="number">0x0035</literal></expr>, <expr><literal type="number">0x0036</literal></expr>, <expr><literal type="number">0x0037</literal></expr>,

<expr><literal type="number">0x00e8</literal></expr>, <expr><literal type="number">0x00e9</literal></expr>, <expr><literal type="number">0x00ea</literal></expr>, <expr><literal type="number">0x00eb</literal></expr>, <expr><literal type="number">0x00ec</literal></expr>, <expr><literal type="number">0x00ed</literal></expr>, <expr><literal type="number">0x00ee</literal></expr>, <expr><literal type="number">0x00ef</literal></expr>,

<expr><literal type="number">0x03d0</literal></expr>, <expr><literal type="number">0x03d1</literal></expr>, <expr><literal type="number">0x03d2</literal></expr>, <expr><literal type="number">0x03d3</literal></expr>, <expr><literal type="number">0x03d4</literal></expr>, <expr><literal type="number">0x03d5</literal></expr>, <expr><literal type="number">0x03d6</literal></expr>, <expr><literal type="number">0x03d7</literal></expr>,

<expr><literal type="number">0x03d8</literal></expr>, <expr><literal type="number">0x03d9</literal></expr>, <expr><literal type="number">0x03da</literal></expr>, <expr><literal type="number">0x03db</literal></expr>, <expr><literal type="number">0x03dc</literal></expr>, <expr><literal type="number">0x03dd</literal></expr>, <expr><literal type="number">0x03de</literal></expr>, <expr><literal type="number">0x03df</literal></expr>,

<expr><literal type="number">0x0fa0</literal></expr>, <expr><literal type="number">0x0fa1</literal></expr>, <expr><literal type="number">0x0fa2</literal></expr>, <expr><literal type="number">0x0fa3</literal></expr>, <expr><literal type="number">0x0fa4</literal></expr>, <expr><literal type="number">0x0fa5</literal></expr>, <expr><literal type="number">0x0fa6</literal></expr>, <expr><literal type="number">0x0fa7</literal></expr>,

<expr><literal type="number">0x0fa8</literal></expr>, <expr><literal type="number">0x0fa9</literal></expr>, <expr><literal type="number">0x0faa</literal></expr>, <expr><literal type="number">0x0fab</literal></expr>, <expr><literal type="number">0x0fac</literal></expr>, <expr><literal type="number">0x0fad</literal></expr>, <expr><literal type="number">0x0fae</literal></expr>, <expr><literal type="number">0x0faf</literal></expr>,

<expr><literal type="number">0x0fb0</literal></expr>, <expr><literal type="number">0x0fb1</literal></expr>, <expr><literal type="number">0x0fb2</literal></expr>, <expr><literal type="number">0x0fb3</literal></expr>, <expr><literal type="number">0x0fb4</literal></expr>, <expr><literal type="number">0x0fb5</literal></expr>, <expr><literal type="number">0x0fb6</literal></expr>, <expr><literal type="number">0x0fb7</literal></expr>,

<expr><literal type="number">0x0fb8</literal></expr>, <expr><literal type="number">0x0fb9</literal></expr>, <expr><literal type="number">0x0fba</literal></expr>, <expr><literal type="number">0x0fbb</literal></expr>, <expr><literal type="number">0x0fbc</literal></expr>, <expr><literal type="number">0x0fbd</literal></expr>, <expr><literal type="number">0x0fbe</literal></expr>, <expr><literal type="number">0x0fbf</literal></expr>,

<expr><literal type="number">0x3f40</literal></expr>, <expr><literal type="number">0x3f41</literal></expr>, <expr><literal type="number">0x3f42</literal></expr>, <expr><literal type="number">0x3f43</literal></expr>, <expr><literal type="number">0x3f44</literal></expr>, <expr><literal type="number">0x3f45</literal></expr>, <expr><literal type="number">0x3f46</literal></expr>, <expr><literal type="number">0x3f47</literal></expr>,

<expr><literal type="number">0x3f48</literal></expr>, <expr><literal type="number">0x3f49</literal></expr>, <expr><literal type="number">0x3f4a</literal></expr>, <expr><literal type="number">0x3f4b</literal></expr>, <expr><literal type="number">0x3f4c</literal></expr>, <expr><literal type="number">0x3f4d</literal></expr>, <expr><literal type="number">0x3f4e</literal></expr>, <expr><literal type="number">0x3f4f</literal></expr>,

<expr><literal type="number">0x3f50</literal></expr>, <expr><literal type="number">0x3f51</literal></expr>, <expr><literal type="number">0x3f52</literal></expr>, <expr><literal type="number">0x3f53</literal></expr>, <expr><literal type="number">0x3f54</literal></expr>, <expr><literal type="number">0x3f55</literal></expr>, <expr><literal type="number">0x3f56</literal></expr>, <expr><literal type="number">0x3f57</literal></expr>,

<expr><literal type="number">0x3f58</literal></expr>, <expr><literal type="number">0x3f59</literal></expr>, <expr><literal type="number">0x3f5a</literal></expr>, <expr><literal type="number">0x3f5b</literal></expr>, <expr><literal type="number">0x3f5c</literal></expr>, <expr><literal type="number">0x3f5d</literal></expr>, <expr><literal type="number">0x3f5e</literal></expr>, <expr><literal type="number">0x3f5f</literal></expr>,

<expr><literal type="number">0x3f60</literal></expr>, <expr><literal type="number">0x3f61</literal></expr>, <expr><literal type="number">0x3f62</literal></expr>, <expr><literal type="number">0x3f63</literal></expr>, <expr><literal type="number">0x3f64</literal></expr>, <expr><literal type="number">0x3f65</literal></expr>, <expr><literal type="number">0x3f66</literal></expr>, <expr><literal type="number">0x3f67</literal></expr>,

<expr><literal type="number">0x3f68</literal></expr>, <expr><literal type="number">0x3f69</literal></expr>, <expr><literal type="number">0x3f6a</literal></expr>, <expr><literal type="number">0x3f6b</literal></expr>, <expr><literal type="number">0x3f6c</literal></expr>, <expr><literal type="number">0x3f6d</literal></expr>, <expr><literal type="number">0x3f6e</literal></expr>, <expr><literal type="number">0x3f6f</literal></expr>,

<expr><literal type="number">0x3f70</literal></expr>, <expr><literal type="number">0x3f71</literal></expr>, <expr><literal type="number">0x3f72</literal></expr>, <expr><literal type="number">0x3f73</literal></expr>, <expr><literal type="number">0x3f74</literal></expr>, <expr><literal type="number">0x3f75</literal></expr>, <expr><literal type="number">0x3f76</literal></expr>, <expr><literal type="number">0x3f77</literal></expr>,

<expr><literal type="number">0x3f78</literal></expr>, <expr><literal type="number">0x3f79</literal></expr>, <expr><literal type="number">0x3f7a</literal></expr>, <expr><literal type="number">0x3f7b</literal></expr>, <expr><literal type="number">0x3f7c</literal></expr>, <expr><literal type="number">0x3f7d</literal></expr>, <expr><literal type="number">0x3f7e</literal></expr>, <expr><literal type="number">0x3f7f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rv_chrom_bits</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>rv_dc_lum</name></decl>, <decl><type ref="prev"/><name>rv_dc_chrom</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ff_rv_decode_dc</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>rv_dc_lum</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x7c</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x7d</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x7e</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>-=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>rv_dc_chrom</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x1fc</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x1fd</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0x1fe</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"chroma dc error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0xffff</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>-=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>-</operator><name>code</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv10_decode_picture_header</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_count</name></decl>, <decl><type ref="prev"/><name>pb_frame</name></decl>, <decl><type ref="prev"/><name>marker</name></decl>, <decl><type ref="prev"/><name>mb_xy</name></decl>;</decl_stmt>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>marker</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"marker missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pb_frame</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"pict_type=%d pb_frame=%d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>, <argument><expr><name>pb_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pb_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"PB-frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid qscale value: 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rv10_version</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"DC:%d %d %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mb_xy</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>mb_xy</name> <operator>&amp;&amp;</operator> <name>mb_xy</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_num</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>mb_count</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_count</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>mb_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv20_decode_picture_header</name><parameter_list>(<parameter><decl><type><name>RVDecContext</name> <modifier>*</modifier></type><name>rv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seq</name></decl>, <decl><type ref="prev"/><name>mb_pos</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rpr_max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break> 

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"low delay B\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"early B-frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"reserved bit set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid qscale value: 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RV_GET_MINOR_VER</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RV_GET_MINOR_VER</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>seq</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>rpr_max</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rpr_max</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>new_w</name></decl>, <decl><type ref="prev"/><name>new_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rpr_bits</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>rpr_max</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>rpr_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>new_w</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name><operator>)</operator><index>[<expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>f</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>new_h</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name><operator>)</operator><index>[<expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>f</name></expr>]</index></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>new_w</name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>orig_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_h</name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>orig_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_w</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name>new_h</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>old_aspect</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"attempting to change resolution to %dx%d\n"</literal></expr></argument>, <argument><expr><name>new_w</name></expr></argument>, <argument><expr><name>new_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name>new_w</name></expr></argument>, <argument><expr><name>new_h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>old_aspect</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_aspect</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>new_w</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>new_h</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>old_aspect</argument>, <argument>(AVRational){<literal type="number">2</literal></argument>, <argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>new_w</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>new_h</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>old_aspect</argument>, <argument>(AVRational){<literal type="number">1</literal></argument>, <argument><literal type="number">2</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>new_w</name></expr></argument>, <argument><expr><name>new_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>new_w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>new_h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpv_common_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"F %d/%d/%d\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>rpr_bits</name></expr></argument>, <argument><expr><name>rpr_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mb_pos</name> <operator>=</operator> <call><name>ff_h263_decode_mba</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seq</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7FFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>&gt;</operator> <literal type="number">0x4000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seq</name> <operator>-=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0x4000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>seq</name> <operator>+=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_non_b_time</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_non_b_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name> <operator>-</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>last_non_b_time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>time</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name> <operator>&lt;=</operator><name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>pb_time</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>pp_time</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"messed up order, possible from seeking? skipping current B-frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_SKIP_FRAME</name></cpp:macro> <cpp:value>-123</cpp:value></cpp:define>

<return>return <expr><name>ERROR_SKIP_FRAME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg4_init_direct_mv</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>RV_GET_MINOR_VER</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>f_code</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unrestricted_mv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>modified_quant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>lowres</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>,

<argument><expr><literal type="string">"num:%5d x:%2d y:%2d type:%d qscale:%2d rnd:%d\n"</literal></expr></argument>,

<argument><expr><name>seq</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>no_rounding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <name>mb_pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>rv10_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RVDecContext</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>major_ver</name></decl>, <decl><type ref="prev"/><name>minor_ver</name></decl>, <decl><type ref="prev"/><name>micro_ver</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata is too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpv_decode_defaults</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_decode_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_format</name></name> <operator>=</operator> <name>FMT_H263</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>orig_width</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>orig_height</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h263_long_vectors</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>major_ver</name> <operator>=</operator> <call><name>RV_GET_MAJOR_VER</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minor_ver</name> <operator>=</operator> <call><name>RV_GET_MINOR_VER</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>micro_ver</name> <operator>=</operator> <call><name>RV_GET_MICRO_VER</name><argument_list>(<argument><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>major_ver</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rv10_version</name></name> <operator>=</operator> <ternary><condition><expr><name>micro_ver</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>obmc</name></name> <operator>=</operator> <name>micro_ver</name> <operator>==</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>minor_ver</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown header %X\n"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"RV1/2 version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ver:%X ver0:%"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>rv</name><operator>-&gt;</operator><name>sub_id</name></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_idct_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpv_common_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h263dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>h263dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h263_decode_init_vlc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv_dc_lum</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>,

<argument><expr><name>rv_lum_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>rv_lum_code</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv_dc_chrom</name></expr></argument>, <argument><expr><name>DC_VLC_BITS</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>,

<argument><expr><name>rv_chrom_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>rv_chrom_code</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16388</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>rv10_decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mpv_common_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv10_decode_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whole_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RVDecContext</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>rv</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_count</name></decl>, <decl><type ref="prev"/><name>mb_pos</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>start_mb_x</name></decl>, <decl><type ref="prev"/><name>active_bits_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>active_bits_size</name> <operator>=</operator> <name>buf_size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>buf_size2</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV10</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_count</name> <operator>=</operator> <call><name>rv10_decode_picture_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_count</name> <operator>=</operator> <call><name>rv20_decode_picture_header</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mb_count</name> <operator>!=</operator> <name>ERROR_SKIP_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"HEADER ERROR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"POS ERROR %d %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mb_pos</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>-</operator> <name>mb_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_count</name> <operator>&gt;</operator> <name>left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"COUNT ERROR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>whole_size</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_er_frame_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mpv_frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg_er_frame_start</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice type mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"qscale=%d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_RV10</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start_mb_x</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>h263_aic</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name> <operator>=</operator> <name>ff_aic_dc_scale_table</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>y_dc_scale_table</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>c_dc_scale_table</name></name> <operator>=</operator> <name>ff_mpeg1_dc_scale_table</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>modified_quant</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_qscale_table</name></name> <operator>=</operator> <name>ff_h263_chroma_qscale_table</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_set_qscale</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rv10_first_dc_coded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rv10_first_dc_coded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rv10_first_dc_coded</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>b8_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>block_wrap</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name> <operator>=</operator> <name>mb_count</name></expr>;</init> <condition><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>s</name><operator>-&gt;</operator><name>mb_num_left</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_update_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"**mb x=%d y=%d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_dir</name></name> <operator>=</operator> <name>MV_DIR_FORWARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mv_type</name></name> <operator>=</operator> <name>MV_TYPE_16X16</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h263_decode_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SLICE_ERROR</name> <operator>&amp;&amp;</operator> <name>active_bits_size</name> <operator>&gt;=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>show_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name>active_bits_size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>active_bits_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SLICE_END</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SLICE_ERROR</name> <operator>&amp;&amp;</operator> <name>active_bits_size</name> <operator>&lt;</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<literal type="number">8</literal> <operator>*</operator> <name>buf_size2</name> <operator>&gt;=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>active_bits_size</name> <operator>=</operator> <name>buf_size2</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"update size from %d to %d\n"</literal></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name>buf_size</name></expr></argument>, <argument><expr><name>active_bits_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SLICE_OK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SLICE_ERROR</name> <operator>||</operator> <name>active_bits_size</name> <operator>&lt;</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ERROR at MB %d %d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_update_motion_val</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpv_reconstruct_mb</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h263_loop_filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_block_index</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>first_slice_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SLICE_END</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_er_add_slice</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>, <argument><expr><name>start_mb_x</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>,

<argument><expr><name>ER_MB_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>active_bits_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_slice_offset</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>avctx</name><operator>-&gt;</operator><name>slice_offset</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>n</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rv10_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pict</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>slices_hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"*****frame %d size=%d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>slice_count</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_count</name> <operator>||</operator> <name>buf_size</name> <operator>&lt;=</operator> <literal type="number">8</literal> <operator>*</operator> <name>slice_count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid slice count: %d.\n"</literal></expr></argument>,

<argument><expr><name>slice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slices_hdr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <name>slice_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">8</literal> <operator>*</operator> <name>slice_count</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>slice_count</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slice_count</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slice_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>offset</name> <init>= <expr><call><name>get_slice_offset</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>slices_hdr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>size2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>slice_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>get_slice_offset</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>slices_hdr</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>slice_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size2</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>size2</name> <operator>=</operator> <call><name>get_slice_offset</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>slices_hdr</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>size2</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name>offset</name> <operator>+</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>rv10_decode_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_er_frame_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>er</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_frame_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_print_debug_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_export_qp_table</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name></expr></argument>, <argument><expr><name>FF_QSCALE_TYPE_MPEG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>pict</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_print_debug_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>, <argument><expr><name>pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mpv_export_qp_table</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pict</name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name></expr></argument>, <argument><expr><name>FF_QSCALE_TYPE_MPEG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture_ptr</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>low_delay</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_rv10_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rv10"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RealVideo 1.0"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_RV10</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RVDecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>rv10_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>rv10_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>rv10_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_rv20_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"rv20"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"RealVideo 2.0"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_RV20</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RVDecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>rv10_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>rv10_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>rv10_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>ff_mpeg_flush</name></expr>,

<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
