<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vdpau_internal.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vdpau/vdpau.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_vdpau.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdpau.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uintptr_t</name></type> <name>ff_vdpau_get_surface_id</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<union>union <name>VDPAUPictureInfo</name> <block>{

<decl_stmt><decl><type><name>VdpPictureInfoH264</name></type> <name>h264</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpPictureInfoMPEG1Or2</name></type> <name>mpeg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpPictureInfoVC1</name></type> <name>vc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpPictureInfoMPEG4Part2</name></type> <name>mpeg4</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_H264_HIGH_444_PREDICTIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VdpPictureInfoH264Predictive</name></type> <name>h264_predictive</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_HEVC_MAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VdpPictureInfoHEVC</name></type> <name>hevc</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_YCBCR_FORMAT_Y_U_V_444</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VdpPictureInfoHEVC444</name></type> <name>hevc_444</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDP_DECODER_PROFILE_VP9_PROFILE_0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>VdpPictureInfoVP9</name></type> <name>vp9</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block>;</union>

<typedef>typedef <type><struct>struct <name>VDPAUHWContext</name> <block>{

<decl_stmt><decl><type><name>AVVDPAUContext</name></type> <name>context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpDevice</name></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpGetProcAddress</name> <modifier>*</modifier></type><name>get_proc_address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>VDPAUHWContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VDPAUContext</name> <block>{

<decl_stmt><decl><type><name>VdpDevice</name></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpGetProcAddress</name> <modifier>*</modifier></type><name>get_proc_address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpDecoderRender</name> <modifier>*</modifier></type><name>render</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>height</name></decl>;</decl_stmt>

}</block></struct></type> <name>VDPAUContext</name>;</typedef>

<struct>struct <name>vdpau_picture_context</name> <block>{

<decl_stmt><decl><type><name><name>union</name> <name>VDPAUPictureInfo</name></name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitstream_buffers_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitstream_buffers_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VdpBitstreamBuffer</name> <modifier>*</modifier></type><name>bitstream_buffers</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>ff_vdpau_common_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VdpDecoderProfile</name></type> <name>profile</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vdpau_common_uninit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vdpau_common_start_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vdpau_common_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vdpau_mpeg_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vdpau_add_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vdpau_picture_context</name></name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vdpau_common_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
