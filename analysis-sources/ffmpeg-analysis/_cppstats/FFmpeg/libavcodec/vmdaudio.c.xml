<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vmdaudio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_TYPE_AUDIO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_TYPE_INITIAL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_TYPE_SILENCE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>VmdAudioContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>out_bps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>VmdAudioContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>vmdaudio_table</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x000</literal></expr>, <expr><literal type="number">0x008</literal></expr>, <expr><literal type="number">0x010</literal></expr>, <expr><literal type="number">0x020</literal></expr>, <expr><literal type="number">0x030</literal></expr>, <expr><literal type="number">0x040</literal></expr>, <expr><literal type="number">0x050</literal></expr>, <expr><literal type="number">0x060</literal></expr>, <expr><literal type="number">0x070</literal></expr>, <expr><literal type="number">0x080</literal></expr>,

<expr><literal type="number">0x090</literal></expr>, <expr><literal type="number">0x0A0</literal></expr>, <expr><literal type="number">0x0B0</literal></expr>, <expr><literal type="number">0x0C0</literal></expr>, <expr><literal type="number">0x0D0</literal></expr>, <expr><literal type="number">0x0E0</literal></expr>, <expr><literal type="number">0x0F0</literal></expr>, <expr><literal type="number">0x100</literal></expr>, <expr><literal type="number">0x110</literal></expr>, <expr><literal type="number">0x120</literal></expr>,

<expr><literal type="number">0x130</literal></expr>, <expr><literal type="number">0x140</literal></expr>, <expr><literal type="number">0x150</literal></expr>, <expr><literal type="number">0x160</literal></expr>, <expr><literal type="number">0x170</literal></expr>, <expr><literal type="number">0x180</literal></expr>, <expr><literal type="number">0x190</literal></expr>, <expr><literal type="number">0x1A0</literal></expr>, <expr><literal type="number">0x1B0</literal></expr>, <expr><literal type="number">0x1C0</literal></expr>,

<expr><literal type="number">0x1D0</literal></expr>, <expr><literal type="number">0x1E0</literal></expr>, <expr><literal type="number">0x1F0</literal></expr>, <expr><literal type="number">0x200</literal></expr>, <expr><literal type="number">0x208</literal></expr>, <expr><literal type="number">0x210</literal></expr>, <expr><literal type="number">0x218</literal></expr>, <expr><literal type="number">0x220</literal></expr>, <expr><literal type="number">0x228</literal></expr>, <expr><literal type="number">0x230</literal></expr>,

<expr><literal type="number">0x238</literal></expr>, <expr><literal type="number">0x240</literal></expr>, <expr><literal type="number">0x248</literal></expr>, <expr><literal type="number">0x250</literal></expr>, <expr><literal type="number">0x258</literal></expr>, <expr><literal type="number">0x260</literal></expr>, <expr><literal type="number">0x268</literal></expr>, <expr><literal type="number">0x270</literal></expr>, <expr><literal type="number">0x278</literal></expr>, <expr><literal type="number">0x280</literal></expr>,

<expr><literal type="number">0x288</literal></expr>, <expr><literal type="number">0x290</literal></expr>, <expr><literal type="number">0x298</literal></expr>, <expr><literal type="number">0x2A0</literal></expr>, <expr><literal type="number">0x2A8</literal></expr>, <expr><literal type="number">0x2B0</literal></expr>, <expr><literal type="number">0x2B8</literal></expr>, <expr><literal type="number">0x2C0</literal></expr>, <expr><literal type="number">0x2C8</literal></expr>, <expr><literal type="number">0x2D0</literal></expr>,

<expr><literal type="number">0x2D8</literal></expr>, <expr><literal type="number">0x2E0</literal></expr>, <expr><literal type="number">0x2E8</literal></expr>, <expr><literal type="number">0x2F0</literal></expr>, <expr><literal type="number">0x2F8</literal></expr>, <expr><literal type="number">0x300</literal></expr>, <expr><literal type="number">0x308</literal></expr>, <expr><literal type="number">0x310</literal></expr>, <expr><literal type="number">0x318</literal></expr>, <expr><literal type="number">0x320</literal></expr>,

<expr><literal type="number">0x328</literal></expr>, <expr><literal type="number">0x330</literal></expr>, <expr><literal type="number">0x338</literal></expr>, <expr><literal type="number">0x340</literal></expr>, <expr><literal type="number">0x348</literal></expr>, <expr><literal type="number">0x350</literal></expr>, <expr><literal type="number">0x358</literal></expr>, <expr><literal type="number">0x360</literal></expr>, <expr><literal type="number">0x368</literal></expr>, <expr><literal type="number">0x370</literal></expr>,

<expr><literal type="number">0x378</literal></expr>, <expr><literal type="number">0x380</literal></expr>, <expr><literal type="number">0x388</literal></expr>, <expr><literal type="number">0x390</literal></expr>, <expr><literal type="number">0x398</literal></expr>, <expr><literal type="number">0x3A0</literal></expr>, <expr><literal type="number">0x3A8</literal></expr>, <expr><literal type="number">0x3B0</literal></expr>, <expr><literal type="number">0x3B8</literal></expr>, <expr><literal type="number">0x3C0</literal></expr>,

<expr><literal type="number">0x3C8</literal></expr>, <expr><literal type="number">0x3D0</literal></expr>, <expr><literal type="number">0x3D8</literal></expr>, <expr><literal type="number">0x3E0</literal></expr>, <expr><literal type="number">0x3E8</literal></expr>, <expr><literal type="number">0x3F0</literal></expr>, <expr><literal type="number">0x3F8</literal></expr>, <expr><literal type="number">0x400</literal></expr>, <expr><literal type="number">0x440</literal></expr>, <expr><literal type="number">0x480</literal></expr>,

<expr><literal type="number">0x4C0</literal></expr>, <expr><literal type="number">0x500</literal></expr>, <expr><literal type="number">0x540</literal></expr>, <expr><literal type="number">0x580</literal></expr>, <expr><literal type="number">0x5C0</literal></expr>, <expr><literal type="number">0x600</literal></expr>, <expr><literal type="number">0x640</literal></expr>, <expr><literal type="number">0x680</literal></expr>, <expr><literal type="number">0x6C0</literal></expr>, <expr><literal type="number">0x700</literal></expr>,

<expr><literal type="number">0x740</literal></expr>, <expr><literal type="number">0x780</literal></expr>, <expr><literal type="number">0x7C0</literal></expr>, <expr><literal type="number">0x800</literal></expr>, <expr><literal type="number">0x900</literal></expr>, <expr><literal type="number">0xA00</literal></expr>, <expr><literal type="number">0xB00</literal></expr>, <expr><literal type="number">0xC00</literal></expr>, <expr><literal type="number">0xD00</literal></expr>, <expr><literal type="number">0xE00</literal></expr>,

<expr><literal type="number">0xF00</literal></expr>, <expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x1400</literal></expr>, <expr><literal type="number">0x1800</literal></expr>, <expr><literal type="number">0x1C00</literal></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">0x3000</literal></expr>, <expr><literal type="number">0x4000</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vmdaudio_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VmdAudioContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>%</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid block align\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr> </then><else>:

<expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>out_bps</name></name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chunk_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>out_bps</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%d channels, %d bits/sample, "</literal>

<literal type="string">"block align = %d, sample rate = %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_audio_s16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>predictor</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><name>channels</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>AV_RL16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><operator>*</operator><name>buf</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-=</operator> <name><name>vmdaudio_table</name><index>[<expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name><name>vmdaudio_table</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>^=</operator> <name>st</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vmdaudio_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VmdAudioContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_type</name></decl>, <decl><type ref="prev"/><name>silent_chunks</name></decl>, <decl><type ref="prev"/><name>audio_chunks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output_samples_u8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output_samples_s16</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"skipping small junk packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block_type</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block_type</name> <argument_list type="generic">&lt; <argument><expr><name>BLOCK_TYPE_AUDIO</name> <operator>||</operator> <name>block_type</name></expr></argument> &gt;</argument_list></name> <name>BLOCK_TYPE_SILENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown block type: %d\n"</literal></expr></argument>, <argument><expr><name>block_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>silent_chunks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block_type</name> <operator>==</operator> <name>BLOCK_TYPE_INITIAL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>silent_chunks</name> <operator>=</operator> <call><name>av_popcount</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>block_type</name> <operator>==</operator> <name>BLOCK_TYPE_SILENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>silent_chunks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>audio_chunks</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>chunk_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>audio_chunks</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>chunk_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>silent_chunks</name> <operator>+</operator> <name>audio_chunks</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>silent_chunks</name> <operator>+</operator> <name>audio_chunks</name><operator>)</operator> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name><operator>)</operator> <operator>/</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output_samples_u8</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>output_samples_s16</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>silent_chunks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>silent_size</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <name>silent_chunks</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <name>silent_chunks</name> <operator>&lt;=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_bps</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>output_samples_s16</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>silent_size</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output_samples_s16</name> <operator>+=</operator> <name>silent_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>output_samples_u8</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name>silent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output_samples_u8</name> <operator>+=</operator> <name>silent_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>audio_chunks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name>buf_size</name> <operator>&amp;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>buf_end</name> <operator>-</operator> <name>buf</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>chunk_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>out_bps</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_audio_s16</name><argument_list>(<argument><expr><name>output_samples_s16</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chunk_size</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output_samples_s16</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output_samples_u8</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chunk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output_samples_u8</name> <operator>+=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>chunk_size</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vmdaudio_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vmdaudio"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Sierra VMD audio"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VMDAUDIO</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VmdAudioContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vmdaudio_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>vmdaudio_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
