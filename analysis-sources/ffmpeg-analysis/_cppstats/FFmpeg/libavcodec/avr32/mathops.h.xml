<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\avr32\mathops.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULL</name></cpp:macro> <cpp:value>MULL</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>MULL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>int64_t</name></type> <name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>x</name></decl>;</union>

<asm>__asm__ ("muls.d %0, %1, %2 \n\t"

"lsr %0, %3 \n\t"

"or %0, %0, %m0&lt;&lt;%4 \n\t"

: "=r"(x) : "r"(b), "r"(a), "i"(shift), "i"(32-shift));</asm>

<return>return <expr><name><name>x</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULH</name></cpp:macro> <cpp:value>MULH</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>MULH</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>int64_t</name></type> <name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>hl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl><name>x</name></decl>;</union>

<asm>__asm__ ("muls.d %0, %1, %2" : "=r"(x.x) : "r"(a), "r"(b));</asm>

<return>return <expr><name><name>x</name><operator>.</operator><name>hl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL64</name></cpp:macro> <cpp:value>MUL64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int64_t</name></type> <name>MUL64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>x</name></decl>;</decl_stmt>

<asm>__asm__ ("muls.d %0, %1, %2" : "=r"(x) : "r"(a), "r"(b));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int64_t</name></type> <name>MAC64</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("macs.d %0, %1, %2" : "+r"(d) : "r"(a), "r"(b));</asm>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC64</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) = MAC64(d, a, b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLS64</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MAC64(d, -(a), b)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>MAC16</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("machh.w %0, %1:b, %2:b" : "+r"(d) : "r"(a), "r"(b));</asm>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAC16</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((d) = MAC16(d, a, b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MLS16</name><parameter_list>(<parameter><type><name>d</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MAC16(d, -(a), b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL16</name></cpp:macro> <cpp:value>MUL16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>MUL16</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<asm>__asm__ ("mulhh.w %0, %1:b, %2:b" : "=r"(d) : "r"(a), "r"(b));</asm>

<return>return <expr><name>d</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid_pred</name></cpp:macro> <cpp:value>mid_pred</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>av_const</name> <name>int</name></type> <name>mid_pred</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<asm>__asm__ ("mov %0, %2 \n\t"

"cp.w %1, %2 \n\t"

"movgt %0, %1 \n\t"

"movgt %1, %2 \n\t"

"cp.w %1, %3 \n\t"

"movle %1, %3 \n\t"

"cp.w %0, %1 \n\t"

"movgt %0, %1 \n\t"

: "=&amp;r"(m), "+r"(a)

: "r"(b), "r"(c));</asm>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
