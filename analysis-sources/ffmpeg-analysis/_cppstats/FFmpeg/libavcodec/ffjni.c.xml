<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ffjni.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jni.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ffjni.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>JavaVM</name> <modifier>*</modifier></type><name>java_vm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>current_env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>once</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jni_detach_env</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>java_vm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>java_vm</name><operator>)</operator><operator>-&gt;</operator><name>DetachCurrentThread</name></name><argument_list>(<argument><expr><name>java_vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jni_create_pthread_key</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_env</name></expr></argument>, <argument><expr><name>jni_detach_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>JNIEnv</name> <modifier>*</modifier></type><name>ff_jni_get_env</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>java_vm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>java_vm</name> <operator>=</operator> <call><name>av_jni_get_java_vm</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>java_vm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No Java virtual machine has been registered\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once</name></expr></argument>, <argument><expr><name>jni_create_pthread_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>env</name> <operator>=</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>current_env</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>java_vm</name><operator>)</operator><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>java_vm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>JNI_VERSION_1_6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>JNI_EDETACHED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>java_vm</name><operator>)</operator><operator>-&gt;</operator><name>AttachCurrentThread</name></name><argument_list>(<argument><expr><name>java_vm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to attach the JNI environment to the current thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>current_env</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>JNI_OK</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>JNI_EVERSION</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The specified JNI version is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get the JNI environment attached to this thread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>env</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>ff_jni_jstring_to_utf_chars</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf_chars</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jboolean</name></type> <name>copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>string</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>utf_chars</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"String.getStringUTFChars() threw an exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>utf_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>utf_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"String.releaseStringUTFChars() threw an exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>jstring</name></type> <name>ff_jni_utf_chars_to_jstring</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utf_chars</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>jstring</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>utf_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"NewStringUTF() threw an exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_jni_exception_get_summary</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jthrowable</name></type> <name>exception</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>class_class</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_name_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>exception_class</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>get_message_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jstring</name></type> <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exception_class</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not find Throwable class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>class_class</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not find Throwable class's class\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>get_name_id</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>class_class</name></expr></argument>, <argument><expr><literal type="string">"getName"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not find method Class.getName()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_class</name></expr></argument>, <argument><expr><name>get_name_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Class.getName() threw an exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>ff_jni_jstring_to_utf_chars</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>get_message_id</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_class</name></expr></argument>, <argument><expr><literal type="string">"getMessage"</literal></expr></argument>, <argument><expr><literal type="string">"()Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not find method java/lang/Throwable.getMessage()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallObjectMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>, <argument><expr><name>get_message_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionClear</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Throwable.getMessage() threw an exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>ff_jni_jstring_to_utf_chars</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <name>message</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>message</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s occurred"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>name</name> <operator>&amp;&amp;</operator> <name>message</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"Exception: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not retrieve exception name and message\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><literal type="string">"Exception occurred"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>class_class</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>class_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exception_class</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>string</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_jni_exception_check</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jthrowable</name></type> <name>exception</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>env</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><call><name>ExceptionCheck</name><argument_list>(<argument><expr><operator>(</operator><name>env</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>log</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>env</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><call><name>ExceptionClear</name><argument_list>(<argument><expr><operator>(</operator><name>env</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>exception</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionOccurred</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>env</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><call><name>ExceptionClear</name><argument_list>(<argument><expr><operator>(</operator><name>env</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_get_summary</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_jni_init_jfields</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>jfields</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>FFJniField</name></name> <modifier>*</modifier></type><name>jfields_mapping</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>global</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type> <name>last_clazz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mandatory</name> <init>= <expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mandatory</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>FFJniFieldType</name></name></type> <name>type</name> <init>= <expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FF_JNI_CLASS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>last_clazz</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>mandatory</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mandatory</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_clazz</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>jclass</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator>

<ternary><condition><expr><name>global</name></expr> ?</condition><then> <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>clazz</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>global</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last_clazz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_JNI_FIELD</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>field_id</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_clazz</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>method</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>mandatory</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mandatory</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jfieldID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>field_id</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>FF_JNI_STATIC_FIELD</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>jfieldID</name></type> <name>field_id</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_clazz</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>method</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>mandatory</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mandatory</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jfieldID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>field_id</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>FF_JNI_METHOD</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>method_id</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_clazz</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>method</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>mandatory</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mandatory</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jmethodID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>method_id</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>FF_JNI_STATIC_METHOD</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>method_id</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStaticMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>last_clazz</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>method</name></expr></argument>, <argument><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>signature</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_jni_exception_check</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>mandatory</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mandatory</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jmethodID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>method_id</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown JNI field type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<label><name>done</name>:</label>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_jni_reset_jfields</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jfields</name></expr></argument>, <argument><expr><name>jfields_mapping</name></expr></argument>, <argument><expr><name>global</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_jni_reset_jfields</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>jfields</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>FFJniField</name></name> <modifier>*</modifier></type><name>jfields_mapping</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>global</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>FFJniFieldType</name></name></type> <name>type</name> <init>= <expr><name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_JNI_CLASS</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>jclass</name></type> <name>clazz</name> <init>= <expr><operator>*</operator><operator>(</operator><name>jclass</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clazz</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>global</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jclass</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>FF_JNI_FIELD</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jfieldID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>FF_JNI_STATIC_FIELD</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jfieldID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>FF_JNI_METHOD</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jmethodID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>FF_JNI_STATIC_METHOD</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>jmethodID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>jfields</name> <operator>+</operator> <name><name>jfields_mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown JNI field type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
