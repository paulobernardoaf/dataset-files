<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264_sei.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_sei.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVERROR_PS_NOT_FOUND</name></cpp:macro> <cpp:value>FFERRTAG(0xF8,'?','P','S')</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sei_num_clock_ts_table</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ff_h264_sei_uninit</name><parameter_list>(<parameter><decl><type><name>H264SEIContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>recovery_point</name><operator>.</operator><name>recovery_frame_cnt</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>picture_timing</name><operator>.</operator><name>dpb_output_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>picture_timing</name><operator>.</operator><name>cpb_removal_delay</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>picture_timing</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buffering_period</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>frame_packing</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>display_orientation</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>afd</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>a53_caption</name><operator>.</operator><name>buf_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_picture_timing</name><parameter_list>(<parameter><decl><type><name>H264SEIPictureTiming</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MAX_SPS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>sps</name> <operator>||</operator> <operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>SPS</name> <operator>*</operator><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS unavailable in decode_picture_timing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PS_NOT_FOUND</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cpb_removal_delay</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>cpb_removal_delay_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>dpb_output_delay</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>dpb_output_delay_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>pic_struct_present_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_clock_ts</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pic_struct</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ct_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>pic_struct</name></name> <operator>&gt;</operator> <name>H264_SEI_PIC_STRUCT_FRAME_TRIPLING</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_clock_ts</name> <operator>=</operator> <name><name>sei_num_clock_ts_table</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>pic_struct</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>timecode_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_clock_ts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>H264SEITimeCode</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>timecode</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>timecode_cnt</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>full_timestamp_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>counting_type</name></decl>, <decl><type ref="prev"/><name>cnt_dropped_flag</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ct_type</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>counting_type</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>full_timestamp_flag</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>cnt_dropped_flag</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>cnt_dropped_flag</name> <operator>&amp;&amp;</operator> <name>counting_type</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>counting_type</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>dropframe</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>full_timestamp_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>full</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>seconds</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>minutes</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>hours</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>seconds</name></name> <operator>=</operator> <name><name>tc</name><operator>-&gt;</operator><name>minutes</name></name> <operator>=</operator> <name><name>tc</name><operator>-&gt;</operator><name>hours</name></name> <operator>=</operator> <name><name>tc</name><operator>-&gt;</operator><name>full</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>seconds</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>minutes</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>hours</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>time_offset_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>time_offset_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ct_type:%X pic_struct:%d\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ct_type</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>pic_struct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_registered_user_data_afd</name><parameter_list>(<parameter><decl><type><name>H264SEIAFD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name><operator>--</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name><operator>--</operator> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>active_format_description</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_registered_user_data_closed_caption</name><parameter_list>(<parameter><decl><type><name>H264SEIA53Caption</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>user_data_type_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cc_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>user_data_type_code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>user_data_type_code</name> <operator>==</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>cc_count</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cc_count</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;=</operator> <name>cc_count</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_size</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>buf_ref</name></name></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>buf_ref</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>new_size</name> <init>= <expr><operator>(</operator><name>old_size</name> <operator>+</operator> <name>cc_count</name>

<operator>*</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_buffer_realloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buf_ref</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cc_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf_ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>old_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf_ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>old_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>buf_ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>old_size</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_registered_user_data</name><parameter_list>(<parameter><decl><type><name>H264SEIContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>country_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>user_identifier</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>country_code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>country_code</name> <operator>==</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>user_identifier</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>user_identifier</name></expr>)</condition> <block>{<block_content>

<case>case <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<return>return <expr><call><name>decode_registered_user_data_afd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>afd</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<return>return <expr><call><name>decode_registered_user_data_closed_caption</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>a53_caption</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>,

<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_unregistered_user_data</name><parameter_list>(<parameter><decl><type><name>H264SEIUnregistered</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>user_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>build</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <name>size</name> <operator>&gt;=</operator> <name>INT_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>user_data</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>user_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>user_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>user_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>user_data</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"x264 - core %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>build</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>x264_build</name></name> <operator>=</operator> <name>build</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>build</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>user_data</name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"x264 - core 0000"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>x264_build</name></name> <operator>=</operator> <literal type="number">67</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_recovery_point</name><parameter_list>(<parameter><decl><type><name>H264SEIRecoveryPoint</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>recovery_frame_cnt</name> <init>= <expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>recovery_frame_cnt</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>MAX_LOG2_MAX_FRAME_NUM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"recovery_frame_cnt %u is out of range\n"</literal></expr></argument>, <argument><expr><name>recovery_frame_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>recovery_frame_cnt</name></name> <operator>=</operator> <name>recovery_frame_cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_buffering_period</name><parameter_list>(<parameter><decl><type><name>H264SEIBufferingPeriod</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sps_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sched_sel_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sps_id</name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sps_id</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> <operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>sps_id</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"non-existing SPS %d referenced in buffering period\n"</literal></expr></argument>, <argument><expr><name>sps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>sps_id</name> <operator>&gt;</operator> <literal type="number">31</literal></expr> ?</condition><then> <expr><name>AVERROR_INVALIDDATA</name></expr> </then><else>: <expr><name>AVERROR_PS_NOT_FOUND</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>SPS</name><operator>*</operator><operator>)</operator><name><name>ps</name><operator>-&gt;</operator><name>sps_list</name><index>[<expr><name>sps_id</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sched_sel_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sched_sel_idx</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>cpb_cnt</name></name></expr>;</condition> <incr><expr><name>sched_sel_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>initial_cpb_removal_delay</name><index>[<expr><name>sched_sel_idx</name></expr>]</index></name> <operator>=</operator>

<call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>initial_cpb_removal_delay_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>initial_cpb_removal_delay_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sched_sel_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sched_sel_idx</name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>cpb_cnt</name></name></expr>;</condition> <incr><expr><name>sched_sel_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>initial_cpb_removal_delay</name><index>[<expr><name>sched_sel_idx</name></expr>]</index></name> <operator>=</operator>

<call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>initial_cpb_removal_delay_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>initial_cpb_removal_delay_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame_packing_arrangement</name><parameter_list>(<parameter><decl><type><name>H264SEIFramePacking</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>arrangement_id</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>arrangement_cancel_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>arrangement_cancel_flag</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>arrangement_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>quincunx_sampling_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>content_interpretation_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>current_frame_is_frame0_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>quincunx_sampling_flag</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>arrangement_type</name></name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>arrangement_repetition_period</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_display_orientation</name><parameter_list>(<parameter><decl><type><name>H264SEIDisplayOrientation</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hflip</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>vflip</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>anticlockwise_rotation</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_green_metadata</name><parameter_list>(<parameter><decl><type><name>H264SEIGreenMetaData</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>green_metadata_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>green_metadata_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>period_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>period_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>num_seconds</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>period_type</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>num_pictures</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>percent_non_zero_macroblocks</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>percent_intra_coded_macroblocks</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>percent_six_tap_filtering</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>percent_alpha_point_deblocking_instance</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>green_metadata_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>xsd_metric_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>xsd_metric_value</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_alternative_transfer</name><parameter_list>(<parameter><decl><type><name>H264SEIAlternativeTransfer</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>preferred_transfer_characteristics</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_sei_decode</name><parameter_list>(<parameter><decl><type><name>H264SEIContext</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264ParamSets</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>master_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>type</name> <operator>+=</operator> <call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr>)</condition>;</do>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">255</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SEI type %d size %d truncated at %d\n"</literal></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><name>size</name></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>size</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_SEI_TYPE_PIC_TIMING</name></expr>:</case> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_picture_timing</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>picture_timing</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_USER_DATA_REGISTERED</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_registered_user_data</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_unregistered_user_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>unregistered</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_RECOVERY_POINT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_recovery_point</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>recovery_point</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_BUFFERING_PERIOD</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_buffering_period</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>buffering_period</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_FRAME_PACKING</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_frame_packing_arrangement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>frame_packing</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_DISPLAY_ORIENTATION</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_display_orientation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>display_orientation</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_GREEN_METADATA</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_green_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>green_metadata</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_ALTERNATIVE_TRANSFER</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_alternative_transfer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>alternative_transfer</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"unknown SEI type %d\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_PS_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>master_ret</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>next</name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>master_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ff_h264_sei_stereo_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264SEIFramePacking</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>arrangement_cancel_flag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>arrangement_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_SEI_FPA_TYPE_CHECKERBOARD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>content_interpretation_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"checkerboard_rl"</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="string">"checkerboard_lr"</literal></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>H264_SEI_FPA_TYPE_INTERLEAVE_COLUMN</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>content_interpretation_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"col_interleaved_rl"</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="string">"col_interleaved_lr"</literal></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>H264_SEI_FPA_TYPE_INTERLEAVE_ROW</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>content_interpretation_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"row_interleaved_rl"</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="string">"row_interleaved_lr"</literal></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>H264_SEI_FPA_TYPE_SIDE_BY_SIDE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>content_interpretation_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"right_left"</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="string">"left_right"</literal></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>H264_SEI_FPA_TYPE_TOP_BOTTOM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>content_interpretation_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"bottom_top"</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="string">"top_bottom"</literal></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>H264_SEI_FPA_TYPE_INTERLEAVE_TEMPORAL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>content_interpretation_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"block_rl"</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="string">"block_lr"</literal></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>H264_SEI_FPA_TYPE_2D</name></expr>:</case>

<default>default:</default>

<return>return <expr><literal type="string">"mono"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>arrangement_cancel_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"mono"</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
