<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qsvdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mfx/mfxvideo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_qsv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixfmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsv_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qsvdec.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCodecHWConfigInternal</name> <modifier>*</modifier></type><name><name>ff_qsv_hw_configs</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>&amp;</operator><operator>(</operator><specifier>const</specifier> <name>AVCodecHWConfigInternal</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>public</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_QSV</name></expr>,

<expr><operator>.</operator><name>methods</name> <operator>=</operator> <name>AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX</name> <operator>|</operator>

<name>AV_CODEC_HW_CONFIG_METHOD_AD_HOC</name></expr>,

<expr><operator>.</operator><name>device_type</name> <operator>=</operator> <name>AV_HWDEVICE_TYPE_QSV</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>hwaccel</name> <operator>=</operator> <name>NULL</name></expr>,

}</block></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_qsv_get_continuous_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_decode_frame_props</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_NV12</name></expr>:</case>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_P010</name></expr>:</case>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pixel format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_attach_decode_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_init_session</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>mfxSession</name></type> <name>session</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ref</name></decl></parameter>, <parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_device_ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>gpu_copy</name></name> <operator>==</operator> <name>MFX_GPUCOPY_ON</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>iopattern</name></name> <operator>&amp;</operator> <name>MFX_IOPATTERN_OUT_SYSTEM_MEMORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"GPU-accelerated memory copy "</literal>

<literal type="string">"only works in system memory mode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>gpu_copy</name></name> <operator>=</operator> <name>MFX_GPUCOPY_OFF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hw_frames_ref</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>hw_frames_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_init_session_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>load_plugins</name></name></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>iopattern</name></name> <operator>==</operator> <name>MFX_IOPATTERN_OUT_OPAQUE_MEMORY</name></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>gpu_copy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hw_device_ref</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MFXClose</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_init_session_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr></argument>,

<argument><expr><name>hw_device_ref</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>load_plugins</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>gpu_copy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_init_internal_session</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name></name></expr></argument>,

<argument><expr><name><name>q</name><operator>-&gt;</operator><name>load_plugins</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>gpu_copy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>internal_qs</name><operator>.</operator><name>session</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MFXVideoDECODE_Close</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>qsv_fifo_item_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>mfxSyncPoint</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QSVFrame</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>qsv_fifo_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFifoBuffer</name><modifier>*</modifier></type> <name>fifo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>qsv_fifo_item_size</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_decode_preinit</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mfxSession</name></type> <name>session</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iopattern</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_QSV</name></expr>, 

<expr><name>pix_fmt</name></expr>, 

<expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_get_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>orig_pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_depth</name></name> <operator>*</operator> <call><name>qsv_fifo_item_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVQSVContext</name> <modifier>*</modifier></type><name>user_ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel_context</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>session</name> <operator>=</operator> <name><name>user_ctx</name><operator>-&gt;</operator><name>session</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>iopattern</name> <operator>=</operator> <name><name>user_ctx</name><operator>-&gt;</operator><name>iopattern</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>ext_buffers</name></name> <operator>=</operator> <name><name>user_ctx</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name> <operator>=</operator> <name><name>user_ctx</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVQSVFramesContext</name> <modifier>*</modifier></type><name>frames_hwctx</name> <init>= <expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iopattern</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_OPAQUE_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>iopattern</name> <operator>=</operator> <name>MFX_IOPATTERN_OUT_OPAQUE_MEMORY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>frames_hwctx</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>&amp;</operator> <name>MFX_MEMTYPE_VIDEO_MEMORY_DECODER_TARGET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>iopattern</name> <operator>=</operator> <name>MFX_IOPATTERN_OUT_VIDEO_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iopattern</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>iopattern</name> <operator>=</operator> <name>MFX_IOPATTERN_OUT_SYSTEM_MEMORY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>iopattern</name></name> <operator>=</operator> <name>iopattern</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_qsv_print_iopattern</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>iopattern</name></name></expr></argument>, <argument><expr><literal type="string">"Decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_init_session</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error initializing an MFX session\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>IOPattern</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>iopattern</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>AsyncDepth</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>async_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ExtParam</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>ext_buffers</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>NumExtParam</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>nb_ext_buffers</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropW</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>CropH</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>CodecLevel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>CodecProfile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>field_order</name></name> <operator>=</operator> <call><name>ff_qsv_map_picstruct</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>PicStruct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <call><name>ff_qsv_map_fourcc</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FourCC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoDECODE_Init</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,

<argument><expr><literal type="string">"Error initializing the MFX video decoder"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>frame_info</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><call><name>av_image_get_buffer_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,

<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>av_buffer_allocz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_decode_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>mfxVideoParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxBitstream</name></type> <name>bs</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>DataLength</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>MaxLength</name></name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>DataLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>TimeStamp</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_PROGRESSIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>DataFlag</name></name> <operator>|=</operator> <name>MFX_BITSTREAM_COMPLETE_FRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_decode_preinit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_codec_id_to_mfx</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>mfx</name><operator>.</operator><name>CodecId</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoDECODE_DecodeHeader</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>MFX_ERR_MORE_DATA</name> <operator>==</operator> <name>ret</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,

<argument><expr><literal type="string">"Error decoding stream header"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_get_continuous_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Info</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>frame_info</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>PitchLow</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>UV</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>mids</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_qsv_find_surface_idx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>MemId</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>mids</name><index>[<expr><name>ret</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>ExtParam</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>ext_param</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>NumExtParam</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>ext_param</name></name> <operator>=</operator> <operator>(</operator><name>mfxExtBuffer</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>dec_info</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>dec_info</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferId</name></name> <operator>=</operator> <name>MFX_EXTBUFF_DECODED_FRAME_INFO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>dec_info</name><operator>.</operator><name>Header</name><operator>.</operator><name>BufferSz</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>dec_info</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qsv_clear_unused_frames</name><parameter_list>(<parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>used</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>surface</name><operator>.</operator><name>Data</name><operator>.</operator><name>Locked</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cur</name><operator>-&gt;</operator><name>queued</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_surface</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier><modifier>*</modifier></type><name>surf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>qsv_clear_unused_frames</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>alloc_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>surf</name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>frame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>alloc_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>surf</name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>QSVFrame</name> <modifier>*</modifier></type><name>find_frame</name><parameter_list>(<parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>surf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>surf</name> <operator>==</operator> <operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>surface</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cur</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>qsv_decode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>out_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>insurf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxFrameSurface1</name> <modifier>*</modifier></type><name>outsurf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>sync</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxBitstream</name></type> <name>bs</name> <init>= <expr><block>{ <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>Data</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>DataLength</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>MaxLength</name></name> <operator>=</operator> <name><name>bs</name><operator>.</operator><name>DataLength</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>TimeStamp</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>field_order</name></name> <operator>==</operator> <name>AV_FIELD_PROGRESSIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>DataFlag</name></name> <operator>|=</operator> <name>MFX_BITSTREAM_COMPLETE_FRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sync</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sync</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sync</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_surface</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoDECODE_DecodeFrameAsync</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>bs</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>insurf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outsurf</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_DEVICE_BUSY</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>MFX_ERR_MORE_SURFACE</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MFX_ERR_NONE</name> <operator>&amp;&amp;</operator>

<name>ret</name> <operator>!=</operator> <name>MFX_ERR_MORE_DATA</name> <operator>&amp;&amp;</operator>

<name>ret</name> <operator>!=</operator> <name>MFX_WRN_VIDEO_PARAM_CHANGED</name> <operator>&amp;&amp;</operator>

<name>ret</name> <operator>!=</operator> <name>MFX_ERR_MORE_SURFACE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_qsv_print_error</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>,

<argument><expr><literal type="string">"Error during QSV decoding."</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>sync</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>bs</name><operator>.</operator><name>DataOffset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>.</operator><name>DataOffset</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>q</name><operator>-&gt;</operator><name>zero_consume_run</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>zero_consume_run</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_qsv_print_warning</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"A decode call did not consume any data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>sync</name> <operator>&amp;&amp;</operator> <name><name>bs</name><operator>.</operator><name>DataOffset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>q</name><operator>-&gt;</operator><name>buffered_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>zero_consume_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sync</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>out_frame</name> <init>= <expr><call><name>find_frame</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>outsurf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The returned surface does not correspond to any frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>queued</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_frame</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sync</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>qsv_fifo_size</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>async_depth</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>src_frame</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_frame</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sync</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_frame</name><operator>-&gt;</operator><name>queued</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MFXVideoCORE_SyncOperation</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>*</operator><name>sync</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>==</operator> <name>MFX_WRN_IN_EXECUTION</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src_frame</name> <operator>=</operator> <name><name>out_frame</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>src_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outsurf</name> <operator>=</operator> <operator>&amp;</operator><name><name>out_frame</name><operator>-&gt;</operator><name>surface</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PKT_PTS</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>frame</name><operator>-&gt;</operator><name>pkt_pts</name></name> <init>= <expr><name><name>outsurf</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>TimeStamp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <init>= <expr><name><name>outsurf</name><operator>-&gt;</operator><name>Data</name><operator>.</operator><name>TimeStamp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator>

<ternary><condition><expr><name><name>outsurf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>&amp;</operator> <name>MFX_PICSTRUCT_FRAME_TRIPLING</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>outsurf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>&amp;</operator> <name>MFX_PICSTRUCT_FRAME_DOUBLING</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>outsurf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>&amp;</operator> <name>MFX_PICSTRUCT_FIELD_REPEATED</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator>

<name><name>outsurf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>&amp;</operator> <name>MFX_PICSTRUCT_FIELD_TFF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator>

<operator>!</operator><operator>(</operator><name><name>outsurf</name><operator>-&gt;</operator><name>Info</name><operator>.</operator><name>PicStruct</name></name> <operator>&amp;</operator> <name>MFX_PICSTRUCT_PROGRESSIVE</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <call><name>ff_qsv_map_pictype</name><argument_list>(<argument><expr><name><name>out_frame</name><operator>-&gt;</operator><name>dec_info</name><operator>.</operator><name>FrameType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>out_frame</name><operator>-&gt;</operator><name>dec_info</name><operator>.</operator><name>FrameType</name></name> <operator>&amp;</operator> <name>MFX_FRAMETYPE_IDR</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_QSV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>mfxFrameSurface1</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>-&gt;</operator><name>Info</name> <operator>=</operator> <name><name>outsurf</name><operator>-&gt;</operator><name>Info</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>bs</name><operator>.</operator><name>DataOffset</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_decode_close</name><parameter_list>(<parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MFXVideoDECODE_Close</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name> <operator>&amp;&amp;</operator> <call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>QSVFrame</name> <modifier>*</modifier></type><name>out_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxSyncPoint</name> <modifier>*</modifier></type><name>sync</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_frame</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out_frame</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sync</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>cur</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>work_frames</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_fifo_free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>async_fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_qsv_close_internal_session</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>internal_qs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>frames_ctx</name><operator>.</operator><name>mids_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_qsv_process_data</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mfxVideoParam</name></type> <name>param</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name> <init>= <expr><name>AV_PIX_FMT_NV12</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>qsv_decode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>orig_pix_fmt</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>orig_pix_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <literal type="number">1280</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <literal type="number">720</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_decode_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>orig_pix_fmt</name></name> <operator>!=</operator> <call><name>ff_qsv_map_fourcc</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FourCC</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>!=</operator> <name><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>!=</operator> <name><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>zero_pkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>buffered_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>reinit_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>buffered_count</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><call><name>qsv_decode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero_pkt</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>reinit_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>orig_pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>pix_fmt</name> <operator>=</operator> <call><name>ff_qsv_map_fourcc</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>FourCC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>mfx</name><operator>.</operator><name>FrameInfo</name><operator>.</operator><name>Height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_decode_preinit</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pix_fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>reinit_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>qsv_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>reinit_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>qsv_decode</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>got_frame</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>reinit_fail</name>:</label>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>orig_pix_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_qsv_decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>QSVContext</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>orig_pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
