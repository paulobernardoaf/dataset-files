<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\atrac3plus.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac3plus.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"atrac3plus_data.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>tables_data</name><index>[<expr><literal type="number">154276</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>wl_vlc_tabs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>sf_vlc_tabs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>ct_vlc_tabs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>spec_vlc_tabs</name><index>[<expr><literal type="number">112</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>build_canonical_huff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>xlat</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tab_offset</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>out_vlc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>codes</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bits</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_len</name> <init>= <expr><operator>*</operator><name>cb</name><operator>++</operator></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_len</name> <init>= <expr><operator>*</operator><name>cb</name><operator>++</operator></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>min_len</name></expr>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <name>max_len</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>cb</name><operator>++</operator></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>codes</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>code</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>code</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out_vlc</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tables_data</name><index>[<expr><operator>*</operator><name>tab_offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out_vlc</name><operator>-&gt;</operator><name>table_allocated</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>max_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><name>out_vlc</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>codes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>xlat</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>tab_offset</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>max_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_atrac3p_init_vlcs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>wl_vlc_offs</name></decl>, <decl><type ref="prev"/><name>ct_vlc_offs</name></decl>, <decl><type ref="prev"/><name>sf_vlc_offs</name></decl>, <decl><type ref="prev"/><name>tab_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>wl_nb_bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>wl_nb_codes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>wl_bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_wl_huff_bits1</name></expr>, <expr><name>atrac3p_wl_huff_bits2</name></expr>,

<expr><name>atrac3p_wl_huff_bits3</name></expr>, <expr><name>atrac3p_wl_huff_bits4</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>wl_codes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_wl_huff_code1</name></expr>, <expr><name>atrac3p_wl_huff_code2</name></expr>,

<expr><name>atrac3p_wl_huff_code3</name></expr>, <expr><name>atrac3p_wl_huff_code4</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>wl_xlats</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_wl_huff_xlat1</name></expr>, <expr><name>atrac3p_wl_huff_xlat2</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ct_nb_bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ct_nb_codes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ct_bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_ct_huff_bits1</name></expr>, <expr><name>atrac3p_ct_huff_bits2</name></expr>,

<expr><name>atrac3p_ct_huff_bits2</name></expr>, <expr><name>atrac3p_ct_huff_bits3</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ct_codes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_ct_huff_code1</name></expr>, <expr><name>atrac3p_ct_huff_code2</name></expr>,

<expr><name>atrac3p_ct_huff_code2</name></expr>, <expr><name>atrac3p_ct_huff_code3</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>ct_xlats</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>atrac3p_ct_huff_xlat1</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sf_nb_bits</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sf_nb_codes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>sf_bits</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_sf_huff_bits1</name></expr>, <expr><name>atrac3p_sf_huff_bits1</name></expr>, <expr><name>atrac3p_sf_huff_bits2</name></expr>,

<expr><name>atrac3p_sf_huff_bits3</name></expr>, <expr><name>atrac3p_sf_huff_bits4</name></expr>, <expr><name>atrac3p_sf_huff_bits4</name></expr>,

<expr><name>atrac3p_sf_huff_bits5</name></expr>, <expr><name>atrac3p_sf_huff_bits6</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>sf_codes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_sf_huff_code1</name></expr>, <expr><name>atrac3p_sf_huff_code1</name></expr>, <expr><name>atrac3p_sf_huff_code2</name></expr>,

<expr><name>atrac3p_sf_huff_code3</name></expr>, <expr><name>atrac3p_sf_huff_code4</name></expr>, <expr><name>atrac3p_sf_huff_code4</name></expr>,

<expr><name>atrac3p_sf_huff_code5</name></expr>, <expr><name>atrac3p_sf_huff_code6</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>sf_xlats</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_sf_huff_xlat1</name></expr>, <expr><name>atrac3p_sf_huff_xlat2</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>atrac3p_sf_huff_xlat4</name></expr>, <expr><name>atrac3p_sf_huff_xlat5</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>gain_cbs</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_huff_gain_npoints1_cb</name></expr>, <expr><name>atrac3p_huff_gain_npoints1_cb</name></expr>,

<expr><name>atrac3p_huff_gain_lev1_cb</name></expr>, <expr><name>atrac3p_huff_gain_lev2_cb</name></expr>,

<expr><name>atrac3p_huff_gain_lev3_cb</name></expr>, <expr><name>atrac3p_huff_gain_lev4_cb</name></expr>,

<expr><name>atrac3p_huff_gain_loc3_cb</name></expr>, <expr><name>atrac3p_huff_gain_loc1_cb</name></expr>,

<expr><name>atrac3p_huff_gain_loc4_cb</name></expr>, <expr><name>atrac3p_huff_gain_loc2_cb</name></expr>,

<expr><name>atrac3p_huff_gain_loc5_cb</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>gain_xlats</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>NULL</name></expr>, <expr><name>atrac3p_huff_gain_npoints2_xlat</name></expr>, <expr><name>atrac3p_huff_gain_lev1_xlat</name></expr>,

<expr><name>atrac3p_huff_gain_lev2_xlat</name></expr>, <expr><name>atrac3p_huff_gain_lev3_xlat</name></expr>,

<expr><name>atrac3p_huff_gain_lev4_xlat</name></expr>, <expr><name>atrac3p_huff_gain_loc3_xlat</name></expr>,

<expr><name>atrac3p_huff_gain_loc1_xlat</name></expr>, <expr><name>atrac3p_huff_gain_loc4_xlat</name></expr>,

<expr><name>atrac3p_huff_gain_loc2_xlat</name></expr>, <expr><name>atrac3p_huff_gain_loc5_xlat</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>tone_cbs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>atrac3p_huff_tonebands_cb</name></expr>, <expr><name>atrac3p_huff_numwavs1_cb</name></expr>,

<expr><name>atrac3p_huff_numwavs2_cb</name></expr>, <expr><name>atrac3p_huff_wav_ampsf1_cb</name></expr>,

<expr><name>atrac3p_huff_wav_ampsf2_cb</name></expr>, <expr><name>atrac3p_huff_wav_ampsf3_cb</name></expr>,

<expr><name>atrac3p_huff_freq_cb</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>tone_xlats</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>atrac3p_huff_numwavs2_xlat</name></expr>, <expr><name>atrac3p_huff_wav_ampsf1_xlat</name></expr>,

<expr><name>atrac3p_huff_wav_ampsf2_xlat</name></expr>, <expr><name>atrac3p_huff_wav_ampsf3_xlat</name></expr>,

<expr><name>atrac3p_huff_freq_xlat</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>wl_vlc_offs</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ct_vlc_offs</name> <operator>=</operator> <literal type="number">2508</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>wl_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>tables_data</name><index>[<expr><name>wl_vlc_offs</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wl_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>wl_nb_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>tables_data</name><index>[<expr><name>ct_vlc_offs</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ct_nb_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wl_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>wl_nb_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>wl_nb_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>wl_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>wl_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>wl_xlats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ct_nb_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ct_nb_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ct_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ct_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ct_xlats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wl_vlc_offs</name> <operator>+=</operator> <name><name>wl_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ct_vlc_offs</name> <operator>+=</operator> <name><name>ct_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>sf_vlc_offs</name> <operator>=</operator> <literal type="number">76</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sf_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <operator>&amp;</operator><name><name>tables_data</name><index>[<expr><name>sf_vlc_offs</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sf_nb_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sf_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sf_nb_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sf_nb_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sf_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>sf_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>sf_xlats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf_vlc_offs</name> <operator>+=</operator> <name><name>sf_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tab_offset</name> <operator>=</operator> <literal type="number">2564</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">112</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>atrac3p_spectra_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cb</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>build_canonical_huff</name><argument_list>(<argument><expr><name><name>atrac3p_spectra_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cb</name></expr></argument>,

<argument><expr><name><name>atrac3p_spectra_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xlat</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tab_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spec_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>spec_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">11</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>build_canonical_huff</name><argument_list>(<argument><expr><name><name>gain_cbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>gain_xlats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tab_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gain_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>build_canonical_huff</name><argument_list>(<argument><expr><name><name>tone_cbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tone_xlats</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tab_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tone_vlc_tabs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>num_coded_units</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>,

<parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>fill_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chan</name><operator>-&gt;</operator><name>fill_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid number of transmitted units!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>fill_mode</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>split_point</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>ch_num</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_wordlen_weights</name><parameter_list>(<parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wtab_idx</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>weights_tab</name> <init>=

<expr><operator>&amp;</operator><name><name>atrac3p_wl_weights</name><index>[<expr><name><name>chan</name><operator>-&gt;</operator><name>ch_num</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>wtab_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>weights_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"WL index out of range: pos=%d, val=%d!\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subtract_sf_weights</name><parameter_list>(<parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wtab_idx</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>weights_tab</name> <init>= <expr><operator>&amp;</operator><name><name>atrac3p_sf_weights</name><index>[<expr><name>wtab_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>weights_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"SF index out of range: pos=%d, val=%d!\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>unpack_vq_shape</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start_val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>shape_vec</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_values</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_values</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>start_val</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_values</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>start_val</name> <operator>-</operator> <name><name>shape_vec</name><index>[<expr><name><name>atrac3p_qu_num_to_seg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNPACK_SF_VQ_SHAPE</name><parameter_list>(<parameter><type><name>gb</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>num_vals</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>start_val = get_bits((gb), 6); unpack_vq_shape(start_val, &amp;atrac3p_sf_shapes[get_bits((gb), 6)][0], (dst), (num_vals))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_channel_wordlen</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>weight_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>delta_bits</name></decl>, <decl><type ref="prev"/><name>min_val</name></decl>, <decl><type ref="prev"/><name>flag</name></decl>,

<decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>start_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc_tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>ref_chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>fill_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>num_coded_units</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>wl_vlc_tabs</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>weight_idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>num_coded_units</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"WL mode 1: invalid position!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>min_val</name> <operator>+</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>delta_bits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>num_coded_units</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_num</name> <operator>&amp;&amp;</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>wl_vlc_tabs</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>ref_chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ref_chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>diff</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>wl_vlc_tabs</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>start_val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unpack_vq_shape</name><argument_list>(<argument><expr><name>start_val</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>atrac3p_wl_shapes</name><index>[<expr><name>start_val</name></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name></name></expr></argument>, <argument><expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name> <operator>&amp;</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,

<argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,

<argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>,

<argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>weight_idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>num_coded_units</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>wl_vlc_tabs</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>fill_mode</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>ch_num</name></expr> ?</condition><then> <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>fill_mode</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <ternary><condition><expr><name>ch_num</name></expr> ?</condition><then> <expr><name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name> <operator>+</operator> <name><name>chan</name><operator>-&gt;</operator><name>split_point</name></name></expr>

</then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name> <operator>-</operator> <name><name>chan</name><operator>-&gt;</operator><name>split_point</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Split point beyond array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>num_coded_vals</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>weight_idx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_wordlen_weights</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>weight_idx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_channel_sf_idx</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>weight_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>num_long_vals</name></decl>,

<decl><type ref="prev"/><name>delta_bits</name></decl>, <decl><type ref="prev"/><name>min_val</name></decl>, <decl><type ref="prev"/><name>vlc_sel</name></decl>, <decl><type ref="prev"/><name>start_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc_tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>ref_chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>sf_vlc_tabs</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>weight_idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>weight_idx</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNPACK_SF_VQ_SHAPE</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_long_vals</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_long_vals</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_long_vals</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>min_val</name> <operator>+</operator>

<call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>delta_bits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num_long_vals</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_long_vals</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name> <operator>||</operator> <name>delta_bits</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"SF mode 1: invalid parameters!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_long_vals</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>num_long_vals</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>min_val</name> <operator>+</operator>

<call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>delta_bits</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>sf_vlc_tabs</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>ref_chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ref_chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>diff</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>sf_vlc_tabs</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPACK_SF_VQ_SHAPE</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<call><name>sign_extend</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ref_chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>weight_idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc_sel</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>sf_vlc_tabs</name><index>[<expr><name>vlc_sel</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>weight_idx</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>sf_vlc_tabs</name><index>[<expr><name>vlc_sel</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UNPACK_SF_VQ_SHAPE</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>diff</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>+</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>+</operator> <name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>qu_sf_idx</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>weight_idx</name> <operator>&amp;&amp;</operator> <name>weight_idx</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>subtract_sf_weights</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>chan</name></expr></argument>, <argument><expr><name>weight_idx</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_quant_wordlen</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_num</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch_num</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>qu_wordlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>qu_wordlen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_channel_wordlen</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>

<operator>(</operator><name>num_channels</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>qu_wordlen</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_scale_factors</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_num</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch_num</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>qu_sf_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>qu_sf_idx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_channel_sf_idx</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_num_ct_values</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_coded_vals</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_coded_vals</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_coded_vals</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid number of code table indexes: %d!\n"</literal></expr></argument>, <argument><expr><name>num_coded_vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>num_coded_vals</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEC_CT_IDX_COMMON</name><parameter_list>(<parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>num_vals = get_num_ct_values(gb, ctx, avctx); if (num_vals &lt; 0) return num_vals; for (i = 0; i &lt; num_vals; i++) { if (chan-&gt;qu_wordlen[i]) { chan-&gt;qu_tab_idx[i] = OP; } else if (ch_num &amp;&amp; ref_chan-&gt;qu_wordlen[i]) chan-&gt;qu_tab_idx[i] = get_bits1(gb); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODING_DIRECT</name></cpp:macro> <cpp:value>get_bits(gb, num_bits)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODING_VLC</name></cpp:macro> <cpp:value>get_vlc2(gb, vlc_tab-&gt;table, vlc_tab-&gt;bits, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODING_VLC_DELTA</name></cpp:macro> <cpp:value>(!i) ? CODING_VLC : (pred + get_vlc2(gb, delta_vlc-&gt;table, delta_vlc-&gt;bits, 1)) &amp; mask; pred = chan-&gt;qu_tab_idx[i]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODING_VLC_DIFF</name></cpp:macro> <cpp:value>(ref_chan-&gt;qu_tab_idx[i] + get_vlc2(gb, vlc_tab-&gt;table, vlc_tab-&gt;bits, 1)) &amp; mask</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_channel_code_tab</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_vals</name></decl>, <decl><type ref="prev"/><name>num_bits</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_full_table</name></name></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc_tab</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>delta_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>ref_chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>table_type</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name>num_bits</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>use_full_table</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_CT_IDX_COMMON</name><argument_list>(<argument><expr><name>CODING_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_full_table</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ct_vlc_tabs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>

</then><else>: <expr><name>ct_vlc_tabs</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_CT_IDX_COMMON</name><argument_list>(<argument><expr><name>CODING_VLC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>use_full_table</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>ct_vlc_tabs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta_vlc</name> <operator>=</operator> <operator>&amp;</operator><name><name>ct_vlc_tabs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <name>ct_vlc_tabs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta_vlc</name> <operator>=</operator> <name>ct_vlc_tabs</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_CT_IDX_COMMON</name><argument_list>(<argument><expr><name>CODING_VLC_DELTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vlc_tab</name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_full_table</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ct_vlc_tabs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>

</then><else>: <expr><name>ct_vlc_tabs</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DEC_CT_IDX_COMMON</name><argument_list>(<argument><expr><name>CODING_VLC_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_code_table_indexes</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_num</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_full_table</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch_num</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>qu_tab_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>qu_tab_idx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_channel_code_tab</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_qu_spectra</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Atrac3pSpecCodeTab</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>,

<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc_tab</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_specs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>, <decl><type ref="prev"/><name>cf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group_size</name> <init>= <expr><name><name>tab</name><operator>-&gt;</operator><name>group_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_coeffs</name> <init>= <expr><name><name>tab</name><operator>-&gt;</operator><name>num_coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>tab</name><operator>-&gt;</operator><name>bits</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_signed</name> <init>= <expr><name><name>tab</name><operator>-&gt;</operator><name>is_signed</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>val</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>num_specs</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>group_size</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>group_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc_tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_coeffs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_signed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>cf</name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <operator>-</operator><name>cf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <name>bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>group_size</name> <operator>*</operator> <name>num_coeffs</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_spectrum</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch_num</name></decl>, <decl><type ref="prev"/><name>qu</name></decl>, <decl><type ref="prev"/><name>wordlen</name></decl>, <decl><type ref="prev"/><name>codetab</name></decl>, <decl><type ref="prev"/><name>tab_index</name></decl>, <decl><type ref="prev"/><name>num_specs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>Atrac3pSpecCodeTab</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch_num</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>chan</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>spectrum</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>power_levs</name></name></expr></argument>, <argument><expr><name>ATRAC3P_POWER_COMP_OFF</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>power_levs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>qu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>qu</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>;</condition> <incr><expr><name>qu</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>num_specs</name> <operator>=</operator> <name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wordlen</name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>qu</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>codetab</name> <operator>=</operator> <name><name>chan</name><operator>-&gt;</operator><name>qu_tab_idx</name><index>[<expr><name>qu</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wordlen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>use_full_table</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>codetab</name> <operator>=</operator> <name><name>atrac3p_ct_restricted_to_full</name><index>[<expr><name><name>chan</name><operator>-&gt;</operator><name>table_type</name></name></expr>]</index><index>[<expr><name>wordlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>codetab</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tab_index</name> <operator>=</operator> <operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>table_type</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>codetab</name><operator>)</operator> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <name>wordlen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>atrac3p_spectra_tabs</name><index>[<expr><name>tab_index</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tab</name><operator>-&gt;</operator><name>redirect</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tab_index</name> <operator>=</operator> <name><name>tab</name><operator>-&gt;</operator><name>redirect</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_qu_spectra</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>spec_vlc_tabs</name><index>[<expr><name>tab_index</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><name>num_specs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch_num</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>qu_wordlen</name><index>[<expr><name>qu</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>codetab</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>spectrum</name><index>[<expr><name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><name>num_specs</name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name><name>chan</name><operator>-&gt;</operator><name>spectrum</name><index>[<expr><name><name>ff_atrac3p_qu_to_spec_pos</name><index>[<expr><name>qu</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>qu_wordlen</name><index>[<expr><name>qu</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>qu_wordlen</name><index>[<expr><name>qu</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_specs</name> <operator>=</operator> <name><name>atrac3p_subband_to_num_powgrps</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_coded_subbands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_specs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>power_levs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_subband_flags</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_flags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>num_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_window_shape</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_num</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch_num</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch_num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_subband_flags</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>wnd_shape</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_subbands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_gainc_npoints</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coded_subbands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>delta_bits</name></decl>, <decl><type ref="prev"/><name>min_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>ref_chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator>

<operator>(</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator>

<operator>(</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator>

<name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>delta_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>=</operator> <name>min_val</name> <operator>+</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>delta_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gainc_level_mode3s</name><parameter_list>(<parameter><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_points</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><name><name>ref</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gainc_level_mode1m</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>num_points</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_gainc_levels</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coded_subbands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>delta_bits</name></decl>, <decl><type ref="prev"/><name>min_val</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>ref_chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name><operator>)</operator></expr>

?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pred</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_level_mode1m</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_level_mode1m</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_level_mode3s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_level_mode1m</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num_points</name><operator>)</operator></expr>

?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pred</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_level_mode3s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>delta_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>min_val</name> <operator>+</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>delta_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gainc_loc_mode0</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta_bits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pos</name> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>delta_bits</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">30</literal> <operator>-</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>delta_bits</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>gainc_loc_mode1</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>num_points</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>

?</condition><then> <expr><operator>&amp;</operator><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>

</then><else>: <expr><operator>&amp;</operator><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_gainc_loc_codes</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coded_subbands</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>delta_bits</name></decl>, <decl><type ref="prev"/><name>min_val</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>more_than_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AtracGainInfo</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pChanParams</name> <modifier>*</modifier></type><name>ref_chan</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_loc_mode0</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>&amp;</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <ternary><condition><expr><name><name>ref</name><operator>-&gt;</operator><name>num_points</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ref</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pred</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>more_than_ref</name> <operator>=</operator> <name>i</name> <operator>&gt;=</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_points</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>more_than_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_loc_mode0</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>tab</name> <operator>=</operator> <ternary><condition><expr><name>more_than_ref</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>

</then><else>: <expr><operator>&amp;</operator><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>more_than_ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_loc_mode1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>&amp;</operator><name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>num_points</name></name> <operator>&gt;</operator> <name><name>ref</name><operator>-&gt;</operator><name>num_points</name></name> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_loc_mode1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_loc_mode0</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>gain_vlc_tabs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <ternary><condition><expr><name><name>dst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num_points</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>dst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>loc_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pred</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>num_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>more_than_ref</name> <operator>=</operator> <name>i</name> <operator>&gt;=</operator> <name><name>dst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <operator>&amp;</operator><name><name>gain_vlc_tabs</name><index>[<expr><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dst</name><operator>-&gt;</operator><name>lev_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator>

<literal type="number">2</literal> <operator>+</operator> <name>more_than_ref</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tab</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>tab</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>more_than_ref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>gainc_loc_mode0</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>ref_chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>delta_bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>min_val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>min_val</name> <operator>+</operator> <name>i</name> <operator>+</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>delta_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>coded_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>&amp;</operator><name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chan</name><operator>-&gt;</operator><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_points</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator>

<operator>(</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid gain location: ch=%d, sb=%d, pos=%d, val=%d\n"</literal></expr></argument>,

<argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>loc_code</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_gainc_data</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_num</name></decl>, <decl><type ref="prev"/><name>coded_subbands</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch_num</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>gain_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>gain_data</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ATRAC3P_SUBBANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>coded_subbands</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>num_gain_subbands</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>num_gain_subbands</name> <operator>=</operator> <name>coded_subbands</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_gainc_npoints</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>coded_subbands</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_gainc_levels</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>coded_subbands</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_gainc_loc_codes</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>coded_subbands</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>coded_subbands</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <name>coded_subbands</name></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>num_gain_subbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name><name>gain_data</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name><name>gain_data</name><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>num_gain_subbands</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_tones_envelope</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>band_has_tones</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch_num</name> <operator>||</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>has_start_point</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>start_pos</name></name> <operator>=</operator> <ternary><condition><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>has_start_point</name></name></expr>

?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>has_stop_point</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>stop_pos</name></name> <operator>=</operator> <ternary><condition><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>has_stop_point</name></name></expr>

?</condition><then> <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>has_start_point</name></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>has_start_point</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>has_stop_point</name></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>has_stop_point</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>start_pos</name></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>start_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>stop_pos</name></name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name><name>pend_env</name><operator>.</operator><name>stop_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_band_numwavs</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>band_has_tones</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ch_num</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>=</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>=</operator> <operator>(</operator><name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>=</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tones_index</name></name> <operator>+</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>&gt;</operator> <literal type="number">48</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Too many tones: %d (max. 48), frame: %d!\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tones_index</name></name> <operator>+</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tones_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tones_index</name></name> <operator>+=</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_tones_frequency</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>band_has_tones</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>direction</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWaveParam</name> <modifier>*</modifier></type><name>iwav</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>owav</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ch_num</name> <operator>||</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iwav</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>direction</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>direction</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iwav</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>iwav</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq_index</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iwav</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>||</operator> <name><name>iwav</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq_index</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iwav</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>nbits</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">1023</literal> <operator>-</operator> <name><name>iwav</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq_index</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iwav</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call> <operator>+</operator>

<literal type="number">1024</literal> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbits</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iwav</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>owav</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>iwav</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq_index</name></expr> </then><else>:

<expr><operator>(</operator><ternary><condition><expr><name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr> ?</condition><then> <expr><name><name>iwav</name><index>[<expr><name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq_index</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>owav</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq_index</name> <operator>=</operator> <operator>(</operator><name>pred</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_tones_amplitude</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>band_has_tones</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>diff</name></decl>, <decl><type ref="prev"/><name>maxdiff</name></decl>, <decl><type ref="prev"/><name>fi</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWaveParam</name> <modifier>*</modifier></type><name>wsrc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>refwaves</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_num</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wsrc</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>wref</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>fi</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>maxdiff</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>wsrc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>freq_index</name> <operator>-</operator> <name><name>wref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>freq_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>maxdiff</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxdiff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fi</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>maxdiff</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>refwaves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>fi</name> <operator>+</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>refwaves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>+</operator> <name><name>ref</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>refwaves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ch_num</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>amplitude_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>amp_sf</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>]</index></name><operator>.</operator><name>amp_sf</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>amplitude_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>amp_sf</name> <operator>=</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>]</index></name><operator>.</operator><name>amp_sf</name> <operator>=</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <ternary><condition><expr><name><name>refwaves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>refwaves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>amp_sf</name></expr> </then><else>: <expr><literal type="number">34</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>amp_sf</name> <operator>=</operator> <operator>(</operator><name>pred</name> <operator>+</operator> <name>delta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>amp_sf</name> <operator>=</operator>

<ternary><condition><expr><name><name>refwaves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>

?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>refwaves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>amp_sf</name></expr>

</then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_tones_phase</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>band_has_tones</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWaveParam</name> <modifier>*</modifier></type><name>wparam</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Atrac3pWavesData</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>band_has_tones</name><index>[<expr><name>sb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>wparam</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name><index>[<expr><name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>start_index</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dst</name><index>[<expr><name>sb</name></expr>]</index></name><operator>.</operator><name>num_wavs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wparam</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>phase_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_tones_info</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch_num</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>band_has_tones</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch_num</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch_num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><name>ch_num</name></expr>]</index></name><operator>.</operator><name>tones_info</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ATRAC3P_SUBBANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tones_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tones_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>waves</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>amplitude_mode</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>amplitude_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"GHA amplitude mode 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name> <operator>=</operator>

<call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,

<argument><expr><name><name>tone_vlc_tabs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_subband_flags</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tone_sharing</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_subband_flags</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tone_master</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_subband_flags</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>invert_phase</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tones_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch_num</name> <operator>&lt;</operator> <name>num_channels</name></expr>;</condition> <incr><expr><name>ch_num</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>band_has_tones</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>ch_num</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tone_sharing</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>decode_tones_envelope</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>band_has_tones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_band_numwavs</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>band_has_tones</name></expr></argument>,

<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_tones_frequency</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>band_has_tones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_tones_amplitude</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>band_has_tones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_tones_phase</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch_num</name></expr></argument>, <argument><expr><name>band_has_tones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>num_channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>num_tone_bands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tone_sharing</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>tones_info</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>tones_info</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>waves_info</name><operator>-&gt;</operator><name>tone_master</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>Atrac3pWavesData</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>tones_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>tones_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_atrac3p_decode_channel_unit</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Atrac3pChanUnitCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>num_channels</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name> <operator>&gt;</operator> <literal type="number">28</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid number of quantization units: %d!\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mute_flag</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_quant_wordlen</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>num_channels</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_subbands</name></name> <operator>=</operator> <name><name>atrac3p_qu_to_subband</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_quant_units</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_coded_subbands</name></name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name></expr>

?</condition><then> <expr><name><name>atrac3p_qu_to_subband</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>used_quant_units</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>

</then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_scale_factors</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>num_channels</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_code_table_indexes</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>num_channels</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>decode_spectrum</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>num_channels</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_subband_flags</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>swap_channels</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_coded_subbands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_subband_flags</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>negate_coeffs</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_coded_subbands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode_window_shape</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>num_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_gainc_data</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>num_channels</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_tones_info</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>num_channels</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>noise_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>noise_present</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>noise_level_index</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>noise_table_index</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
