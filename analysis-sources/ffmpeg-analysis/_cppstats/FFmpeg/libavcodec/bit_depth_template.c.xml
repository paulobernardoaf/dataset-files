<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\bit_depth_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rnd_avg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BIT_DEPTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVCODEC_BIT_DEPTH_TEMPLATE_C</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pixel</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pixel2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pixel4</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dctcoef</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>idctin</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INIT_CLIP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>no_rnd_avg_pixel4</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rnd_avg_pixel4</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AV_RN2P</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AV_RN4P</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AV_RN4PA</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AV_WN2P</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AV_WN4P</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AV_WN4PA</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLIP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FUNCC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>av_clip_pixel</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PIXEL_SPLAT_X4</name></cpp:undef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCODEC_BIT_DEPTH_TEMPLATE_C</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BIT_DEPTH</name> <operator>&gt;</operator> <literal type="number">8</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel2</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel4</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dctcoef</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IN_IDCT_DEPTH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IN_IDCT_DEPTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>idctin</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>idctin</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>idctin</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_CLIP</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>no_rnd_avg_pixel4</name></cpp:macro> <cpp:value>no_rnd_avg64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnd_avg_pixel4</name></cpp:macro> <cpp:value>rnd_avg64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN2P</name></cpp:macro> <cpp:value>AV_RN32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN4P</name></cpp:macro> <cpp:value>AV_RN64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN4PA</name></cpp:macro> <cpp:value>AV_RN64A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN2P</name></cpp:macro> <cpp:value>AV_WN32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN4P</name></cpp:macro> <cpp:value>AV_WN64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN4PA</name></cpp:macro> <cpp:value>AV_WN64A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_SPLAT_X4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*0x0001000100010001ULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_pixel</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uintp2(a, BIT_DEPTH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uintp2(a, BIT_DEPTH)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel2</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pixel4</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dctcoef</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>idctin</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_CLIP</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>no_rnd_avg_pixel4</name></cpp:macro> <cpp:value>no_rnd_avg32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnd_avg_pixel4</name></cpp:macro> <cpp:value>rnd_avg32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN2P</name></cpp:macro> <cpp:value>AV_RN16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN4P</name></cpp:macro> <cpp:value>AV_RN32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN4PA</name></cpp:macro> <cpp:value>AV_RN32A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN2P</name></cpp:macro> <cpp:value>AV_WN16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN4P</name></cpp:macro> <cpp:value>AV_WN32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN4PA</name></cpp:macro> <cpp:value>AV_WN32A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_SPLAT_X4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*0x01010101U)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_pixel</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uint8(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uint8(a)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_ ##b ##c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC3(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC2(a, BIT_DEPTH,)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC2(a, BIT_DEPTH, _c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ##_int ##b ##_ ##c ##bit</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC4(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNC6</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FUNC5(a, IN_IDCT_DEPTH, BIT_DEPTH)</cpp:value></cpp:define>

</unit>
