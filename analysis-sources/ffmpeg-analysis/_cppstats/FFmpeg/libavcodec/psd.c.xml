<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\psd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<enum>enum <name>PsdCompr</name> <block>{

<decl><name>PSD_RAW</name></decl>,

<decl><name>PSD_RLE</name></decl>,

<decl><name>PSD_ZIP_WITHOUT_P</name></decl>,

<decl><name>PSD_ZIP_WITH_P</name></decl>,

}</block>;</enum>

<enum>enum <name>PsdColorMode</name> <block>{

<decl><name>PSD_BITMAP</name></decl>,

<decl><name>PSD_GRAYSCALE</name></decl>,

<decl><name>PSD_INDEXED</name></decl>,

<decl><name>PSD_RGB</name></decl>,

<decl><name>PSD_CMYK</name></decl>,

<decl><name>PSD_MULTICHANNEL</name></decl>,

<decl><name>PSD_DUOTONE</name></decl>,

<decl><name>PSD_LAB</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>PSDContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>channel_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>channel_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>uncompressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pixel_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>line_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>PsdCompr</name></name></type> <name>compression</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>PsdColorMode</name></name></type> <name>color_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>palette</name><index>[<expr><name>AVPALETTE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>PSDContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_header</name><parameter_list>(<parameter><decl><type><name>PSDContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>signature</name></decl>, <decl><type ref="prev"/><name>version</name></decl>, <decl><type ref="prev"/><name>color_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>len_section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Header too short to parse.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>signature</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>signature</name> <operator>!=</operator> <call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Wrong signature %d.\n"</literal></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Wrong version %d.\n"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>&gt;</operator> <literal type="number">56</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel count %d.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">30000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Height &gt; 30000 is experimental, add "</literal>

<literal type="string">"'-strict %d' if you want to try to decode the picture.\n"</literal></expr></argument>,

<argument><expr><name>FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXPERIMENTAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">30000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Width &gt; 30000 is experimental, add "</literal>

<literal type="string">"'-strict %d' if you want to try to decode the picture.\n"</literal></expr></argument>,

<argument><expr><name>FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXPERIMENTAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color_mode</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>color_mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>PSD_BITMAP</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>PSD_GRAYSCALE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>PSD_INDEXED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>PSD_RGB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>PSD_CMYK</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>PSD_MULTICHANNEL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>PSD_DUOTONE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>=</operator> <name>PSD_LAB</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown color mode %d.\n"</literal></expr></argument>, <argument><expr><name>color_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>len_section</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_section</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Negative size for color map data section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>len_section</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incomplete file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_section</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>HAVE_BIGENDIAN</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>+</operator> <name>HAVE_BIGENDIAN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>len_section</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>HAVE_BIGENDIAN</name></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><literal type="number">2</literal> <operator>-</operator> <name>j</name></expr></else></ternary><operator>)</operator></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<expr_stmt><expr><name>len_section</name> <operator>-=</operator> <name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>len_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_section</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_section</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Negative size for image ressources section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>len_section</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incomplete file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>len_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_section</name> <operator>=</operator> <call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_section</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Negative size for layers and masks data section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len_section</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incomplete file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>len_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"File without image data section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"ZIP without predictor compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"ZIP with predictor compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown compression %d.\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_rle</name><parameter_list>(<parameter><decl><type><name>PSDContext</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scanline_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sl</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>target_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>rle_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>repeat_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scanline_count</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>scanline_count</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough data for rle scanline table.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>scanline_count</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sl</name> <operator>&lt;</operator> <name>scanline_count</name></expr>;</condition> <incr><expr><name>sl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rle_char</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rle_char</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>repeat_count</name> <operator>=</operator> <name>rle_char</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough data for rle scanline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>target_index</name> <operator>+</operator> <name>repeat_count</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid rle char.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>repeat_count</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name><index>[<expr><name>target_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>repeat_count</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>rle_char</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough data for rle scanline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>target_index</name> <operator>+</operator> <name>rle_char</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid rle char.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>rle_char</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name><index>[<expr><name>target_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>rle_char</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index_out</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>eq_channel</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>plane_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PSDContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PSD_BITMAP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid bitmap file (channel_depth %d, channel_count %d)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>line_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_MONOWHITE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PSD_INDEXED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>!=</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid indexed file (channel_depth %d, channel_count %d)\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PSD_CMYK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP16BE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel depth %d for cmyk"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP16BE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel depth %d for cmyk"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel count %d for cmyk"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>PSD_RGB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRP16BE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel depth %d for rgb"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GBRAP16BE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel depth %d for rgb"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel count %d for rgb"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>PSD_DUOTONE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ignoring unknown duotone specification.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>PSD_GRAYSCALE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAY16BE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_GRAYF32BE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel depth %d for grayscale"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YA8</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YA16BE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel depth %d for grayscale"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"channel count %d for grayscale"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"color mode %d"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>uncompressed_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <name>PSD_RLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_rle</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr_data</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>uncompressed_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not enough data for raw image data section.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr_data</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YA8</name><operator>)</operator><operator>||</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YA16BE</name><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>index_out</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>+</operator> <name>c</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>index_out</name> <operator>+</operator> <name>p</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_data</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>==</operator> <name>PSD_CMYK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>ptr_data</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_depth</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>*</operator> <literal type="number">257</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>*</operator> <literal type="number">257</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>*</operator> <literal type="number">257</literal> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>r</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>g</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><call><name>AV_RB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>k</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>g</name> <operator>*</operator> <literal type="number">65537</literal> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b</name> <operator>*</operator> <literal type="number">65537</literal> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>r</name> <operator>*</operator> <literal type="number">65537</literal> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GBRAP16BE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>eq_channel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channel_count</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>plane_number</name> <operator>=</operator> <name><name>eq_channel</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_number</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr_data</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_number</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr_data</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>line_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>color_mode</name></name> <operator>==</operator> <name>PSD_INDEXED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_psd_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"psd"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Photoshop PSD file"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PSD</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PSDContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
