<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aac.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac_defines.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fixed_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdct15.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ELEM_ID</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TNS_MAX_ORDER</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LTP_LONG_SFB</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP_AVOIDANCE_FACTOR</name></cpp:macro> <cpp:value>0.95f</cpp:value></cpp:define>

<enum>enum <name>RawDataBlockType</name> <block>{

<decl><name>TYPE_SCE</name></decl>,

<decl><name>TYPE_CPE</name></decl>,

<decl><name>TYPE_CCE</name></decl>,

<decl><name>TYPE_LFE</name></decl>,

<decl><name>TYPE_DSE</name></decl>,

<decl><name>TYPE_PCE</name></decl>,

<decl><name>TYPE_FIL</name></decl>,

<decl><name>TYPE_END</name></decl>,

}</block>;</enum>

<enum>enum <name>ExtensionPayloadID</name> <block>{

<decl><name>EXT_FILL</name></decl>,

<decl><name>EXT_FILL_DATA</name></decl>,

<decl><name>EXT_DATA_ELEMENT</name></decl>,

<decl><name>EXT_DYNAMIC_RANGE</name> <init>= <expr><literal type="number">0xb</literal></expr></init></decl>,

<decl><name>EXT_SBR_DATA</name> <init>= <expr><literal type="number">0xd</literal></expr></init></decl>,

<decl><name>EXT_SBR_DATA_CRC</name> <init>= <expr><literal type="number">0xe</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <name>WindowSequence</name> <block>{

<decl><name>ONLY_LONG_SEQUENCE</name></decl>,

<decl><name>LONG_START_SEQUENCE</name></decl>,

<decl><name>EIGHT_SHORT_SEQUENCE</name></decl>,

<decl><name>LONG_STOP_SEQUENCE</name></decl>,

}</block>;</enum>

<enum>enum <name>BandType</name> <block>{

<decl><name>ZERO_BT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>FIRST_PAIR_BT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

<decl><name>ESC_BT</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>, 

<decl><name>RESERVED_BT</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>, 

<decl><name>NOISE_BT</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>, 

<decl><name>INTENSITY_BT2</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>, 

<decl><name>INTENSITY_BT</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>, 

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CODEBOOK_UNSIGNED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) - 1) &amp; 10)</cpp:value></cpp:define>

<enum>enum <name>ChannelPosition</name> <block>{

<decl><name>AAC_CHANNEL_OFF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AAC_CHANNEL_FRONT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>AAC_CHANNEL_SIDE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>AAC_CHANNEL_BACK</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>AAC_CHANNEL_LFE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>AAC_CHANNEL_CC</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <name>CouplingPoint</name> <block>{

<decl><name>BEFORE_TNS</name></decl>,

<decl><name>BETWEEN_TNS_AND_IMDCT</name></decl>,

<decl><name>AFTER_IMDCT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <name>OCStatus</name> <block>{

<decl><name>OC_NONE</name></decl>, 

<decl><name>OC_TRIAL_PCE</name></decl>, 

<decl><name>OC_TRIAL_FRAME</name></decl>, 

<decl><name>OC_GLOBAL_HDR</name></decl>, 

<decl><name>OC_LOCKED</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>OutputConfiguration</name> <block>{

<decl_stmt><decl><type><name>MPEG4AudioConfig</name></type> <name>m4ac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name><operator>*</operator><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>layout_map_tags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>OCStatus</name></name></type> <name>status</name></decl>;</decl_stmt>

}</block></struct></type> <name>OutputConfiguration</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PredictorState</name> <block>{

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>cor0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>cor1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>var0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>var1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>r0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>r1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>k1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AAC_FLOAT</name></type> <name>x_est</name></decl>;</decl_stmt>

}</block></struct></type> <name>PredictorState</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PREDICTORS</name></cpp:macro> <cpp:value>672</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_DIV_512</name></cpp:macro> <cpp:value>36</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_ONE_POS</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_MAX_POS</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_MAX_DIFF</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_DIFF_ZERO</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POW_SF2_ZERO</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOISE_PRE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOISE_PRE_BITS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOISE_OFFSET</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>LongTermPrediction</name> <block>{

<decl_stmt><decl><type><name>int8_t</name></type> <name>present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>lag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coef_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>coef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>used</name><index>[<expr><name>MAX_LTP_LONG_SFB</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>LongTermPrediction</name>;</typedef>

<typedef>typedef <type><struct>struct <name>IndividualChannelStream</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_sfb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>WindowSequence</name></name></type> <name><name>window_sequence</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>use_kb_window</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_window_groups</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>group_len</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LongTermPrediction</name></type> <name>ltp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>swb_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>swb_sizes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_swb</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_windows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tns_max_bands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>predictor_present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>predictor_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>predictor_reset_group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>predictor_reset_count</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>prediction_used</name><index>[<expr><literal type="number">41</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>window_clipping</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>clip_avoidance_factor</name></decl>;</decl_stmt> 

}</block></struct></type> <name>IndividualChannelStream</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TemporalNoiseShaping</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>n_filt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>length</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>direction</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>order</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>coef_idx</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>TNS_MAX_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>coef</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>TNS_MAX_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>TemporalNoiseShaping</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DynamicRangeControl</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>pce_instance_tag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>dyn_rng_sgn</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>dyn_rng_ctl</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>exclude_mask</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>band_incr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>interpolation_scheme</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>band_top</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prog_ref_level</name></decl>;</decl_stmt> 

}</block></struct></type> <name>DynamicRangeControl</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Pulse</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>num_pulse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>amp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>Pulse</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ChannelCoupling</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>CouplingPoint</name></name></type> <name>coupling_point</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_coupled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>RawDataBlockType</name></name></type> <name><name>type</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>id_select</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>ch_select</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>gain</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ChannelCoupling</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SingleChannelElement</name> <block>{

<decl_stmt><decl><type><name>IndividualChannelStream</name></type> <name>ics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TemporalNoiseShaping</name></type> <name>tns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Pulse</name></type> <name>pulse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>BandType</name></name></type> <name><name>band_type</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>BandType</name></name></type> <name><name>band_alt</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>band_type_run_end</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>sf</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>sf_idx</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>zeroes</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>can_pns</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>is_ener</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name><name>pns_ener</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>pcoeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1024</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1024</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1536</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>ret_buf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2048</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>ltp_state</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3072</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>AAC_FLOAT</name></expr></argument>, <argument><expr><name>lcoeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1024</literal></expr>]</index></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>AAC_FLOAT</name></expr></argument>, <argument><expr><name>prcoeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1024</literal></expr>]</index></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>PredictorState</name></type> <name><name>predictor_state</name><index>[<expr><name>MAX_PREDICTORS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt> 

}</block></struct></type> <name>SingleChannelElement</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ChannelElement</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>common_window</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ms_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ms_mask</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>is_mask</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>SingleChannelElement</name></type> <name><name>ch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelCoupling</name></type> <name>coup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SpectralBandReplication</name></type> <name>sbr</name></decl>;</decl_stmt>

}</block></struct></type> <name>ChannelElement</name>;</typedef>

<struct>struct <name>AACContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_saved</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DynamicRangeControl</name></type> <name>che_drc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name><name>che</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>MAX_ELEM_ID</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name><name>tag_che_map</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>MAX_ELEM_ID</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tags_mapped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>warned_remapping_once</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>buf_mdct</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1024</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct_small</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct_ld</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct_ltp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVFixedDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>mdct120</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>mdct480</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MDCT15Context</name> <modifier>*</modifier></type><name>mdct960</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>int</name></type> <name>random_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name><name>output_element</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>force_dmono_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dmono_mode</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">128</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>OutputConfiguration</name></type> <name><name>oc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>warned_num_aac_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>warned_960_sbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>warned_gain_control</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>imdct_and_windowing</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>apply_ltp</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>apply_tns</name>)<parameter_list>(<parameter><decl><type><name>INTFLOAT</name></type> <name><name>coef</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>TemporalNoiseShaping</name> <modifier>*</modifier></type><name>tns</name></decl></parameter>,

<parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>windowing_and_mdct_ltp</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>update_ltp</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>vector_pow43</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>subband_scale</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_context</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<function_decl><type><name>void</name></type> <name>ff_aacdec_init_mips</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
