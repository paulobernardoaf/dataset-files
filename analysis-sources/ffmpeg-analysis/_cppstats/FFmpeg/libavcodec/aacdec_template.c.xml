<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacdec_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name>vlc_scalefactors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>vlc_spectral</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>output_configure</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name><operator>*</operator><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tags</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>OCStatus</name></name></type> <name>oc_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>get_new_frame</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>overread_err</name></cpp:macro> <cpp:value>"Input buffer exhausted before END element found\n"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count_channels</name><argument_list>(<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>layout</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>tags</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>syn_ele</name> <init>= <expr><name><name>layout</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>layout</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>syn_ele</name> <operator>==</operator> <name>TYPE_CPE</name><operator>)</operator><operator>)</operator> <operator>*</operator>

<operator>(</operator><name>pos</name> <operator>!=</operator> <name>AAC_CHANNEL_OFF</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>!=</operator> <name>AAC_CHANNEL_CC</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>che_configure</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>ChannelPosition</name></name></type> <name>che_pos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>channels</name> <operator>&gt;=</operator> <name>MAX_CHANNELS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>che_pos</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ChannelElement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_sbr_ctx_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name><operator>-&gt;</operator><name>sbr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>TYPE_CCE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>channels</name> <operator>&gt;=</operator> <name>MAX_CHANNELS</name> <operator>-</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>TYPE_CPE</name> <operator>||</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>TYPE_SCE</name> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>output_element</name><index>[<expr><operator>(</operator><operator>*</operator><name>channels</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name><operator>-&gt;</operator><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_CPE</name> <operator>||</operator>

<operator>(</operator><name>type</name> <operator>==</operator> <name>TYPE_SCE</name> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>output_element</name><index>[<expr><operator>(</operator><operator>*</operator><name>channels</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name><operator>-&gt;</operator><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_sbr_ctx_close</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name><operator>-&gt;</operator><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>frame_configure_elements</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>id</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name>MAX_ELEM_ID</name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>che</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>che</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ret</name> <operator>=</operator> <name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ret_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ret</name> <operator>=</operator> <name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ret_buf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>output_element</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>output_element</name><index>[<expr><name>ch</name></expr>]</index></name><operator>-&gt;</operator><name>ret</name> <operator>=</operator> <operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name><name>ac</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>elem_to_channel</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>av_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>syn_ele</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>elem_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>aac_position</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>assign_pair</name><argument_list>(<argument><expr>struct <name>elem_to_channel</name> <name><name>e2c_vec</name><index>[<expr><name>MAX_ELEM_ID</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>layout_map</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>left</name></expr></argument>,

<argument><expr><name>uint64_t</name> <name>right</name></expr></argument>, <argument><expr><name>int</name> <name>pos</name></expr></argument>)</argument_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>layout_map</name><index>[<expr><name>offset</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e2c_vec</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>elem_to_channel</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>av_position</name> <operator>=</operator> <name>left</name> <operator>|</operator> <name>right</name></expr>,

<expr><operator>.</operator><name>syn_ele</name> <operator>=</operator> <name>TYPE_CPE</name></expr>,

<expr><operator>.</operator><name>elem_id</name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><name>offset</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>aac_position</name> <operator>=</operator> <name>pos</name></expr>

}</block></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>e2c_vec</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>elem_to_channel</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>av_position</name> <operator>=</operator> <name>left</name></expr>,

<expr><operator>.</operator><name>syn_ele</name> <operator>=</operator> <name>TYPE_SCE</name></expr>,

<expr><operator>.</operator><name>elem_id</name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><name>offset</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>aac_position</name> <operator>=</operator> <name>pos</name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e2c_vec</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>elem_to_channel</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>av_position</name> <operator>=</operator> <name>right</name></expr>,

<expr><operator>.</operator><name>syn_ele</name> <operator>=</operator> <name>TYPE_SCE</name></expr>,

<expr><operator>.</operator><name>elem_id</name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>aac_position</name> <operator>=</operator> <name>pos</name></expr>

}</block></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count_paired_channels</name><argument_list>(<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>layout_map</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>tags</name></expr></argument>, <argument><expr><name>int</name> <name>pos</name></expr></argument>,

<argument><expr><name>int</name> <operator>*</operator><name>current</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_pos_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_cpe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sce_parity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>current</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sce_parity</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>AAC_CHANNEL_FRONT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first_cpe</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sce_parity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_pos_channels</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>first_cpe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num_pos_channels</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sce_parity</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sce_parity</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>pos</name> <operator>==</operator> <name>AAC_CHANNEL_FRONT</name> <operator>&amp;&amp;</operator> <name>first_cpe</name><operator>)</operator> <operator>||</operator> <name>pos</name> <operator>==</operator> <name>AAC_CHANNEL_SIDE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>current</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><name>num_pos_channels</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>sniff_channel_order</name><argument_list>(<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>layout_map</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>tags</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>total_non_cc_elements</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>elem_to_channel</name></name></type> <name><name>e2c_vec</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>MAX_ELEM_ID</name></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_front_channels</name></decl>, <decl><type ref="prev"/><name>num_side_channels</name></decl>, <decl><type ref="prev"/><name>num_back_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>e2c_vec</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>tags</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_front_channels</name> <operator>=</operator>

<call><name>count_paired_channels</name><argument_list>(<argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>AAC_CHANNEL_FRONT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_front_channels</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_side_channels</name> <operator>=</operator>

<call><name>count_paired_channels</name><argument_list>(<argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>AAC_CHANNEL_SIDE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_side_channels</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_back_channels</name> <operator>=</operator>

<call><name>count_paired_channels</name><argument_list>(<argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>AAC_CHANNEL_BACK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_back_channels</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_side_channels</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num_back_channels</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_side_channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_back_channels</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_front_channels</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>elem_to_channel</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>av_position</name> <operator>=</operator> <name>AV_CH_FRONT_CENTER</name></expr>,

<expr><operator>.</operator><name>syn_ele</name> <operator>=</operator> <name>TYPE_SCE</name></expr>,

<expr><operator>.</operator><name>elem_id</name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>aac_position</name> <operator>=</operator> <name>AAC_CHANNEL_FRONT</name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num_front_channels</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_front_channels</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>assign_pair</name><argument_list>(<argument><expr><name>e2c_vec</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>AV_CH_FRONT_LEFT_OF_CENTER</name></expr></argument>,

<argument><expr><name>AV_CH_FRONT_RIGHT_OF_CENTER</name></expr></argument>,

<argument><expr><name>AAC_CHANNEL_FRONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_front_channels</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_front_channels</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>assign_pair</name><argument_list>(<argument><expr><name>e2c_vec</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>AV_CH_FRONT_LEFT</name></expr></argument>,

<argument><expr><name>AV_CH_FRONT_RIGHT</name></expr></argument>,

<argument><expr><name>AAC_CHANNEL_FRONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_front_channels</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>num_front_channels</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>assign_pair</name><argument_list>(<argument><expr><name>e2c_vec</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>UINT64_MAX</name></expr></argument>,

<argument><expr><name>UINT64_MAX</name></expr></argument>,

<argument><expr><name>AAC_CHANNEL_FRONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_front_channels</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>num_side_channels</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>assign_pair</name><argument_list>(<argument><expr><name>e2c_vec</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>AV_CH_SIDE_LEFT</name></expr></argument>,

<argument><expr><name>AV_CH_SIDE_RIGHT</name></expr></argument>,

<argument><expr><name>AAC_CHANNEL_FRONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_side_channels</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>num_side_channels</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>assign_pair</name><argument_list>(<argument><expr><name>e2c_vec</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>UINT64_MAX</name></expr></argument>,

<argument><expr><name>UINT64_MAX</name></expr></argument>,

<argument><expr><name>AAC_CHANNEL_SIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_side_channels</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>num_back_channels</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>assign_pair</name><argument_list>(<argument><expr><name>e2c_vec</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>UINT64_MAX</name></expr></argument>,

<argument><expr><name>UINT64_MAX</name></expr></argument>,

<argument><expr><name>AAC_CHANNEL_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_back_channels</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>num_back_channels</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>assign_pair</name><argument_list>(<argument><expr><name>e2c_vec</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name>AV_CH_BACK_LEFT</name></expr></argument>,

<argument><expr><name>AV_CH_BACK_RIGHT</name></expr></argument>,

<argument><expr><name>AAC_CHANNEL_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_back_channels</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_back_channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>elem_to_channel</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>av_position</name> <operator>=</operator> <name>AV_CH_BACK_CENTER</name></expr>,

<expr><operator>.</operator><name>syn_ele</name> <operator>=</operator> <name>TYPE_SCE</name></expr>,

<expr><operator>.</operator><name>elem_id</name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>aac_position</name> <operator>=</operator> <name>AAC_CHANNEL_BACK</name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num_back_channels</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>tags</name> <operator>&amp;&amp;</operator> <name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>AAC_CHANNEL_LFE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>elem_to_channel</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>av_position</name> <operator>=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><operator>.</operator><name>syn_ele</name> <operator>=</operator> <name>TYPE_LFE</name></expr>,

<expr><operator>.</operator><name>elem_id</name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>aac_position</name> <operator>=</operator> <name>AAC_CHANNEL_LFE</name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>tags</name> <operator>&amp;&amp;</operator> <name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>AAC_CHANNEL_LFE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator>struct <name>elem_to_channel</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>av_position</name> <operator>=</operator> <name>UINT64_MAX</name></expr>,

<expr><operator>.</operator><name>syn_ele</name> <operator>=</operator> <name>TYPE_LFE</name></expr>,

<expr><operator>.</operator><name>elem_id</name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,

<expr><operator>.</operator><name>aac_position</name> <operator>=</operator> <name>AAC_CHANNEL_LFE</name></expr>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>total_non_cc_elements</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next_n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>e2c_vec</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>av_position</name> <operator>&gt;</operator> <name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_position</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr>struct <name>elem_to_channel</name></expr></argument>, <argument><expr><name><name>e2c_vec</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next_n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>next_n</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total_non_cc_elements</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>syn_ele</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>elem_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aac_position</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_position</name> <operator>!=</operator> <name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>layout</name> <operator>|=</operator> <name><name>e2c_vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_position</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>layout</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>push_output_configuration</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pushed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <name>OC_LOCKED</name> <operator>||</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <name>OC_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pushed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name>OC_NONE</name></expr>;</expr_stmt>

<return>return <expr><name>pushed</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pop_output_configuration</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>!=</operator> <name>OC_LOCKED</name> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>!=</operator> <name>OC_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>channel_layout</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>layout_map</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>layout_map_tags</name></expr></argument>,

<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>output_configure</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tags</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>OCStatus</name></name></type> <name>oc_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>get_new_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>id_map</name><index>[<expr><name>TYPE_END</name></expr>]</index><index>[<expr><name>MAX_ELEM_ID</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>type_counts</name><index>[<expr><name>TYPE_END</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>layout_map</name> <operator>!=</operator> <name>layout_map</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>layout_map</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>layout_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>layout_map_tags</name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>id_map</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name><name>type_counts</name><index>[<expr><name>type</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id_map</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name> <operator>&gt;=</operator> <name>MAX_ELEM_ID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Too large remapped id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_NATIVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <call><name>sniff_channel_order</name><argument_list>(<argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tags</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iid</name> <init>= <expr><name><name>id_map</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><name><name>layout_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>che_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>iid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>iid</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>channels</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>layout</name> <operator>==</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <name>AV_CH_FRONT_LEFT</name><operator>|</operator><name>AV_CH_FRONT_RIGHT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>layout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name>layout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>channel_layout</name> <operator>=</operator> <name>layout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>channels</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name>oc_type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>get_new_frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>frame_configure_elements</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name><init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>type</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ELEM_ID</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>che</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>che</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>saved</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>set_default_channel_config</name><argument_list>(<argument><expr><name>AVCodecContext</name> <operator>*</operator><name>avctx</name></expr></argument>,

<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>layout_map</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>,

<argument><expr><name>int</name> <operator>*</operator><name>tags</name></expr></argument>,

<argument><expr><name>int</name> <name>channel_config</name></expr></argument>)</argument_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel_config</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>channel_config</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>channel_config</name> <operator>&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>||</operator>

<name>channel_config</name></expr></argument> &gt;</argument_list></name> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"invalid default channel configuration (%d)\n"</literal></expr></argument>,

<argument><expr><name>channel_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>tags</name> <operator>=</operator> <name><name>tags_per_config</name><index>[<expr><name>channel_config</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name><name>aac_channel_layout_map</name><index>[<expr><name>channel_config</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>*</operator><name>tags</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>layout_map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_config</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&lt;</operator> <name>FF_COMPLIANCE_STRICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Assuming an incorrectly encoded 7.1 channel layout"</literal>

<literal type="string">" instead of a spec-compliant 7.1(wide) layout, use -strict %d to decode"</literal>

<literal type="string">" according to the specification instead.\n"</literal></expr></argument>, <argument><expr><name>FF_COMPLIANCE_STRICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>AAC_CHANNEL_SIDE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>ChannelElement</name> <modifier>*</modifier></type><name>get_che</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>TYPE_CPE</name> <operator>&amp;&amp;</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name><operator>*</operator><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>layout_map_tags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>push_output_configuration</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"mono with CPE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_default_channel_config</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>layout_map_tags</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>layout_map_tags</name></expr></argument>,

<argument><expr><name>OC_TRIAL_FRAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>TYPE_SCE</name> <operator>&amp;&amp;</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>layout_map_tags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>push_output_configuration</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"stereo with SCE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>set_default_channel_config</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>layout_map_tags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>layout_map_tags</name></expr></argument>,

<argument><expr><name>OC_TRIAL_FRAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>TYPE_CPE</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_CPE</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">11</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>==</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator>

<name>type</name> <operator>==</operator> <name>TYPE_SCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>TYPE_SCE</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_SCE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>==</operator> <name><name>tags_per_config</name><index>[<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>TYPE_LFE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TYPE_SCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>warned_remapping_once</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>TYPE_LFE</name> <operator>||</operator> <name>elem_id</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"This stream seems to incorrectly report its last channel as %s[%d], mapping to LFE[0]\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>TYPE_SCE</name></expr> ?</condition><then> <expr><literal type="string">"SCE"</literal></expr> </then><else>: <expr><literal type="string">"LFE"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>warned_remapping_once</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_LFE</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>TYPE_CPE</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_CPE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>==</operator> <name><name>tags_per_config</name><index>[<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>==</operator> <name>TYPE_LFE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TYPE_SCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>warned_remapping_once</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>TYPE_SCE</name> <operator>||</operator> <name>elem_id</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"This stream seems to incorrectly report its last channel as %s[%d], mapping to SCE[1]\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>TYPE_SCE</name></expr> ?</condition><then> <expr><literal type="string">"SCE"</literal></expr> </then><else>: <expr><literal type="string">"LFE"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>warned_remapping_once</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_SCE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<name>type</name> <operator>==</operator> <name>TYPE_SCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>TYPE_SCE</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_SCE</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>==</operator> <operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name>type</name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>TYPE_CPE</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_CPE</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>TYPE_SCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name><name>ac</name><operator>-&gt;</operator><name>tag_che_map</name><index>[<expr><name>TYPE_SCE</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_SCE</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_channel_map</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>ChannelPosition</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>RawDataBlockType</name></name></type> <name>syn_ele</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AAC_CHANNEL_FRONT</name></expr>:</case>

<case>case <expr><name>AAC_CHANNEL_BACK</name></expr>:</case>

<case>case <expr><name>AAC_CHANNEL_SIDE</name></expr>:</case>

<expr_stmt><expr><name>syn_ele</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AAC_CHANNEL_CC</name></expr>:</case>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>syn_ele</name> <operator>=</operator> <name>TYPE_CCE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AAC_CHANNEL_LFE</name></expr>:</case>

<expr_stmt><expr><name>syn_ele</name> <operator>=</operator> <name>TYPE_LFE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>syn_ele</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name>layout_map</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>relative_align_get_bits</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>reference_position</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>reference_position</name> <operator>-</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_pce</name><argument_list>(<argument><expr><name>AVCodecContext</name> <operator>*</operator><name>avctx</name></expr></argument>, <argument><expr><name>MPEG4AudioConfig</name> <operator>*</operator><name>m4ac</name></expr></argument>,

<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>layout_map</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>,

<argument><expr><name>GetBitContext</name> <operator>*</operator><name>gb</name></expr></argument>, <argument><expr><name>int</name> <name>byte_align_ref</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_front</name></decl>, <decl><type ref="prev"/><name>num_side</name></decl>, <decl><type ref="prev"/><name>num_back</name></decl>, <decl><type ref="prev"/><name>num_lfe</name></decl>, <decl><type ref="prev"/><name>num_assoc_data</name></decl>, <decl><type ref="prev"/><name>num_cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sampling_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>comment_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>sampling_index</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>sampling_index</name></name> <operator>!=</operator> <name>sampling_index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Sample rate index in program config element does not "</literal>

<literal type="string">"match the sample rate index configured by the container.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_front</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_side</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_back</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_lfe</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_assoc_data</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_cc</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name>num_front</name> <operator>+</operator> <name>num_side</name> <operator>+</operator> <name>num_back</name> <operator>+</operator> <name>num_cc</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator><operator>(</operator><name>num_lfe</name> <operator>+</operator> <name>num_assoc_data</name> <operator>+</operator> <name>num_cc</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decode_pce: "</literal> <name>overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode_channel_map</name><argument_list>(<argument><expr><name>layout_map</name></expr></argument> , <argument><expr><name>AAC_CHANNEL_FRONT</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tags</name> <operator>=</operator> <name>num_front</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_channel_map</name><argument_list>(<argument><expr><name>layout_map</name> <operator>+</operator> <name>tags</name></expr></argument>, <argument><expr><name>AAC_CHANNEL_SIDE</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_side</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tags</name> <operator>+=</operator> <name>num_side</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_channel_map</name><argument_list>(<argument><expr><name>layout_map</name> <operator>+</operator> <name>tags</name></expr></argument>, <argument><expr><name>AAC_CHANNEL_BACK</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tags</name> <operator>+=</operator> <name>num_back</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_channel_map</name><argument_list>(<argument><expr><name>layout_map</name> <operator>+</operator> <name>tags</name></expr></argument>, <argument><expr><name>AAC_CHANNEL_LFE</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_lfe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tags</name> <operator>+=</operator> <name>num_lfe</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>num_assoc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_channel_map</name><argument_list>(<argument><expr><name>layout_map</name> <operator>+</operator> <name>tags</name></expr></argument>, <argument><expr><name>AAC_CHANNEL_CC</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>num_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tags</name> <operator>+=</operator> <name>num_cc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>relative_align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>byte_align_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>comment_len</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>comment_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decode_pce: "</literal> <name>overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>comment_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tags</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_ga_specific_config</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>get_bit_alignment</name></decl></parameter>,

<parameter><decl><type><name>MPEG4AudioConfig</name> <modifier>*</modifier></type><name>m4ac</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channel_config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>extension_flag</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>ep_config</name></decl>, <decl><type ref="prev"/><name>res_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name><operator>*</operator><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Fixed point 960/120 MDCT window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>frame_length_short</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>frame_length_short</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>frame_length_short</name></name> <operator>&amp;&amp;</operator> <name><name>m4ac</name><operator>-&gt;</operator><name>sbr</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"SBR with 960 frame length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ac</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>warned_960_sbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>sbr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>ps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>extension_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_SCALABLE</name> <operator>||</operator>

<name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_SCALABLE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>channel_config</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>decode_pce</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>m4ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>get_bit_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>tags</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_default_channel_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tags</name></expr></argument>, <argument><expr><name>channel_config</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>count_channels</name><argument_list>(<argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>ps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>sbr</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>m4ac</name><operator>-&gt;</operator><name>ps</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>ps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>OC_GLOBAL_HDR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extension_flag</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AOT_ER_BSAC</name></expr>:</case>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>AOT_ER_AAC_LC</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LTP</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_SCALABLE</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>

<expr_stmt><expr><name>res_flags</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res_flags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"AAC data resilience (flags %x)"</literal></expr></argument>,

<argument><expr><name>res_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AOT_ER_AAC_LC</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LTP</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_SCALABLE</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>

<expr_stmt><expr><name>ep_config</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ep_config</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"epConfig %d"</literal></expr></argument>, <argument><expr><name>ep_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_eld_specific_config</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>MPEG4AudioConfig</name> <modifier>*</modifier></type><name>m4ac</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channel_config</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>ep_config</name></decl>, <decl><type ref="prev"/><name>res_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name><operator>*</operator><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ELDEXT_TERM</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>ps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>sbr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"960/120 MDCT window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>m4ac</name><operator>-&gt;</operator><name>frame_length_short</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>res_flags</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res_flags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"AAC data resilience (flags %x)"</literal></expr></argument>,

<argument><expr><name>res_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"Low Delay SBR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ELDEXT_TERM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">15</literal> <operator>+</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><name>overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_default_channel_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tags</name></expr></argument>, <argument><expr><name>channel_config</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ac</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ret</name> <operator>=</operator> <call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>OC_GLOBAL_HDR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ep_config</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ep_config</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"epConfig %d"</literal></expr></argument>, <argument><expr><name>ep_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_audio_specific_config_gb</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>MPEG4AudioConfig</name> <modifier>*</modifier></type><name>m4ac</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>get_bit_alignment</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sync_extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name> <init>= <expr><operator>*</operator><name>gb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>ff_mpeg4audio_get_config_gb</name><argument_list>(<argument><expr><name>m4ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>sync_extension</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>sampling_index</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"invalid sampling rate index %d\n"</literal></expr></argument>,

<argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_LD</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>m4ac</name><operator>-&gt;</operator><name>sampling_index</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>m4ac</name><operator>-&gt;</operator><name>sampling_index</name></name> <operator>&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"invalid low delay sampling rate index %d\n"</literal></expr></argument>,

<argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AOT_AAC_MAIN</name></expr>:</case>

<case>case <expr><name>AOT_AAC_LC</name></expr>:</case>

<case>case <expr><name>AOT_AAC_SSR</name></expr>:</case>

<case>case <expr><name>AOT_AAC_LTP</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LC</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_ga_specific_config</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>get_bit_alignment</name></expr></argument>,

<argument><expr><name>m4ac</name></expr></argument>, <argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>chan_config</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AOT_ER_AAC_ELD</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_eld_specific_config</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>,

<argument><expr><name>m4ac</name></expr></argument>, <argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>chan_config</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"Audio object type %s%d"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>m4ac</name><operator>-&gt;</operator><name>sbr</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"SBR+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"AOT %d chan config %d sampling index %d (%d) SBR %d PS %d\n"</literal></expr></argument>,

<argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name></expr></argument>, <argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>chan_config</name></name></expr></argument>, <argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>sampling_index</name></name></expr></argument>,

<argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>sbr</name></name></expr></argument>,

<argument><expr><name><name>m4ac</name><operator>-&gt;</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_audio_specific_config</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>MPEG4AudioConfig</name> <modifier>*</modifier></type><name>m4ac</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>bit_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sync_extension</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bit_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bit_size</name></expr></argument> &gt;</argument_list></name> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Audio specific config size is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"audio specific config size %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>bit_size</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>bit_size</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>bit_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>decode_audio_specific_config_gb</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>m4ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>sync_extension</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>lcg_random</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>previous_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>unsigned</name></type> <name>u</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt> }</block> <decl><name>v</name> <init>= <expr><block>{ <expr><name>previous_val</name> <operator>*</operator> <literal type="number">1664525u</literal> <operator>+</operator> <literal type="number">1013904223</literal></expr> }</block></expr></init></decl>;</union>

<return>return <expr><name><name>v</name><operator>.</operator><name>s</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_all_predictors</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PREDICTORS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_predict_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sample_rate_idx</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">92017</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">75132</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">55426</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">46009</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">37566</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">27713</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">5</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">23004</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">6</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">18783</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">7</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">13856</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">8</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">11502</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">9</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="number">9391</literal> <operator>&lt;=</operator> <name>rate</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">10</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">11</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reset_predictor_group</name><parameter_list>(<parameter><decl><type><name>PredictorState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>group_num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_PREDICTORS</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">30</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_predict_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AAC_INIT_VLC_STATIC</name><parameter_list>(<parameter><type><name>num</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INIT_VLC_STATIC(&amp;vlc_spectral[num], 8, ff_aac_spectral_sizes[num], ff_aac_spectral_bits[num], sizeof(ff_aac_spectral_bits[num][0]), sizeof(ff_aac_spectral_bits[num][0]), ff_aac_spectral_codes[num], sizeof(ff_aac_spectral_codes[num][0]), sizeof(ff_aac_spectral_codes[num][0]), size);</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>aacdec_init</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>aac_static_table_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">304</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">270</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">550</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">328</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">294</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">306</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">268</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">510</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">366</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AAC_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">462</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>AAC_RENAME</name></type>(<name>ff_aac_sbr_init</name>)<parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>ff_aac_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_VLC_STATIC</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vlc_scalefactors</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>,

<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_aac_scalefactor_code</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ff_aac_scalefactor_bits</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ff_aac_scalefactor_bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ff_aac_scalefactor_bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ff_aac_scalefactor_code</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ff_aac_scalefactor_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ff_aac_scalefactor_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="number">352</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_kbd_window_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_long_1024</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_kbd_window_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_128</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_kbd_window_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_long_960</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><literal type="number">960</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_kbd_window_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_120</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_window_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_960</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">960</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_window_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_120</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_init_ff_sine_windows</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_init_ff_sine_windows</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_init_ff_sine_windows</name></expr></argument>)</argument_list></call><argument_list>( <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>AAC_RENAME</name></type>(<name>ff_cbrt_tableinit</name>)<parameter_list>()</parameter_list>;</function_decl>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>aac_table_init</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aac_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;</operator> <literal type="number">96000</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aac_table_init</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aac_static_table_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aacdec_init</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_audio_specific_config</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>m4ac</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>*</operator> <literal type="number">8LL</literal></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name><operator>*</operator><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>layout_map_tags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sr</name> <operator>=</operator> <call><name>sample_rate_idx</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sampling_index</name></name> <operator>=</operator> <name>sr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_mpeg4audio_channels</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff_mpeg4audio_channels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_mpeg4audio_channels</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>set_default_channel_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>layout_map_tags</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>layout_map_tags</name></expr></argument>,

<argument><expr><name>OC_GLOBAL_HDR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_alloc_fixed_dsp</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>random_state</name></name> <operator>=</operator> <literal type="number">0x1f2e3d4c</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME_32</name><argument_list>(<argument><expr><name>ff_mdct_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <call><name>RANGE15</name><argument_list>(<argument><expr><literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME_32</name><argument_list>(<argument><expr><name>ff_mdct_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_ld</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <call><name>RANGE15</name><argument_list>(<argument><expr><literal type="number">512.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME_32</name><argument_list>(<argument><expr><name>ff_mdct_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_small</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <call><name>RANGE15</name><argument_list>(<argument><expr><literal type="number">128.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME_32</name><argument_list>(<argument><expr><name>ff_mdct_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_ltp</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>RANGE15</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mdct15_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct120</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal><operator>/</operator><operator>(</operator><literal type="number">16</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">120</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mdct15_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct480</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal><operator>/</operator><operator>(</operator><literal type="number">16</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">960</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mdct15_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct960</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal><operator>/</operator><operator>(</operator><literal type="number">16</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">960</literal><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_data_stream_element</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>byte_align</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>byte_align</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"skip_data_stream_element: "</literal><name>overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_prediction</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid Predictor Reset Group.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ff_aac_pred_sfb_max</name><index>[<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sampling_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ltp</name><parameter_list>(<parameter><decl><type><name>LongTermPrediction</name> <modifier>*</modifier></type><name>ltp</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>max_sfb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ltp</name><operator>-&gt;</operator><name>coef</name></name> <operator>=</operator> <name><name>ltp_coef</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>max_sfb</name></expr></argument>, <argument><expr><name>MAX_LTP_LONG_SFB</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ltp</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>sfb</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_ics_info</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MPEG4AudioConfig</name> <modifier>*</modifier><specifier>const</specifier></type> <name>m4ac</name> <init>= <expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>m4ac</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>aot</name> <init>= <expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sampling_index</name> <init>= <expr><name><name>m4ac</name><operator>-&gt;</operator><name>sampling_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret_fail</name> <init>= <expr><name>AVERROR_INVALIDDATA</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>!=</operator> <name>AOT_ER_AAC_ELD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Reserved bit set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_BITSTREAM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>==</operator> <name>AOT_ER_AAC_LD</name> <operator>&amp;&amp;</operator>

<name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>ONLY_LONG_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"AAC LD is only defined for ONLY_LONG_SEQUENCE but "</literal>

<literal type="string">"window sequence %d found.\n"</literal></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ONLY_LONG_SEQUENCE</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>frame_length_short</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name> <operator>=</operator> <name><name>ff_swb_offset_120</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>=</operator> <name><name>ff_aac_num_swb_120</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name> <operator>=</operator> <name><name>ff_swb_offset_128</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>=</operator> <name><name>ff_aac_num_swb_128</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>tns_max_bands</name></name> <operator>=</operator> <name><name>ff_tns_max_bands_128</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>==</operator> <name>AOT_ER_AAC_LD</name> <operator>||</operator> <name>aot</name> <operator>==</operator> <name>AOT_ER_AAC_ELD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>frame_length_short</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name> <operator>=</operator> <name><name>ff_swb_offset_480</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>=</operator> <name><name>ff_aac_num_swb_480</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>tns_max_bands</name></name> <operator>=</operator> <name><name>ff_tns_max_bands_480</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name> <operator>=</operator> <name><name>ff_swb_offset_512</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>=</operator> <name><name>ff_aac_num_swb_512</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>tns_max_bands</name></name> <operator>=</operator> <name><name>ff_tns_max_bands_512</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>||</operator> <operator>!</operator><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret_fail</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>m4ac</name><operator>-&gt;</operator><name>frame_length_short</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>=</operator> <name><name>ff_aac_num_swb_960</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name> <operator>=</operator> <name><name>ff_swb_offset_960</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>=</operator> <name><name>ff_aac_num_swb_1024</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name> <operator>=</operator> <name><name>ff_swb_offset_1024</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>tns_max_bands</name></name> <operator>=</operator> <name><name>ff_tns_max_bands_1024</name><index>[<expr><name>sampling_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>!=</operator> <name>AOT_ER_AAC_ELD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_reset_group</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>predictor_present</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>==</operator> <name>AOT_AAC_MAIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decode_prediction</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>ics</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>aot</name> <operator>==</operator> <name>AOT_AAC_LC</name> <operator>||</operator>

<name>aot</name> <operator>==</operator> <name>AOT_ER_AAC_LC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Prediction is not allowed in AAC-LC.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>==</operator> <name>AOT_ER_AAC_LD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"LTP in ER AAC LD not yet implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret_fail</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>ltp</name><operator>.</operator><name>present</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_ltp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ics</name><operator>-&gt;</operator><name>ltp</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>&gt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Number of scalefactor bands in group (%d) "</literal>

<literal type="string">"exceeds limit (%d).\n"</literal></expr></argument>,

<argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret_fail</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_band_types</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>BandType</name></name></type> <name><name>band_type</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>band_type_run_end</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sect_end</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sect_len_incr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sect_band_type</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sect_band_type</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid band type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>sect_len_incr</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sect_end</name> <operator>+=</operator> <name>sect_len_incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"decode_band_types: "</literal><name>overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sect_end</name> <operator>&gt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Number of bands (%d) exceeds limit (%d).\n"</literal></expr></argument>,

<argument><expr><name>sect_end</name></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>sect_len_incr</name> <operator>==</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>;</do>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>sect_end</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>band_type</name> <index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>sect_band_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>band_type_run_end</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>sect_end</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_scalefactors</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>sf</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>global_gain</name></decl></parameter>,

<parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>BandType</name></name></type> <name><name>band_type</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>band_type_run_end</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>offset</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>global_gain</name></expr>, <expr><name>global_gain</name> <operator>-</operator> <name>NOISE_OFFSET</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clipped_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noise_flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run_end</name> <init>= <expr><name><name>band_type_run_end</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>ZERO_BT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>run_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT2</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>run_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_scalefactors</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>SCALE_DIFF_ZERO</name></expr>;</expr_stmt>

<expr_stmt><expr><name>clipped_offset</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">155</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>clipped_offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"If you heard an audible artifact, there may be a bug in the decoder. "</literal>

<literal type="string">"Clipped intensity stereo position (%d -&gt; %d)"</literal></expr></argument>,

<argument><expr><name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>clipped_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>-</operator> <name>clipped_offset</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>ff_aac_pow2sf_tab</name><index>[<expr><operator>-</operator><name>clipped_offset</name> <operator>+</operator> <name>POW_SF2_ZERO</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>run_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>noise_flag</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>NOISE_PRE_BITS</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>NOISE_PRE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_scalefactors</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>SCALE_DIFF_ZERO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>clipped_offset</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">155</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>clipped_offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"If you heard an audible artifact, there may be a bug in the decoder. "</literal>

<literal type="string">"Clipped noise gain (%d -&gt; %d)"</literal></expr></argument>,

<argument><expr><name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>clipped_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">100</literal> <operator>+</operator> <name>clipped_offset</name><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>ff_aac_pow2sf_tab</name><index>[<expr><name>clipped_offset</name> <operator>+</operator> <name>POW_SF2_ZERO</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>run_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_scalefactors</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>SCALE_DIFF_ZERO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">255U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Scalefactor (%d) out of range.\n"</literal></expr></argument>, <argument><expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>ff_aac_pow2sf_tab</name><index>[<expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">100</literal> <operator>+</operator> <name>POW_SF2_ZERO</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_pulses</name><parameter_list>(<parameter><decl><type><name>Pulse</name> <modifier>*</modifier></type><name>pulse</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>swb_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_swb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pulse_swb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pulse</name><operator>-&gt;</operator><name>num_pulse</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pulse_swb</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pulse_swb</name> <operator>&gt;=</operator> <name>num_swb</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>swb_offset</name><index>[<expr><name>pulse_swb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>swb_offset</name><index>[<expr><name>num_swb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pulse</name><operator>-&gt;</operator><name>amp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pulse</name><operator>-&gt;</operator><name>num_pulse</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>swb_offset</name><index>[<expr><name>num_swb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pulse</name><operator>-&gt;</operator><name>amp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_tns</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>TemporalNoiseShaping</name> <modifier>*</modifier></type><name>tns</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>filt</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>coef_len</name></decl>, <decl><type ref="prev"/><name>coef_res</name></decl>, <decl><type ref="prev"/><name>coef_compress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>is8</name> <init>= <expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tns_max_order</name> <init>= <expr><ternary><condition><expr><name>is8</name></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_MAIN</name></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>-</operator> <name>is8</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coef_res</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>filt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>filt</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>filt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp2_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>is8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>is8</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>tns_max_order</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"TNS filter order %d is greater than maximum %d.\n"</literal></expr></argument>,

<argument><expr><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>, <argument><expr><name>tns_max_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>direction</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coef_compress</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>coef_len</name> <operator>=</operator> <name>coef_res</name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name>coef_compress</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2_idx</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>coef_compress</name> <operator>+</operator> <name>coef_res</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>coef</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tns_tmp2_map</name><index>[<expr><name>tmp2_idx</name></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>coef_len</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_mid_side_stereo</name><parameter_list>(<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ms_present</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_idx</name> <init>= <expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>num_window_groups</name></name> <operator>*</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ms_present</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>max_idx</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ms_present</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>max_idx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_spectrum_and_dequant</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>coef</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>INTFLOAT</name></type> <name><name>sf</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pulse_present</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pulse</name> <modifier>*</modifier></type><name>pulse</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>BandType</name></name></type> <name><name>band_type</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1024</literal> <operator>/</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>coef_base</name> <init>= <expr><name>coef</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>coef</name> <operator>+</operator> <name>g</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>c</name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>g_len</name> <init>= <expr><name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>cbt_m1</name> <init>= <expr><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>cfo</name> <init>= <expr><name>coef</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_len</name> <init>= <expr><name><name>offsets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cbt_m1</name> <operator>&gt;=</operator> <name>INTENSITY_BT2</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <operator>(</operator><name>AAC_SIGNE</name><operator>)</operator><name>g_len</name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfo</name><operator>+=</operator><literal type="number">128</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>off_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cbt_m1</name> <operator>==</operator> <name>NOISE_BT</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <operator>(</operator><name>AAC_SIGNE</name><operator>)</operator><name>g_len</name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfo</name><operator>+=</operator><literal type="number">128</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>band_energy</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>off_len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>random_state</name></name> <operator>=</operator> <call><name>lcg_random</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfo</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>random_state</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>band_energy</name> <operator>=</operator> <call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>scalarproduct_fixed</name></name><argument_list>(<argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>band_energy</name> <operator>=</operator> <call><name>fixed_sqrt</name><argument_list>(<argument><expr><name>band_energy</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>noise_scale</name><argument_list>(<argument><expr><name>cfo</name></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>band_energy</name></expr></argument>, <argument><expr><name>off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>off_len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>random_state</name></name> <operator>=</operator> <call><name>lcg_random</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cfo</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>random_state</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>band_energy</name> <operator>=</operator> <call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>scalarproduct_float</name></name><argument_list>(<argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>band_energy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name><argument_list>(<argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><name>off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vq</name> <init>= <expr><name><name>ff_aac_codebook_vector_vals</name><index>[<expr><name>cbt_m1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>cb_vector_idx</name> <init>= <expr><name><name>ff_aac_codebook_vector_idx</name><index>[<expr><name>cbt_m1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator><name>vlc_tab</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>vlc_spectral</name><index>[<expr><name>cbt_m1</name></expr>]</index></name><operator>.</operator><name>table</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OPEN_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cbt_m1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <operator>(</operator><name>AAC_SIGNE</name><operator>)</operator><name>g_len</name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfo</name><operator>+=</operator><literal type="number">128</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name>cfo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>off_len</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cb_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VLC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc_tab</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_idx</name> <operator>=</operator> <name><name>cb_vector_idx</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>DEC_SQUAD</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>cb_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>VMUL4</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>vq</name></expr></argument>, <argument><expr><name>cb_idx</name></expr></argument>, <argument><expr><name>sf</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>)</condition>;</do>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <operator>(</operator><name>AAC_SIGNE</name><operator>)</operator><name>g_len</name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfo</name><operator>+=</operator><literal type="number">128</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name>cfo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>off_len</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nnz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cb_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VLC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc_tab</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_idx</name> <operator>=</operator> <name><name>cb_vector_idx</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name>cb_idx</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <ternary><condition><expr><name>nnz</name></expr> ?</condition><then> <expr><call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>DEC_UQUAD</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>cb_idx</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>VMUL4S</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>vq</name></expr></argument>, <argument><expr><name>cb_idx</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>sf</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>-=</operator> <literal type="number">4</literal></expr>)</condition>;</do>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <operator>(</operator><name>AAC_SIGNE</name><operator>)</operator><name>g_len</name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfo</name><operator>+=</operator><literal type="number">128</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name>cfo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>off_len</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cb_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VLC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc_tab</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_idx</name> <operator>=</operator> <name><name>cb_vector_idx</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>DEC_SPAIR</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>cb_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>VMUL2</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>vq</name></expr></argument>, <argument><expr><name>cb_idx</name></expr></argument>, <argument><expr><name>sf</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>)</condition>;</do>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <operator>(</operator><name>AAC_SIGNE</name><operator>)</operator><name>g_len</name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfo</name><operator>+=</operator><literal type="number">128</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name>cfo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>off_len</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nnz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cb_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VLC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc_tab</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cb_idx</name> <operator>=</operator> <name><name>cb_vector_idx</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name>cb_idx</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <ternary><condition><expr><name>nnz</name></expr> ?</condition><then> <expr><call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>cb_idx</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>DEC_UPAIR</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>cb_idx</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>VMUL2S</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>vq</name></expr></argument>, <argument><expr><name>cb_idx</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>sf</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>)</condition>;</do>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <operator>(</operator><name>AAC_SIGNE</name><operator>)</operator><name>g_len</name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfo</name><operator>+=</operator><literal type="number">128</literal></expr></incr>)</control> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>icf</name> <init>= <expr><name>cfo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name>cfo</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>icf</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>cf</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>off_len</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nzt</name></decl>, <decl><type ref="prev"/><name>nnz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cb_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VLC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>vlc_tab</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>icf</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>icf</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cb_idx</name> <operator>=</operator> <name><name>cb_vector_idx</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name>cb_idx</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nzt</name> <operator>=</operator> <name>cb_idx</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal><operator>-</operator><name>nnz</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nzt</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>j</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UPDATE_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>GET_CACHE</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">31</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><operator>~</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error in spectral data, ESC overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>b</name><operator>)</operator> <operator>+</operator> <call><name>SHOW_UBITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LAST_SKIP_BITS</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>icf</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>icf</name><operator>++</operator> <operator>=</operator> <name><name>ff_cbrt_tab</name><index>[<expr><name>n</name></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>bits</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>cb_idx</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>icf</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>unsigned</name></type> <name>v</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name>vq</name><operator>)</operator><index>[<expr><name>cb_idx</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>icf</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">1U</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator> <operator>|</operator> <name>v</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>bits</name> <operator>&lt;&lt;=</operator> <operator>!</operator><operator>!</operator><name>v</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cb_idx</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>)</condition>;</do>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name><argument_list>(<argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>cfo</name></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>CLOSE_READER</name><argument_list>(<argument><expr><name>re</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>coef</name> <operator>+=</operator> <name>g_len</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pulse_present</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pulse</name><operator>-&gt;</operator><name>num_pulse</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>co</name> <init>= <expr><name><name>coef_base</name><index>[ <expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>offsets</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>NOISE_BT</name> <operator>&amp;&amp;</operator> <name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>ico</name> <init>= <expr><operator>-</operator><name><name>pulse</name><operator>-&gt;</operator><name>amp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ico</name> <operator>=</operator> <name>co</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>co</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>ico</name></expr> </then><else>: <expr><name>ico</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coef_base</name><index>[ <expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>=</operator> <name>ico</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>co</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>co</name> <operator>/=</operator> <name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ico</name> <operator>=</operator> <name>co</name> <operator>/</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>co</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>ico</name></expr> </then><else>: <expr><name>ico</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coef_base</name><index>[ <expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>=</operator> <call><name>cbrtf</name><argument_list>(<argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name>ico</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <name>ico</name> <operator>*</operator> <name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>coef</name> <operator>=</operator> <name>coef_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>g_len</name> <init>= <expr><name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>cbt_m1</name> <init>= <expr><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cfo</name> <init>= <expr><name>coef</name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_len</name> <init>= <expr><name><name>offsets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cbt_m1</name> <operator>&lt;</operator> <name>NOISE_BT</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>g_len</name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr><operator>,</operator> <expr><name>cfo</name><operator>+=</operator><literal type="number">128</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>vector_pow43</name></name><argument_list>(<argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>subband_scale</name></name><argument_list>(<argument><expr><name>cfo</name></expr></argument>, <argument><expr><name>cfo</name></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><name>off_len</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>coef</name> <operator>+=</operator> <name>g_len</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_prediction</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sfb</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_initialized</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reset_all_predictors</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>predictor_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>sfb</name> <operator>&lt;</operator> <name><name>ff_aac_pred_sfb_max</name><index>[<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sampling_index</name></name></expr>]</index></name></expr>;</condition>

<incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb</name></expr>]</index></name></expr>;</init>

<condition><expr><name>k</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name><index>[<expr><name>sfb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition>

<incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>predict</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>predictor_state</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>&amp;&amp;</operator>

<name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name><index>[<expr><name>sfb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_reset_group</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_predictor_group</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>predictor_state</name></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_reset_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_all_predictors</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>predictor_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_gain_control</name><parameter_list>(<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type> <name>sce</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type> <name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>gain_mode</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, 

<expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mode</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bd</name></decl>, <decl><type ref="prev"/><name>wd</name></decl>, <decl><type ref="prev"/><name>ad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_band</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bd</name> <operator>&lt;</operator> <name>max_band</name></expr>;</condition> <incr><expr><name>bd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>wd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>wd</name> <operator>&lt;</operator> <name><name>gain_mode</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>wd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>adjust_num</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ad</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ad</name> <operator>&lt;</operator> <name>adjust_num</name></expr>;</condition> <incr><expr><name>ad</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>wd</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gain_mode</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>

?</condition><then> <expr><literal type="number">4</literal></expr>

</then><else>: <expr><name><name>gain_mode</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_ics</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>common_window</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Pulse</name></type> <name>pulse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TemporalNoiseShaping</name> <modifier>*</modifier></type><name>tns</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>global_gain</name></decl>, <decl><type ref="prev"/><name>eld_syntax</name></decl>, <decl><type ref="prev"/><name>er_syntax</name></decl>, <decl><type ref="prev"/><name>pulse_present</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>eld_syntax</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_ELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>er_syntax</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_LC</name> <operator>||</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_LTP</name> <operator>||</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_LD</name> <operator>||</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_ELD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pulse</name><operator>.</operator><name>num_pulse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>global_gain</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>common_window</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>scale_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_ics_info</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>ics</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_band_types</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type_run_end</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ics</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_scalefactors</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>global_gain</name></expr></argument>, <argument><expr><name>ics</name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type_run_end</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pulse_present</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scale_flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eld_syntax</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pulse_present</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Pulse tool not allowed in eight short sequence.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_pulses</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pulse</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Pulse data corrupt or invalid.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tns</name><operator>-&gt;</operator><name>present</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>er_syntax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_tns</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>tns</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eld_syntax</name> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_gain_control</name><argument_list>(<argument><expr><name>sce</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>warned_gain_control</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Gain control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>warned_gain_control</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tns</name><operator>-&gt;</operator><name>present</name></name> <operator>&amp;&amp;</operator> <name>er_syntax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_tns</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>tns</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_spectrum_and_dequant</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf</name></name></expr></argument>, <argument><expr><name>pulse_present</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pulse</name></expr></argument>, <argument><expr><name>ics</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_MAIN</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>common_window</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_prediction</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><name><name>tns</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_mid_side_stereo</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>ch0</name> <init>= <expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>ch1</name> <init>= <expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>group</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <name>NOISE_BT</name> <operator>&amp;&amp;</operator>

<name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>butterflies_fixed</name></name><argument_list>(<argument><expr><name>ch0</name> <operator>+</operator> <name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ch1</name> <operator>+</operator> <name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>offsets</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>butterflies_float</name></name><argument_list>(<argument><expr><name>ch0</name> <operator>+</operator> <name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ch1</name> <operator>+</operator> <name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>offsets</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch0</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ch1</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_intensity_stereo</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>,

<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms_present</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce1</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>coef0</name> <init>= <expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>coef1</name> <init>= <expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>group</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>scale</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT</name> <operator>||</operator>

<name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bt_run_end</name> <init>= <expr><name><name>sce1</name><operator>-&gt;</operator><name>band_type_run_end</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bt_run_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>sce1</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>-</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ms_present</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>*=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name><name>sce1</name><operator>-&gt;</operator><name>sf</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>subband_scale</name></name><argument_list>(<argument><expr><name>coef1</name> <operator>+</operator> <name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>coef0</name> <operator>+</operator> <name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>scale</name></expr></argument>,

<argument><expr><literal type="number">23</literal></expr></argument>,

<argument><expr><name><name>offsets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> ,<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name><argument_list>(<argument><expr><name>coef1</name> <operator>+</operator> <name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>coef0</name> <operator>+</operator> <name>group</name> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>scale</name></expr></argument>,

<argument><expr><name><name>offsets</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bt_run_end</name> <init>= <expr><name><name>sce1</name><operator>-&gt;</operator><name>band_type_run_end</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>+=</operator> <name>bt_run_end</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>bt_run_end</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>coef0</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>coef1</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>g</name></expr>]</index></name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cpe</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>common_window</name></decl>, <decl><type ref="prev"/><name>ms_present</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>eld_syntax</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_ER_AAC_ELD</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>common_window</name> <operator>=</operator> <name>eld_syntax</name> <operator>||</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>common_window</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>decode_ics_info</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ics</name> <operator>=</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>!=</operator> <name>AOT_AAC_MAIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_ltp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>ltp</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ms_present</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ms_present</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ms_present = 3 is reserved.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ms_present</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_mid_side_stereo</name><argument_list>(<argument><expr><name>cpe</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ms_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_ics</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>common_window</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_ics</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>common_window</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>common_window</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ms_present</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_mid_side_stereo</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_MAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apply_prediction</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_prediction</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>apply_intensity_stereo</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>, <argument><expr><name>ms_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>cce_scale</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.09050773266525765921</literal></expr>, 

<expr><literal type="number">1.18920711500272106672</literal></expr>, 

<expr><name>M_SQRT2</name></expr>,

<expr><literal type="number">2</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cce</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>che</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_gain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>sfb</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name> <init>= <expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelCoupling</name> <modifier>*</modifier></type><name>coup</name> <init>= <expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>coup</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>coupling_point</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>num_coupled</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name><name>coup</name><operator>-&gt;</operator><name>num_coupled</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>num_gain</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TYPE_CPE</name></expr> </then><else>: <expr><name>TYPE_SCE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>id_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coup</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>ch_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coup</name><operator>-&gt;</operator><name>ch_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_gain</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>ch_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>coupling_point</name></name> <operator>+=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>coup</name><operator>-&gt;</operator><name>coupling_point</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <name><name>cce_scale</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_ics</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>num_gain</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cge</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>gain_cache</name> <init>= <expr><call><name>FIXR10</name><argument_list>(<argument><expr><literal type="number">1.</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cge</name> <operator>=</operator> <ternary><condition><expr><name><name>coup</name><operator>-&gt;</operator><name>coupling_point</name></name> <operator>==</operator> <name>AFTER_IMDCT</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>gain</name> <operator>=</operator> <ternary><condition><expr><name>cge</name></expr> ?</condition><then> <expr><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_scalefactors</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">60</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>gain_cache</name> <operator>=</operator> <call><name>GET_GAIN</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>gain_cache</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1024</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coup</name><operator>-&gt;</operator><name>coupling_point</name></name> <operator>==</operator> <name>AFTER_IMDCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>gain_cache</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_window_groups</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <name>ZERO_BT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cge</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>vlc_scalefactors</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>gain</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gain_cache</name> <operator>=</operator> <call><name>GET_GAIN</name><argument_list>(<argument><expr><name>scale</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>gain_cache</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1024</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>coup</name><operator>-&gt;</operator><name>gain</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>gain_cache</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_drc_channel_exclusions</name><parameter_list>(<parameter><decl><type><name>DynamicRangeControl</name> <modifier>*</modifier></type><name>che_drc</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_excl_chan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>che_drc</name><operator>-&gt;</operator><name>exclude_mask</name><index>[<expr><name>num_excl_chan</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block> while <condition>(<expr><name>num_excl_chan</name> <operator>&lt;</operator> <name>MAX_CHANNELS</name> <operator>-</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<return>return <expr><name>num_excl_chan</name> <operator>/</operator> <literal type="number">7</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_dynamic_range</name><parameter_list>(<parameter><decl><type><name>DynamicRangeControl</name> <modifier>*</modifier></type><name>che_drc</name></decl></parameter>,

<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>drc_num_bands</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>che_drc</name><operator>-&gt;</operator><name>pce_instance_tag</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>decode_drc_channel_exclusions</name><argument_list>(<argument><expr><name>che_drc</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>che_drc</name><operator>-&gt;</operator><name>band_incr</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>che_drc</name><operator>-&gt;</operator><name>interpolation_scheme</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>drc_num_bands</name> <operator>+=</operator> <name><name>che_drc</name><operator>-&gt;</operator><name>band_incr</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>drc_num_bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>che_drc</name><operator>-&gt;</operator><name>band_top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>che_drc</name><operator>-&gt;</operator><name>prog_ref_level</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>drc_num_bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>che_drc</name><operator>-&gt;</operator><name>dyn_rng_sgn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>che_drc</name><operator>-&gt;</operator><name>dyn_rng_ctl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_fill</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">13</literal><operator>+</operator><literal type="number">7</literal><operator>*</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>len</name><operator>&gt;=</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>len</name><operator>-=</operator><literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"FILL:%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"libfaac %d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>skip_samples</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>unknown</name>:</label>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_extension_payload</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>,

<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>che</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>RawDataBlockType</name></name></type> <name>elem_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>crc_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>cnt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_STARTCODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"extension type: %d len:%d\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content> 

<case>case <expr><name>EXT_SBR_DATA_CRC</name></expr>:</case>

<expr_stmt><expr><name>crc_flag</name><operator>++</operator></expr>;</expr_stmt>

<case>case <expr><name>EXT_SBR_DATA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>che</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SBR was found before the first channel element.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>frame_length_short</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>warned_960_sbr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"SBR with 960 frame length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>warned_960_sbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>cnt</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SBR signaled to be not-present but was found in the bitstream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>cnt</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <name>OC_LOCKED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Implicit SBR was found with a first occurrence after the first frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>cnt</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>&lt;</operator> <name>OC_LOCKED</name> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_HE_V2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>layout_map</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>layout_map_tags</name></expr></argument>,

<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_HE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_decode_sbr_extension</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>sbr</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>crc_flag</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>elem_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXT_DYNAMIC_RANGE</name></expr>:</case>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>decode_dynamic_range</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>che_drc</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXT_FILL</name></expr>:</case>

<expr_stmt><expr><call><name>decode_fill</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>cnt</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXT_FILL_DATA</name></expr>:</case>

<case>case <expr><name>EXT_DATA_ELEMENT</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>cnt</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_tns</name><parameter_list>(<parameter><decl><type><name>INTFLOAT</name></type> <name><name>coef_param</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>TemporalNoiseShaping</name> <modifier>*</modifier></type><name>tns</name></decl></parameter>,

<parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mmm</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ics</name><operator>-&gt;</operator><name>tns_max_bands</name></name></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>filt</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bottom</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>order</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>inc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>lpc</name><index>[<expr><name>TNS_MAX_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name><name>tmp</name><index>[<expr><name>TNS_MAX_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINTFLOAT</name> <modifier>*</modifier></type><name>coef</name> <init>= <expr><name>coef_param</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mmm</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>filt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>filt</name> <operator>&lt;</operator> <name><name>tns</name><operator>-&gt;</operator><name>n_filt</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>filt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>top</name> <operator>-</operator> <name><name>tns</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>tns</name><operator>-&gt;</operator><name>order</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>compute_lpc_coefs</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>tns</name><operator>-&gt;</operator><name>coef</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>lpc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name><index>[<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>mmm</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name><index>[<expr><call><name>FFMIN</name><argument_list>( <argument><expr><name>top</name></expr></argument>, <argument><expr><name>mmm</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tns</name><operator>-&gt;</operator><name>direction</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>filt</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>w</name> <operator>*</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>decode</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr><operator>,</operator> <expr><name>start</name> <operator>+=</operator> <name>inc</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>start</name></expr>]</index></name> <operator>-=</operator> <call><name>AAC_MUL26</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name><operator>)</operator><name><name>coef</name><index>[<expr><name>start</name> <operator>-</operator> <name>i</name> <operator>*</operator> <name>inc</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lpc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr><operator>,</operator> <expr><name>start</name> <operator>+=</operator> <name>inc</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>coef</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>start</name></expr>]</index></name> <operator>+=</operator> <call><name>AAC_MUL26</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lpc</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>windowing_and_mdct_ltp</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>lwindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_long_1024</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_1024</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_128</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_128</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>lwindow_prev</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_long_1024</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_1024</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>swindow_prev</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_128</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_128</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>LONG_STOP_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>lwindow_prev</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>swindow_prev</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>LONG_START_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>lwindow</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct_ltp</name><operator>.</operator><name>mdct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_ltp</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_ltp</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>LongTermPrediction</name> <modifier>*</modifier></type><name>ltp</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sfb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>predTime</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>predFreq</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>num_samples</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_samples</name> <operator>=</operator> <name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>predTime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2048</literal> <operator>-</operator> <name><name>ltp</name><operator>-&gt;</operator><name>lag</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ltp</name><operator>-&gt;</operator><name>coef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>predTime</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2048</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>predTime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>windowing_and_mdct_ltp</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>predFreq</name></expr></argument>, <argument><expr><name>predTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>tns</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>apply_tns</name></name><argument_list>(<argument><expr><name>predFreq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sfb</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name>MAX_LTP_LONG_SFB</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sfb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ltp</name><operator>-&gt;</operator><name>used</name><index>[<expr><name>sfb</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>sfb</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>offsets</name><index>[<expr><name>sfb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>predFreq</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_ltp</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>saved</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>saved_ltp</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>lwindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_long_1024</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_1024</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_128</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_128</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved_ltp</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved_ltp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved_ltp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">960</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>swindow</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>saved_ltp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">512</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name><index>[<expr><literal type="number">1023</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>swindow</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved_ltp</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved_ltp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved_ltp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>saved_ltp</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">960</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>swindow</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>saved_ltp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">512</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name><index>[<expr><literal type="number">1023</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>swindow</name><index>[<expr><literal type="number">63</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>saved_ltp</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lwindow</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>saved_ltp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">512</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name><index>[<expr><literal type="number">1023</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lwindow</name><index>[<expr><literal type="number">511</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name><operator>+</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name><operator>+</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name><operator>+</operator><literal type="number">2048</literal></expr></argument>, <argument><expr><name>saved_ltp</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_and_windowing</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>saved</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_128</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_128</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>lwindow_prev</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_long_1024</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_1024</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>swindow_prev</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_128</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_128</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>temp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">128</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct_small</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_small</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">4LL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ONLY_LONG_SEQUENCE</name> <operator>||</operator> <name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>LONG_STOP_SEQUENCE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ONLY_LONG_SEQUENCE</name> <operator>||</operator> <name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lwindow_prev</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">448</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow_prev</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">448</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">448</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">448</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name> <operator>+</operator> <literal type="number">448</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>swindow_prev</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">320</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_and_windowing_960</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>saved</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_120</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_120</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>lwindow_prev</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_long_960</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_960</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier></type><name>swindow_prev</name> <init>= <expr><ternary><condition><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_120</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_120</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>temp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct120</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>mdct120</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">120</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct960</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>mdct960</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ONLY_LONG_SEQUENCE</name> <operator>||</operator> <name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>LONG_STOP_SEQUENCE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ONLY_LONG_SEQUENCE</name> <operator>||</operator> <name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>lwindow_prev</name></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">420</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">420</literal> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">420</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>swindow_prev</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">420</literal> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">420</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">420</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name> <operator>+</operator> <literal type="number">420</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">420</literal></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">420</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>swindow_prev</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name> <operator>+</operator> <literal type="number">540</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">420</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">180</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">300</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">420</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LONG_START_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">480</literal></expr></argument>, <argument><expr><literal type="number">420</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">420</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">120</literal> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><literal type="number">60</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">480</literal></expr></argument>, <argument><expr><literal type="number">480</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_and_windowing_ld</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>saved</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_ld</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">192</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_128</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>out</name> <operator>+</operator> <literal type="number">320</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">192</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sine_512</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imdct_and_windowing_eld</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>saved</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>buf_mdct</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>frame_length_short</name></name></expr> ?</condition><then> <expr><literal type="number">480</literal></expr> </then><else>: <expr><literal type="number">512</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n2</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n4</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name> <modifier>*</modifier><specifier>const</specifier></type> <name>window</name> <init>= <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">480</literal></expr> ?</condition><then> <expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_eld_window_480</name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_eld_window_512</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <operator>-</operator><name><name>in</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>in</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>-</operator><name><name>in</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>in</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">480</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct480</name><operator>-&gt;</operator><name>imdct_half</name></name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>mdct480</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_ld</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n4</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <name>n4</name></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL31</name><argument_list>( <argument><expr><name><name>buf</name><index>[ <expr><name>n2</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>AAC_MUL31</name><argument_list>( <argument><expr><name><name>saved</name><index>[ <expr><name>i</name> <operator>+</operator> <name>n2</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>AAC_MUL31</name><argument_list>(<argument><expr><operator>-</operator><name><name>saved</name><index>[<expr><name>n</name> <operator>+</operator> <name>n2</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>AAC_MUL31</name><argument_list>(<argument><expr><operator>-</operator><name><name>saved</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>n</name> <operator>+</operator> <name>n2</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n2</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n4</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL31</name><argument_list>( <argument><expr><name><name>buf</name><index>[ <expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <name>n2</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>AAC_MUL31</name><argument_list>(<argument><expr><operator>-</operator><name><name>saved</name><index>[ <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <name>n2</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>AAC_MUL31</name><argument_list>(<argument><expr><operator>-</operator><name><name>saved</name><index>[ <expr><name>n</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <name>n2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>AAC_MUL31</name><argument_list>( <argument><expr><name><name>saved</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>n</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <name>n2</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n4</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>n2</name> <operator>+</operator> <name>n4</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AAC_MUL31</name><argument_list>( <argument><expr><name><name>buf</name><index>[ <expr><name>i</name> <operator>+</operator> <name>n2</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>AAC_MUL31</name><argument_list>(<argument><expr><operator>-</operator><name><name>saved</name><index>[<expr><name>n2</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>AAC_MUL31</name><argument_list>(<argument><expr><operator>-</operator><name><name>saved</name><index>[<expr><name>n</name> <operator>+</operator> <name>n2</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>window</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>n</name> <operator>-</operator> <name>n4</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>saved</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_channel_coupling</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>RawDataBlockType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_id</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>CouplingPoint</name></name></type> <name>coupling_point</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>apply_coupling_method</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ELEM_ID</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cce</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>TYPE_CCE</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cce</name> <operator>&amp;&amp;</operator> <name><name>cce</name><operator>-&gt;</operator><name>coup</name><operator>.</operator><name>coupling_point</name></name> <operator>==</operator> <name>coupling_point</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelCoupling</name> <modifier>*</modifier></type><name>coup</name> <init>= <expr><operator>&amp;</operator><name><name>cce</name><operator>-&gt;</operator><name>coup</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name><name>coup</name><operator>-&gt;</operator><name>num_coupled</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coup</name><operator>-&gt;</operator><name>type</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>coup</name><operator>-&gt;</operator><name>id_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <name>elem_id</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>coup</name><operator>-&gt;</operator><name>ch_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>apply_coupling_method</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cce</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coup</name><operator>-&gt;</operator><name>ch_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>coup</name><operator>-&gt;</operator><name>ch_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_coupling_method</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cc</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cce</name></expr></argument>, <argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>coup</name><operator>-&gt;</operator><name>ch_select</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>spectral_to_sample</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>imdct_and_window</name>)<parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>;</function_decl>

<switch>switch <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>

<expr_stmt><expr><name>imdct_and_window</name> <operator>=</operator> <name>imdct_and_windowing_ld</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AOT_ER_AAC_ELD</name></expr>:</case>

<expr_stmt><expr><name>imdct_and_window</name> <operator>=</operator> <name>imdct_and_windowing_eld</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>frame_length_short</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>imdct_and_window</name> <operator>=</operator> <name>imdct_and_windowing_960</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>imdct_and_window</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>imdct_and_windowing</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>type</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>type</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ELEM_ID</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>che</name> <init>= <expr><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>che</name> <operator>&amp;&amp;</operator> <name><name>che</name><operator>-&gt;</operator><name>present</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>TYPE_CPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_channel_coupling</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>che</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BEFORE_TNS</name></expr></argument>, <argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>apply_dependent_coupling</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_LTP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>predictor_present</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>apply_ltp</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>apply_ltp</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>tns</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>apply_tns</name></name><argument_list>(<argument><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tns</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>tns</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>apply_tns</name></name><argument_list>(<argument><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tns</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>TYPE_CPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_channel_coupling</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>che</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>BETWEEN_TNS_AND_IMDCT</name></expr></argument>, <argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>apply_dependent_coupling</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>TYPE_CCE</name> <operator>||</operator> <name><name>che</name><operator>-&gt;</operator><name>coup</name><operator>.</operator><name>coupling_point</name></name> <operator>==</operator> <name>AFTER_IMDCT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>imdct_and_window</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_LTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>update_ltp</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>imdct_and_window</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>==</operator> <name>AOT_AAC_LTP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ac</name><operator>-&gt;</operator><name>update_ltp</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_sbr_apply</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>sbr</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ret</name></expr></argument>, <argument><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>TYPE_CCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_channel_coupling</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>che</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>AFTER_IMDCT</name></expr></argument>, <argument><expr><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>apply_independent_coupling</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>samples</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ret</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>av_clip64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ret</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>INT32_MIN</name></expr></argument>, <argument><expr><name>INT32_MAX</name><operator>-</operator><literal type="number">0x8000</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0x8000</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_CPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ret</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>av_clip64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>ret</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>INT32_MIN</name></expr></argument>, <argument><expr><name>INT32_MAX</name><operator>-</operator><literal type="number">0x8000</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">0x8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>che</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>che</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"ChannelElement %d.%d missing \n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_adts_frame_header</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACADTSHeaderInfo</name></type> <name>hdr_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name><operator>*</operator><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>layout_map_tags</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ff_adts_header_parse</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>warned_num_aac_frames</name></name> <operator>&amp;&amp;</operator> <name><name>hdr_info</name><operator>.</operator><name>num_aac_frames</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"More than one AAC RDB per ADTS frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>warned_num_aac_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>push_output_configuration</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hdr_info</name><operator>.</operator><name>chan_config</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>=</operator> <name><name>hdr_info</name><operator>.</operator><name>chan_config</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>set_default_channel_config</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><name>layout_map</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>layout_map_tags</name></expr></argument>,

<argument><expr><name><name>hdr_info</name><operator>.</operator><name>chan_config</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>layout_map_tags</name></expr></argument>,

<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name></expr></argument>,

<argument><expr><name>OC_TRIAL_FRAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>dmono_mode</name></name> <operator>&amp;&amp;</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>==</operator> <name>OC_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>layout_map_tags</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>TYPE_SCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>layout_map</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>AAC_CHANNEL_FRONT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layout_map</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>layout_map_tags</name></expr></argument>,

<argument><expr><name>OC_TRIAL_FRAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">7</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>hdr_info</name><operator>.</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sampling_index</name></name> <operator>=</operator> <name><name>hdr_info</name><operator>.</operator><name>sampling_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>=</operator> <name><name>hdr_info</name><operator>.</operator><name>object_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>frame_length_short</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>!=</operator> <name>OC_LOCKED</name> <operator>||</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>!=</operator> <name><name>hdr_info</name><operator>.</operator><name>chan_config</name></name> <operator>||</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name> <operator>!=</operator> <name><name>hdr_info</name><operator>.</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ps</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hdr_info</name><operator>.</operator><name>crc_absent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aac_decode_er_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MPEG4AudioConfig</name> <modifier>*</modifier><specifier>const</specifier></type> <name>m4ac</name> <init>= <expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>m4ac</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>che</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><ternary><condition><expr><name><name>m4ac</name><operator>-&gt;</operator><name>frame_length_short</name></name></expr> ?</condition><then> <expr><literal type="number">960</literal></expr> </then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chan_config</name> <init>= <expr><name><name>m4ac</name><operator>-&gt;</operator><name>chan_config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aot</name> <init>= <expr><name><name>m4ac</name><operator>-&gt;</operator><name>object_type</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>==</operator> <name>AOT_ER_AAC_LD</name> <operator>||</operator> <name>aot</name> <operator>==</operator> <name>AOT_ER_AAC_ELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>samples</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>frame_configure_elements</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>aot</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chan_config</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>chan_config</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>chan_config</name> <operator>&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>||</operator> <name>chan_config</name> <operator>&gt;=</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Unknown ER channel configuration %d"</literal></expr></argument>,

<argument><expr><name>chan_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tags_per_config</name><index>[<expr><name>chan_config</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>elem_type</name> <init>= <expr><name><name>aac_channel_layout_map</name><index>[<expr><name>chan_config</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>elem_id</name> <init>= <expr><name><name>aac_channel_layout_map</name><index>[<expr><name>chan_config</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>che</name><operator>=</operator><call><name>get_che</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>elem_type</name></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"channel element %d.%d is not allocated\n"</literal></expr></argument>,

<argument><expr><name>elem_type</name></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>che</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aot</name> <operator>!=</operator> <name>AOT_ER_AAC_ELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>elem_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TYPE_SCE</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>decode_ics</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_CPE</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>decode_cpe</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_LFE</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>decode_ics</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>spectral_to_sample</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no frame data found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aac_decode_frame_int</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>che</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>che_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>RawDataBlockType</name></name></type> <name>elem_type</name></decl>, <decl><type ref="prev"/><name>che_prev_type</name> <init>= <expr><name>TYPE_END</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>elem_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>multiplier</name></decl>, <decl><type ref="prev"/><name>audio_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pce_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_dmono</name></decl>, <decl><type ref="prev"/><name>sce_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>payload_alignment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>che_presence</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>MAX_ELEM_ID</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>parse_adts_frame_header</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error decoding AAC frame header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sampling_index</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid sampling rate index %d\n"</literal></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>frame_configure_elements</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>payload_alignment</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>tags_mapped</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>elem_type</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>TYPE_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>elem_id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_STARTCODE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Elem type:%x id:%x\n"</literal></expr></argument>, <argument><expr><name>elem_type</name></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&amp;&amp;</operator> <name>elem_type</name> <operator>!=</operator> <name>TYPE_PCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>elem_type</name> <operator>&lt;</operator> <name>TYPE_DSE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>che_presence</name><index>[<expr><name>elem_type</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name><name>che_presence</name><index>[<expr><name>elem_type</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><name>AV_LOG_ERROR</name></expr> </then><else>: <expr><name>AV_LOG_DEBUG</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"channel element %d.%d duplicate\n"</literal></expr></argument>,

<argument><expr><name>elem_type</name></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>che_presence</name><index>[<expr><name>elem_type</name></expr>]</index><index>[<expr><name>elem_id</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>che</name><operator>=</operator><call><name>get_che</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>elem_type</name></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"channel element %d.%d is not allocated\n"</literal></expr></argument>,

<argument><expr><name>elem_type</name></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <ternary><condition><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>frame_length_short</name></name></expr> ?</condition><then> <expr><literal type="number">960</literal></expr> </then><else>: <expr><literal type="number">1024</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>che</name><operator>-&gt;</operator><name>present</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>elem_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TYPE_SCE</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>decode_ics</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sce_count</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_CPE</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>decode_cpe</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_CCE</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>decode_cce</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_LFE</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>decode_ics</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>che</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_DSE</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>skip_data_stream_element</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_PCE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>layout_map</name><index>[<expr><name>MAX_ELEM_ID</name><operator>*</operator><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pushed</name> <init>= <expr><call><name>push_output_configuration</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pce_found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pushed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>decode_pce</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>m4ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>,

<argument><expr><name>payload_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pce_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Not evaluating a further program_config_element as this construct is dubious at best.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pop_output_configuration</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>output_configure</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>layout_map</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>OC_TRIAL_PCE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>chan_config</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pce_found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>TYPE_FIL</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>elem_id</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>elem_id</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>elem_id</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"TYPE_FIL: "</literal><name>overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>elem_id</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_extension_payload</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>elem_id</name></expr></argument>, <argument><expr><name>che_prev</name></expr></argument>, <argument><expr><name>che_prev_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>elem_id</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_BUG</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>elem_type</name> <operator>&lt;</operator> <name>TYPE_DSE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>che_prev</name> <operator>=</operator> <name>che</name></expr>;</expr_stmt>

<expr_stmt><expr><name>che_prev_type</name> <operator>=</operator> <name>elem_type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><name>overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>multiplier</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sbr</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>ext_sample_rate</name></name> <operator>&gt;</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>&lt;&lt;=</operator> <name>multiplier</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>spectral_to_sample</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>&amp;&amp;</operator> <name>audio_found</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>sample_rate</name></name> <operator>&lt;&lt;</operator> <name>multiplier</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name>OC_LOCKED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>multiplier</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>skip_samples_multiplier</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ac</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no frame data found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>ac</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name>is_dmono</name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>dmono_mode</name></name> <operator>&amp;&amp;</operator> <name>sce_count</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>channel_layout</name> <operator>==</operator> <operator>(</operator><name>AV_CH_FRONT_LEFT</name> <operator>|</operator> <name>AV_CH_FRONT_RIGHT</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_dmono</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>dmono_mode</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>AVFrame</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator><operator>(</operator><operator>(</operator><name>AVFrame</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>dmono_mode</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>AVFrame</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator><operator>(</operator><operator>(</operator><name>AVFrame</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>pop_output_configuration</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aac_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_consumed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_extradata_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>new_extradata</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>new_extradata_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>jp_dualmono_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>jp_dualmono</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>,

<argument><expr><name>AV_PKT_DATA_JP_DUALMONO</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>jp_dualmono_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_extradata</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name>OC_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>decode_audio_specific_config</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name><name>ac</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>m4ac</name></expr></argument>,

<argument><expr><name>new_extradata</name></expr></argument>,

<argument><expr><name>new_extradata_size</name> <operator>*</operator> <literal type="number">8LL</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>dmono_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>jp_dualmono</name> <operator>&amp;&amp;</operator> <name>jp_dualmono_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>dmono_mode</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>jp_dualmono</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>force_dmono_mode</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ac</name><operator>-&gt;</operator><name>dmono_mode</name></name> <operator>=</operator> <name><name>ac</name><operator>-&gt;</operator><name>force_dmono_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>INT_MAX</name> <operator>/</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name>buf_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>m4ac</name><operator>.</operator><name>object_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AOT_ER_AAC_LC</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LTP</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_LD</name></expr>:</case>

<case>case <expr><name>AOT_ER_AAC_ELD</name></expr>:</case>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>aac_decode_er_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>aac_decode_frame_int</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>got_frame_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_consumed</name> <operator>=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>buf_offset</name> <operator>=</operator> <name>buf_consumed</name></expr>;</init> <condition><expr><name>buf_offset</name> <operator>&lt;</operator> <name>buf_size</name></expr>;</condition> <incr><expr><name>buf_offset</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>buf_offset</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><ternary><condition><expr><name>buf_size</name> <operator>&gt;</operator> <name>buf_offset</name></expr> ?</condition><then> <expr><name>buf_consumed</name></expr> </then><else>: <expr><name>buf_size</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aac_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>ac</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ELEM_ID</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_aac_sbr_ctx_close</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>sbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>che</name><index>[<expr><name>type</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_small</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_ld</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct_ltp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><call><name>ff_mdct15_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct120</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct15_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct480</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct15_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>mdct960</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ac</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aacdec_init</name><parameter_list>(<parameter><decl><type><name>AACContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>imdct_and_windowing</name></name> <operator>=</operator> <name>imdct_and_windowing</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_ltp</name></name> <operator>=</operator> <name>apply_ltp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_tns</name></name> <operator>=</operator> <name>apply_tns</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>windowing_and_mdct_ltp</name></name> <operator>=</operator> <name>windowing_and_mdct_ltp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update_ltp</name></name> <operator>=</operator> <name>update_ltp</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>vector_pow43</name></name> <operator>=</operator> <name>vector_pow43</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>subband_scale</name></name> <operator>=</operator> <name>subband_scale</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<if_stmt><if>if<condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_aacdec_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AACDEC_FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_DECODING_PARAM | AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"dual_mono_mode"</literal></expr>, <expr><literal type="string">"Select the channel to decode for dual mono"</literal></expr>,

<expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACContext</name></expr></argument>, <argument><expr><name>force_dmono_mode</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><name>AACDEC_FLAGS</name></expr>, <expr><literal type="string">"dual_mono_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"autoselection"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AACDEC_FLAGS</name></expr>, <expr><literal type="string">"dual_mono_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"main"</literal></expr>, <expr><literal type="string">"Select Main/Left channel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AACDEC_FLAGS</name></expr>, <expr><literal type="string">"dual_mono_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"sub"</literal></expr> , <expr><literal type="string">"Select Sub/Right channel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AACDEC_FLAGS</name></expr>, <expr><literal type="string">"dual_mono_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"both"</literal></expr>, <expr><literal type="string">"Select both channels"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name><operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AACDEC_FLAGS</name></expr>, <expr><literal type="string">"dual_mono_mode"</literal></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>aac_decoder_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"AAC decoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt></block_content></block></function>

</unit>
