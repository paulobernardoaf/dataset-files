<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\lcldec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lcl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB_DECODER</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>LclDecContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>imgtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compression</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>decomp_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>decomp_buf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>z_stream</name></type> <name>zstream</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>LclDecContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>mszh_decomp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>srcptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srclen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>destptr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>destsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>destptr_bak</name> <init>= <expr><name>destptr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>destptr_end</name> <init>= <expr><name>destptr</name> <operator>+</operator> <name>destsize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>srcptr_end</name> <init>= <expr><name>srcptr</name> <operator>+</operator> <name>srclen</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mask</name> <init>= <expr><operator>*</operator><name>srcptr</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>maskbit</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>srcptr</name> <operator>&lt;</operator> <name>srcptr_end</name> <operator>&amp;&amp;</operator> <name>destptr</name> <operator>&lt;</operator> <name>destptr_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>maskbit</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>destptr</name></expr></argument>, <argument><expr><name>srcptr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>destptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>srcptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ofs</name> <init>= <expr><call><name>bytestream_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>srcptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cnt</name> <init>= <expr><operator>(</operator><name>ofs</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ofs</name> <operator>&amp;=</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>destptr</name> <operator>-</operator> <name>destptr_bak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>destptr_end</name> <operator>-</operator> <name>destptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ofs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_memcpy_backptr</name><argument_list>(<argument><expr><name>destptr</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>destptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>destptr</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>maskbit</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>maskbit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>*</operator><name>srcptr</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>mask</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>destptr_end</name> <operator>-</operator> <name>destptr</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>||</operator> <name>srcptr_end</name> <operator>-</operator> <name>srcptr</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>destptr</name></expr></argument>, <argument><expr><name>srcptr</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>destptr</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>srcptr</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>*</operator><name>srcptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>maskbit</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>destptr</name> <operator>-</operator> <name>destptr_bak</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB_DECODER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>zlib_decomp</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expected</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LclDecContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zret</name> <init>= <expr><call><name>inflateReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>zret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Inflate reset error: %d\n"</literal></expr></argument>, <argument><expr><name>zret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>src_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zret</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zret</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>zret</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Inflate error: %d\n"</literal></expr></argument>, <argument><expr><name>zret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>expected</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>total_out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoded size differs (%d != %lu)\n"</literal></expr></argument>,

<argument><expr><name>expected</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>total_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>total_out</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>tframe</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LclDecContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pixel_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>encoded</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>u_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mszh_dlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>yq</name></decl>, <decl><type ref="prev"/><name>y1q</name></decl>, <decl><type ref="prev"/><name>uq</name></decl>, <decl><type ref="prev"/><name>vq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uqvq</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mthread_inlen</name></decl>, <decl><type ref="prev"/><name>mthread_outlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><name>buf_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tframe</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outptr</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MSZH</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>COMP_MSZH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>imgtype</name></name> <operator>==</operator> <name>IMGTYPE_RGB24</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>height</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>imgtype</name></name> <operator>==</operator> <name>IMGTYPE_YUV111</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_MULTITHREAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mthread_inlen</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>len</name> <operator>-</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>mthread_inlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"len %d is too small\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mthread_outlen</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mthread_outlen</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mthread_outlen</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mszh_dlen</name> <operator>=</operator> <call><name>mszh_decomp</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>mthread_inlen</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mthread_outlen</name> <operator>!=</operator> <name>mszh_dlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mthread1 decoded size differs (%d != %d)\n"</literal></expr></argument>,

<argument><expr><name>mthread_outlen</name></expr></argument>, <argument><expr><name>mszh_dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mszh_dlen</name> <operator>=</operator> <call><name>mszh_decomp</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>mthread_inlen</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <name>mthread_inlen</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name> <operator>+</operator> <name>mthread_outlen</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>-</operator> <name>mthread_outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mthread_outlen</name> <operator>!=</operator> <name>mszh_dlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Mthread2 decoded size differs (%d != %d)\n"</literal></expr></argument>,

<argument><expr><name>mthread_outlen</name></expr></argument>, <argument><expr><name>mszh_dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encoded</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mszh_dlen</name> <operator>=</operator> <call><name>mszh_decomp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>!=</operator> <name>mszh_dlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoded size differs (%d != %d)\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr></argument>, <argument><expr><name>mszh_dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>encoded</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>mszh_dlen</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>COMP_MSZH_NOCOMP</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bppx2</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>imgtype</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IMGTYPE_YUV111</name></expr>:</case>

<case>case <expr><name>IMGTYPE_RGB24</name></expr>:</case>

<expr_stmt><expr><name>bppx2</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV422</name></expr>:</case>

<case>case <expr><name>IMGTYPE_YUV211</name></expr>:</case>

<expr_stmt><expr><name>bppx2</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV411</name></expr>:</case>

<case>case <expr><name>IMGTYPE_YUV420</name></expr>:</case>

<expr_stmt><expr><name>bppx2</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>bppx2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <name>bppx2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"BUG! Unknown MSZH compression in frame decoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB_DECODER</name></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_ZLIB</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>==</operator> <name>COMP_ZLIB_NORMAL</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>imgtype</name></name> <operator>==</operator> <name>IMGTYPE_RGB24</name> <operator>&amp;&amp;</operator>

<name>len</name> <operator>==</operator> <name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_PNGFILTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoded</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_MULTITHREAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mthread_inlen</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mthread_inlen</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mthread_inlen</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mthread_outlen</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mthread_outlen</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>mthread_outlen</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zlib_decomp</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>mthread_inlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mthread_outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zlib_decomp</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>mthread_inlen</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">8</literal> <operator>-</operator> <name>mthread_inlen</name></expr></argument>,

<argument><expr><name>mthread_outlen</name></expr></argument>, <argument><expr><name>mthread_outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>zlib_decomp</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>encoded</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"BUG! Unknown codec in frame decoder compression switch.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ZLIB</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_PNGFILTER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>imgtype</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IMGTYPE_YUV111</name></expr>:</case>

<case>case <expr><name>IMGTYPE_RGB24</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yq</name> <operator>=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>uqvq</name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>encoded</name><operator>+</operator><name>pixel_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>uqvq</name> <operator>-=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name>encoded</name><operator>+</operator><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL16</name><argument_list>(<argument><expr><name>encoded</name><operator>+</operator><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>uqvq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV422</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name>width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yq</name> <operator>=</operator> <name>uq</name> <operator>=</operator> <name>vq</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>uq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>uq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>vq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>vq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV411</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yq</name> <operator>=</operator> <name>uq</name> <operator>=</operator> <name>vq</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>uq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>vq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV211</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name>width</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yq</name> <operator>=</operator> <name>uq</name> <operator>=</operator> <name>vq</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>uq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>vq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV420</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yq</name> <operator>=</operator> <name>y1q</name> <operator>=</operator> <name>uq</name> <operator>=</operator> <name>vq</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>y1q</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>y1q</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>uq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>vq</name> <operator>-=</operator> <name><name>encoded</name><index>[<expr><name>pixel_ptr</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pixel_ptr</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"BUG! Unknown imagetype in pngfilter switch.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y_out</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_out</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_out</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>imgtype</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IMGTYPE_YUV111</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>y_out</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u_out</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_out</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV422</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>col</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>y_out</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoded</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u_out</name><index>[ <expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u_out</name><index>[<expr><operator>(</operator><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_out</name><index>[ <expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_out</name><index>[<expr><operator>(</operator><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_RGB24</name></expr>:</case>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&lt;</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>width</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>height</name></expr> ?</condition><then> <expr><literal type="number">3</literal> <operator>*</operator> <name>width</name></expr> </then><else>: <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>width</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>row</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pixel_ptr</name> <operator>=</operator> <name>row</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>outptr</name> <operator>+</operator> <name>pixel_ptr</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoded</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV411</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>col</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>y_out</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoded</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u_out</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_out</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV211</name></expr>:</case>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>col</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>y_out</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoded</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u_out</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_out</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV420</name></expr>:</case>

<expr_stmt><expr><name>u_out</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_out</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>row</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>width</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>col</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>y_out</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoded</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>y_out</name> <operator>+</operator> <name>col</name> <operator>-</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoded</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>u_out</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>v_out</name><index>[<expr><name>col</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>encoded</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>u_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_out</name> <operator>-=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"BUG! Unknown imagetype in image decoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LclDecContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>basesize</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_basesize</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator>

<call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_decomp_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>subsample_h</name></decl>, <decl><type ref="prev"/><name>subsample_v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata size too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_MSZH</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <name>CODEC_MSZH</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ZLIB</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>!=</operator> <name>CODEC_ZLIB</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec id and codec type mismatch. This should not happen.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>imgtype</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>IMGTYPE_YUV111</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>=</operator> <name>basesize</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_decomp_size</name> <operator>=</operator> <name>max_basesize</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Image type is YUV 1:1:1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV422</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>=</operator> <name>basesize</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_decomp_size</name> <operator>=</operator> <name>max_basesize</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Image type is YUV 4:2:2.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Unsupported dimensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>IMGTYPE_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>=</operator> <name>basesize</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_decomp_size</name> <operator>=</operator> <name>max_basesize</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_BGR24</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Image type is RGB 24.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV411</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>=</operator> <name>basesize</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_decomp_size</name> <operator>=</operator> <name>max_basesize</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV411P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Image type is YUV 4:1:1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV211</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>=</operator> <name>basesize</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_decomp_size</name> <operator>=</operator> <name>max_basesize</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Image type is YUV 2:1:1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>IMGTYPE_YUV420</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>=</operator> <name>basesize</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_decomp_size</name> <operator>=</operator> <name>max_basesize</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Image type is YUV 4:2:0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported image format %d.\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>imgtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsample_h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subsample_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>subsample_h</name><operator>)</operator> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>subsample_v</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Unsupported dimensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_MSZH</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>COMP_MSZH</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Compression enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COMP_MSZH_NOCOMP</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported compression format for MSZH (%d).\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB_DECODER</name></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_ZLIB</name></expr>:</case>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>COMP_ZLIB_HISPEED</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"High speed compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COMP_ZLIB_HICOMP</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"High compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>COMP_ZLIB_NORMAL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Normal compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>&lt;</operator> <name>Z_NO_COMPRESSION</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>compression</name></name> <operator>&gt;</operator> <name>Z_BEST_COMPRESSION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported compression level for ZLIB: (%d).\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Compression level for ZLIB: (%d).\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"BUG! Unknown codec in compression switch.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>decomp_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>max_decomp_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate decompression buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_MULTITHREAD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Multithread encoder flag set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_NULLFRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Nullframe insertion flag set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ZLIB</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_PNGFILTER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"PNG filter flag set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAGMASK_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown flag set (%d).\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB_DECODER</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ZLIB</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>zret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zstream</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zret</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>zret</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Inflate init error: %d\n"</literal></expr></argument>, <argument><expr><name>zret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LclDecContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>decomp_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB_DECODER</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_ZLIB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MSZH_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_mszh_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mszh"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"LCL (LossLess Codec Library) MSZH"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MSZH</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LclDecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>init_thread_copy</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_ZLIB_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_zlib_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"zlib"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"LCL (LossLess Codec Library) ZLIB"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ZLIB</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LclDecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>init_thread_copy</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
