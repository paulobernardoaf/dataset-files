<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dcaenc.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FLOAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_FIXED_32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcaadpcm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcamath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca_core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcaenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_MAX_FRAME_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_HEADER_SIZE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_LFE_SAMPLES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCAENC_SUBBANDS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBFRAMES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSUBFRAMES</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBBAND_SAMPLES</name></cpp:macro> <cpp:value>(SUBFRAMES * SUBSUBFRAMES * 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUBANDS</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COS_T</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c-&gt;cos_table[(x) &amp; 2047])</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>CompressionOptions</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>adpcm_mode</name></decl>;</decl_stmt>

}</block></struct></type> <name>CompressionOptions</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DCAEncContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DCAADPCMEncContext</name></type> <name>adpcm_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CompressionOptions</name></type> <name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fullband_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lfe_channel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samplerate_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitrate_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>band_interpolation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>band_spectrum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lfe_scale_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>softfloat</name></type> <name>lfe_quant</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>lfe_peak_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>channel_order_tab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>prediction_mode</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>adpcm_history</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index><index>[<expr><name>DCA_ADPCM_COEFFS</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>history</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>subband</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>quantized</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index><index>[<expr><name>SUBBAND_SAMPLES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>peak_cb</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>diff_peak_cb</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>downsampled_lfe</name><index>[<expr><name>DCA_LFE_SAMPLES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>masking_curve_cb</name><index>[<expr><name>SUBSUBFRAMES</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>bit_allocation_sel</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>abits</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>scale_factor</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>softfloat</name></type> <name><name>quant</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>quant_index_sel</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>eff_masking_curve_cb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>band_masking_cb</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>worst_quantization_noise</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>worst_noise_ever</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consumed_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>consumed_adpcm_bits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>cos_table</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>band_interpolation_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>band_spectrum_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>auf</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><name>AUBANDS</name></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>cb_to_add</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>cb_to_level</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lfe_fir_64i</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DCAEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>double</name></type> <name>hom</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f1</name> <init>= <expr><name>f</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>-</operator><literal type="number">3.64</literal> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.8</literal></expr></argument>)</argument_list></call>

<operator>+</operator> <literal type="number">6.8</literal> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.6</literal> <operator>*</operator> <operator>(</operator><name>f1</name> <operator>-</operator> <literal type="number">3.4</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f1</name> <operator>-</operator> <literal type="number">3.4</literal><operator>)</operator></expr></argument>)</argument_list></call>

<operator>-</operator> <literal type="number">6.0</literal> <operator>*</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.15</literal> <operator>*</operator> <operator>(</operator><name>f1</name> <operator>-</operator> <literal type="number">8.7</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f1</name> <operator>-</operator> <literal type="number">8.7</literal><operator>)</operator></expr></argument>)</argument_list></call>

<operator>-</operator> <literal type="number">0.0006</literal> <operator>*</operator> <operator>(</operator><name>f1</name> <operator>*</operator> <name>f1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f1</name> <operator>*</operator> <name>f1</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>gammafilter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>f</name> <operator>-</operator> <name><name>fc</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name><name>erb</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>h</name> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name>h</name> <operator>*</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">20</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subband_bufer_alloc</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>band</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>bufer</name> <init>= <expr><call><name>av_calloc</name><argument_list>(<argument><expr><name>MAX_CHANNELS</name> <operator>*</operator> <name>DCAENC_SUBBANDS</name> <operator>*</operator>

<operator>(</operator><name>SUBBAND_SAMPLES</name> <operator>+</operator> <name>DCA_ADPCM_COEFFS</name><operator>)</operator></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bufer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>DCAENC_SUBBANDS</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <name>bufer</name> <operator>+</operator>

<name>ch</name> <operator>*</operator> <name>DCAENC_SUBBANDS</name> <operator>*</operator> <operator>(</operator><name>SUBBAND_SAMPLES</name> <operator>+</operator> <name>DCA_ADPCM_COEFFS</name><operator>)</operator> <operator>+</operator>

<name>band</name> <operator>*</operator> <operator>(</operator><name>SUBBAND_SAMPLES</name> <operator>+</operator> <name>DCA_ADPCM_COEFFS</name><operator>)</operator> <operator>+</operator> <name>DCA_ADPCM_COEFFS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subband_bufer_free</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>bufer</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>DCA_ADPCM_COEFFS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>bufer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>min_frame_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>subband_bufer_alloc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_interpolation</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>band_interpolation_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_spectrum</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>band_spectrum_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>worst_quantization_noise</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2047</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>worst_noise_ever</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2047</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>consumed_adpcm_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_dcaadpcm_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>adpcm_ctx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No channel layout specified. The "</literal>

<literal type="string">"encoder will guess the layout, but it "</literal>

<literal type="string">"might be incorrect.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>layout</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CH_LAYOUT_MONO</name></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_STEREO</name></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_2_2</name></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_5POINT0</name></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CH_LAYOUT_5POINT1</name></expr>:</case> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported channel layout!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>channel_order_tab</name></name> <operator>=</operator> <name><name>channel_reorder_lfe</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>channel_order_tab</name></name> <operator>=</operator> <name><name>channel_reorder_nolfe</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>DCA_CODE_BOOKS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>quant_index_sel</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_quant_index_group_size</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bit_allocation_sel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>DCAENC_SUBBANDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>DCA_ADPCM_COEFFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sample_rates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>samplerate_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;</operator> <literal type="number">32000</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">3840000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bit rate %"</literal><name>PRId64</name><literal type="string">" not supported."</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ff_dca_bit_rates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bitrate_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">512</literal> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_frame_bits</name> <operator>=</operator> <literal type="number">132</literal> <operator>+</operator> <operator>(</operator><literal type="number">493</literal> <operator>+</operator> <literal type="number">28</literal> <operator>*</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name> <operator>*</operator> <literal type="number">72</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>&lt;</operator> <name>min_frame_bits</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>&gt;</operator> <operator>(</operator><name>DCA_MAX_FRAME_SIZE</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>frame_bits</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <name>SUBBAND_SAMPLES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">0x7fffffff</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>i</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><literal type="number">1024</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><literal type="number">1024</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><literal type="number">2048</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>+</operator><name><name>c</name><operator>-&gt;</operator><name>cos_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cb_to_level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">0x7fffffff</literal> <operator>*</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.005</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_fir_64i</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">0xffffff800000ULL</literal> <operator>*</operator> <name><name>ff_dca_lfe_fir_64</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_fir_64i</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <operator>(</operator><literal type="number">7</literal><operator>-</operator><name>j</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">63</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">0xffffff800000ULL</literal> <operator>*</operator> <name><name>ff_dca_lfe_fir_64</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_interpolation_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">0x1000000000ULL</literal> <operator>*</operator> <name><name>ff_dca_fir_32bands_perfect</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_interpolation_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">0x1000000000ULL</literal> <operator>*</operator> <name><name>ff_dca_fir_32bands_nonperfect</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>AUBANDS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>freq</name> <init>= <expr><name><name>sample_rates</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">512</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>auf</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">10</literal> <operator>*</operator> <operator>(</operator><call><name>hom</name><argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>gammafilter</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>add</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <call><name>ff_exp10</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.01</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cb_to_add</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>accum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>reconst</name> <init>= <expr><name><name>ff_dca_fir_32bands_perfect</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <name>reconst</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0.5</literal> <operator>-</operator> <literal type="number">256</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_spectrum_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">200</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>accum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>accum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>reconst</name> <init>= <expr><name><name>ff_dca_fir_32bands_nonperfect</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <name>reconst</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">0.5</literal> <operator>-</operator> <literal type="number">256</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_spectrum_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><literal type="number">200</literal> <operator>*</operator> <call><name>log10</name><argument_list>(<argument><expr><name>accum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subband_bufer_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dcaadpcm_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>adpcm_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subband_transform</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>subs</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>hist</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hist_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chi</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>channel_order_tab</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>subs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>subs</name> <operator>&lt;</operator> <name>SUBBAND_SAMPLES</name></expr>;</condition> <incr><expr><name>subs</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>accum</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name>hist_start</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">63</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>accum</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <call><name>mul32</name><argument_list>(<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_interpolation</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hist_start</name></expr>;</condition> <incr><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">63</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>accum</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <call><name>mul32</name><argument_list>(<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_interpolation</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>accum</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>accum</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>accum</name><index>[<expr><literal type="number">31</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>accum</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>accum</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>accum</name><index>[<expr><literal type="number">95</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>resp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>band</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>resp</name> <operator>+=</operator> <call><name>mul32</name><argument_list>(<argument><expr><name><name>accum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>COS_T</name><argument_list>(<argument><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>subs</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>band</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>resp</name></expr> </then><else>: <expr><name>resp</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hist</name><index>[<expr><name>i</name> <operator>+</operator> <name>hist_start</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><operator>(</operator><name>subs</name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>chi</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>hist_start</name> <operator>=</operator> <operator>(</operator><name>hist_start</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">511</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lfe_downsample</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>lfech</name> <init>= <expr><name><name>lfe_index</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>lfes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>hist</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>accum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hist_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>history</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lfes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>lfes</name> <operator>&lt;</operator> <name>DCA_LFE_SAMPLES</name></expr>;</condition> <incr><expr><name>lfes</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>accum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>hist_start</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <call><name>mul32</name><argument_list>(<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_fir_64i</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hist_start</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>accum</name> <operator>+=</operator> <call><name>mul32</name><argument_list>(<argument><expr><name><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_fir_64i</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downsampled_lfe</name><index>[<expr><name>lfes</name></expr>]</index></name> <operator>=</operator> <name>accum</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hist</name><index>[<expr><name>i</name> <operator>+</operator> <name>hist_start</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><operator>(</operator><name>lfes</name> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>lfech</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>hist_start</name> <operator>=</operator> <operator>(</operator><name>hist_start</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">511</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>get_cb</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cb_to_level</name><index>[<expr><name>i</name> <operator>+</operator> <name>res</name></expr>]</index></name> <operator>&gt;=</operator> <name>in</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>add_cb</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>-</operator> <name>b</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>a</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>cb_to_add</name><index>[<expr><name>a</name> <operator>-</operator> <name>b</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_power</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>in</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name><name>power</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">512</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">256</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>norm__</name><argument_list>(<argument><expr><call><name>mul32</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x3fffffff</literal> <operator>-</operator> <operator>(</operator><call><name>COS_T</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>mdct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>cb</name> <init>= <expr><call><name>get_cb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>add_cb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adjust_jnd</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>in</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name><name>out_cb</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>power</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>out_cb_unnorm</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>denom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>ca_cb</name> <init>= <expr><operator>-</operator><literal type="number">1114</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>cs_cb</name> <init>= <expr><literal type="number">928</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>samplerate_index</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>calc_power</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out_cb_unnorm</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2047</literal></expr>;</expr_stmt></block_content></block></for> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AUBANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <name>ca_cb</name></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <call><name>add_cb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>denom</name></expr></argument>, <argument><expr><name><name>power</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>auf</name><index>[<expr><name>samplerate_index</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out_cb_unnorm</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>add_cb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>out_cb_unnorm</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>-</operator><name>denom</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>auf</name><index>[<expr><name>samplerate_index</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out_cb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>add_cb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>out_cb</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>out_cb_unnorm</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>ca_cb</name> <operator>-</operator> <name>cs_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>walk_band_t</name>)<parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>spectrum1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>spectrum2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walk_band_low</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>,

<parameter><decl><type><name>walk_band_t</name></type> <name>walk</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>band</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>walk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2047</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>walk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>band</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>band</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name>f</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_spectrum</name><index>[<expr><literal type="number">7</literal> <operator>-</operator> <name>f</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_spectrum</name><index>[<expr><name>f</name></expr>]</index></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walk_band_high</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>,

<parameter><decl><type><name>walk_band_t</name></type> <name>walk</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>band</name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>walk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2047</literal></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>walk</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>band</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name>band</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>f</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_spectrum</name><index>[<expr><name>f</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_spectrum</name><index>[<expr><literal type="number">7</literal> <operator>-</operator> <name>f</name></expr>]</index></name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_band_masking</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>spectrum1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>spectrum2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>eff_masking_curve_cb</name><index>[<expr><name>f</name></expr>]</index></name> <operator>-</operator> <name>spectrum1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>band_masking_cb</name><index>[<expr><name>band1</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_masking_cb</name><index>[<expr><name>band1</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_masking</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>band</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ssf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>data</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ssf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ssf</name> <operator>&lt;</operator> <name>SUBSUBFRAMES</name></expr>;</condition> <incr><expr><name>ssf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>masking_curve_cb</name><index>[<expr><name>ssf</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2047</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>ssf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ssf</name> <operator>&lt;</operator> <name>SUBSUBFRAMES</name></expr>;</condition> <incr><expr><name>ssf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chi</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>channel_order_tab</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <literal type="number">256</literal> <operator>*</operator> <name>ssf</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>k</name> <operator>-=</operator> <literal type="number">512</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>k</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>chi</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>adjust_jnd</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>masking_curve_cb</name><index>[<expr><name>ssf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ssf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ssf</name> <operator>&lt;</operator> <name>SUBSUBFRAMES</name></expr>;</condition> <incr><expr><name>ssf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>masking_curve_cb</name><index>[<expr><name>ssf</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>masking_curve_cb</name><index>[<expr><name>ssf</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>eff_masking_curve_cb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_masking_cb</name><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>walk_band_low</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>update_band_masking</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>walk_band_high</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>update_band_masking</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>find_peak</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sample</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>sample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>s</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>sample</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>get_cb</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_peaks</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>band</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>peak_cb</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <call><name>find_peak</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name>SUBBAND_SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_peak_cb</name></name> <operator>=</operator> <call><name>find_peak</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>downsampled_lfe</name></name></expr></argument>, <argument><expr><name>DCA_LFE_SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adpcm_analysis</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>band</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred_vq_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>estimated_diff</name><index>[<expr><name>SUBBAND_SAMPLES</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>consumed_adpcm_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name>DCA_ADPCM_COEFFS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pred_vq_id</name> <operator>=</operator> <call><name>ff_dcaadpcm_subband_analysis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>adpcm_ctx</name></name></expr></argument>, <argument><expr><name>samples</name></expr></argument>,

<argument><expr><name>SUBBAND_SAMPLES</name></expr></argument>, <argument><expr><name>estimated_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pred_vq_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <name>pred_vq_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>consumed_adpcm_bits</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>diff_peak_cb</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <call><name>find_peak</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>estimated_diff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>snr_fudge</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_1ABITS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USED_26ABITS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32_t</name></type> <name>get_step_size</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bitrate_index</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>step_size</name> <operator>=</operator> <name><name>ff_dca_lossless_quant</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>step_size</name> <operator>=</operator> <name><name>ff_dca_lossy_quant</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>step_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>calc_one_scale</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>peak_cb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abits</name></decl></parameter>,

<parameter><decl><type><name>softfloat</name> <modifier>*</modifier></type><name>quant</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>peak</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>our_nscale</name></decl>, <decl><type ref="prev"/><name>try_remove</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>softfloat</name></type> <name>our_quant</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>peak_cb</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>peak_cb</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">2047</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>our_nscale</name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>peak</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>cb_to_level</name><index>[<expr><operator>-</operator><name>peak_cb</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>try_remove</name> <operator>=</operator> <literal type="number">64</literal></expr>;</init> <condition><expr><name>try_remove</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>try_remove</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>scalefactor_inv</name><index>[<expr><name>our_nscale</name> <operator>-</operator> <name>try_remove</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>+</operator> <name><name>stepsize_inv</name><index>[<expr><name>abits</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>&lt;=</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>our_quant</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>mul32</name><argument_list>(<argument><expr><name><name>scalefactor_inv</name><index>[<expr><name>our_nscale</name> <operator>-</operator> <name>try_remove</name></expr>]</index></name><operator>.</operator><name>m</name></expr></argument>, <argument><expr><name><name>stepsize_inv</name><index>[<expr><name>abits</name></expr>]</index></name><operator>.</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>our_quant</name><operator>.</operator><name>e</name></name> <operator>=</operator> <name><name>scalefactor_inv</name><index>[<expr><name>our_nscale</name> <operator>-</operator> <name>try_remove</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>+</operator> <name><name>stepsize_inv</name><index>[<expr><name>abits</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>-</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ff_dca_quant_levels</name><index>[<expr><name>abits</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>&lt;</operator> <call><name>quantize_value</name><argument_list>(<argument><expr><name>peak</name></expr></argument>, <argument><expr><name>our_quant</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>our_nscale</name> <operator>-=</operator> <name>try_remove</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>our_nscale</name> <operator>&gt;=</operator> <literal type="number">125</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>our_nscale</name> <operator>=</operator> <literal type="number">124</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <call><name>mul32</name><argument_list>(<argument><expr><name><name>scalefactor_inv</name><index>[<expr><name>our_nscale</name></expr>]</index></name><operator>.</operator><name>m</name></expr></argument>, <argument><expr><name><name>stepsize_inv</name><index>[<expr><name>abits</name></expr>]</index></name><operator>.</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>e</name></name> <operator>=</operator> <name><name>scalefactor_inv</name><index>[<expr><name>our_nscale</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>+</operator> <name><name>stepsize_inv</name><index>[<expr><name>abits</name></expr>]</index></name><operator>.</operator><name>e</name> <operator>-</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>(</operator><name><name>ff_dca_quant_levels</name><index>[<expr><name>abits</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <call><name>quantize_value</name><argument_list>(<argument><expr><name>peak</name></expr></argument>, <argument><expr><operator>*</operator><name>quant</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>our_nscale</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>quantize_adpcm_subband</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>diff_peak_cb</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>diff_peak_cb</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <call><name>calc_one_scale</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>diff_peak_cb</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>quant</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>step_size</name> <operator>=</operator> <call><name>get_step_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dcaadpcm_do_real</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>quant</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ff_dca_scale_factor_quant7</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><name>step_size</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>quantized</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name>SUBBAND_SAMPLES</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cb_to_level</name><index>[<expr><operator>-</operator><name>diff_peak_cb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_adpcm</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>band</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>quantize_adpcm_subband</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_pcm</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sample</name></decl>, <decl><type ref="prev"/><name>band</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sample</name> <operator>&lt;</operator> <name>SUBBAND_SAMPLES</name></expr>;</condition> <incr><expr><name>sample</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>val</name> <init>= <expr><call><name>quantize_value</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>sample</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>quant</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>quantized</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>sample</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>accumulate_huff_bit_consumption</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>abits</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>quantized</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sel</name></decl>, <decl><type ref="prev"/><name>id</name> <init>= <expr><name>abits</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sel</name> <operator>&lt;</operator> <name><name>ff_dca_quant_index_group_size</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</condition> <incr><expr><name>sel</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>result</name><index>[<expr><name>sel</name></expr>]</index></name> <operator>+=</operator> <call><name>ff_dca_vlc_calc_quant_bits</name><argument_list>(<argument><expr><name>quantized</name></expr></argument>, <argument><expr><name>SUBBAND_SAMPLES</name></expr></argument>,

<argument><expr><name>sel</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>set_best_code</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name><name>vlc_bits</name><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name><name>clc_bits</name><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name><name>res</name><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>best_sel_bits</name><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>best_sel_id</name><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_CODE_BOOKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>!</operator><operator>!</operator><name><name>vlc_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>!</operator><operator>!</operator><name><name>clc_bits</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vlc_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_quant_index_group_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>best_sel_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vlc_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_sel_id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sel</name> <operator>&lt;</operator> <name><name>ff_dca_quant_index_group_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>sel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>best_sel_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>vlc_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>sel</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>vlc_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>sel</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>best_sel_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vlc_bits</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>sel</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>best_sel_id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sel</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>best_sel_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name><name>clc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>best_sel_id</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_quant_index_group_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>clc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>bits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>set_best_abits_code</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>abits</name><index>[<expr><name>DCAENC_SUBBANDS</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bands</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>best_sel</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>best_bits</name> <init>= <expr><name>bands</name> <operator>*</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bands</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>abits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">12</literal> <operator>||</operator> <name><name>abits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>best_sel</name></expr>;</expr_stmt>

<return>return <expr><name>best_bits</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_BITALLOC_12_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ff_dca_vlc_calc_alloc_bits</name><argument_list>(<argument><expr><name>abits</name></expr></argument>, <argument><expr><name>bands</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>best_bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_bits</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_sel</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>best_sel</name></expr>;</expr_stmt>

<return>return <expr><name>best_bits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_quantization_noise</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noise</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forbid_zero</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>band</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><name>USED_26ABITS</name> <operator>|</operator> <name>USED_1ABITS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>huff_bit_count_accum</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>clc_bit_count_accum</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bits_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>=</operator> <literal type="number">132</literal> <operator>+</operator> <literal type="number">333</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>consumed_adpcm_bits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>+=</operator> <literal type="number">72</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>snr_cb</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>peak_cb</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>band_masking_cb</name><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name>noise</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>snr_cb</name> <operator>&gt;=</operator> <literal type="number">1312</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>~</operator><name>USED_1ABITS</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>snr_cb</name> <operator>&gt;=</operator> <literal type="number">222</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <call><name>mul32</name><argument_list>(<argument><expr><name>snr_cb</name> <operator>-</operator> <literal type="number">222</literal></expr></argument>, <argument><expr><literal type="number">69000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USED_26ABITS</name> <operator>|</operator> <name>USED_1ABITS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>snr_cb</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>mul32</name><argument_list>(<argument><expr><name>snr_cb</name></expr></argument>, <argument><expr><literal type="number">106000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USED_26ABITS</name> <operator>|</operator> <name>USED_1ABITS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>forbid_zero</name> <operator>||</operator> <name>snr_cb</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">140</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>~</operator><name>USED_26ABITS</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>USED_26ABITS</name> <operator>|</operator> <name>USED_1ABITS</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>+=</operator> <call><name>set_best_abits_code</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bit_allocation_sel</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>=</operator> <call><name>calc_one_scale</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>peak_cb</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>quant</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>quantize_adpcm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quantize_pcm</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>huff_bit_count_accum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_CHANNELS</name> <operator>*</operator> <name>DCA_CODE_BOOKS</name> <operator>*</operator> <literal type="number">7</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>clc_bit_count_accum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_CHANNELS</name> <operator>*</operator> <name>DCA_CODE_BOOKS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;=</operator> <name>DCA_CODE_BOOKS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>accumulate_huff_bit_consumption</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>quantized</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>huff_bit_count_accum</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>clc_bit_count_accum</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>bit_consumption</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bits_counter</name> <operator>+=</operator> <name><name>bit_consumption</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits_counter</name> <operator>+=</operator> <call><name>set_best_code</name><argument_list>(<argument><expr><name><name>huff_bit_count_accum</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>clc_bit_count_accum</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>quant_index_sel</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>+=</operator> <name>bits_counter</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>assign_bits</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>down</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>used_abits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>forbid_zero</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<label><name>restart</name>:</label>

<expr_stmt><expr><call><name>init_quantization_noise</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>worst_quantization_noise</name></name></expr></argument>, <argument><expr><name>forbid_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>high</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>worst_quantization_noise</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>used_abits</name> <operator>==</operator> <name>USED_1ABITS</name> <operator>&amp;&amp;</operator> <name>forbid_zero</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>forbid_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>restart</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>low</name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>

<expr_stmt><expr><name>high</name> <operator>+=</operator> <name>snr_fudge</name></expr>;</expr_stmt>

<expr_stmt><expr><name>used_abits</name> <operator>=</operator> <call><name>init_quantization_noise</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>forbid_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>high</name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>used_abits</name> <operator>==</operator> <name>USED_26ABITS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>low</name> <operator>-=</operator> <name>snr_fudge</name></expr>;</expr_stmt>

<expr_stmt><expr><name>used_abits</name> <operator>=</operator> <call><name>init_quantization_noise</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>forbid_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>down</name> <operator>=</operator> <name>snr_fudge</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>down</name></expr>;</condition> <incr><expr><name>down</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>init_quantization_noise</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>high</name> <operator>-</operator> <name>down</name></expr></argument>, <argument><expr><name>forbid_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>consumed_bits</name></name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>frame_bits</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>high</name> <operator>-=</operator> <name>down</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>init_quantization_noise</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>forbid_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>worst_quantization_noise</name></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>high</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>worst_noise_ever</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>worst_noise_ever</name></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shift_history</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>chi</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>channel_order_tab</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>k</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>+</operator> <name>chi</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_in_adpcm_bufer</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>band</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>step_size</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>subband</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name>DCA_ADPCM_COEFFS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>step_size</name> <operator>=</operator> <call><name>get_step_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dca_core_dequantize</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>quantized</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name><operator>+</operator><literal type="number">12</literal></expr></argument>, <argument><expr><name>step_size</name></expr></argument>,

<argument><expr><name><name>ff_dca_scale_factor_quant7</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128U</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>adpcm_history</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_lfe_scales</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_scale_factor</name></name> <operator>=</operator> <call><name>calc_one_scale</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_peak_cb</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>lfe_quant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_frame_header</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x7ffe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x8001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>SUBBAND_SAMPLES</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>channel_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>bitstream_sfreq</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>bitrate_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_primary_audio_header</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>SUBFRAMES</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>DCAENC_SUBBANDS</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>DCAENC_SUBBANDS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>bit_allocation_sel</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_CODE_BOOKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ff_dca_quant_index_sel_nbits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>quant_index_sel</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_CODE_BOOKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>quant_index_sel</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>ff_dca_quant_index_group_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_subframe_samples</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ss</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>band</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>sel</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;=</operator> <name>DCA_CODE_BOOKS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sel</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>quant_index_sel</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sel</name> <operator>&lt;</operator> <name><name>ff_dca_quant_index_group_size</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_dca_vlc_enc_quant</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>quantized</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>ss</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><name>sel</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>*=</operator> <name><name>ff_dca_quant_levels</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>quantized</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>ss</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>ff_dca_quant_levels</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>bit_consumption</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>bit_consumption</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>]</index></name> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>quantized</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>ss</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_subframe</name><parameter_list>(<parameter><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subframe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>band</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SUBSUBFRAMES</name> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>DCAENC_SUBBANDS</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>DCAENC_SUBBANDS</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prediction_mode</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>bit_allocation_sel</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>DCAENC_SUBBANDS</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_dca_vlc_enc_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>DCAENC_SUBBANDS</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>bit_allocation_sel</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>SUBSUBFRAMES</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>DCAENC_SUBBANDS</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for> 

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>DCAENC_SUBBANDS</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LFE_SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>quantize_value</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>downsampled_lfe</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_quant</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>lfe_scale_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ss</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ss</name> <operator>&lt;</operator> <name>SUBSUBFRAMES</name></expr> ;</condition> <incr><expr><name>ss</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>fullband_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>band</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>band</name> <operator>&lt;</operator> <name>DCAENC_SUBBANDS</name></expr>;</condition> <incr><expr><name>band</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>abits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>band</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_subframe_samples</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>band</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DCAEncContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subband_transform</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>lfe_channel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>lfe_downsample</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>calc_masking</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>adpcm_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adpcm_analysis</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>find_peaks</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign_bits</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>calc_lfe_scales</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shift_history</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_in_adpcm_bufer</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_frame_header</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_primary_audio_header</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SUBFRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_subframe</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCAENC_FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM | AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"dca_adpcm"</literal></expr>, <expr><literal type="string">"Use ADPCM encoding"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DCAEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>adpcm_mode</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>DCAENC_FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>dcaenc_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"DCA (DTS Coherent Acoustics)"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"1411200"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dca_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dca"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DCA (DTS Coherent Acoustics)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DTS</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DCAEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>encode_close</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_EXPERIMENTAL</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name> <operator>|</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S32</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <name>sample_rates</name></expr>,

<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>,

<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,

<expr><name>AV_CH_LAYOUT_2_2</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT0</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT1</name></expr>,

<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>defaults</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>dcaenc_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
