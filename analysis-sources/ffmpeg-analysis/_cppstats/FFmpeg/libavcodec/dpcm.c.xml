<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dpcm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DPCMContext</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>array</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sample</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>sol_table</name></decl>;</decl_stmt> 

}</block></struct></type> <name>DPCMContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>derf_steps</name><index>[<expr><literal type="number">96</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>,

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">34</literal></expr>,

<expr><literal type="number">37</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">73</literal></expr>,

<expr><literal type="number">80</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">130</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">157</literal></expr>,

<expr><literal type="number">173</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">279</literal></expr>, <expr><literal type="number">307</literal></expr>, <expr><literal type="number">337</literal></expr>,

<expr><literal type="number">371</literal></expr>, <expr><literal type="number">408</literal></expr>, <expr><literal type="number">449</literal></expr>, <expr><literal type="number">494</literal></expr>, <expr><literal type="number">544</literal></expr>, <expr><literal type="number">598</literal></expr>, <expr><literal type="number">658</literal></expr>, <expr><literal type="number">724</literal></expr>,

<expr><literal type="number">796</literal></expr>, <expr><literal type="number">876</literal></expr>, <expr><literal type="number">963</literal></expr>, <expr><literal type="number">1060</literal></expr>, <expr><literal type="number">1166</literal></expr>, <expr><literal type="number">1282</literal></expr>, <expr><literal type="number">1411</literal></expr>, <expr><literal type="number">1552</literal></expr>,

<expr><literal type="number">1707</literal></expr>, <expr><literal type="number">1878</literal></expr>, <expr><literal type="number">2066</literal></expr>, <expr><literal type="number">2272</literal></expr>, <expr><literal type="number">2499</literal></expr>, <expr><literal type="number">2749</literal></expr>, <expr><literal type="number">3024</literal></expr>, <expr><literal type="number">3327</literal></expr>,

<expr><literal type="number">3660</literal></expr>, <expr><literal type="number">4026</literal></expr>, <expr><literal type="number">4428</literal></expr>, <expr><literal type="number">4871</literal></expr>, <expr><literal type="number">5358</literal></expr>, <expr><literal type="number">5894</literal></expr>, <expr><literal type="number">6484</literal></expr>, <expr><literal type="number">7132</literal></expr>,

<expr><literal type="number">7845</literal></expr>, <expr><literal type="number">8630</literal></expr>, <expr><literal type="number">9493</literal></expr>, <expr><literal type="number">10442</literal></expr>, <expr><literal type="number">11487</literal></expr>, <expr><literal type="number">12635</literal></expr>, <expr><literal type="number">13899</literal></expr>, <expr><literal type="number">15289</literal></expr>,

<expr><literal type="number">16818</literal></expr>, <expr><literal type="number">18500</literal></expr>, <expr><literal type="number">20350</literal></expr>, <expr><literal type="number">22385</literal></expr>, <expr><literal type="number">24623</literal></expr>, <expr><literal type="number">27086</literal></expr>, <expr><literal type="number">29794</literal></expr>, <expr><literal type="number">32767</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>interplay_delta_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>,

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>,

<expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>,

<expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>,

<expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">61</literal></expr>,

<expr><literal type="number">66</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">122</literal></expr>,

<expr><literal type="number">133</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">245</literal></expr>,

<expr><literal type="number">267</literal></expr>, <expr><literal type="number">292</literal></expr>, <expr><literal type="number">318</literal></expr>, <expr><literal type="number">348</literal></expr>, <expr><literal type="number">379</literal></expr>, <expr><literal type="number">414</literal></expr>, <expr><literal type="number">452</literal></expr>, <expr><literal type="number">493</literal></expr>,

<expr><literal type="number">538</literal></expr>, <expr><literal type="number">587</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">699</literal></expr>, <expr><literal type="number">763</literal></expr>, <expr><literal type="number">832</literal></expr>, <expr><literal type="number">908</literal></expr>, <expr><literal type="number">991</literal></expr>,

<expr><literal type="number">1081</literal></expr>, <expr><literal type="number">1180</literal></expr>, <expr><literal type="number">1288</literal></expr>, <expr><literal type="number">1405</literal></expr>, <expr><literal type="number">1534</literal></expr>, <expr><literal type="number">1673</literal></expr>, <expr><literal type="number">1826</literal></expr>, <expr><literal type="number">1993</literal></expr>,

<expr><literal type="number">2175</literal></expr>, <expr><literal type="number">2373</literal></expr>, <expr><literal type="number">2590</literal></expr>, <expr><literal type="number">2826</literal></expr>, <expr><literal type="number">3084</literal></expr>, <expr><literal type="number">3365</literal></expr>, <expr><literal type="number">3672</literal></expr>, <expr><literal type="number">4008</literal></expr>,

<expr><literal type="number">4373</literal></expr>, <expr><literal type="number">4772</literal></expr>, <expr><literal type="number">5208</literal></expr>, <expr><literal type="number">5683</literal></expr>, <expr><literal type="number">6202</literal></expr>, <expr><literal type="number">6767</literal></expr>, <expr><literal type="number">7385</literal></expr>, <expr><literal type="number">8059</literal></expr>,

<expr><literal type="number">8794</literal></expr>, <expr><literal type="number">9597</literal></expr>, <expr><literal type="number">10472</literal></expr>, <expr><literal type="number">11428</literal></expr>, <expr><literal type="number">12471</literal></expr>, <expr><literal type="number">13609</literal></expr>, <expr><literal type="number">14851</literal></expr>, <expr><literal type="number">16206</literal></expr>,

<expr><literal type="number">17685</literal></expr>, <expr><literal type="number">19298</literal></expr>, <expr><literal type="number">21060</literal></expr>, <expr><literal type="number">22981</literal></expr>, <expr><literal type="number">25078</literal></expr>, <expr><literal type="number">27367</literal></expr>, <expr><literal type="number">29864</literal></expr>, <expr><literal type="number">32589</literal></expr>,

<expr><operator>-</operator><literal type="number">29973</literal></expr>, <expr><operator>-</operator><literal type="number">26728</literal></expr>, <expr><operator>-</operator><literal type="number">23186</literal></expr>, <expr><operator>-</operator><literal type="number">19322</literal></expr>, <expr><operator>-</operator><literal type="number">15105</literal></expr>, <expr><operator>-</operator><literal type="number">10503</literal></expr>, <expr><operator>-</operator><literal type="number">5481</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5481</literal></expr>, <expr><literal type="number">10503</literal></expr>, <expr><literal type="number">15105</literal></expr>, <expr><literal type="number">19322</literal></expr>, <expr><literal type="number">23186</literal></expr>, <expr><literal type="number">26728</literal></expr>,

<expr><literal type="number">29973</literal></expr>, <expr><operator>-</operator><literal type="number">32589</literal></expr>, <expr><operator>-</operator><literal type="number">29864</literal></expr>, <expr><operator>-</operator><literal type="number">27367</literal></expr>, <expr><operator>-</operator><literal type="number">25078</literal></expr>, <expr><operator>-</operator><literal type="number">22981</literal></expr>, <expr><operator>-</operator><literal type="number">21060</literal></expr>, <expr><operator>-</operator><literal type="number">19298</literal></expr>,

<expr><operator>-</operator><literal type="number">17685</literal></expr>, <expr><operator>-</operator><literal type="number">16206</literal></expr>, <expr><operator>-</operator><literal type="number">14851</literal></expr>, <expr><operator>-</operator><literal type="number">13609</literal></expr>, <expr><operator>-</operator><literal type="number">12471</literal></expr>, <expr><operator>-</operator><literal type="number">11428</literal></expr>, <expr><operator>-</operator><literal type="number">10472</literal></expr>, <expr><operator>-</operator><literal type="number">9597</literal></expr>,

<expr><operator>-</operator><literal type="number">8794</literal></expr>, <expr><operator>-</operator><literal type="number">8059</literal></expr>, <expr><operator>-</operator><literal type="number">7385</literal></expr>, <expr><operator>-</operator><literal type="number">6767</literal></expr>, <expr><operator>-</operator><literal type="number">6202</literal></expr>, <expr><operator>-</operator><literal type="number">5683</literal></expr>, <expr><operator>-</operator><literal type="number">5208</literal></expr>, <expr><operator>-</operator><literal type="number">4772</literal></expr>,

<expr><operator>-</operator><literal type="number">4373</literal></expr>, <expr><operator>-</operator><literal type="number">4008</literal></expr>, <expr><operator>-</operator><literal type="number">3672</literal></expr>, <expr><operator>-</operator><literal type="number">3365</literal></expr>, <expr><operator>-</operator><literal type="number">3084</literal></expr>, <expr><operator>-</operator><literal type="number">2826</literal></expr>, <expr><operator>-</operator><literal type="number">2590</literal></expr>, <expr><operator>-</operator><literal type="number">2373</literal></expr>,

<expr><operator>-</operator><literal type="number">2175</literal></expr>, <expr><operator>-</operator><literal type="number">1993</literal></expr>, <expr><operator>-</operator><literal type="number">1826</literal></expr>, <expr><operator>-</operator><literal type="number">1673</literal></expr>, <expr><operator>-</operator><literal type="number">1534</literal></expr>, <expr><operator>-</operator><literal type="number">1405</literal></expr>, <expr><operator>-</operator><literal type="number">1288</literal></expr>, <expr><operator>-</operator><literal type="number">1180</literal></expr>,

<expr><operator>-</operator><literal type="number">1081</literal></expr>, <expr><operator>-</operator><literal type="number">991</literal></expr>, <expr><operator>-</operator><literal type="number">908</literal></expr>, <expr><operator>-</operator><literal type="number">832</literal></expr>, <expr><operator>-</operator><literal type="number">763</literal></expr>, <expr><operator>-</operator><literal type="number">699</literal></expr>, <expr><operator>-</operator><literal type="number">640</literal></expr>, <expr><operator>-</operator><literal type="number">587</literal></expr>,

<expr><operator>-</operator><literal type="number">538</literal></expr>, <expr><operator>-</operator><literal type="number">493</literal></expr>, <expr><operator>-</operator><literal type="number">452</literal></expr>, <expr><operator>-</operator><literal type="number">414</literal></expr>, <expr><operator>-</operator><literal type="number">379</literal></expr>, <expr><operator>-</operator><literal type="number">348</literal></expr>, <expr><operator>-</operator><literal type="number">318</literal></expr>, <expr><operator>-</operator><literal type="number">292</literal></expr>,

<expr><operator>-</operator><literal type="number">267</literal></expr>, <expr><operator>-</operator><literal type="number">245</literal></expr>, <expr><operator>-</operator><literal type="number">225</literal></expr>, <expr><operator>-</operator><literal type="number">206</literal></expr>, <expr><operator>-</operator><literal type="number">189</literal></expr>, <expr><operator>-</operator><literal type="number">173</literal></expr>, <expr><operator>-</operator><literal type="number">158</literal></expr>, <expr><operator>-</operator><literal type="number">145</literal></expr>,

<expr><operator>-</operator><literal type="number">133</literal></expr>, <expr><operator>-</operator><literal type="number">122</literal></expr>, <expr><operator>-</operator><literal type="number">112</literal></expr>, <expr><operator>-</operator><literal type="number">102</literal></expr>, <expr><operator>-</operator><literal type="number">94</literal></expr>, <expr><operator>-</operator><literal type="number">86</literal></expr>, <expr><operator>-</operator><literal type="number">79</literal></expr>, <expr><operator>-</operator><literal type="number">72</literal></expr>,

<expr><operator>-</operator><literal type="number">66</literal></expr>, <expr><operator>-</operator><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">56</literal></expr>, <expr><operator>-</operator><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">47</literal></expr>, <expr><operator>-</operator><literal type="number">43</literal></expr>, <expr><operator>-</operator><literal type="number">42</literal></expr>, <expr><operator>-</operator><literal type="number">41</literal></expr>,

<expr><operator>-</operator><literal type="number">40</literal></expr>, <expr><operator>-</operator><literal type="number">39</literal></expr>, <expr><operator>-</operator><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">35</literal></expr>, <expr><operator>-</operator><literal type="number">34</literal></expr>, <expr><operator>-</operator><literal type="number">33</literal></expr>,

<expr><operator>-</operator><literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">30</literal></expr>, <expr><operator>-</operator><literal type="number">29</literal></expr>, <expr><operator>-</operator><literal type="number">28</literal></expr>, <expr><operator>-</operator><literal type="number">27</literal></expr>, <expr><operator>-</operator><literal type="number">26</literal></expr>, <expr><operator>-</operator><literal type="number">25</literal></expr>,

<expr><operator>-</operator><literal type="number">24</literal></expr>, <expr><operator>-</operator><literal type="number">23</literal></expr>, <expr><operator>-</operator><literal type="number">22</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>,

<expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>,

<expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>sol_table_old</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0xA</literal></expr>, <expr><literal type="number">0xF</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><operator>-</operator><literal type="number">0x15</literal></expr>, <expr><operator>-</operator><literal type="number">0xF</literal></expr>, <expr><operator>-</operator><literal type="number">0xA</literal></expr>, <expr><operator>-</operator><literal type="number">0x6</literal></expr>, <expr><operator>-</operator><literal type="number">0x3</literal></expr>, <expr><operator>-</operator><literal type="number">0x2</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>sol_table_new</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x2</literal></expr>, <expr><literal type="number">0x3</literal></expr>, <expr><literal type="number">0x6</literal></expr>, <expr><literal type="number">0xA</literal></expr>, <expr><literal type="number">0xF</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x0</literal></expr>, <expr><operator>-</operator><literal type="number">0x1</literal></expr>, <expr><operator>-</operator><literal type="number">0x2</literal></expr>, <expr><operator>-</operator><literal type="number">0x3</literal></expr>, <expr><operator>-</operator><literal type="number">0x6</literal></expr>, <expr><operator>-</operator><literal type="number">0xA</literal></expr>, <expr><operator>-</operator><literal type="number">0xF</literal></expr>, <expr><operator>-</operator><literal type="number">0x15</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>sol_table_16</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x000</literal></expr>, <expr><literal type="number">0x008</literal></expr>, <expr><literal type="number">0x010</literal></expr>, <expr><literal type="number">0x020</literal></expr>, <expr><literal type="number">0x030</literal></expr>, <expr><literal type="number">0x040</literal></expr>, <expr><literal type="number">0x050</literal></expr>, <expr><literal type="number">0x060</literal></expr>, <expr><literal type="number">0x070</literal></expr>, <expr><literal type="number">0x080</literal></expr>,

<expr><literal type="number">0x090</literal></expr>, <expr><literal type="number">0x0A0</literal></expr>, <expr><literal type="number">0x0B0</literal></expr>, <expr><literal type="number">0x0C0</literal></expr>, <expr><literal type="number">0x0D0</literal></expr>, <expr><literal type="number">0x0E0</literal></expr>, <expr><literal type="number">0x0F0</literal></expr>, <expr><literal type="number">0x100</literal></expr>, <expr><literal type="number">0x110</literal></expr>, <expr><literal type="number">0x120</literal></expr>,

<expr><literal type="number">0x130</literal></expr>, <expr><literal type="number">0x140</literal></expr>, <expr><literal type="number">0x150</literal></expr>, <expr><literal type="number">0x160</literal></expr>, <expr><literal type="number">0x170</literal></expr>, <expr><literal type="number">0x180</literal></expr>, <expr><literal type="number">0x190</literal></expr>, <expr><literal type="number">0x1A0</literal></expr>, <expr><literal type="number">0x1B0</literal></expr>, <expr><literal type="number">0x1C0</literal></expr>,

<expr><literal type="number">0x1D0</literal></expr>, <expr><literal type="number">0x1E0</literal></expr>, <expr><literal type="number">0x1F0</literal></expr>, <expr><literal type="number">0x200</literal></expr>, <expr><literal type="number">0x208</literal></expr>, <expr><literal type="number">0x210</literal></expr>, <expr><literal type="number">0x218</literal></expr>, <expr><literal type="number">0x220</literal></expr>, <expr><literal type="number">0x228</literal></expr>, <expr><literal type="number">0x230</literal></expr>,

<expr><literal type="number">0x238</literal></expr>, <expr><literal type="number">0x240</literal></expr>, <expr><literal type="number">0x248</literal></expr>, <expr><literal type="number">0x250</literal></expr>, <expr><literal type="number">0x258</literal></expr>, <expr><literal type="number">0x260</literal></expr>, <expr><literal type="number">0x268</literal></expr>, <expr><literal type="number">0x270</literal></expr>, <expr><literal type="number">0x278</literal></expr>, <expr><literal type="number">0x280</literal></expr>,

<expr><literal type="number">0x288</literal></expr>, <expr><literal type="number">0x290</literal></expr>, <expr><literal type="number">0x298</literal></expr>, <expr><literal type="number">0x2A0</literal></expr>, <expr><literal type="number">0x2A8</literal></expr>, <expr><literal type="number">0x2B0</literal></expr>, <expr><literal type="number">0x2B8</literal></expr>, <expr><literal type="number">0x2C0</literal></expr>, <expr><literal type="number">0x2C8</literal></expr>, <expr><literal type="number">0x2D0</literal></expr>,

<expr><literal type="number">0x2D8</literal></expr>, <expr><literal type="number">0x2E0</literal></expr>, <expr><literal type="number">0x2E8</literal></expr>, <expr><literal type="number">0x2F0</literal></expr>, <expr><literal type="number">0x2F8</literal></expr>, <expr><literal type="number">0x300</literal></expr>, <expr><literal type="number">0x308</literal></expr>, <expr><literal type="number">0x310</literal></expr>, <expr><literal type="number">0x318</literal></expr>, <expr><literal type="number">0x320</literal></expr>,

<expr><literal type="number">0x328</literal></expr>, <expr><literal type="number">0x330</literal></expr>, <expr><literal type="number">0x338</literal></expr>, <expr><literal type="number">0x340</literal></expr>, <expr><literal type="number">0x348</literal></expr>, <expr><literal type="number">0x350</literal></expr>, <expr><literal type="number">0x358</literal></expr>, <expr><literal type="number">0x360</literal></expr>, <expr><literal type="number">0x368</literal></expr>, <expr><literal type="number">0x370</literal></expr>,

<expr><literal type="number">0x378</literal></expr>, <expr><literal type="number">0x380</literal></expr>, <expr><literal type="number">0x388</literal></expr>, <expr><literal type="number">0x390</literal></expr>, <expr><literal type="number">0x398</literal></expr>, <expr><literal type="number">0x3A0</literal></expr>, <expr><literal type="number">0x3A8</literal></expr>, <expr><literal type="number">0x3B0</literal></expr>, <expr><literal type="number">0x3B8</literal></expr>, <expr><literal type="number">0x3C0</literal></expr>,

<expr><literal type="number">0x3C8</literal></expr>, <expr><literal type="number">0x3D0</literal></expr>, <expr><literal type="number">0x3D8</literal></expr>, <expr><literal type="number">0x3E0</literal></expr>, <expr><literal type="number">0x3E8</literal></expr>, <expr><literal type="number">0x3F0</literal></expr>, <expr><literal type="number">0x3F8</literal></expr>, <expr><literal type="number">0x400</literal></expr>, <expr><literal type="number">0x440</literal></expr>, <expr><literal type="number">0x480</literal></expr>,

<expr><literal type="number">0x4C0</literal></expr>, <expr><literal type="number">0x500</literal></expr>, <expr><literal type="number">0x540</literal></expr>, <expr><literal type="number">0x580</literal></expr>, <expr><literal type="number">0x5C0</literal></expr>, <expr><literal type="number">0x600</literal></expr>, <expr><literal type="number">0x640</literal></expr>, <expr><literal type="number">0x680</literal></expr>, <expr><literal type="number">0x6C0</literal></expr>, <expr><literal type="number">0x700</literal></expr>,

<expr><literal type="number">0x740</literal></expr>, <expr><literal type="number">0x780</literal></expr>, <expr><literal type="number">0x7C0</literal></expr>, <expr><literal type="number">0x800</literal></expr>, <expr><literal type="number">0x900</literal></expr>, <expr><literal type="number">0xA00</literal></expr>, <expr><literal type="number">0xB00</literal></expr>, <expr><literal type="number">0xC00</literal></expr>, <expr><literal type="number">0xD00</literal></expr>, <expr><literal type="number">0xE00</literal></expr>,

<expr><literal type="number">0xF00</literal></expr>, <expr><literal type="number">0x1000</literal></expr>, <expr><literal type="number">0x1400</literal></expr>, <expr><literal type="number">0x1800</literal></expr>, <expr><literal type="number">0x1C00</literal></expr>, <expr><literal type="number">0x2000</literal></expr>, <expr><literal type="number">0x3000</literal></expr>, <expr><literal type="number">0x4000</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dpcm_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DPCMContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_ROQ_DPCM</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>square</name> <init>= <expr><name>i</name> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>square</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>square</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_SOL_DPCM</name></expr>:</case>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sol_table</name></name> <operator>=</operator> <name>sol_table_old</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sol_table</name></name> <operator>=</operator> <name>sol_table_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown SOL subcodec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_SDX2_DPCM</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>square</name> <init>= <expr><name>i</name> <operator>*</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">128</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>square</name></expr></then><else>: <expr><name>square</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_GREMLIN_DPCM</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">127</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>delta</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <name>delta</name> <operator>+</operator> <operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SOL_DPCM</name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dpcm_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DPCMContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>predictor</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stereo</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output_samples</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>samples_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>buf_size</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf_size</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_ROQ_DPCM</name></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_INTERPLAY_DPCM</name></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">6</literal> <operator>-</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_XAN_DPCM</name></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buf_size</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_SOL_DPCM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buf_size</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_DERF_DPCM</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_GREMLIN_DPCM</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_SDX2_DPCM</name></expr>:</case>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>buf_size</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>%</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"channels have differing number of samples\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <operator>(</operator><name>out</name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output_samples</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_end</name> <operator>=</operator> <name>output_samples</name> <operator>+</operator> <name>out</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_ROQ_DPCM</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name>output_samples</name> <operator>&lt;</operator> <name>samples_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples</name><operator>++</operator> <operator>=</operator> <name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>^=</operator> <name>stereo</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_INTERPLAY_DPCM</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples</name><operator>++</operator> <operator>=</operator> <name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>output_samples</name> <operator>&lt;</operator> <name>samples_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name><name>interplay_delta_table</name><index>[<expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples</name><operator>++</operator> <operator>=</operator> <name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>^=</operator> <name>stereo</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_XAN_DPCM</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>shift</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><call><name>bytestream2_get_le16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>output_samples</name> <operator>&lt;</operator> <name>samples_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>diff</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>shift</name><index>[<expr><name>ch</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>shift</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><operator>(</operator><name>diff</name> <operator>&amp;</operator><operator>~</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shift</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>shift</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>&gt;&gt;=</operator> <name><name>shift</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples</name><operator>++</operator> <operator>=</operator> <name><name>predictor</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>^=</operator> <name>stereo</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AV_CODEC_ID_SOL_DPCM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>output_samples_u8</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>samples_end_u8</name> <init>= <expr><name>output_samples_u8</name> <operator>+</operator> <name>out</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>output_samples_u8</name> <operator>&lt;</operator> <name>samples_end_u8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>sol_table</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples_u8</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>stereo</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>sol_table</name><index>[<expr><name>n</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>stereo</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>stereo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples_u8</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>stereo</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>output_samples</name> <operator>&lt;</operator> <name>samples_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-=</operator> <name><name>sol_table_16</name><index>[<expr><name>n</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name><name>sol_table_16</name><index>[<expr><name>n</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>^=</operator> <name>stereo</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_SDX2_DPCM</name></expr>:</case>

<while>while <condition>(<expr><name>output_samples</name> <operator>&lt;</operator> <name>samples_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name>n</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch</name> <operator>^=</operator> <name>stereo</name></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_GREMLIN_DPCM</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>output_samples</name> <operator>&lt;</operator> <name>samples_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>n</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_DERF_DPCM</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>output_samples</name> <operator>&lt;</operator> <name>samples_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>n</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>n</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>, <argument><expr><literal type="number">95</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name><name>derf_steps</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_samples</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>idx</name> <operator>^=</operator> <name>stereo</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPCM_DECODER</name><parameter_list>(<parameter><type><name>id_</name></type></parameter>, <parameter><type><name>name_</name></type></parameter>, <parameter><type><name>long_name_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVCodec ff_ ##name_ ##_decoder = { .name = #name_, .long_name = NULL_IF_CONFIG_SMALL(long_name_), .type = AVMEDIA_TYPE_AUDIO, .id = id_, .priv_data_size = sizeof(DPCMContext), .init = dpcm_decode_init, .decode = dpcm_decode_frame, .capabilities = AV_CODEC_CAP_DR1, }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_DERF_DPCM</name></expr></argument>, <argument><expr><name>derf_dpcm</name></expr></argument>, <argument><expr><literal type="string">"DPCM Xilam DERF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_GREMLIN_DPCM</name></expr></argument>, <argument><expr><name>gremlin_dpcm</name></expr></argument>, <argument><expr><literal type="string">"DPCM Gremlin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_INTERPLAY_DPCM</name></expr></argument>, <argument><expr><name>interplay_dpcm</name></expr></argument>, <argument><expr><literal type="string">"DPCM Interplay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_ROQ_DPCM</name></expr></argument>, <argument><expr><name>roq_dpcm</name></expr></argument>, <argument><expr><literal type="string">"DPCM id RoQ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_SDX2_DPCM</name></expr></argument>, <argument><expr><name>sdx2_dpcm</name></expr></argument>, <argument><expr><literal type="string">"DPCM Squareroot-Delta-Exact"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_SOL_DPCM</name></expr></argument>, <argument><expr><name>sol_dpcm</name></expr></argument>, <argument><expr><literal type="string">"DPCM Sol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPCM_DECODER</name><argument_list>(<argument><expr><name>AV_CODEC_ID_XAN_DPCM</name></expr></argument>, <argument><expr><name>xan_dpcm</name></expr></argument>, <argument><expr><literal type="string">"DPCM Xan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</unit>
