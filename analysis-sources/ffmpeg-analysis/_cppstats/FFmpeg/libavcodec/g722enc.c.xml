<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\g722enc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"g722.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREEZE_INTERVAL</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAME_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_TRELLIS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRELLIS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g722_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>node_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>nodep_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>g722_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scale_factor</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scale_factor</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>frontier</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_paths</name> <init>= <expr><name>frontier</name> <operator>*</operator> <name>FREEZE_INTERVAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>max_paths</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>node_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>frontier</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>node_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nodep_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>frontier</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>nodep_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>node_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>nodep_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name>MAX_FRAME_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_frame_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_frame_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name>MAX_FRAME_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_frame_size</name> <operator>=</operator> <name>MAX_FRAME_SIZE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>new_frame_size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Requested frame size is not "</literal>

<literal type="string">"allowed. Using %d instead of %d\n"</literal></expr></argument>, <argument><expr><name>new_frame_size</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>new_frame_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">320</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&lt;</operator> <name>MIN_TRELLIS</name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>&gt;</operator> <name>MAX_TRELLIS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_trellis</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr></argument>, <argument><expr><name>MIN_TRELLIS</name></expr></argument>, <argument><expr><name>MAX_TRELLIS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Requested trellis value is not "</literal>

<literal type="string">"allowed. Using %d instead of %d\n"</literal></expr></argument>, <argument><expr><name>new_trellis</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name> <operator>=</operator> <name>new_trellis</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_g722dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>g722_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>low_quant</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">35</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">233</literal></expr>, <expr><literal type="number">276</literal></expr>, <expr><literal type="number">323</literal></expr>,

<expr><literal type="number">370</literal></expr>, <expr><literal type="number">422</literal></expr>, <expr><literal type="number">473</literal></expr>, <expr><literal type="number">530</literal></expr>, <expr><literal type="number">587</literal></expr>, <expr><literal type="number">650</literal></expr>, <expr><literal type="number">714</literal></expr>, <expr><literal type="number">786</literal></expr>,

<expr><literal type="number">858</literal></expr>, <expr><literal type="number">940</literal></expr>, <expr><literal type="number">1023</literal></expr>, <expr><literal type="number">1121</literal></expr>, <expr><literal type="number">1219</literal></expr>, <expr><literal type="number">1339</literal></expr>, <expr><literal type="number">1458</literal></expr>, <expr><literal type="number">1612</literal></expr>,

<expr><literal type="number">1765</literal></expr>, <expr><literal type="number">1980</literal></expr>, <expr><literal type="number">2195</literal></expr>, <expr><literal type="number">2557</literal></expr>, <expr><literal type="number">2919</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>filter_samples</name><parameter_list>(<parameter><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xlow</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>xhigh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>xout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>apply_qmf</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>-</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>xout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xlow</name> <operator>=</operator> <name><name>xout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>xout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>xhigh</name> <operator>=</operator> <name><name>xout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>xout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>&gt;=</operator> <name>PREV_SAMPLES_BUF_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>-</operator> <literal type="number">22</literal></expr></argument>,

<argument><expr><literal type="number">22</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_samples_pos</name></name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>encode_high</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>G722Band</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xhigh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name>av_clip_int16</name><argument_list>(<argument><expr><name>xhigh</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>s_predictor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pred</name> <init>= <expr><literal type="number">141</literal> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>scale_factor</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>diff</name> <operator>^</operator> <operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>pred</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>diff</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>encode_low</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>G722Band</name></name><modifier>*</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xlow</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name>av_clip_int16</name><argument_list>(<argument><expr><name>xlow</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>s_predictor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><name>diff</name> <operator>^</operator> <operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>limit</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <name><name>low_quant</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>scale_factor</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">29</literal> <operator>&amp;&amp;</operator> <name>limit</name></expr></argument> &gt;</argument_list></name> <name><name>low_quant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>scale_factor</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">63</literal></expr> </then><else>: <expr><literal type="number">33</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">61</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>g722_encode_trellis</name><parameter_list>(<parameter><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trellis</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frontier</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>trellis</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>TrellisNode</name></name> <modifier>*</modifier><modifier>*</modifier></type><name><name>nodes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>TrellisNode</name></name> <modifier>*</modifier><modifier>*</modifier></type><name><name>nodes_next</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pathn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name>froze</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>TrellisPath</name></name> <modifier>*</modifier></type><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>nodep_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nodes_next</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>nodep_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>frontier</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>nodep_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>frontier</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>nodep_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>node_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>frontier</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>state</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>nb_samples</name></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xlow</name></decl>, <decl><type ref="prev"/><name>xhigh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>TrellisNode</name></name> <modifier>*</modifier></type><name><name>next</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>heap_pos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>next</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>node_buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>frontier</name><operator>*</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>nodes_next</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>frontier</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>nodes_next</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>filter_samples</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xlow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xhigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>frontier</name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>range</name> <init>= <expr><ternary><condition><expr><name>j</name> <operator>&lt;</operator> <name>frontier</name><operator>/</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>TrellisNode</name></name> <modifier>*</modifier></type><name>cur_node</name> <init>= <expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ilow</name> <init>= <expr><call><name>encode_low</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cur_node</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>xlow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>ilow</name> <operator>-</operator> <name>range</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>ilow</name> <operator>+</operator> <name>range</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <literal type="number">63</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decoded</name></decl>, <decl><type ref="prev"/><name>dec_diff</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>TrellisNode</name></name><modifier>*</modifier></type> <name>node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>decoded</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><operator>(</operator><name><name>cur_node</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scale_factor</name></name> <operator>*</operator>

<name><name>ff_g722_low_inv_quant6</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator>

<operator>+</operator> <name><name>cur_node</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>s_predictor</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_diff</name> <operator>=</operator> <name>xlow</name> <operator>-</operator> <name>decoded</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_NODE</name><parameter_list>(<parameter><type><name>index</name></type></parameter>, <parameter><type><name>UPDATE</name></type></parameter>, <parameter><type><name>VALUE</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>ssd = cur_node-&gt;ssd + dec_diff*dec_diff;if (ssd &lt; cur_node-&gt;ssd)continue;if (heap_pos[index] &lt; frontier) {pos = heap_pos[index]++;av_assert2(pathn[index] &lt; FREEZE_INTERVAL * frontier);node = nodes_next[index][pos] = next[index]++;node-&gt;path = pathn[index]++;} else {pos = (frontier&gt;&gt;1) + (heap_pos[index] &amp; ((frontier&gt;&gt;1) - 1));if (ssd &gt;= nodes_next[index][pos]-&gt;ssd)continue;heap_pos[index]++;node = nodes_next[index][pos];}node-&gt;ssd = ssd;node-&gt;state = cur_node-&gt;state;UPDATE;c-&gt;paths[index][node-&gt;path].value = VALUE;c-&gt;paths[index][node-&gt;path].prev = cur_node-&gt;path;while (pos &gt; 0) {int parent = (pos - 1) &gt;&gt; 1;if (nodes_next[index][parent]-&gt;ssd &lt;= ssd)break;FFSWAP(struct TrellisNode*, nodes_next[index][parent],nodes_next[index][pos]);pos = parent;}</cpp:value></cpp:define>

<expr_stmt><expr><call><name>STORE_NODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ff_g722_update_low_predictor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>frontier</name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ihigh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>TrellisNode</name></name> <modifier>*</modifier></type><name>cur_node</name> <init>= <expr><name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ihigh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ihigh</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>ihigh</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dhigh</name></decl>, <decl><type ref="prev"/><name>decoded</name></decl>, <decl><type ref="prev"/><name>dec_diff</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ssd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>TrellisNode</name></name><modifier>*</modifier></type> <name>node</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dhigh</name> <operator>=</operator> <name><name>cur_node</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>scale_factor</name></name> <operator>*</operator>

<name><name>ff_g722_high_inv_quant</name><index>[<expr><name>ihigh</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded</name> <operator>=</operator> <call><name>av_clip_intp2</name><argument_list>(<argument><expr><name>dhigh</name> <operator>+</operator> <name><name>cur_node</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>s_predictor</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_diff</name> <operator>=</operator> <name>xhigh</name> <operator>-</operator> <name>decoded</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE_NODE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>ff_g722_update_high_predictor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>dhigh</name></expr></argument>, <argument><expr><name>ihigh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ihigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr>struct <name>TrellisNode</name><operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>nodes_next</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>frontier</name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>-=</operator> <name><name>nodes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ssd</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>ssd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>froze</name> <operator>+</operator> <name>FREEZE_INTERVAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <name>froze</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>prev</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>prev</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>froze</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pathn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pathn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>frontier</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>nodes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>frontier</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>nodes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>path</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <name>froze</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>prev</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>paths</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>prev</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>nodes</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>state</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>encode_byte</name><parameter_list>(<parameter><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xlow</name></decl>, <decl><type ref="prev"/><name>xhigh</name></decl>, <decl><type ref="prev"/><name>ilow</name></decl>, <decl><type ref="prev"/><name>ihigh</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>filter_samples</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xlow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xhigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ihigh</name> <operator>=</operator> <call><name>encode_high</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>xhigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ilow</name> <operator>=</operator> <call><name>encode_low</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>xlow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g722_update_high_predictor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scale_factor</name> <operator>*</operator>

<name><name>ff_g722_high_inv_quant</name><index>[<expr><name>ihigh</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>ihigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_g722_update_low_predictor</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ilow</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>ihigh</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name>ilow</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>g722_encode_no_trellis</name><parameter_list>(<parameter><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>encode_byte</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst</name><operator>++</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>g722_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>G722Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>, <decl><type ref="prev"/><name>out_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out_size</name> <operator>=</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g722_encode_trellis</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>trellis</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>g722_encode_no_trellis</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>last_samples</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>samples</name><index>[<expr><name>nb_samples</name></expr>]</index></name></expr>, <expr><name><name>samples</name><index>[<expr><name>nb_samples</name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>encode_byte</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>nb_samples</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>last_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_adpcm_g722_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"g722"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"G.722 ADPCM"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ADPCM_G722</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>G722Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>g722_encode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>g722_encode_close</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>g722_encode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>, <expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
