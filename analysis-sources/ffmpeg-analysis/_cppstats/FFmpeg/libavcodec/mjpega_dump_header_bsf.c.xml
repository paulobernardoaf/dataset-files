<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mjpega_dump_header_bsf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mjpega_dump_header</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>dqt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dht</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sof0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_bsf_get_packet</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_packet_copy_props</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name>SOI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name>APP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><literal type="string">"mjpg"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DQT</name></expr>:</case> <expr_stmt><expr><name>dqt</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">46</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>DHT</name></expr>:</case> <expr_stmt><expr><name>dht</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">46</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SOF0</name></expr>:</case> <expr_stmt><expr><name>sof0</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">46</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>SOS</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name>dqt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name>dht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name>sof0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">46</literal> <operator>+</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>out_buf</name> <operator>-</operator> <name><name>out</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>APP1</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"mjpg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bitstream already formatted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find SOS marker in bitstream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>codec_ids</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_CODEC_ID_MJPEG</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_mjpega_dump_header_bsf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mjpegadump"</literal></expr>,

<expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>mjpega_dump_header</name></expr>,

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>codec_ids</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
