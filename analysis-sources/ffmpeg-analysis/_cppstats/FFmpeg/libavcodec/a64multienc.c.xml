<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\a64multienc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"a64colors.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"a64tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"elbg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DITHERSTEPS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHARSET_CHARS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLACED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROP_SCREENS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C64XRES</name></cpp:macro> <cpp:value>320</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C64YRES</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>A64Context</name> <block>{

<decl_stmt><decl><type><name>AVLFG</name></type> <name>randctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mc_lifetime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mc_use_5col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mc_frame_counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>mc_meta_charset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>mc_charmap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>mc_best_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mc_luma_vals</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mc_charset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mc_colram</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mc_palette</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mc_pal_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>A64Context</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mc_colors</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0x0</literal></expr>,<expr><literal type="number">0xb</literal></expr>,<expr><literal type="number">0xc</literal></expr>,<expr><literal type="number">0xf</literal></expr>,<expr><literal type="number">0x1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>to_meta_with_crop</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blockx</name></decl>, <decl><type ref="prev"/><name>blocky</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>luma</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>C64YRES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument> , <argument><expr><name>C64XRES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blocky</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blocky</name> <operator>&lt;</operator> <name>C64YRES</name></expr>;</condition> <incr><expr><name>blocky</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>blockx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blockx</name> <operator>&lt;</operator> <name>C64XRES</name></expr>;</condition> <incr><expr><name>blockx</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>blocky</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>blocky</name> <operator>+</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>C64YRES</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>blockx</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>blockx</name> <operator>+</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>C64XRES</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>width</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>luma</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>]</index></name> <operator>+</operator>

<name><name>src</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>luma</name> <operator>=</operator> <name><name>src</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>luma</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_charset</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>charset</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>colrammap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>A64Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>row1</name></decl>, <decl><type ref="prev"/><name>row2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charpos</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lowdiff</name></decl>, <decl><type ref="prev"/><name>highdiff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>best_cb</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mc_best_cb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>index1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>index2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>dither</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>distance</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>a</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_pal_size</name></name> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>distance</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <name>distance</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dither</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>*</operator> <operator>(</operator><name>DITHERSTEPS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>distance</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_pal_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dither</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>index1</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>index2</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>mc_pal_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>charpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>charpos</name> <operator>&lt;</operator> <name>CHARSET_CHARS</name></expr>;</condition> <incr><expr><name>charpos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lowdiff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>highdiff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>row1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>row2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pix</name> <operator>=</operator> <name><name>best_cb</name><index>[<expr><name>y</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index1</name><index>[<expr><name>pix</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>highdiff</name> <operator>+=</operator> <name>pix</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>index1</name><index>[<expr><name>pix</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lowdiff</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>pix</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>row1</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>INTERLACED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>row2</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interlaced_dither_patterns</name><index>[<expr><name><name>dither</name><index>[<expr><name>pix</name></expr>]</index></name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>row1</name> <operator>|=</operator> <literal type="number">3</literal><operator>-</operator><operator>(</operator><name><name>index2</name><index>[<expr><name>pix</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>row1</name> <operator>|=</operator> <literal type="number">3</literal><operator>-</operator><operator>(</operator><name><name>index1</name><index>[<expr><name>pix</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>interlaced_dither_patterns</name><index>[<expr><name><name>dither</name><index>[<expr><name>pix</name></expr>]</index></name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>row2</name> <operator>|=</operator> <literal type="number">3</literal><operator>-</operator><operator>(</operator><name><name>index2</name><index>[<expr><name>pix</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>row2</name> <operator>|=</operator> <literal type="number">3</literal><operator>-</operator><operator>(</operator><name><name>index1</name><index>[<expr><name>pix</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>multi_dither_patterns</name><index>[<expr><name><name>dither</name><index>[<expr><name>pix</name></expr>]</index></name></expr>]</index><index>[<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index><index>[<expr><name>x</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>row1</name> <operator>|=</operator> <literal type="number">3</literal><operator>-</operator><operator>(</operator><name><name>index2</name><index>[<expr><name>pix</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>row1</name> <operator>|=</operator> <literal type="number">3</literal><operator>-</operator><operator>(</operator><name><name>index1</name><index>[<expr><name>pix</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>charset</name><index>[<expr><name>y</name><operator>+</operator><literal type="number">0x000</literal></expr>]</index></name> <operator>=</operator> <name>row1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>INTERLACED</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>charset</name><index>[<expr><name>y</name><operator>+</operator><literal type="number">0x800</literal></expr>]</index></name> <operator>=</operator> <name>row2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>highdiff</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lowdiff</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_use_5col</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lowdiff</name> <operator>&gt;</operator> <name>highdiff</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>best_cb</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>best_cb</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>best_cb</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>best_cb</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>charpos</name><operator>--</operator></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>best_cb</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>charset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colrammap</name><index>[<expr><name>charpos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>highdiff</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>a64multi_close_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>A64Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mc_meta_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mc_best_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mc_charset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mc_charmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mc_colram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>a64multi_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>A64Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>/=</operator> <name>FF_QP2LAMBDA</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"charset lifetime set to %d frame(s)\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_use_5col</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>AV_CODEC_ID_A64_MULTI5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_pal_size</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_use_5col</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_pal_size</name></name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_luma_vals</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>a64_palette</name><index>[<expr><name><name>mc_colors</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.30</literal> <operator>+</operator>

<name><name>a64_palette</name><index>[<expr><name><name>mc_colors</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.59</literal> <operator>+</operator>

<name><name>a64_palette</name><index>[<expr><name><name>mc_colors</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.11</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mc_meta_charset</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr></argument>, <argument><expr><literal type="number">32000</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mc_best_cb</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>CHARSET_CHARS</name> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mc_charmap</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mc_colram</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>CHARSET_CHARS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>mc_charset</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><literal type="number">0x800</literal> <operator>*</operator> <operator>(</operator><name>INTERLACED</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate buffer memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory for extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>INTERLACED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><literal type="string">"a64m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>a64_compress_colram</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>charmap</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>colram</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>temp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>colram</name><index>[<expr><name><name>charmap</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">0x000</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>|=</operator> <name><name>colram</name><index>[<expr><name><name>charmap</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">0x100</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name> <operator>|=</operator> <name><name>colram</name><index>[<expr><name><name>charmap</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">0x200</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0xe8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>temp</name> <operator>|=</operator> <name><name>colram</name><index>[<expr><name><name>charmap</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">0x300</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>a64multi_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>A64Context</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>req_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>charmap</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mc_charmap</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>colram</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mc_colram</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mc_charset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mc_meta_charset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>best_cb</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mc_best_cb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>charset_size</name> <init>= <expr><literal type="number">0x800</literal> <operator>*</operator> <operator>(</operator><name>INTERLACED</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colram_size</name> <init>= <expr><literal type="number">0x100</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_use_5col</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>screen_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>CROP_SCREENS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>,<argument><expr><name>C64YRES</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b_width</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument> ,<argument><expr><name>C64XRES</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_size</name> <operator>=</operator> <name>b_width</name> <operator>*</operator> <name>b_height</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>b_height</name> <operator>=</operator> <name>C64YRES</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b_width</name> <operator>=</operator> <name>C64XRES</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>screen_size</name> <operator>=</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>to_meta_with_crop</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>meta</name> <operator>+</operator> <literal type="number">32000</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>==</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>req_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>alloc_size</name> <init>= <expr><name>charset_size</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name><operator>*</operator><operator>(</operator><name>screen_size</name> <operator>+</operator> <name>colram_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>alloc_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_init_elbg</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr></argument>, <argument><expr><name>best_cb</name></expr></argument>,

<argument><expr><name>CHARSET_CHARS</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>charmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avpriv_do_elbg</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr></argument>, <argument><expr><name>best_cb</name></expr></argument>,

<argument><expr><name>CHARSET_CHARS</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name>charmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>randctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>render_charset</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>, <argument><expr><name>colram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>, <argument><expr><name>charset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>charset_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>req_size</name> <operator>+=</operator> <name>charset_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>frame</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>mc_lifetime</name></name></expr>;</condition> <incr><expr><name>frame</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>b_width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>y</name> <operator>*</operator> <name>b_width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name><name>charmap</name><index>[<expr><name>y</name> <operator>*</operator> <name>b_width</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>screen_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>req_size</name> <operator>+=</operator> <name>screen_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>mc_use_5col</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>a64_compress_colram</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>charmap</name></expr></argument>, <argument><expr><name>colram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>colram_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>req_size</name> <operator>+=</operator> <name>colram_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>charmap</name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>charset_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>screen_size</name> <operator>+</operator> <name>colram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mc_frame_counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>next_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name>AV_NOPTS_VALUE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>req_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>req_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>req_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_A64MULTI_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_a64multi_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"a64multi"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Multicolor charset for Commodore 64"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_A64_MULTI</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>A64Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>a64multi_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>a64multi_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>a64multi_close_encoder</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_A64MULTI5_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_a64multi5_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"a64multi5"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Multicolor charset for Commodore 64, extended with 5th color (colram)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_A64_MULTI5</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>A64Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>a64multi_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>a64multi_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>a64multi_close_encoder</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{<expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>}</block></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
