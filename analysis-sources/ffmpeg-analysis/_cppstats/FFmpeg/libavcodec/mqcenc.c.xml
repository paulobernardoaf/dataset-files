<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mqcenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mqc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>byteout</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<label><name>retry</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&amp;=</operator> <literal type="number">0xfffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&amp;</operator> <literal type="number">0x8000000</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&amp;=</operator> <literal type="number">0x7ffffff</literal></expr>;</expr_stmt>

<goto>goto <name>retry</name>;</goto>

</block_content>}</block></if> <else>else<block>{<block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;&gt;</operator> <literal type="number">19</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&amp;=</operator> <literal type="number">0x7ffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>renorme</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<do>do<block>{<block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>+=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name><name>mqc</name><operator>-&gt;</operator><name>ct</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>byteout</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setbits</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <name><name>mqc</name><operator>-&gt;</operator><name>a</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>|=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&gt;=</operator> <name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>-=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mqc_initenc</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_mqc_init_contexts</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>bpstart</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>ct</name></name> <operator>=</operator> <literal type="number">12</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>==</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mqc_encode</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cxstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qe</name> <operator>=</operator> <name><name>ff_mqc_qe</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>-=</operator> <name>qe</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>cxstate</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>d</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>&lt;</operator> <name>qe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>qe</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>qe</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cxstate</name> <operator>=</operator> <name><name>ff_mqc_nmps</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>renorme</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>qe</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>&lt;</operator> <name>qe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>qe</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>qe</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cxstate</name> <operator>=</operator> <name><name>ff_mqc_nlps</name><index>[<expr><operator>*</operator><name>cxstate</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>renorme</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mqc_length</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>-</operator> <name><name>mqc</name><operator>-&gt;</operator><name>bpstart</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mqc_flush</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>setbits</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;&lt;</operator> <name><name>mqc</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>byteout</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>mqc</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;&lt;</operator> <name><name>mqc</name><operator>-&gt;</operator><name>ct</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>byteout</name><argument_list>(<argument><expr><name>mqc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>-</operator> <name><name>mqc</name><operator>-&gt;</operator><name>bpstart</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mqc_flush_to</name><parameter_list>(<parameter><decl><type><name>MqcState</name> <modifier>*</modifier></type><name>mqc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MqcState</name></type> <name>mqc2</name> <init>= <expr><operator>*</operator><name>mqc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mqc2</name><operator>.</operator><name>bpstart</name></name><operator>=</operator>

<name><name>mqc2</name><operator>.</operator><name>bp</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>mqc2</name><operator>.</operator><name>bp</name></name> <operator>=</operator> <operator>*</operator><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mqc_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mqc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_len</name> <operator>=</operator> <name><name>mqc2</name><operator>.</operator><name>bp</name></name> <operator>-</operator> <name>dst</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>&lt;</operator> <name><name>mqc</name><operator>-&gt;</operator><name>bpstart</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>mqc</name><operator>-&gt;</operator><name>bpstart</name></name> <operator>-</operator> <name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>*</operator><name>dst_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>dst_len</name><operator>)</operator> <operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>-</operator> <name><name>mqc</name><operator>-&gt;</operator><name>bpstart</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>dst_len</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>mqc</name><operator>-&gt;</operator><name>bp</name></name> <operator>-</operator> <name><name>mqc</name><operator>-&gt;</operator><name>bpstart</name></name> <operator>+</operator> <operator>*</operator><name>dst_len</name></expr>;</return>

</block_content>}</block></function>

</unit>
