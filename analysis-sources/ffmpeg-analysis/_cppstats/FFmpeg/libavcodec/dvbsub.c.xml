<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dvbsub.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/colorspace.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DVBSubtitleContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>object_version</name></decl>;</decl_stmt>

}</block></struct></type> <name>DVBSubtitleContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTBITS2</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{bitbuf |= (val) &lt;&lt; bitcnt;bitcnt -= 2;if (bitcnt &lt; 0) {bitcnt = 6;*q++ = bitbuf;bitbuf = 0;}}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvb_encode_rle2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pq</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bitbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitcnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>*</operator><name>pq</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitbuf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitcnt</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>x1</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x1</name> <operator>&lt;</operator> <name>w</name> <operator>&amp;&amp;</operator> <name><name>bitmap</name><index>[<expr><name>x1</name></expr>]</index></name> <operator>==</operator> <name>color</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">27</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">29</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">284</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">284</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitcnt</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>bitbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pq</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUTBITS4</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{bitbuf |= (val) &lt;&lt; bitcnt;bitcnt -= 4;if (bitcnt &lt; 0) {bitcnt = 4;*q++ = bitbuf;bitbuf = 0;}}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvb_encode_rle4</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pq</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bitbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitcnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>*</operator><name>pq</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitbuf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitcnt</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>x1</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x1</name> <operator>&lt;</operator> <name>w</name> <operator>&amp;&amp;</operator> <name><name>bitmap</name><index>[<expr><name>x1</name></expr>]</index></name> <operator>==</operator> <name>color</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0xd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0xe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">25</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">280</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">280</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0xc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PUTBITS4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitcnt</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>bitbuf</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pq</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dvb_encode_rle8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pq</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>color</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>*</operator><name>pq</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>bitmap</name><index>[<expr><name>x1</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>x1</name> <operator>&lt;</operator> <name>w</name> <operator>&amp;&amp;</operator> <name><name>bitmap</name><index>[<expr><name>x1</name></expr>]</index></name> <operator>==</operator> <name>color</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>color</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal><operator>+</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitmap</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pq</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_dvb_subtitles</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVSubtitle</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVBSubtitleContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pseg_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>page_id</name></decl>, <decl><type ref="prev"/><name>region_id</name></decl>, <decl><type ref="prev"/><name>clut_id</name></decl>, <decl><type ref="prev"/><name>object_id</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>bpp_index</name></decl>, <decl><type ref="prev"/><name>page_state</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>outbuf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>page_id</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>rects</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x14</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>page_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pseg_len</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pseg_len</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>pseg_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>page_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pseg_len</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>page_state</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>object_version</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>page_state</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>region_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>region_id</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>region_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>region_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>region_id</name></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>region_id</name></expr>]</index></name><operator>-&gt;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pseg_len</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>pseg_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>clut_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>clut_id</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>clut_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>clut_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bpp_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>clut_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bpp_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>clut_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bpp_index</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x12</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>page_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pseg_len</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>clut_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xf</literal></expr>;</expr_stmt> 

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>clut_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>bpp_index</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0xf</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name><init>= <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>clut_id</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <call><name>RGB_TO_Y_CCIR</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <call><name>RGB_TO_V_CCIR</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <call><name>RGB_TO_U_CCIR</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pseg_len</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>pseg_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>region_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>region_id</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>region_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>region_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bpp_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>region_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bpp_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>region_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bpp_index</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x11</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>page_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pseg_len</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>region_id</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>object_version</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>region_id</name></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>region_id</name></expr>]</index></name><operator>-&gt;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>bpp_index</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>bpp_index</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <name>region_id</name></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>region_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pseg_len</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>pseg_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>object_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>object_id</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>object_id</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>dvb_encode_rle</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pq</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dvb_encode_rle</name> <operator>=</operator> <name>dvb_encode_rle2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dvb_encode_rle</name> <operator>=</operator> <name>dvb_encode_rle4</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>nb_colors</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dvb_encode_rle</name> <operator>=</operator> <name>dvb_encode_rle8</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x13</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>page_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pseg_len</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>object_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>object_version</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptop_field_len</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pbottom_field_len</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bottom_ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptop_field_len</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pbottom_field_len</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>top_ptr</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvb_encode_rle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom_ptr</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvb_encode_rle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>w</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>w</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>object_id</name></expr>]</index></name><operator>-&gt;</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptop_field_len</name></expr></argument>, <argument><expr><name>bottom_ptr</name> <operator>-</operator> <name>top_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbottom_field_len</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>bottom_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pseg_len</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>pseg_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>page_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pseg_len</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pseg_len</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>pseg_len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>object_version</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>object_version</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<return>return <expr><name>q</name> <operator>-</operator> <name>outbuf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dvbsub_encode</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>encode_dvb_subtitles</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_dvbsub_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"dvbsub"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"DVB subtitles"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_DVB_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DVBSubtitleContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>encode_sub</name> <operator>=</operator> <name>dvbsub_encode</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
