<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegaudio_tablegen.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLE_4_3_SIZE</name></cpp:macro> <cpp:value>(8191 + 16)*4</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HARDCODED_TABLES</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpegaudio_tableinit</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpegaudio_tables.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>int8_t</name></type> <name><name>table_4_3_exp</name><index>[<expr><name>TABLE_4_3_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>table_4_3_value</name><index>[<expr><name>TABLE_4_3_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>exp_table_fixed</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>expval_table_fixed</name><index>[<expr><literal type="number">512</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>exp_table_float</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>expval_table_float</name><index>[<expr><literal type="number">512</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAC_BITS</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMDCT_SCALAR</name></cpp:macro> <cpp:value>1.759</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>mpegaudio_tableinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>exponent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>exp2_lut</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.00000000000000000000</literal></expr>, 

<expr><literal type="number">1.18920711500272106672</literal></expr>, 

<expr><name>M_SQRT2</name></expr> , 

<expr><literal type="number">1.68179283050742908606</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name><name>pow43_lut</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>exp2_base</name> <init>= <expr><literal type="number">2.11758236813575084767080625169910490512847900390625e-22</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>exp2_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>pow43_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pow43_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <call><name>cbrt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TABLE_4_3_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>fm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><name>i</name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pow43_val</name> <operator>=</operator> <name>value</name> <operator>/</operator> <name>IMDCT_SCALAR</name> <operator>*</operator> <call><name>cbrt</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name>pow43_val</name> <operator>*</operator> <name><name>exp2_lut</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>fm</name> <operator>=</operator> <call><name>frexp</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>llrint</name><argument_list>(<argument><expr><name>fm</name> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>+=</operator> <name>FRAC_BITS</name> <operator>-</operator> <literal type="number">31</literal> <operator>+</operator> <literal type="number">5</literal> <operator>-</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table_4_3_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>table_4_3_exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>exponent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>exponent</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>;</condition> <incr><expr><name>exponent</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exponent</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>exponent</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>exp2_base</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exp2_val</name> <operator>=</operator> <name>exp2_base</name> <operator>*</operator> <name><name>exp2_lut</name><index>[<expr><name>exponent</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>/</operator> <name>IMDCT_SCALAR</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>value</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>value</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><name><name>pow43_lut</name><index>[<expr><name>value</name></expr>]</index></name> <operator>*</operator> <name>exp2_val</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>expval_table_fixed</name><index>[<expr><name>exponent</name></expr>]</index><index>[<expr><name>value</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>f</name> <operator>&lt;</operator> <literal type="number">0xFFFFFFFF</literal></expr> ?</condition><then> <expr><call><name>llrint</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0xFFFFFFFF</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>expval_table_float</name><index>[<expr><name>exponent</name></expr>]</index><index>[<expr><name>value</name></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>exp_table_fixed</name><index>[<expr><name>exponent</name></expr>]</index></name> <operator>=</operator> <name><name>expval_table_fixed</name><index>[<expr><name>exponent</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>exp_table_float</name><index>[<expr><name>exponent</name></expr>]</index></name> <operator>=</operator> <name><name>expval_table_float</name><index>[<expr><name>exponent</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
