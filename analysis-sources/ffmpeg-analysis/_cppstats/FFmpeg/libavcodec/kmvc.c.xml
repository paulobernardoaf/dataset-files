<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\kmvc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KMVC_KEYFRAME</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KMVC_PALETTE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KMVC_METHOD</name></cpp:macro> <cpp:value>0x0F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PALSIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>KmvcContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>setpal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>palsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal</name><index>[<expr><name>MAX_PALSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name></decl>, <modifier>*</modifier><name>prev</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>frm0</name><index>[<expr><literal type="number">320</literal> <operator>*</operator> <literal type="number">200</literal></expr>]</index></name></decl>, <name><name>frm1</name><index>[<expr><literal type="number">320</literal> <operator>*</operator> <literal type="number">200</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>g</name></decl>;</decl_stmt>

}</block></struct></type> <name>KmvcContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BitBuf</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitbuf</name></decl>;</decl_stmt>

}</block></struct></type> <name>BitBuf</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLK</name><parameter_list>(<parameter><type><name>data</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>data[av_clip((x) + (y) * 320, 0, 320 * 200 -1)]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmvc_init_getbits</name><parameter_list>(<parameter><type><name>bb</name></type></parameter>, <parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bb.bits = 7; bb.bitbuf = bytestream2_get_byte(g);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmvc_getbit</name><parameter_list>(<parameter><type><name>bb</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>res</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{res = 0; if (bb.bitbuf &amp; (1 &lt;&lt; bb.bits)) res = 1; bb.bits--; if(bb.bits == -1) { bb.bitbuf = bytestream2_get_byte(g); bb.bits = 7; } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>kmvc_decode_intra_8x8</name><parameter_list>(<parameter><decl><type><name>KmvcContext</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BitBuf</name></type> <name>bb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l0x</name></decl>, <decl><type ref="prev"/><name>l1x</name></decl>, <decl><type ref="prev"/><name>l0y</name></decl>, <decl><type ref="prev"/><name>l1y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kmvc_init_getbits</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>by</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>bx</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Data overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>bx</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>l0x</name> <operator>=</operator> <name>bx</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l0y</name> <operator>=</operator> <name>by</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l0x</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>l0y</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l0x</name><operator>-</operator><name>mx</name><operator>)</operator> <operator>+</operator> <literal type="number">320</literal><operator>*</operator><operator>(</operator><name>l0y</name><operator>-</operator><name>my</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>l0x</name><operator>-</operator><name>mx</name><operator>)</operator> <operator>+</operator> <literal type="number">320</literal><operator>*</operator><operator>(</operator><name>l0y</name><operator>-</operator><name>my</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">320</literal><operator>*</operator><literal type="number">197</literal> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid MV\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l0x</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>l0y</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l0x</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <name>mx</name></expr></argument>, <argument><expr><name>l0y</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>l1x</name> <operator>=</operator> <name>l0x</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l1y</name> <operator>=</operator> <name>l0y</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l1x</name><operator>-</operator><name>mx</name><operator>)</operator> <operator>+</operator> <literal type="number">320</literal><operator>*</operator><operator>(</operator><name>l1y</name><operator>-</operator><name>my</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>l1x</name><operator>-</operator><name>mx</name><operator>)</operator> <operator>+</operator> <literal type="number">320</literal><operator>*</operator><operator>(</operator><name>l1y</name><operator>-</operator><name>my</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">320</literal><operator>*</operator><literal type="number">199</literal> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid MV\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>-</operator> <name>mx</name></expr></argument>, <argument><expr><name>l1y</name> <operator>-</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>mx</name></expr></argument>, <argument><expr><name>l1y</name> <operator>-</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>-</operator> <name>mx</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>mx</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>kmvc_decode_inter_8x8</name><parameter_list>(<parameter><decl><type><name>KmvcContext</name> <modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BitBuf</name></type> <name>bb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l0x</name></decl>, <decl><type ref="prev"/><name>l1x</name></decl>, <decl><type ref="prev"/><name>l0y</name></decl>, <decl><type ref="prev"/><name>l1y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>kmvc_init_getbits</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>by</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>bx</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Data overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>bx</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>bx</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>bx</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr></argument>, <argument><expr><name>by</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Data overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>l0x</name> <operator>=</operator> <name>bx</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l0y</name> <operator>=</operator> <name>by</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l0x</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>l0y</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l0x</name><operator>+</operator><name>mx</name><operator>)</operator> <operator>+</operator> <literal type="number">320</literal><operator>*</operator><operator>(</operator><name>l0y</name><operator>+</operator><name>my</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>l0x</name><operator>+</operator><name>mx</name><operator>)</operator> <operator>+</operator> <literal type="number">320</literal><operator>*</operator><operator>(</operator><name>l0y</name><operator>+</operator><name>my</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">320</literal><operator>*</operator><literal type="number">197</literal> <operator>-</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid MV\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l0x</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>l0y</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>l0x</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>mx</name></expr></argument>, <argument><expr><name>l0y</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>l1x</name> <operator>=</operator> <name>l0x</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l1y</name> <operator>=</operator> <name>l0y</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>kmvc_getbit</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l1x</name><operator>+</operator><name>mx</name><operator>)</operator> <operator>+</operator> <literal type="number">320</literal><operator>*</operator><operator>(</operator><name>l1y</name><operator>+</operator><name>my</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>l1x</name><operator>+</operator><name>mx</name><operator>)</operator> <operator>+</operator> <literal type="number">320</literal><operator>*</operator><operator>(</operator><name>l1y</name><operator>+</operator><name>my</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">320</literal><operator>*</operator><literal type="number">199</literal> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid MV\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <name>mx</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>mx</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <name>mx</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator>

<call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>mx</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BLK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name>l1x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l1y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>KmvcContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pal_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PALETTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pal_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">127</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>header</name> <operator>&amp;</operator> <literal type="number">0x81</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <call><name>bytestream2_get_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">127</literal> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header</name> <operator>&amp;</operator> <name>KMVC_KEYFRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header</name> <operator>&amp;</operator> <name>KMVC_PALETTE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>palsize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <call><name>bytestream2_get_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pal</name> <operator>&amp;&amp;</operator> <name>pal_size</name> <operator>==</operator> <name>AVPALETTE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Palette size %d is wrong\n"</literal></expr></argument>, <argument><expr><name>pal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>setpal</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>setpal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blocksize</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>blocksize</name> <operator>!=</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Block size = %i\n"</literal></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">320</literal> <operator>*</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>header</name> <operator>&amp;</operator> <name>KMVC_METHOD</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><literal type="number">320</literal> <operator>*</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>kmvc_decode_intra_8x8</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>kmvc_decode_inter_8x8</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown compression method %i\n"</literal></expr></argument>, <argument><expr><name>header</name> <operator>&amp;</operator> <name>KMVC_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">320</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frm0</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frm1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frm0</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frm0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>frm1</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>KmvcContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">320</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">200</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"KMVC supports frames &lt;= 320x200\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frm0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>frm1</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFU</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name>i</name> <operator>*</operator> <literal type="number">0x10101</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Extradata missing, decoding may not work properly...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>palsize</name></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>palsize</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>palsize</name></name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>MAX_PALSIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>palsize</name></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"KMVC palette too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>==</operator> <literal type="number">1036</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>setpal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_kmvc_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"kmvc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Karl Morton's video codec"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_KMVC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>KmvcContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
