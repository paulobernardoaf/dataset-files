<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\metasound.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"twinvq.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"metasound_data.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_peak</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>shape</name></decl></parameter>,

<parameter><decl><type><name>float</name></type> <name>ppc_gain</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>speech</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>center</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>shape_end</name> <init>= <expr><name>shape</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>speech</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>ppc_gain</name> <operator>*</operator> <operator>*</operator><name>shape</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ROUNDED_DIV</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>center</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <name>period</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>speech</name><index>[<expr><name>j</name> <operator>+</operator> <name>center</name></expr>]</index></name> <operator>+=</operator> <name>ppc_gain</name> <operator>*</operator> <operator>*</operator><name>shape</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>center</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <name>period</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>shape</name> <operator>&lt;</operator> <name>shape_end</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>speech</name><index>[<expr><name>j</name> <operator>+</operator> <name>center</name></expr>]</index></name> <operator>+=</operator> <name>ppc_gain</name> <operator>*</operator> <operator>*</operator><name>shape</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_ppc</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>period_coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g_coef</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>shape</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>speech</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isampf</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ibps</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>ratio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>isampf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>min_period</name></decl>, <decl><type ref="prev"/><name>max_period</name></decl>, <decl><type ref="prev"/><name>period_range</name></decl>, <decl><type ref="prev"/><name>period</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>some_mult</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>pgain_base</name></decl>, <decl><type ref="prev"/><name>pgain_step</name></decl>, <decl><type ref="prev"/><name>ppc_gain</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min_period</name> <operator>=</operator> <call><name>log2</name><argument_list>(<argument><expr><name>ratio</name> <operator>*</operator> <literal type="number">0.2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_period</name> <operator>=</operator> <name>min_period</name> <operator>+</operator> <call><name>log2</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>min_period</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ratio</name> <operator>*</operator> <literal type="number">0.2</literal> <operator>*</operator> <literal type="number">400</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">400.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_period</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>ratio</name> <operator>*</operator> <literal type="number">0.2</literal> <operator>*</operator> <literal type="number">400</literal> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">400.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>period_range</name> <operator>=</operator> <name>max_period</name> <operator>-</operator> <name>min_period</name></expr>;</expr_stmt>

<expr_stmt><expr><name>period</name> <operator>=</operator> <name>min_period</name> <operator>+</operator> <name>period_coef</name> <operator>*</operator> <name>period_range</name> <operator>/</operator>

<operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_period_bit</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>period</name> <operator>=</operator> <call><name>powf</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>period</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>period</name> <operator>*</operator> <literal type="number">400</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">400.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>isampf</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>some_mult</name> <operator>=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">11</literal></expr>:</case> <expr_stmt><expr><name>some_mult</name> <operator>=</operator> <literal type="number">3.0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case> <expr_stmt><expr><name>some_mult</name> <operator>=</operator> <literal type="number">3.0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">22</literal></expr>:</case> <expr_stmt><expr><name>some_mult</name> <operator>=</operator> <ternary><condition><expr><name>ibps</name> <operator>==</operator> <literal type="number">32</literal></expr> ?</condition><then> <expr><literal type="number">2.0</literal></expr> </then><else>: <expr><literal type="number">4.0</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">44</literal></expr>:</case> <expr_stmt><expr><name>some_mult</name> <operator>=</operator> <literal type="number">8.0</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name>some_mult</name> <operator>=</operator> <literal type="number">4.0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>some_mult</name> <operator>/</operator> <operator>(</operator><name><name>mtab</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>period</name><operator>)</operator> <operator>*</operator> <name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_len</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>isampf</name> <operator>==</operator> <literal type="number">22</literal> <operator>&amp;&amp;</operator> <name>ibps</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">2.0</literal> <operator>/</operator> <name>period</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pgain_base</name> <operator>=</operator> <ternary><condition><expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">25000.0</literal></expr> </then><else>: <expr><literal type="number">20000.0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>pgain_step</name> <operator>=</operator> <name>pgain_base</name> <operator>/</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>pgain_bit</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ppc_gain</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">8192</literal> <operator>*</operator>

<call><name>twinvq_mulawinv</name><argument_list>(<argument><expr><name>pgain_step</name> <operator>*</operator> <name>g_coef</name> <operator>+</operator> <name>pgain_step</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name>pgain_base</name></expr></argument>, <argument><expr><name>TWINVQ_PGAIN_MU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_peak</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>ppc_gain</name></expr></argument>, <argument><expr><name>speech</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>ppc_shape_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dec_bark_env</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_hist</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gain</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>hist</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>bark_hist</name><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name><name>float</name> <index>[]</index></name><operator>)</operator> <block>{ <expr><literal type="number">0.4</literal></expr>, <expr><literal type="number">0.35</literal></expr>, <expr><literal type="number">0.28</literal></expr> }</block><operator>)</operator><index>[<expr><name>ftype</name></expr>]</index></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bark_n_coef</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>bark_n_coef</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fw_cb_len</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name>bark_env_size</name> <operator>/</operator> <name>bark_n_coef</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fw_cb_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bark_n_coef</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tmp2</name> <init>= <expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name><name>bark_cb</name><index>[<expr><name>fw_cb_len</name> <operator>*</operator> <name><name>in</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>*</operator>

<operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2048</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <ternary><condition><expr><name>use_hist</name></expr> ?</condition><then>

<expr><name>tmp2</name> <operator>+</operator> <name>val</name> <operator>*</operator> <name><name>hist</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.0</literal></expr> </then><else>: <expr><name>tmp2</name> <operator>+</operator> <literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <ternary><condition><expr><name>use_hist</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>val</name><operator>)</operator> <operator>*</operator> <name>tmp2</name> <operator>+</operator> <name>val</name> <operator>*</operator> <name><name>hist</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1.0</literal></expr>

</then><else>: <expr><name>tmp2</name> <operator>+</operator> <literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>hist</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>tmp2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name> <operator>&lt;</operator> <literal type="number">0.1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <literal type="number">0.1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>twinvq_memset_float</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>st</name> <operator>*</operator> <name>gain</name></expr></argument>,

<argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name><name>bark_tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>.</operator><name><name>bark_tab</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_cb_data</name><parameter_list>(<parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TwinVQFrameType</name></name></type> <name>ftype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>n_div</name><index>[<expr><name>ftype</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bs_second_part</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec_change</name><index>[<expr><name>ftype</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>bs_second_part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>tctx</name><operator>-&gt;</operator><name>bits_main_spec</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ftype</name></expr>]</index><index>[<expr><name>bs_second_part</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>metasound_read_bitstream</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TwinVQFrameData</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>TwinVQModeTab</name> <modifier>*</modifier></type><name>mtab</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>tctx</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name> <operator>&lt;</operator> <name><name>tctx</name><operator>-&gt;</operator><name>frames_per_packet</name></name></expr>;</condition>

<incr><expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>tctx</name><operator>-&gt;</operator><name>bits</name></name> <operator>+</operator> <name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>window_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>TWINVQ_WINDOW_TYPE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><operator>-&gt;</operator><name>window_type</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid window type, broken sample?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name> <operator>=</operator> <name><name>ff_twinvq_wtype_to_ftype_table</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><name><name>tctx</name><operator>-&gt;</operator><name>cur_frame</name></name></expr>]</index></name><operator>.</operator><name>window_type</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name></expr>]</index></name><operator>.</operator><name>sub</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name> <operator>!=</operator> <name>TWINVQ_FT_SHORT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tctx</name><operator>-&gt;</operator><name>is_6kbps</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>read_cb_data</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>main_coeffs</name></name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name></expr>]</index></name><operator>.</operator><name>bark_n_coef</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>bark1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>fmode</name><index>[<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name></expr>]</index></name><operator>.</operator><name>bark_n_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>bark_use_hist</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name> <operator>==</operator> <name>TWINVQ_FT_LONG</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>gain_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>TWINVQ_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>gain_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>TWINVQ_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sub</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>sub_gain_bits</name><index>[<expr><name>i</name> <operator>*</operator> <name>sub</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>TWINVQ_SUB_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_hist_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_idx1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>mtab</name><operator>-&gt;</operator><name>lsp_split</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>lpc_idx2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>lsp_bit2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><operator>-&gt;</operator><name>ftype</name></name> <operator>==</operator> <name>TWINVQ_FT_LONG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>read_cb_data</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>bits</name><operator>-&gt;</operator><name>ppc_coeffs</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>p_coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>ppc_period_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><operator>-&gt;</operator><name>g_coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>mtab</name><operator>-&gt;</operator><name>pgain_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>MetasoundProps</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt>

}</block></struct></type> <name>MetasoundProps</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MetasoundProps</name></type> <name><name>codec_props</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8000</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8000</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8000</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'j'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11025</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'k'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16000</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">22050</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'q'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">44100</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">44100</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">44100</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8000</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11025</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16000</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">22050</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">44100</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'y'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">44100</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>MKTAG</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'O'</literal></expr></argument>,<argument><expr><literal type="char">'X'</literal></expr></argument>,<argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">44100</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>metasound_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>isampf</name></decl>, <decl><type ref="prev"/><name>ibps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TwinVQContext</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MetasoundProps</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>codec_props</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing or incomplete extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>props</name><operator>-&gt;</operator><name>tag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not find tag %08"</literal><name>PRIX32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>props</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <name>tag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>props</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>isampf</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>props</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <name>TWINVQ_CHANNELS_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported number of channels: %i\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_MONO</name></expr>

</then><else>: <expr><name>AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ibps</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>isampf</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>ibps</name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode0806</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">6</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode0806s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode0808</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode0808s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">11</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode1110</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">11</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode1110s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode1616</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode1616s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">22</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode2224</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">22</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode2224s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">44</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode4432</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">44</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode4432s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">44</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">40</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode4440</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">44</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">40</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode4440s</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">44</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">48</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode4448</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">44</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">48</literal></expr>:</case>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>mtab</name></name> <operator>=</operator> <operator>&amp;</operator><name>ff_metasound_mode4448s</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"This version does not support %d kHz - %d kbit/s/ch mode.\n"</literal></expr></argument>,

<argument><expr><name>isampf</name></expr></argument>, <argument><expr><name>ibps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>TWINVQ_CODEC_METASOUND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>read_bitstream</name></name> <operator>=</operator> <name>metasound_read_bitstream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>dec_bark_env</name></name> <operator>=</operator> <name>dec_bark_env</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>decode_ppc</name></name> <operator>=</operator> <name>decode_ppc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <name><name>tctx</name><operator>-&gt;</operator><name>mtab</name><operator>-&gt;</operator><name>size</name></name>

<operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tctx</name><operator>-&gt;</operator><name>is_6kbps</name></name> <operator>=</operator> <name>ibps</name> <operator>==</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<return>return <expr><call><name>ff_twinvq_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_metasound_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"metasound"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Voxware MetaSound"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_METASOUND</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TwinVQContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>metasound_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_twinvq_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_twinvq_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
