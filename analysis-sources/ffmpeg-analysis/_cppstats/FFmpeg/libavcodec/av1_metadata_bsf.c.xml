<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\av1_metadata_bsf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bsf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_av1.h"</cpp:file></cpp:include>

<enum>enum <block>{

<decl><name>PASS</name></decl>,

<decl><name>INSERT</name></decl>,

<decl><name>REMOVE</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>AV1MetadataContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>access_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>td</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>transfer_characteristics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matrix_coefficients</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>color_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_sample_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tick_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_ticks_per_picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delete_padding</name></decl>;</decl_stmt>

}</block></struct></type> <name>AV1MetadataContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av1_metadata_update_sequence_header</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>,

<parameter><decl><type><name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawColorConfig</name> <modifier>*</modifier></type><name>clc</name> <init>= <expr><operator>&amp;</operator><name><name>seq</name><operator>-&gt;</operator><name>color_config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawTimingInfo</name> <modifier>*</modifier></type><name>tim</name> <init>= <expr><operator>&amp;</operator><name><name>seq</name><operator>-&gt;</operator><name>timing_info</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>clc</name><operator>-&gt;</operator><name>color_description_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clc</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clc</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>transfer_characteristics</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>clc</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>matrix_coefficients</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>clc</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>==</operator> <name>AVCOL_PRI_BT709</name> <operator>&amp;&amp;</operator>

<name><name>clc</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>==</operator> <name>AVCOL_TRC_IEC61966_2_1</name> <operator>&amp;&amp;</operator>

<name><name>clc</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning: color_range cannot be set "</literal>

<literal type="string">"on RGB streams encoded in BT.709 sRGB.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>clc</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>color_range</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_position</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>clc</name><operator>-&gt;</operator><name>mono_chrome</name></name> <operator>||</operator> <operator>!</operator><name><name>clc</name><operator>-&gt;</operator><name>subsampling_x</name></name> <operator>||</operator> <operator>!</operator><name><name>clc</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Warning: chroma_sample_position "</literal>

<literal type="string">"can only be set for 4:2:0 streams.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>clc</name><operator>-&gt;</operator><name>chroma_sample_position</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chroma_sample_position</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tick_rate</name><operator>.</operator><name>den</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>UINT32_MAX</name> <operator>&gt;</operator> <name>INT_MAX</name></expr> ?</condition><then> <expr><name>UINT32_MAX</name></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tim</name><operator>-&gt;</operator><name>time_scale</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tim</name><operator>-&gt;</operator><name>num_units_in_display_tick</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seq</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_ticks_per_picture</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tim</name><operator>-&gt;</operator><name>equal_picture_interval</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tim</name><operator>-&gt;</operator><name>num_ticks_per_picture_minus_1</name></name> <operator>=</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>num_ticks_per_picture</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av1_metadata_filter</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawOBU</name></type> <name>td</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_bsf_get_packet_ref</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No OBU in packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV1_OBU_SEQUENCE_HEADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obu</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av1_metadata_update_sequence_header</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV1_OBU_TEMPORAL_DELIMITER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>td</name></name> <operator>==</operator> <name>REMOVE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_delete_unit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>td</name></name> <operator>==</operator> <name>INSERT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>td</name> <operator>=</operator> <operator>(</operator><name>AV1RawOBU</name><operator>)</operator> <block>{

<expr><operator>.</operator><name><name>header</name><operator>.</operator><name>obu_type</name></name> <operator>=</operator> <name>AV1_OBU_TEMPORAL_DELIMITER</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV1_OBU_TEMPORAL_DELIMITER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>td</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to insert Temporal Delimiter.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>delete_padding</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV1_OBU_PADDING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cbs_delete_unit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_packet</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av1_metadata_init</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawOBU</name> <modifier>*</modifier></type><name>obu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_AV1</name></expr></argument>, <argument><expr><name>bsf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_read_extradata</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frag</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>AV1_OBU_SEQUENCE_HEADER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>obu</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>content</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av1_metadata_update_sequence_header</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_extradata</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name><name>bsf</name><operator>-&gt;</operator><name>par_out</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>bsf</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>av1_metadata_close</name><parameter_list>(<parameter><decl><type><name>AVBSFContext</name> <modifier>*</modifier></type><name>bsf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1MetadataContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>bsf</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>access_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(AV1MetadataContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM|AV_OPT_FLAG_BSF_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>av1_metadata_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"td"</literal></expr>, <expr><literal type="string">"Temporal Delimiter OBU"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PASS</name></expr> }</block></expr>, <expr><name>PASS</name></expr>, <expr><name>REMOVE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"td"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pass"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>PASS</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"td"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"insert"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INSERT</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"td"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"remove"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>REMOVE</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"td"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color_primaries"</literal></expr>, <expr><literal type="string">"Set color primaries (section 6.4.2)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_primaries</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"transfer_characteristics"</literal></expr>, <expr><literal type="string">"Set transfer characteristics (section 6.4.2)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"matrix_coefficients"</literal></expr>, <expr><literal type="string">"Set matrix coefficients (section 6.4.2)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">255</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"color_range"</literal></expr>, <expr><literal type="string">"Set color range flag (section 6.4.2)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color_range</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"cr"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tv"</literal></expr>, <expr><literal type="string">"TV (limited) range"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"cr"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pc"</literal></expr>, <expr><literal type="string">"PC (full) range"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"cr"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chroma_sample_position"</literal></expr>, <expr><literal type="string">"Set chroma sample position (section 6.4.2)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>chroma_sample_position</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"csp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"unknown"</literal></expr>, <expr><literal type="string">"Unknown chroma sample position"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV1_CSP_UNKNOWN</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"csp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vertical"</literal></expr>, <expr><literal type="string">"Left chroma sample position"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV1_CSP_VERTICAL</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"csp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"colocated"</literal></expr>, <expr><literal type="string">"Top-left chroma sample position"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV1_CSP_COLOCATED</name></expr> }</block></expr>, <expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAGS</name></expr>, <expr><operator>.</operator><name>unit</name> <operator>=</operator> <literal type="string">"csp"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tick_rate"</literal></expr>, <expr><literal type="string">"Set display tick rate (num_units_in_display_tick / time_scale)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>tick_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">0.0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"num_ticks_per_picture"</literal></expr>, <expr><literal type="string">"Set display ticks per picture for CFR streams"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>num_ticks_per_picture</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"delete_padding"</literal></expr>, <expr><literal type="string">"Delete all Padding OBUs"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>delete_padding</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>av1_metadata_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"av1_metadata_bsf"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>av1_metadata_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVCodecID</name></name></type> <name><name>av1_metadata_codec_ids</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_CODEC_ID_AV1</name></expr>, <expr><name>AV_CODEC_ID_NONE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVBitStreamFilter</name></type> <name>ff_av1_metadata_bsf</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"av1_metadata"</literal></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AV1MetadataContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>av1_metadata_class</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>av1_metadata_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>av1_metadata_close</name></expr>,

<expr><operator>.</operator><name>filter</name> <operator>=</operator> <operator>&amp;</operator><name>av1_metadata_filter</name></expr>,

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <name>av1_metadata_codec_ids</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
