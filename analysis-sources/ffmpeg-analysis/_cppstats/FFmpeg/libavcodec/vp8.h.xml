<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vp8.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264pred.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp8dsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP8_MAX_QUANT</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>

<enum>enum <name>dct_token</name> <block>{

<decl><name>DCT_0</name></decl>,

<decl><name>DCT_1</name></decl>,

<decl><name>DCT_2</name></decl>,

<decl><name>DCT_3</name></decl>,

<decl><name>DCT_4</name></decl>,

<decl><name>DCT_CAT1</name></decl>,

<decl><name>DCT_CAT2</name></decl>,

<decl><name>DCT_CAT3</name></decl>,

<decl><name>DCT_CAT4</name></decl>,

<decl><name>DCT_CAT5</name></decl>,

<decl><name>DCT_CAT6</name></decl>,

<decl><name>DCT_EOB</name></decl>,

<decl><name>NUM_DCT_TOKENS</name></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_I4x4</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<enum>enum <name>inter_mvmode</name> <block>{

<decl><name>VP8_MVMODE_ZERO</name> <init>= <expr><name>MODE_I4x4</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>VP8_MVMODE_MV</name></decl>,

<decl><name>VP8_MVMODE_SPLIT</name></decl>

}</block>;</enum>

<enum>enum <name>inter_splitmvmode</name> <block>{

<decl><name>VP8_SPLITMVMODE_16x8</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>VP8_SPLITMVMODE_8x16</name></decl>, 

<decl><name>VP8_SPLITMVMODE_8x8</name></decl>, 

<decl><name>VP8_SPLITMVMODE_4x4</name></decl>, 

<decl><name>VP8_SPLITMVMODE_NONE</name></decl>, 

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>VP8FilterStrength</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>filter_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>inner_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>inner_filter</name></decl>;</decl_stmt>

}</block></struct></type> <name>VP8FilterStrength</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP8Macroblock</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ref_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>partitioning</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>chroma_pred_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>intra4x4_pred_mode_mb</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>intra4x4_pred_mode_top</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP56mv</name></type> <name>mv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56mv</name></type> <name><name>bmv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>VP8Macroblock</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP8intmv</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

}</block></struct></type> <name>VP8intmv</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP8mvbounds</name> <block>{

<decl_stmt><decl><type><name>VP8intmv</name></type> <name>mv_min</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8intmv</name></type> <name>mv_max</name></decl>;</decl_stmt>

}</block></struct></type> <name>VP8mvbounds</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP8ThreadData</name> <block>{

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block_dc</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>non_zero_count_cache</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>left_nnz</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">9</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>thread_nr</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>atomic_int</name></type> <name>thread_mb_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>atomic_int</name></type> <name>wait_mb_pos</name></decl>;</decl_stmt> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDGE_EMU_LINESIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>edge_emu_buffer</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">21</literal> <operator>*</operator> <name>EDGE_EMU_LINESIZE</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP8FilterStrength</name> <modifier>*</modifier></type><name>filter_strength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8mvbounds</name></type> <name>mv_bounds</name></decl>;</decl_stmt>

}</block></struct></type> <name>VP8ThreadData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VP8Frame</name> <block>{

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>tf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>seg_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hwaccel_priv_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwaccel_picture_private</name></decl>;</decl_stmt>

}</block></struct></type> <name>VP8Frame</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_THREADS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>VP8Context</name> <block>{

<decl_stmt><decl><type><name>VP8ThreadData</name> <modifier>*</modifier></type><name>thread_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>actually_webp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name><name>framep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name><name>next_framep</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>curframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8Frame</name> <modifier>*</modifier></type><name>prev_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>mb_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>mb_height</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>uvlinesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>keyframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>deblock_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mbskip_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8mvbounds</name></type> <name>mv_bounds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>sign_bias</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>ref_count</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>absolute_vals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>update_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>update_feature_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>base_quant</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>filter_level</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block> <decl><name>segmentation</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>simple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sharpness</name></decl>;</decl_stmt>

}</block> <decl><name>filter</name></decl>;</struct>

<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>macroblocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>intra4x4_pred_mode_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>intra4x4_pred_mode_left</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>luma_qmul</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>luma_dc_qmul</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>chroma_qmul</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>qmat</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>yac_qi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ydc_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y2dc_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y2ac_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvdc_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uvac_delta</name></decl>;</decl_stmt>

}</block> <decl><name>quant</name></decl>;</struct>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>enabled</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>mode</name><index>[<expr><name>VP8_MVMODE_SPLIT</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>ref</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>lf_delta</name></decl>;</struct>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>top_border</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>top_nnz</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">9</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP56RangeCoder</name></type> <name>c</name></decl>;</decl_stmt> 

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_count</name></decl>;</decl_stmt>

}</block> <decl><name>coder_state_at_header_end</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>header_partition_size</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>segmentid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mbskip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>intra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>golden</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pred16x16</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pred8x8c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>token</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>NUM_DCT_TOKENS</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mvc</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">19</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>scan</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>prob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>VP8Macroblock</name> <modifier>*</modifier></type><name>macroblocks_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>invisible</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>update_last</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>update_golden</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>update_altref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>update_probabilities</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_coeff_partitions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56RangeCoder</name></type> <name><name>coeff_partition</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>coeff_partition_size</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VideoDSPContext</name></type> <name>vdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8DSPContext</name></type> <name>vp8dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264PredContext</name></type> <name>hpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vp8_mc_func</name></type> <name><name>put_pixels_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP8Frame</name></type> <name><name>frames</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>colorspace</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>fullrange</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>num_jobs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_layout</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode_mb_row_no_filter</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter_mb_row</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>vp7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fade_present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>inter_dc_pred</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>feature_enabled</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>feature_present_prob</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>feature_index_prob</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>feature_value</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>VP8Context</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_vp8_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vp8_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_vp8_decode_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
