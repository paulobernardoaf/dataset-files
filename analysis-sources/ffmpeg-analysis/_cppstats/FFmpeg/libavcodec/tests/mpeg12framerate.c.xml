<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\tests\mpeg12framerate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpeg12.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/mpeg12data.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MATCH</name><parameter_list>(<parameter><type><name>frame_rate</name></type></parameter>, <parameter><type><name>code</name></type></parameter>, <parameter><type><name>ext_n</name></type></parameter>, <parameter><type><name>ext_d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { AVRational fr = frame_rate; int c, n, d; ff_mpeg12_find_best_frame_rate(fr, &amp;c, &amp;n, &amp;d, 0); if (c != code || n != ext_n || d != ext_d) { av_log(NULL, AV_LOG_ERROR, "Failed to match %d/%d: " "code = %d, ext_n = %d, ext_d = %d.\n", fr.num, fr.den, c, n, d); return 1; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_EXACT</name><parameter_list>(<parameter><type><name>frn</name></type></parameter>, <parameter><type><name>frd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { AVRational fr = (AVRational) { frn, frd }; int c, n, d; ff_mpeg12_find_best_frame_rate(fr, &amp;c, &amp;n, &amp;d, 0); if (av_cmp_q(fr, av_mul_q(ff_mpeg12_frame_rate_tab[c], (AVRational) { n + 1, d + 1 })) != 0) { av_log(NULL, AV_LOG_ERROR, "Failed to find exact %d/%d: " "code = %d, ext_n = %d, ext_d = %d.\n", fr.num, fr.den, c, n, d); return 1; } } while (0)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TEST_MATCH</name><argument_list>(<argument><expr><name><name>ff_mpeg12_frame_rate_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<macro><name>TEST_MATCH</name><argument_list>(<argument>av_sub_q(ff_mpeg12_frame_rate_tab[i],

(AVRational) { <literal type="number">1</literal>, <literal type="number">1000</literal> })</argument>, <argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>TEST_MATCH</name><argument_list>(<argument>av_add_q(ff_mpeg12_frame_rate_tab[i],

(AVRational) { <literal type="number">1</literal>, <literal type="number">1000</literal> })</argument>, <argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>( <argument><expr><literal type="number">15000</literal></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>( <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>( <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>(<argument><expr><literal type="number">120000</literal></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>( <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_EXACT</name><argument_list>( <argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">240</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">10</literal></expr></incr>)</control><block type="pseudo"><block_content>

<macro><name>TEST_MATCH</name><argument_list>(<argument>((AVRational) { i, <literal type="number">1</literal> })</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">74</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<macro><name>TEST_MATCH</name><argument_list>(<argument>((AVRational) { i, <literal type="number">100</literal> })</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">31</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
