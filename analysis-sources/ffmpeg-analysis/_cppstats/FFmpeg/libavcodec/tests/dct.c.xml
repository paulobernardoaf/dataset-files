<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\tests\dct.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cpu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/idctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/simple_idct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/xvididct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aandcttab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/faandct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/faanidct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/dctref.h"</cpp:file></cpp:include>

<struct>struct <name>algo</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name><name>enum</name> <name>idct_permutation_type</name></name></type> <name>perm_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpu_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nonspec</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>algo</name></name></type> <name><name>fdct_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"REF-DBL"</literal></expr>, <expr><name>ff_ref_fdct</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"IJG-AAN-INT"</literal></expr>, <expr><name>ff_fdct_ifast</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"IJG-LLM-INT"</literal></expr>, <expr><name>ff_jpeg_fdct_islow_8</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_FAANDCT</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"FAAN"</literal></expr>, <expr><name>ff_faandct</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_prores_idct_wrap</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list><block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>qmat</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>qmat</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_prores_idct_10</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>qmat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <literal type="number">512</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>algo</name></name></type> <name><name>idct_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"REF-DBL"</literal></expr>, <expr><name>ff_ref_idct</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"INT"</literal></expr>, <expr><name>ff_j_rev_dct</name></expr>, <expr><name>FF_IDCT_PERM_LIBMPEG2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIMPLE-C"</literal></expr>, <expr><name>ff_simple_idct_int16_8bit</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIMPLE-C10"</literal></expr>, <expr><name>ff_simple_idct_int16_10bit</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SIMPLE-C12"</literal></expr>, <expr><name>ff_simple_idct_int16_12bit</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PR-C"</literal></expr>, <expr><name>ff_prores_idct_wrap</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_FAANIDCT</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"FAANI"</literal></expr>, <expr><name>ff_faanidct</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG4_DECODER</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"XVID"</literal></expr>, <expr><name>ff_xvid_idct</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_AARCH64</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aarch64/dct.c"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_ARM</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arm/dct.c"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_PPC</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ppc/dct.c"</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"x86/dct.c"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>algo</name></name></type> <name><name>fdct_tab_arch</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>algo</name></name></type> <name><name>idct_tab_arch</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AANSCALE_BITS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_ITS</name></cpp:macro> <cpp:value>20000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_ITS_SPEED</name></cpp:macro> <cpp:value>50000</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>static</specifier> <name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <name>int16_t</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_block</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_idct</name></decl></parameter>, <parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vals</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>test</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>av_lfg_get</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>vals</name><operator>)</operator><operator>)</operator> <operator>-</operator><name>vals</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>is_idct</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_ref_fdct</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>av_lfg_get</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>vals</name><operator>)</operator> <operator>-</operator><name>vals</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>block</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><name>vals</name><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><name>vals</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>permute</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>src</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>idct_permutation_type</name></name></type> <name>perm_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>permute_x86</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>perm_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>perm_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_IDCT_PERM_LIBMPEG2</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x38</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>FF_IDCT_PERM_PARTTRANS</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x38</literal><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dct_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>algo</name></name> <modifier>*</modifier></type><name>dct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_idct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ref</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>is_idct</name></expr> ?</condition><then> <expr><name>ff_ref_idct</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>ff_ref_fdct</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>it</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err_inf</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>err2</name></decl>, <decl><type ref="prev"/><name>ti</name></decl>, <decl><type ref="prev"/><name>ti1</name></decl>, <decl><type ref="prev"/><name>it1</name></decl>, <decl><type ref="prev"/><name>err_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>sysErr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>sysErrMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>err2_matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>err2_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blockSumErrMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>blockSumErr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>vals</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bits</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>omse</name></decl>, <decl><type ref="prev"/><name>ome</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>spec_err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err_inf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>err2_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sysErr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>it</name> <operator>&lt;</operator> <name>NB_ITS</name></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>init_block</name><argument_list>(<argument><expr><name>block1</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>is_idct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>permute</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>, <argument><expr><name><name>dct</name><operator>-&gt;</operator><name>perm_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dct</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"IJG-AAN-INT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>AANSCALE_BITS</name> <operator>+</operator> <literal type="number">11</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>ff_aanscales</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>scale</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>AANSCALE_BITS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ref</name><argument_list>(<argument><expr><name>block1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"PR-SSE2"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>block1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>-</operator><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">1019</literal><operator>-</operator><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>blockSumErr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>block1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err_sum</name> <operator>+=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>err_inf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err_inf</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>err2_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>v</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err2</name> <operator>+=</operator> <name>v</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sysErr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>block1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>blockSumErr</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>maxout</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxout</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>blockSumErrMax</name> <operator>&lt;</operator> <name>blockSumErr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>blockSumErrMax</name> <operator>=</operator> <name>blockSumErr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sysErrMax</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>sysErrMax</name></expr></argument>, <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>sysErr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err2_max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>err2_max</name></expr></argument> , <argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>err2_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%7d "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>sysErr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>omse</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>err2</name> <operator>/</operator> <name>NB_ITS</name> <operator>/</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ome</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>err_sum</name> <operator>/</operator> <name>NB_ITS</name> <operator>/</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>spec_err</name> <operator>=</operator> <name>is_idct</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>err_inf</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>omse</name> <operator>&gt;</operator> <literal type="number">0.02</literal> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>ome</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0015</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>test</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>spec_err</name> <operator>=</operator> <name>is_idct</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>err2_max</name> <operator>/</operator> <name>NB_ITS</name> <operator>&gt;</operator> <literal type="number">0.06</literal> <operator>||</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>sysErrMax</name> <operator>/</operator> <name>NB_ITS</name> <operator>&gt;</operator> <literal type="number">0.015</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s: max_err=%d omse=%0.8f ome=%0.8f syserr=%0.8f maxout=%d blockSumErr=%d\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>is_idct</name></expr> ?</condition><then> <expr><literal type="string">"IDCT"</literal></expr> </then><else>: <expr><literal type="string">"DCT"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>dct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>err_inf</name></expr></argument>,

<argument><expr><name>omse</name></expr></argument>, <argument><expr><name>ome</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>sysErrMax</name> <operator>/</operator> <name>NB_ITS</name></expr></argument>,

<argument><expr><name>maxout</name></expr></argument>, <argument><expr><name>blockSumErrMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spec_err</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dct</name><operator>-&gt;</operator><name>nonspec</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>speed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_block</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>is_idct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>permute</name><argument_list>(<argument><expr><name>block1</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>dct</name><operator>-&gt;</operator><name>perm_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ti</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>it1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<for>for <control>(<init><expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>it</name> <operator>&lt;</operator> <name>NB_ITS_SPEED</name></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dct</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>it1</name> <operator>+=</operator> <name>NB_ITS_SPEED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ti1</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ti</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ti1</name> <operator>&lt;</operator> <literal type="number">1000000</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s: %0.1f kdct/s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>is_idct</name></expr> ?</condition><then> <expr><literal type="string">"IDCT"</literal></expr> </then><else>: <expr><literal type="string">"DCT"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>dct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>it1</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>ti1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>img_dest</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><specifier>static</specifier> <name>uint8_t</name></expr></argument>, <argument><expr><name>img_dest1</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct248_ref</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name><name>c8</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name><name>c4</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>block1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>block2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>block3</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">8.0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">8.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>c8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>s</name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>c4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0.5</literal> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>block1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name><name>block</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name><name>block</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c8</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>block1</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>block2</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c4</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>block2</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>k</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>block3</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>j</name><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c4</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>block2</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>block3</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>block3</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dest</name><index>[<expr><name>i</name> <operator>*</operator> <name>linesize</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>rint</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct248_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct248_put</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>line_size</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>speed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>it</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>it1</name></decl>, <decl><type ref="prev"/><name>ti</name></decl>, <decl><type ref="prev"/><name>ti1</name></decl>, <decl><type ref="prev"/><name>err_max</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err_max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>it</name> <operator>&lt;</operator> <name>NB_ITS</name></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">256</literal> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>block1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>block1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>idct248_ref</name><argument_list>(<argument><expr><name>img_dest1</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>block1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>idct248_put</name><argument_list>(<argument><expr><name>img_dest</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>img_dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>img_dest1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>img_dest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>img_dest1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>err_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err_max</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

printf("ref=\n");

for(i=0;i&lt;8;i++) {

int j;

for(j=0;j&lt;8;j++) {

printf(" %3d", img_dest1[i*8+j]);

}

printf("\n");

}

printf("out=\n");

for(i=0;i&lt;8;i++) {

int j;

for(j=0;j&lt;8;j++) {

printf(" %3d", img_dest[i*8+j]);

}

printf("\n");

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s: err_inf=%d\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>?</operator> <literal type="string">"IDCT248"</literal> <operator>:</operator> <literal type="string">"DCT248"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>err_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>speed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ti</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>it1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<for>for <control>(<init><expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>it</name> <operator>&lt;</operator> <name>NB_ITS_SPEED</name></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>block1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>idct248_put</name><argument_list>(<argument><expr><name>img_dest</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>it1</name> <operator>+=</operator> <name>NB_ITS_SPEED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ti1</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ti</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ti1</name> <operator>&lt;</operator> <literal type="number">1000000</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s: %0.1f kdct/s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"IDCT248"</literal></expr> </then><else>: <expr><literal type="string">"DCT248"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>it1</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>ti1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dct-test [-i] [&lt;test-number&gt;] [&lt;bits&gt;]\n"</literal>

<literal type="string">"test-number 0 -&gt; test with random matrixes\n"</literal>

<literal type="string">" 1 -&gt; test with random sparse matrixes\n"</literal>

<literal type="string">" 2 -&gt; do 3. test from MPEG-4 std\n"</literal>

<literal type="string">"bits Number of time domain bits to use, 8 is default\n"</literal>

<literal type="string">"-i test IDCT implementations\n"</literal>

<literal type="string">"-4 test IDCT248 implementations\n"</literal>

<literal type="string">"-t speed test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_GETOPT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/getopt.c"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>test_idct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>test_248_dct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>test</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>speed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name><init>=<expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_ref_dct_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"ih4t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>test_idct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'4'</literal></expr>:</case>

<expr_stmt><expr><name>test_248_dct</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>speed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><call><name>help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>test</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>optind</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name><operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ffmpeg DCT/IDCT test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>test_248_dct</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>idct248_error</name><argument_list>(<argument><expr><literal type="string">"SIMPLE-C"</literal></expr></argument>, <argument><expr><name>ff_simple_idct248_put</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cpu_flags</name> <init>= <expr><call><name>av_get_cpu_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>test_idct</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>idct_tab</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>dct_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idct_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>test_idct</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>idct_tab_arch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>~</operator><name>cpu_flags</name> <operator>&amp;</operator> <name><name>idct_tab_arch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cpu_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>dct_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idct_tab_arch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>test_idct</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_FDCTDSP</name></expr></cpp:if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>fdct_tab</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>dct_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdct_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>test_idct</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fdct_tab_arch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>~</operator><name>cpu_flags</name> <operator>&amp;</operator> <name><name>fdct_tab_arch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cpu_flag</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>dct_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fdct_tab_arch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>test_idct</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name>err</name></expr>;</return>

</block_content>}</block></function>

</unit>
