<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\tests\motion.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/me_cmp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>printf</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>img1</name><index>[<expr><name>WIDTH</name> <operator>*</operator> <name>HEIGHT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>img2</name><index>[<expr><name>WIDTH</name> <operator>*</operator> <name>HEIGHT</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_random</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"motion-test [-h]\n"</literal>

<literal type="string">"test motion implementations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_ITS</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_motion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>me_cmp_func</name></type> <name>test_func</name></decl></parameter>, <parameter><decl><type><name>me_cmp_func</name></type> <name>ref_func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>it</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ti</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"testing '%s'\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>it</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>it</name><operator>&lt;</operator><literal type="number">20</literal></expr>;</condition><incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fill_random</name><argument_list>(<argument><expr><name>img1</name></expr></argument>, <argument><expr><name>WIDTH</name> <operator>*</operator> <name>HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_random</name><argument_list>(<argument><expr><name>img2</name></expr></argument>, <argument><expr><name>WIDTH</name> <operator>*</operator> <name>HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>y</name><operator>&lt;</operator><name>HEIGHT</name><operator>-</operator><literal type="number">17</literal></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>WIDTH</name><operator>-</operator><literal type="number">17</literal></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>img2</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>WIDTH</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>test_func</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>img1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WIDTH</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>ref_func</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>img1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WIDTH</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d1</name> <operator>!=</operator> <name>d2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error: mmx=%d c=%d\n"</literal></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ti</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>it</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>it</name><operator>&lt;</operator><name>NB_ITS</name></expr>;</condition><incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>y</name><operator>&lt;</operator><name>HEIGHT</name><operator>-</operator><literal type="number">17</literal></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>WIDTH</name><operator>-</operator><literal type="number">17</literal></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>img2</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>WIDTH</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>+=</operator> <call><name>test_func</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>img1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>WIDTH</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dummy</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>ti</name> <operator>=</operator> <call><name>av_gettime_relative</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ti</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %0.0f kop/s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>NB_ITS</name> <operator>*</operator> <operator>(</operator><name>WIDTH</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>HEIGHT</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>ti</name> <operator>/</operator> <literal type="number">1000.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MECmpContext</name></type> <name>cctx</name></decl>, <decl><type ref="prev"/><name>mmxctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>flags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>AV_CPU_FLAG_MMX</name></expr>, <expr><name>AV_CPU_FLAG_MMXEXT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags_size</name> <init>= <expr><ternary><condition><expr><name>HAVE_MMXEXT</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ffmpeg motion test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_force_cpu_flags</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_me_cmp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>flags_size</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_force_cpu_flags</name><argument_list>(<argument><expr><name><name>flags</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mmxctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mmxctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_me_cmp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mmxctx</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s for %dx%d pixels\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><literal type="string">"mmx2"</literal></expr> </then><else>: <expr><literal type="string">"mmx"</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_motion</name><argument_list>(<argument><expr><literal type="string">"mmx"</literal></expr></argument>, <argument><expr><name><name>mmxctx</name><operator>.</operator><name>pix_abs</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cctx</name><operator>.</operator><name>pix_abs</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_motion</name><argument_list>(<argument><expr><literal type="string">"mmx_x2"</literal></expr></argument>, <argument><expr><name><name>mmxctx</name><operator>.</operator><name>pix_abs</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cctx</name><operator>.</operator><name>pix_abs</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_motion</name><argument_list>(<argument><expr><literal type="string">"mmx_y2"</literal></expr></argument>, <argument><expr><name><name>mmxctx</name><operator>.</operator><name>pix_abs</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cctx</name><operator>.</operator><name>pix_abs</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_motion</name><argument_list>(<argument><expr><literal type="string">"mmx_xy2"</literal></expr></argument>, <argument><expr><name><name>mmxctx</name><operator>.</operator><name>pix_abs</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cctx</name><operator>.</operator><name>pix_abs</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
