<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\tests\x86\dct.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/x86/fdct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/x86/xvididct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/x86/simple_idct.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CONFIG_PRORES_DECODER</name> <operator>||</operator> <name>CONFIG_PRORES_LGPL_DECODER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <name>HAVE_X86ASM</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ff_prores_idct_put_10_sse2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR_WRAP</name><parameter_list>(<parameter><type><name>INSN</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void ff_prores_idct_put_10_##INSN##_wrap(int16_t *dst){ LOCAL_ALIGNED(16, int16_t, qmat, [64]); LOCAL_ALIGNED(16, int16_t, tmp, [64]); int i; for(i=0; i&lt;64; i++){ qmat[i]=4; tmp[i]= dst[i]; } ff_prores_idct_put_10_##INSN (dst, 16, tmp, qmat); for(i=0; i&lt;64; i++) { dst[i] -= 512; } }</cpp:value></cpp:define>

<macro><name>PR_WRAP</name><argument_list>(<argument>sse2</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX_EXTERNAL</name></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>ff_prores_idct_put_10_avx</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>qmat</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>PR_WRAP</name><argument_list>(<argument>avx</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>algo</name></name></type> <name><name>fdct_tab_arch</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_INLINE</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"MMX"</literal></expr>, <expr><name>ff_fdct_mmx</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr>, <expr><name>AV_CPU_FLAG_MMX</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMXEXT_INLINE</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"MMXEXT"</literal></expr>, <expr><name>ff_fdct_mmxext</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr>, <expr><name>AV_CPU_FLAG_MMXEXT</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2_INLINE</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"SSE2"</literal></expr>, <expr><name>ff_fdct_sse2</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr>, <expr><name>AV_CPU_FLAG_SSE2</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>algo</name></name></type> <name><name>idct_tab_arch</name><index>[]</index></name> <init>= <expr><block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX_EXTERNAL</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"SIMPLE-MMX"</literal></expr>, <expr><name>ff_simple_idct_mmx</name></expr>, <expr><name>FF_IDCT_PERM_SIMPLE</name></expr>, <expr><name>AV_CPU_FLAG_MMX</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MPEG4_DECODER</name> <operator>&amp;&amp;</operator> <name>HAVE_X86ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"XVID-MMX"</literal></expr>, <expr><name>ff_xvid_idct_mmx</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr>, <expr><name>AV_CPU_FLAG_MMX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"XVID-MMXEXT"</literal></expr>, <expr><name>ff_xvid_idct_mmxext</name></expr>, <expr><name>FF_IDCT_PERM_NONE</name></expr>, <expr><name>AV_CPU_FLAG_MMXEXT</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2_EXTERNAL</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"XVID-SSE2"</literal></expr>, <expr><name>ff_xvid_idct_sse2</name></expr>, <expr><name>FF_IDCT_PERM_SSE2</name></expr>, <expr><name>AV_CPU_FLAG_SSE2</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>CONFIG_PRORES_DECODER</name> <operator>||</operator> <name>CONFIG_PRORES_LGPL_DECODER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <name>HAVE_X86ASM</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"PR-SSE2"</literal></expr>, <expr><name>ff_prores_idct_put_10_sse2_wrap</name></expr>, <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>, <expr><name>AV_CPU_FLAG_SSE2</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX_EXTERNAL</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"PR-AVX"</literal></expr>, <expr><name>ff_prores_idct_put_10_avx_wrap</name></expr>, <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>, <expr><name>AV_CPU_FLAG_AVX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_X86ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2_EXTERNAL</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"SIMPLE8-SSE2"</literal></expr>, <expr><name>ff_simple_idct8_sse2</name></expr>, <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>, <expr><name>AV_CPU_FLAG_SSE2</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"SIMPLE10-SSE2"</literal></expr>, <expr><name>ff_simple_idct10_sse2</name></expr>, <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>, <expr><name>AV_CPU_FLAG_SSE2</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"SIMPLE12-SSE2"</literal></expr>, <expr><name>ff_simple_idct12_sse2</name></expr>, <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>, <expr><name>AV_CPU_FLAG_SSE2</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_AVX_EXTERNAL</name></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"SIMPLE8-AVX"</literal></expr>, <expr><name>ff_simple_idct8_avx</name></expr>, <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>, <expr><name>AV_CPU_FLAG_AVX</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"SIMPLE10-AVX"</literal></expr>, <expr><name>ff_simple_idct10_avx</name></expr>, <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>, <expr><name>AV_CPU_FLAG_AVX</name></expr>}</block></expr>,

<expr><block>{ <expr><literal type="string">"SIMPLE12-AVX"</literal></expr>, <expr><name>ff_simple_idct12_avx</name></expr>, <expr><name>FF_IDCT_PERM_TRANSPOSE</name></expr>, <expr><name>AV_CPU_FLAG_AVX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>idct_simple_mmx_perm</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0D</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x1D</literal></expr>,

<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x2D</literal></expr>,

<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x1F</literal></expr>,

<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,

<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x3D</literal></expr>,

<expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x2F</literal></expr>,

<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x3F</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>idct_sse2_row_perm</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>permute_x86</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name></type> <name><name>src</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>idct_permutation_type</name></name></type> <name>perm_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>perm_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_IDCT_PERM_SIMPLE</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>idct_simple_mmx_perm</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>FF_IDCT_PERM_SSE2</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x38</literal><operator>)</operator> <operator>|</operator> <name><name>idct_sse2_row_perm</name><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
