<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\tests\h265_levels.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/h265_profile_level.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level_idc</name></decl>;</decl_stmt>

}</block> <decl><name><name>test_sizes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">176</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">640</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">720</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">720</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">768</literal></expr>, <expr><literal type="number">93</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">93</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">1080</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">1536</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">7680</literal></expr>, <expr><literal type="number">4320</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">63</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">32768</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">512</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32768</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2800</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">93</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2816</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">4208</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">4224</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8432</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">8448</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">256</literal></expr>, <expr><literal type="number">16880</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">128</literal></expr>, <expr><literal type="number">16896</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpb_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level_idc</name></decl>;</decl_stmt>

}</block> <decl><name><name>test_dpb</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">176</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">176</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">60</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">63</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">93</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>H265RawProfileTierLevel</name></type> <name>profile_main</name> <init>= <expr><block>{

<expr><operator>.</operator><name>general_profile_space</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_profile_idc</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_tier_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name><name>general_profile_compatibility_flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>H265RawProfileTierLevel</name></type> <name>profile_main_12</name> <init>= <expr><block>{

<expr><operator>.</operator><name>general_profile_space</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_profile_idc</name> <operator>=</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>general_tier_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name><name>general_profile_compatibility_flag</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_12bit_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_10bit_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_8bit_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_422chroma_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_420chroma_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_monochrome_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_intra_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_one_picture_only_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_lower_bit_rate_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>H265RawProfileTierLevel</name></type> <name>profile_main_422_12_intra</name> <init>= <expr><block>{

<expr><operator>.</operator><name>general_profile_space</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_profile_idc</name> <operator>=</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>general_tier_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name><name>general_profile_compatibility_flag</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_12bit_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_10bit_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_8bit_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_422chroma_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_420chroma_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_monochrome_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_intra_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_one_picture_only_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>H265RawProfileTierLevel</name></type> <name>profile_ht_444_14</name> <init>= <expr><block>{

<expr><operator>.</operator><name>general_profile_space</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_profile_idc</name> <operator>=</operator> <literal type="number">5</literal></expr>,

<expr><operator>.</operator><name>general_tier_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name><name>general_profile_compatibility_flag</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_14bit_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_max_12bit_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_10bit_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_8bit_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_422chroma_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_420chroma_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_max_monochrome_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_intra_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_one_picture_only_constraint_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_lower_bit_rate_constraint_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>H265RawProfileTierLevel</name></type> <name>profile_main_high_tier</name> <init>= <expr><block>{

<expr><operator>.</operator><name>general_profile_space</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>general_profile_idc</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>general_tier_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name><name>general_profile_compatibility_flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265RawProfileTierLevel</name> <modifier>*</modifier></type><name>ptl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level_idc</name></decl>;</decl_stmt>

}</block> <decl><name><name>test_bitrate</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">4000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main</name></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main_12</name></expr>, <expr><literal type="number">63</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main_422_12_intra</name></expr>, <expr><literal type="number">60</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">50000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main</name></expr>, <expr><literal type="number">156</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">50000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main_12</name></expr>, <expr><literal type="number">153</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">50000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main_422_12_intra</name></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">50000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_ht_444_14</name></expr>, <expr><literal type="number">63</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main</name></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main_high_tier</name></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">40000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main</name></expr>, <expr><literal type="number">153</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">40000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main_high_tier</name></expr>, <expr><literal type="number">123</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">200000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main</name></expr>, <expr><literal type="number">186</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">200000000</literal></expr>, <expr><operator>&amp;</operator><name>profile_main_high_tier</name></expr>, <expr><literal type="number">156</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">2700000000</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>profile_ht_444_14</name></expr>, <expr><literal type="number">183</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">4200000000</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>profile_ht_444_14</name></expr>, <expr><literal type="number">186</literal></expr> }</block></expr>,

<expr><block>{ <expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">5600000000</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>&amp;</operator><name>profile_ht_444_14</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>slice_segments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_cols</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level_idc</name></decl>;</decl_stmt>

}</block> <decl><name><name>test_fragments</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">30</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">93</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">201</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">600</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">601</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">90</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">93</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">150</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">180</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265ProfileDescriptor</name> <modifier>*</modifier></type><name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H265LevelDescriptor</name> <modifier>*</modifier></type><name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (expected ? (!level || level-&gt;level_idc != expected) : !!level) { av_log(NULL, AV_LOG_ERROR, "Incorrect level for " format ": expected %d, got %d.\n", __VA_ARGS__, expected, level ? level-&gt;level_idc : -1); return 1; } } while (0)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>test_sizes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>ff_h265_guess_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name>profile_main</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>,

<argument><expr><name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level_idc</name></expr></argument>, <argument><expr><literal type="string">"size %dx%d"</literal></expr></argument>,

<argument><expr><name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>, <argument><expr><name><name>test_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>test_dpb</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>ff_h265_guess_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name>profile_main</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>test_dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>,

<argument><expr><name><name>test_dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>test_dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>test_dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level_idc</name></expr></argument>, <argument><expr><literal type="string">"size %dx%d dpb %d"</literal></expr></argument>,

<argument><expr><name><name>test_dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr></argument>, <argument><expr><name><name>test_dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr></argument>,

<argument><expr><name><name>test_dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dpb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>test_bitrate</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <call><name>ff_h265_get_profile</name><argument_list>(<argument><expr><name><name>test_bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>ff_h265_guess_level</name><argument_list>(<argument><expr><name><name>test_bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptl</name></expr></argument>,

<argument><expr><name><name>test_bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>test_bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level_idc</name></expr></argument>, <argument><expr><literal type="string">"bitrate %"</literal><name>PRId64</name><literal type="string">" profile %s"</literal></expr></argument>,

<argument><expr><name><name>test_bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate</name></expr></argument>, <argument><expr><name><name>profile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>test_fragments</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>ff_h265_guess_level</name><argument_list>(<argument><expr><operator>&amp;</operator><name>profile_main</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>test_fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>slice_segments</name></expr></argument>,

<argument><expr><name><name>test_fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tile_rows</name></expr></argument>,

<argument><expr><name><name>test_fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tile_cols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name><name>test_fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level_idc</name></expr></argument>, <argument><expr><literal type="string">"%d slices %dx%d tiles"</literal></expr></argument>,

<argument><expr><name><name>test_fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>slice_segments</name></expr></argument>,

<argument><expr><name><name>test_fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tile_cols</name></expr></argument>, <argument><expr><name><name>test_fragments</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tile_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
