<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\tests\iirfilter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/iirfilter.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILT_ORDER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>FFIIRFilterCoeffs</name></name> <modifier>*</modifier></type><name>fcoeffs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>FFIIRFilterState</name></name> <modifier>*</modifier></type><name>fstate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cutoff_coeff</name> <init>= <expr><literal type="number">0.4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>x</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fcoeffs</name> <operator>=</operator> <call><name>ff_iir_filter_init_coeffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FF_FILTER_TYPE_BUTTERWORTH</name></expr></argument>,

<argument><expr><name>FF_FILTER_MODE_LOWPASS</name></expr></argument>, <argument><expr><name>FILT_ORDER</name></expr></argument>,

<argument><expr><name>cutoff_coeff</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fstate</name> <operator>=</operator> <call><name>ff_iir_filter_init_state</name><argument_list>(<argument><expr><name>FILT_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.75</literal> <operator>*</operator> <name>INT16_MAX</name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <name>M_PI</name> <operator>*</operator> <name>i</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_iir_filter</name><argument_list>(<argument><expr><name>fcoeffs</name></expr></argument>, <argument><expr><name>fstate</name></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%6d %6d\n"</literal></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ff_iir_filter_free_coeffsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fcoeffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_iir_filter_free_statep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
